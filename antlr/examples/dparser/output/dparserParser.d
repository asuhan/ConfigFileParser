// $ANTLR 3.4 D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g 2012-11-30 21:16:11

//package dev.progician.dparser;



module dparserParser;

//import antlr.runtime;

import antlr.runtime.Parser;
import antlr.runtime.TokenStream;
import antlr.runtime.BitSet;
import antlr.runtime.BaseRecognizer;
import antlr.runtime.RecognitionException;
import antlr.runtime.MismatchedSetException;
import antlr.runtime.tree.RewriteRuleTokenStream;
import antlr.runtime.tree.RewriteRuleSubtreeStream;
import antlr.runtime.DFA;
import antlr.runtime.CommonToken;
import antlr.runtime.EarlyExitException;
import antlr.runtime.FailedPredicateException;
import antlr.runtime.tree.RewriteEarlyExitException;

import std.string;
import std.stdio;


import antlr.runtime.CharStream;
import antlr.runtime.Lexer;
import antlr.runtime.RecognizerSharedState;
import antlr.runtime.NoViableAltException;
import antlr.runtime.IntStream;
debug(trace_consume) {
//import std.stdio;

}
//import java.util.Map;
//import java.util.HashMap;

//import org.antlr.runtime.tree.*;
//for AST
private import antlr.runtime.tree.TreeAdaptor;
private import antlr.runtime.ParserRuleReturnScope;
private import antlr.runtime.tree.CommonTreeAdaptor;
private import antlr.runtime.tree.TreeAdaptor;
private import antlr.runtime.Token;

public class dparserParser : Parser {
    public static const string[] tokenNames = [
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARG_LIST", "AST_NEONODE_ARRAYVIEW", "AUTO_VAR", "BASE_CLASS", "BASE_CLASSES", "Binary", "BooleanLiteral", "CAST_QUALIFIER", "CLASS_DECLARATION", "CONDITIONAL_COMPILATION_CONDITION", "CONDITIONAL_DECL", "CharacterLiteral", "DECLARATION_BLOCK", "DECL_IMPORT", "DEF_CTOR", "DEF_FUNC", "DEF_SYMBOL", "DEF_VAR", "DV_SPEC", "Decimal", "DecimalDigit", "DecimalDigits", "DecimalExponent", "DqString", "ENUM_DECLARATION", "ENUM_MEMBER", "EXP_ASSERT", "EXP_CALL", "EXP_CAST", "EXP_CONDITIONAL", "EXP_DELETE", "EXP_DOLLAR", "EXP_INDEX", "EXP_IS", "EXP_LITERAL_BOOL", "EXP_LITERAL_CHAR", "EXP_LITERAL_FILE", "EXP_LITERAL_FUNCTION", "EXP_LITERAL_IMPORTEDSTRING", "EXP_LITERAL_INTEGER", "EXP_LITERAL_LINE", "EXP_LITERAL_NULL", "EXP_LITERAL_REAL", "EXP_LITERAL_STRING", "EXP_MIXIN", "EXP_NEW", "EXP_REFERENCE", "EXP_SLICE", "EXP_SUPER", "EXP_THIS", "EXP_TRAITS", "EXP_TYPEID", "EXP_TYPEOF", "EscapeChar", "FUNCTION_BODY", "FUNC_PARAM", "Float", "FloatLiteral", "FloatTypeSuffix", "HexDigit", "HexEscape", "Hexadecimal", "IMPORT_ALIAS", "IMPORT_BINDING", "IMPORT_CONTENT", "IMPORT_FRAGMENT", "INFIX", "INITIALIZER_EXP", "INITIALIZER_VOID", "INTERFACE_DECLARATION", "INVARIANT", "IdStartChar", "Identifier", "ImaginarySuffix", "IntSuffix", "Integer", "IntegerLiteral", "LINE_COMMENT", "MIXIN_DECLARATION", "MODULE", "MODULE_DECLARATION", "MODULE_SYMBOL", "MULTILINE_COMMENT", "NESTING_COMMENT", "NULL", "Number", "Octal", "OctalDigit", "OctalEscape", "PARAMETER_LIST", "POSTFIX", "PREFIX", "ParameterAttribute", "PropertyIdentifier", "REF_IDENTIFIER", "REF_MODULE", "REF_QUALIFIED", "REF_TYPE_SLICE", "Range", "RawString", "RawStringAlt", "STATIC_ASSERT", "STMT_ASM", "STMT_BLOCK", "STMT_BREAK", "STMT_CASE", "STMT_CATCH", "STMT_CONDITIONAL", "STMT_CONTINUE", "STMT_DECLARATION", "STMT_DEFAULT", "STMT_DO", "STMT_EXPRESSION", "STMT_FINALLY", "STMT_FINALSWITCH", "STMT_FOR", "STMT_FOREACH", "STMT_FOREACH_RANGE", "STMT_GOTO", "STMT_IF", "STMT_LABELED", "STMT_MIXIN", "STMT_PRAGMA", "STMT_RETURN", "STMT_SCOPE", "STMT_SWITCH", "STMT_SYNCHRONIZED", "STMT_THROW", "STMT_TRY", "STMT_WHILE", "STMT_WITH", "STORAGE_CLASS", "STRUCT_DECLARATION", "SYMBOL", "StringLiteral", "StringPostfix", "TEMPLATE_DECLARATION", "TEMPLATE_INSTANCE", "TEMPLATE_MIXIN", "TEMPLATE_MIXIN_DECLARATION", "TEMPLATE_PARAM_ALIAS", "TEMPLATE_PARAM_LIST", "TEMPLATE_PARAM_THIS", "TEMPLATE_PARAM_TUPLE", "TEMPLATE_PARAM_TYPE", "TEMPLATE_PARAM_VALUE", "TYPE_DYN_ARRAY", "TYPE_MAP_ARRAY", "TYPE_POINTER", "TYPE_STATIC_ARRAY", "UNION_DECLARATION", "UNITTEST_DECLARATION", "WHITESPACE", "'!'", "'!<'", "'!<='", "'!<>='", "'!='", "'!>'", "'!>='", "'!is'", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'<>'", "'<>='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'>>>'", "'>>>='", "'?'", "'@'", "'['", "']'", "'^'", "'^='", "'^^'", "'^^='", "'__gshared'", "'abstract'", "'alias'", "'allMembers'", "'auto'", "'bool'", "'byte'", "'cdouble'", "'cfloat'", "'char'", "'classInstanceSize'", "'compiles'", "'const'", "'creal'", "'dchar'", "'debug'", "'delegate'", "'deprecated'", "'derivedMembers'", "'double'", "'else'", "'exit'", "'extern'", "'failure'", "'final'", "'float'", "'foreach_reverse'", "'function'", "'getMember'", "'getOverloads'", "'getVirtualFunctions'", "'hasMember'", "'identifier'", "'idouble'", "'ifloat'", "'immutable'", "'import'", "'inout'", "'int'", "'ireal'", "'isAbstractClass'", "'isAbstractFunction'", "'isArithmetic'", "'isAssociativeArray'", "'isFinalClass'", "'isFinalFunction'", "'isFloating'", "'isIntegral'", "'isLazy'", "'isOut'", "'isRef'", "'isSame'", "'isScalar'", "'isStaticArray'", "'isStaticFunction'", "'isUnsigned'", "'isVirtualFunction'", "'long'", "'nothrow'", "'override'", "'parent'", "'pure'", "'real'", "'shared'", "'short'", "'static'", "'success'", "'ubyte'", "'uint'", "'ulong'", "'ushort'", "'version'", "'void'", "'wchar'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'", "'~='", "'~this'"
    ];

    public static const int EOF=-1;
    public static const int T__157=157;
    public static const int T__158=158;
    public static const int T__159=159;
    public static const int T__160=160;
    public static const int T__161=161;
    public static const int T__162=162;
    public static const int T__163=163;
    public static const int T__164=164;
    public static const int T__165=165;
    public static const int T__166=166;
    public static const int T__167=167;
    public static const int T__168=168;
    public static const int T__169=169;
    public static const int T__170=170;
    public static const int T__171=171;
    public static const int T__172=172;
    public static const int T__173=173;
    public static const int T__174=174;
    public static const int T__175=175;
    public static const int T__176=176;
    public static const int T__177=177;
    public static const int T__178=178;
    public static const int T__179=179;
    public static const int T__180=180;
    public static const int T__181=181;
    public static const int T__182=182;
    public static const int T__183=183;
    public static const int T__184=184;
    public static const int T__185=185;
    public static const int T__186=186;
    public static const int T__187=187;
    public static const int T__188=188;
    public static const int T__189=189;
    public static const int T__190=190;
    public static const int T__191=191;
    public static const int T__192=192;
    public static const int T__193=193;
    public static const int T__194=194;
    public static const int T__195=195;
    public static const int T__196=196;
    public static const int T__197=197;
    public static const int T__198=198;
    public static const int T__199=199;
    public static const int T__200=200;
    public static const int T__201=201;
    public static const int T__202=202;
    public static const int T__203=203;
    public static const int T__204=204;
    public static const int T__205=205;
    public static const int T__206=206;
    public static const int T__207=207;
    public static const int T__208=208;
    public static const int T__209=209;
    public static const int T__210=210;
    public static const int T__211=211;
    public static const int T__212=212;
    public static const int T__213=213;
    public static const int T__214=214;
    public static const int T__215=215;
    public static const int T__216=216;
    public static const int T__217=217;
    public static const int T__218=218;
    public static const int T__219=219;
    public static const int T__220=220;
    public static const int T__221=221;
    public static const int T__222=222;
    public static const int T__223=223;
    public static const int T__224=224;
    public static const int T__225=225;
    public static const int T__226=226;
    public static const int T__227=227;
    public static const int T__228=228;
    public static const int T__229=229;
    public static const int T__230=230;
    public static const int T__231=231;
    public static const int T__232=232;
    public static const int T__233=233;
    public static const int T__234=234;
    public static const int T__235=235;
    public static const int T__236=236;
    public static const int T__237=237;
    public static const int T__238=238;
    public static const int T__239=239;
    public static const int T__240=240;
    public static const int T__241=241;
    public static const int T__242=242;
    public static const int T__243=243;
    public static const int T__244=244;
    public static const int T__245=245;
    public static const int T__246=246;
    public static const int T__247=247;
    public static const int T__248=248;
    public static const int T__249=249;
    public static const int T__250=250;
    public static const int T__251=251;
    public static const int T__252=252;
    public static const int T__253=253;
    public static const int T__254=254;
    public static const int T__255=255;
    public static const int T__256=256;
    public static const int T__257=257;
    public static const int T__258=258;
    public static const int T__259=259;
    public static const int T__260=260;
    public static const int T__261=261;
    public static const int T__262=262;
    public static const int T__263=263;
    public static const int T__264=264;
    public static const int T__265=265;
    public static const int T__266=266;
    public static const int T__267=267;
    public static const int T__268=268;
    public static const int T__269=269;
    public static const int T__270=270;
    public static const int T__271=271;
    public static const int T__272=272;
    public static const int T__273=273;
    public static const int T__274=274;
    public static const int T__275=275;
    public static const int T__276=276;
    public static const int T__277=277;
    public static const int T__278=278;
    public static const int T__279=279;
    public static const int T__280=280;
    public static const int T__281=281;
    public static const int T__282=282;
    public static const int T__283=283;
    public static const int T__284=284;
    public static const int T__285=285;
    public static const int T__286=286;
    public static const int T__287=287;
    public static const int T__288=288;
    public static const int T__289=289;
    public static const int T__290=290;
    public static const int T__291=291;
    public static const int ARG_LIST=4;
    public static const int AST_NEONODE_ARRAYVIEW=5;
    public static const int AUTO_VAR=6;
    public static const int BASE_CLASS=7;
    public static const int BASE_CLASSES=8;
    public static const int Binary=9;
    public static const int BooleanLiteral=10;
    public static const int CAST_QUALIFIER=11;
    public static const int CLASS_DECLARATION=12;
    public static const int CONDITIONAL_COMPILATION_CONDITION=13;
    public static const int CONDITIONAL_DECL=14;
    public static const int CharacterLiteral=15;
    public static const int DECLARATION_BLOCK=16;
    public static const int DECL_IMPORT=17;
    public static const int DEF_CTOR=18;
    public static const int DEF_FUNC=19;
    public static const int DEF_SYMBOL=20;
    public static const int DEF_VAR=21;
    public static const int DV_SPEC=22;
    public static const int Decimal=23;
    public static const int DecimalDigit=24;
    public static const int DecimalDigits=25;
    public static const int DecimalExponent=26;
    public static const int DqString=27;
    public static const int ENUM_DECLARATION=28;
    public static const int ENUM_MEMBER=29;
    public static const int EXP_ASSERT=30;
    public static const int EXP_CALL=31;
    public static const int EXP_CAST=32;
    public static const int EXP_CONDITIONAL=33;
    public static const int EXP_DELETE=34;
    public static const int EXP_DOLLAR=35;
    public static const int EXP_INDEX=36;
    public static const int EXP_IS=37;
    public static const int EXP_LITERAL_BOOL=38;
    public static const int EXP_LITERAL_CHAR=39;
    public static const int EXP_LITERAL_FILE=40;
    public static const int EXP_LITERAL_FUNCTION=41;
    public static const int EXP_LITERAL_IMPORTEDSTRING=42;
    public static const int EXP_LITERAL_INTEGER=43;
    public static const int EXP_LITERAL_LINE=44;
    public static const int EXP_LITERAL_NULL=45;
    public static const int EXP_LITERAL_REAL=46;
    public static const int EXP_LITERAL_STRING=47;
    public static const int EXP_MIXIN=48;
    public static const int EXP_NEW=49;
    public static const int EXP_REFERENCE=50;
    public static const int EXP_SLICE=51;
    public static const int EXP_SUPER=52;
    public static const int EXP_THIS=53;
    public static const int EXP_TRAITS=54;
    public static const int EXP_TYPEID=55;
    public static const int EXP_TYPEOF=56;
    public static const int EscapeChar=57;
    public static const int FUNCTION_BODY=58;
    public static const int FUNC_PARAM=59;
    public static const int Float=60;
    public static const int FloatLiteral=61;
    public static const int FloatTypeSuffix=62;
    public static const int HexDigit=63;
    public static const int HexEscape=64;
    public static const int Hexadecimal=65;
    public static const int IMPORT_ALIAS=66;
    public static const int IMPORT_BINDING=67;
    public static const int IMPORT_CONTENT=68;
    public static const int IMPORT_FRAGMENT=69;
    public static const int INFIX=70;
    public static const int INITIALIZER_EXP=71;
    public static const int INITIALIZER_VOID=72;
    public static const int INTERFACE_DECLARATION=73;
    public static const int INVARIANT=74;
    public static const int IdStartChar=75;
    public static const int Identifier=76;
    public static const int ImaginarySuffix=77;
    public static const int IntSuffix=78;
    public static const int Integer=79;
    public static const int IntegerLiteral=80;
    public static const int LINE_COMMENT=81;
    public static const int MIXIN_DECLARATION=82;
    public static const int MODULE=83;
    public static const int MODULE_DECLARATION=84;
    public static const int MODULE_SYMBOL=85;
    public static const int MULTILINE_COMMENT=86;
    public static const int NESTING_COMMENT=87;
    public static const int NULL=88;
    public static const int Number=89;
    public static const int Octal=90;
    public static const int OctalDigit=91;
    public static const int OctalEscape=92;
    public static const int PARAMETER_LIST=93;
    public static const int POSTFIX=94;
    public static const int PREFIX=95;
    public static const int ParameterAttribute=96;
    public static const int PropertyIdentifier=97;
    public static const int REF_IDENTIFIER=98;
    public static const int REF_MODULE=99;
    public static const int REF_QUALIFIED=100;
    public static const int REF_TYPE_SLICE=101;
    public static const int Range=102;
    public static const int RawString=103;
    public static const int RawStringAlt=104;
    public static const int STATIC_ASSERT=105;
    public static const int STMT_ASM=106;
    public static const int STMT_BLOCK=107;
    public static const int STMT_BREAK=108;
    public static const int STMT_CASE=109;
    public static const int STMT_CATCH=110;
    public static const int STMT_CONDITIONAL=111;
    public static const int STMT_CONTINUE=112;
    public static const int STMT_DECLARATION=113;
    public static const int STMT_DEFAULT=114;
    public static const int STMT_DO=115;
    public static const int STMT_EXPRESSION=116;
    public static const int STMT_FINALLY=117;
    public static const int STMT_FINALSWITCH=118;
    public static const int STMT_FOR=119;
    public static const int STMT_FOREACH=120;
    public static const int STMT_FOREACH_RANGE=121;
    public static const int STMT_GOTO=122;
    public static const int STMT_IF=123;
    public static const int STMT_LABELED=124;
    public static const int STMT_MIXIN=125;
    public static const int STMT_PRAGMA=126;
    public static const int STMT_RETURN=127;
    public static const int STMT_SCOPE=128;
    public static const int STMT_SWITCH=129;
    public static const int STMT_SYNCHRONIZED=130;
    public static const int STMT_THROW=131;
    public static const int STMT_TRY=132;
    public static const int STMT_WHILE=133;
    public static const int STMT_WITH=134;
    public static const int STORAGE_CLASS=135;
    public static const int STRUCT_DECLARATION=136;
    public static const int SYMBOL=137;
    public static const int StringLiteral=138;
    public static const int StringPostfix=139;
    public static const int TEMPLATE_DECLARATION=140;
    public static const int TEMPLATE_INSTANCE=141;
    public static const int TEMPLATE_MIXIN=142;
    public static const int TEMPLATE_MIXIN_DECLARATION=143;
    public static const int TEMPLATE_PARAM_ALIAS=144;
    public static const int TEMPLATE_PARAM_LIST=145;
    public static const int TEMPLATE_PARAM_THIS=146;
    public static const int TEMPLATE_PARAM_TUPLE=147;
    public static const int TEMPLATE_PARAM_TYPE=148;
    public static const int TEMPLATE_PARAM_VALUE=149;
    public static const int TYPE_DYN_ARRAY=150;
    public static const int TYPE_MAP_ARRAY=151;
    public static const int TYPE_POINTER=152;
    public static const int TYPE_STATIC_ARRAY=153;
    public static const int UNION_DECLARATION=154;
    public static const int UNITTEST_DECLARATION=155;
    public static const int WHITESPACE=156;

    // delegates
   /* public Parser[] getDelegates() {
        return new Parser[] {};
    }*/

    // delegators


    public this(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public this(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        createDFAs();
        adaptor = new CommonTreeAdaptor();



         
    }

protected TreeAdaptor adaptor;

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public string[] getTokenNames() { return cast(string[])dparserParser.tokenNames; }
    public string getGrammarFileName() { return "D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g"; }


    public static class prog_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prog"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:248:1: prog : ( moduleDeclaration )? ( declDef )* EOF -> ^( MODULE ( moduleDeclaration )? ( declDef )* ) ;
    public final dparserParser.prog_return prog()  {
        debug(trace_rules) writeln("Entering rule:","prog"," ",1);
        dparserParser.prog_return retval = new dparserParser.prog_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF3=null;
        dparserParser.moduleDeclaration_return moduleDeclaration1 =null;

        dparserParser.declDef_return declDef2 =null;


        Object EOF3_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_declDef=new RewriteRuleSubtreeStream(adaptor,"rule declDef");
        RewriteRuleSubtreeStream stream_moduleDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule moduleDeclaration");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:3: ( ( moduleDeclaration )? ( declDef )* EOF -> ^( MODULE ( moduleDeclaration )? ( declDef )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:5: ( moduleDeclaration )? ( declDef )* EOF
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:5: ( moduleDeclaration )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==MODULE_DECLARATION) ) {
                alt1=1;
            }
            switch (alt1) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:5: moduleDeclaration
                   {
                   pushFollow(FOLLOW_moduleDeclaration_in_prog2103);
                   moduleDeclaration1=moduleDeclaration();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_moduleDeclaration.add(cast(Object)moduleDeclaration1.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:24: ( declDef )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==CLASS_DECLARATION||LA2_0==ENUM_DECLARATION||LA2_0==EXP_MIXIN||LA2_0==EXP_THIS||LA2_0==INTERFACE_DECLARATION||LA2_0==Identifier||LA2_0==STMT_SCOPE||LA2_0==STMT_SYNCHRONIZED||LA2_0==STRUCT_DECLARATION||LA2_0==TEMPLATE_DECLARATION||(LA2_0 >=154  && LA2_0<=155)||LA2_0==181||(LA2_0 >=210  && LA2_0<=211)||(LA2_0 >=214  && LA2_0<=219)||(LA2_0 >=222  && LA2_0<=225)||LA2_0==227||LA2_0==229||LA2_0==232||(LA2_0 >=234  && LA2_0<=235)||(LA2_0 >=243  && LA2_0<=249)||(LA2_0 >=267  && LA2_0<=269)||(LA2_0 >=271  && LA2_0<=275)||(LA2_0 >=277  && LA2_0<=283)||LA2_0==291) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:249:24: declDef
            	    {
            	    pushFollow(FOLLOW_declDef_in_prog2106);
            	    declDef2=declDef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declDef.add(cast(Object)declDef2.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            EOF3=cast(Token)match(input,EOF,FOLLOW_EOF_in_prog2109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(cast(Object)EOF3);


            // AST REWRITE
            // elements: declDef, moduleDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 250:7: -> ^( MODULE ( moduleDeclaration )? ( declDef )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:250:10: ^( MODULE ( moduleDeclaration )? ( declDef )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(MODULE, "MODULE")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:250:19: ( moduleDeclaration )?
                if ( stream_moduleDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleDeclaration.nextTree());

                }
                stream_moduleDeclaration.reset();

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:250:38: ( declDef )*
                while ( stream_declDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_declDef.nextTree());

                }
                stream_declDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","prog"," ",1);
        }
        return retval;
    }
    // $ANTLR end "prog"


    public static class moduleDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:253:1: moduleDeclaration : MODULE_DECLARATION ^ moduleFullyQualifiedName ';' !;
    public final dparserParser.moduleDeclaration_return moduleDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","moduleDeclaration"," ",2);
        dparserParser.moduleDeclaration_return retval = new dparserParser.moduleDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MODULE_DECLARATION4=null;
        Token char_literal6=null;
        dparserParser.moduleFullyQualifiedName_return moduleFullyQualifiedName5 =null;


        Object MODULE_DECLARATION4_tree=null;
        Object char_literal6_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:254:3: ( MODULE_DECLARATION ^ moduleFullyQualifiedName ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:254:5: MODULE_DECLARATION ^ moduleFullyQualifiedName ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            MODULE_DECLARATION4=cast(Token)match(input,MODULE_DECLARATION,FOLLOW_MODULE_DECLARATION_in_moduleDeclaration2142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_DECLARATION4_tree = 
            cast(Object)adaptor.create(MODULE_DECLARATION4)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(MODULE_DECLARATION4_tree, root_0);
            }

            pushFollow(FOLLOW_moduleFullyQualifiedName_in_moduleDeclaration2145);
            moduleFullyQualifiedName5=moduleFullyQualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleFullyQualifiedName5.getTree());

            char_literal6=cast(Token)match(input,186,FOLLOW_186_in_moduleDeclaration2147); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","moduleDeclaration"," ",2);
        }
        return retval;
    }
    // $ANTLR end "moduleDeclaration"


    public static class moduleFullyQualifiedName_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFullyQualifiedName"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:257:1: moduleFullyQualifiedName : Identifier -> ^( MODULE_SYMBOL Identifier ) ;
    public final dparserParser.moduleFullyQualifiedName_return moduleFullyQualifiedName()  {
        debug(trace_rules) writeln("Entering rule:","moduleFullyQualifiedName"," ",3);
        dparserParser.moduleFullyQualifiedName_return retval = new dparserParser.moduleFullyQualifiedName_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier7=null;

        Object Identifier7_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:258:3: ( Identifier -> ^( MODULE_SYMBOL Identifier ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:258:5: Identifier
            {
            Identifier7=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_moduleFullyQualifiedName2163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier7);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 258:16: -> ^( MODULE_SYMBOL Identifier )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:258:19: ^( MODULE_SYMBOL Identifier )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(MODULE_SYMBOL, "MODULE_SYMBOL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","moduleFullyQualifiedName"," ",3);
        }
        return retval;
    }
    // $ANTLR end "moduleFullyQualifiedName"


    public static class declarationBlock_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarationBlock"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:261:1: declarationBlock : ( declDef | '{' ( declDef )* '}' ) -> ^( DECLARATION_BLOCK ( declDef )* ) ;
    public final dparserParser.declarationBlock_return declarationBlock()  {
        debug(trace_rules) writeln("Entering rule:","declarationBlock"," ",4);
        dparserParser.declarationBlock_return retval = new dparserParser.declarationBlock_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        dparserParser.declDef_return declDef8 =null;

        dparserParser.declDef_return declDef10 =null;


        Object char_literal9_tree=null;
        Object char_literal11_tree=null;
        RewriteRuleTokenStream stream_288=new RewriteRuleTokenStream(adaptor,"token 288");
        RewriteRuleTokenStream stream_284=new RewriteRuleTokenStream(adaptor,"token 284");
        RewriteRuleSubtreeStream stream_declDef=new RewriteRuleSubtreeStream(adaptor,"rule declDef");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:3: ( ( declDef | '{' ( declDef )* '}' ) -> ^( DECLARATION_BLOCK ( declDef )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:5: ( declDef | '{' ( declDef )* '}' )
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:5: ( declDef | '{' ( declDef )* '}' )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==CLASS_DECLARATION||LA4_0==ENUM_DECLARATION||LA4_0==EXP_MIXIN||LA4_0==EXP_THIS||LA4_0==INTERFACE_DECLARATION||LA4_0==Identifier||LA4_0==STMT_SCOPE||LA4_0==STMT_SYNCHRONIZED||LA4_0==STRUCT_DECLARATION||LA4_0==TEMPLATE_DECLARATION||(LA4_0 >=154  && LA4_0<=155)||LA4_0==181||(LA4_0 >=210  && LA4_0<=211)||(LA4_0 >=214  && LA4_0<=219)||(LA4_0 >=222  && LA4_0<=225)||LA4_0==227||LA4_0==229||LA4_0==232||(LA4_0 >=234  && LA4_0<=235)||(LA4_0 >=243  && LA4_0<=249)||(LA4_0 >=267  && LA4_0<=269)||(LA4_0 >=271  && LA4_0<=275)||(LA4_0 >=277  && LA4_0<=283)||LA4_0==291) ) {
                alt4=1;
            }
            else if ( (LA4_0==284) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:6: declDef
                   {
                   pushFollow(FOLLOW_declDef_in_declarationBlock2187);
                   declDef8=declDef();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_declDef.add(cast(Object)declDef8.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:16: '{' ( declDef )* '}'
                   {
                   char_literal9=cast(Token)match(input,284,FOLLOW_284_in_declarationBlock2191); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_284.add(cast(Object)char_literal9);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:20: ( declDef )*
                   loop3:
                   do {
                       int alt3=2;
                       int LA3_0 = input.LA(1);

                       if ( (LA3_0==CLASS_DECLARATION||LA3_0==ENUM_DECLARATION||LA3_0==EXP_MIXIN||LA3_0==EXP_THIS||LA3_0==INTERFACE_DECLARATION||LA3_0==Identifier||LA3_0==STMT_SCOPE||LA3_0==STMT_SYNCHRONIZED||LA3_0==STRUCT_DECLARATION||LA3_0==TEMPLATE_DECLARATION||(LA3_0 >=154  && LA3_0<=155)||LA3_0==181||(LA3_0 >=210  && LA3_0<=211)||(LA3_0 >=214  && LA3_0<=219)||(LA3_0 >=222  && LA3_0<=225)||LA3_0==227||LA3_0==229||LA3_0==232||(LA3_0 >=234  && LA3_0<=235)||(LA3_0 >=243  && LA3_0<=249)||(LA3_0 >=267  && LA3_0<=269)||(LA3_0 >=271  && LA3_0<=275)||(LA3_0 >=277  && LA3_0<=283)||LA3_0==291) ) {
                           alt3=1;
                       }


                       switch (alt3) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:20: declDef
                   	    {
                   	    pushFollow(FOLLOW_declDef_in_declarationBlock2193);
                   	    declDef10=declDef();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_declDef.add(cast(Object)declDef10.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop3;
                       }
                   } while (true);


                   char_literal11=cast(Token)match(input,288,FOLLOW_288_in_declarationBlock2196); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_288.add(cast(Object)char_literal11);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: declDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 262:34: -> ^( DECLARATION_BLOCK ( declDef )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:37: ^( DECLARATION_BLOCK ( declDef )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DECLARATION_BLOCK, "DECLARATION_BLOCK")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:262:57: ( declDef )*
                while ( stream_declDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_declDef.nextTree());

                }
                stream_declDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","declarationBlock"," ",4);
        }
        return retval;
    }
    // $ANTLR end "declarationBlock"


    public static class declDef_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declDef"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:265:1: declDef : ( ( 'static' 'import' )=> ( importDeclaration ) | importDeclaration | enumDeclaration | classDeclaration | interfaceDeclaration | aggregateDeclaration | declaration | ctorDeclaration | unittestDeclaration | conditionalDeclaration | dvSpecification | staticAssert | templateDeclaration | templateMixinDeclaration | mixinDeclaration );
    public final dparserParser.declDef_return declDef()  {
        debug(trace_rules) writeln("Entering rule:","declDef"," ",5);
        dparserParser.declDef_return retval = new dparserParser.declDef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.importDeclaration_return importDeclaration12 =null;

        dparserParser.importDeclaration_return importDeclaration13 =null;

        dparserParser.enumDeclaration_return enumDeclaration14 =null;

        dparserParser.classDeclaration_return classDeclaration15 =null;

        dparserParser.interfaceDeclaration_return interfaceDeclaration16 =null;

        dparserParser.aggregateDeclaration_return aggregateDeclaration17 =null;

        dparserParser.declaration_return declaration18 =null;

        dparserParser.ctorDeclaration_return ctorDeclaration19 =null;

        dparserParser.unittestDeclaration_return unittestDeclaration20 =null;

        dparserParser.conditionalDeclaration_return conditionalDeclaration21 =null;

        dparserParser.dvSpecification_return dvSpecification22 =null;

        dparserParser.staticAssert_return staticAssert23 =null;

        dparserParser.templateDeclaration_return templateDeclaration24 =null;

        dparserParser.templateMixinDeclaration_return templateMixinDeclaration25 =null;

        dparserParser.mixinDeclaration_return mixinDeclaration26 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:3: ( ( 'static' 'import' )=> ( importDeclaration ) | importDeclaration | enumDeclaration | classDeclaration | interfaceDeclaration | aggregateDeclaration | declaration | ctorDeclaration | unittestDeclaration | conditionalDeclaration | dvSpecification | staticAssert | templateDeclaration | templateMixinDeclaration | mixinDeclaration )
            int alt5=15;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:5: ( 'static' 'import' )=> ( importDeclaration )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:27: ( importDeclaration )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:28: importDeclaration
                    {
                    pushFollow(FOLLOW_importDeclaration_in_declDef2227);
                    importDeclaration12=importDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration12.getTree());

                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:267:5: importDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_importDeclaration_in_declDef2234);
                    importDeclaration13=importDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration13.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:268:5: enumDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_enumDeclaration_in_declDef2240);
                    enumDeclaration14=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration14.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:269:5: classDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_classDeclaration_in_declDef2246);
                    classDeclaration15=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration15.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:270:5: interfaceDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_interfaceDeclaration_in_declDef2252);
                    interfaceDeclaration16=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration16.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:271:5: aggregateDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_aggregateDeclaration_in_declDef2258);
                    aggregateDeclaration17=aggregateDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregateDeclaration17.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:272:5: declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_declaration_in_declDef2264);
                    declaration18=declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration18.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:273:5: ctorDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_ctorDeclaration_in_declDef2270);
                    ctorDeclaration19=ctorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ctorDeclaration19.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:274:5: unittestDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_unittestDeclaration_in_declDef2276);
                    unittestDeclaration20=unittestDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unittestDeclaration20.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:275:5: conditionalDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_conditionalDeclaration_in_declDef2282);
                    conditionalDeclaration21=conditionalDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalDeclaration21.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:276:5: dvSpecification
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_dvSpecification_in_declDef2288);
                    dvSpecification22=dvSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dvSpecification22.getTree());

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:277:5: staticAssert
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_staticAssert_in_declDef2294);
                    staticAssert23=staticAssert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, staticAssert23.getTree());

                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:278:5: templateDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateDeclaration_in_declDef2300);
                    templateDeclaration24=templateDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateDeclaration24.getTree());

                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:279:5: templateMixinDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateMixinDeclaration_in_declDef2306);
                    templateMixinDeclaration25=templateMixinDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateMixinDeclaration25.getTree());

                    }
                    break;
                case 15 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:280:5: mixinDeclaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_mixinDeclaration_in_declDef2312);
                    mixinDeclaration26=mixinDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixinDeclaration26.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","declDef"," ",5);
        }
        return retval;
    }
    // $ANTLR end "declDef"


    public static class declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:283:1: declaration : ( storageClass | decl );
    public final dparserParser.declaration_return declaration()  {
        debug(trace_rules) writeln("Entering rule:","declaration"," ",6);
        dparserParser.declaration_return retval = new dparserParser.declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.storageClass_return storageClass27 =null;

        dparserParser.decl_return decl28 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:284:3: ( storageClass | decl )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==ENUM_DECLARATION||LA6_0==STMT_SCOPE||LA6_0==STMT_SYNCHRONIZED||(LA6_0 >=210  && LA6_0<=211)||LA6_0==214||LA6_0==222||LA6_0==227||LA6_0==232||LA6_0==234||LA6_0==245||LA6_0==247||(LA6_0 >=268  && LA6_0<=269)||LA6_0==271||LA6_0==273||LA6_0==275) ) {
                alt6=1;
            }
            else if ( (LA6_0==Identifier||LA6_0==181||(LA6_0 >=215  && LA6_0<=219)||(LA6_0 >=223  && LA6_0<=224)||LA6_0==229||LA6_0==235||(LA6_0 >=243  && LA6_0<=244)||(LA6_0 >=248  && LA6_0<=249)||LA6_0==267||LA6_0==272||LA6_0==274||(LA6_0 >=277  && LA6_0<=280)||(LA6_0 >=282  && LA6_0<=283)) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:284:5: storageClass
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_storageClass_in_declaration2327);
                    storageClass27=storageClass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, storageClass27.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:285:5: decl
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_decl_in_declaration2333);
                    decl28=decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl28.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","declaration"," ",6);
        }
        return retval;
    }
    // $ANTLR end "declaration"


    public static class sc_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sc"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:297:1: sc : ( 'abstract' | 'auto' | 'const' | 'deprecated' | 'enum' | 'extern' | 'final' | 'immutable' | 'inout' | 'shared' | 'nothrow' | 'override' | 'pure' | '__gshared' | 'scope' | 'static' | 'synchronized' ) -> STORAGE_CLASS[$start] ;
    public final dparserParser.sc_return sc()  {
        debug(trace_rules) writeln("Entering rule:","sc"," ",7);
        dparserParser.sc_return retval = new dparserParser.sc_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal29=null;
        Token string_literal30=null;
        Token string_literal31=null;
        Token string_literal32=null;
        Token string_literal33=null;
        Token string_literal34=null;
        Token string_literal35=null;
        Token string_literal36=null;
        Token string_literal37=null;
        Token string_literal38=null;
        Token string_literal39=null;
        Token string_literal40=null;
        Token string_literal41=null;
        Token string_literal42=null;
        Token string_literal43=null;
        Token string_literal44=null;
        Token string_literal45=null;

        Object string_literal29_tree=null;
        Object string_literal30_tree=null;
        Object string_literal31_tree=null;
        Object string_literal32_tree=null;
        Object string_literal33_tree=null;
        Object string_literal34_tree=null;
        Object string_literal35_tree=null;
        Object string_literal36_tree=null;
        Object string_literal37_tree=null;
        Object string_literal38_tree=null;
        Object string_literal39_tree=null;
        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object string_literal42_tree=null;
        Object string_literal43_tree=null;
        Object string_literal44_tree=null;
        Object string_literal45_tree=null;
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_222=new RewriteRuleTokenStream(adaptor,"token 222");
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_227=new RewriteRuleTokenStream(adaptor,"token 227");
        RewriteRuleTokenStream stream_271=new RewriteRuleTokenStream(adaptor,"token 271");
        RewriteRuleTokenStream stream_273=new RewriteRuleTokenStream(adaptor,"token 273");
        RewriteRuleTokenStream stream_275=new RewriteRuleTokenStream(adaptor,"token 275");
        RewriteRuleTokenStream stream_STMT_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token STMT_SYNCHRONIZED");
        RewriteRuleTokenStream stream_245=new RewriteRuleTokenStream(adaptor,"token 245");
        RewriteRuleTokenStream stream_232=new RewriteRuleTokenStream(adaptor,"token 232");
        RewriteRuleTokenStream stream_ENUM_DECLARATION=new RewriteRuleTokenStream(adaptor,"token ENUM_DECLARATION");
        RewriteRuleTokenStream stream_234=new RewriteRuleTokenStream(adaptor,"token 234");
        RewriteRuleTokenStream stream_269=new RewriteRuleTokenStream(adaptor,"token 269");
        RewriteRuleTokenStream stream_268=new RewriteRuleTokenStream(adaptor,"token 268");
        RewriteRuleTokenStream stream_STMT_SCOPE=new RewriteRuleTokenStream(adaptor,"token STMT_SCOPE");
        RewriteRuleTokenStream stream_247=new RewriteRuleTokenStream(adaptor,"token 247");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:3: ( ( 'abstract' | 'auto' | 'const' | 'deprecated' | 'enum' | 'extern' | 'final' | 'immutable' | 'inout' | 'shared' | 'nothrow' | 'override' | 'pure' | '__gshared' | 'scope' | 'static' | 'synchronized' ) -> STORAGE_CLASS[$start] )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:5: ( 'abstract' | 'auto' | 'const' | 'deprecated' | 'enum' | 'extern' | 'final' | 'immutable' | 'inout' | 'shared' | 'nothrow' | 'override' | 'pure' | '__gshared' | 'scope' | 'static' | 'synchronized' )
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:5: ( 'abstract' | 'auto' | 'const' | 'deprecated' | 'enum' | 'extern' | 'final' | 'immutable' | 'inout' | 'shared' | 'nothrow' | 'override' | 'pure' | '__gshared' | 'scope' | 'static' | 'synchronized' )
            int alt7=17;
            switch ( input.LA(1) ) {
            case 211:
                {
                alt7=1;
                }
                break;
            case 214:
                {
                alt7=2;
                }
                break;
            case 222:
                {
                alt7=3;
                }
                break;
            case 227:
                {
                alt7=4;
                }
                break;
            case ENUM_DECLARATION:
                {
                alt7=5;
                }
                break;
            case 232:
                {
                alt7=6;
                }
                break;
            case 234:
                {
                alt7=7;
                }
                break;
            case 245:
                {
                alt7=8;
                }
                break;
            case 247:
                {
                alt7=9;
                }
                break;
            case 273:
                {
                alt7=10;
                }
                break;
            case 268:
                {
                alt7=11;
                }
                break;
            case 269:
                {
                alt7=12;
                }
                break;
            case 271:
                {
                alt7=13;
                }
                break;
            case 210:
                {
                alt7=14;
                }
                break;
            case STMT_SCOPE:
                {
                alt7=15;
                }
                break;
            case 275:
                {
                alt7=16;
                }
                break;
            case STMT_SYNCHRONIZED:
                {
                alt7=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:6: 'abstract'
                   {
                   string_literal29=cast(Token)match(input,211,FOLLOW_211_in_sc2355); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_211.add(cast(Object)string_literal29);


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:19: 'auto'
                   {
                   string_literal30=cast(Token)match(input,214,FOLLOW_214_in_sc2359); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_214.add(cast(Object)string_literal30);


                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:28: 'const'
                   {
                   string_literal31=cast(Token)match(input,222,FOLLOW_222_in_sc2363); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_222.add(cast(Object)string_literal31);


                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:39: 'deprecated'
                   {
                   string_literal32=cast(Token)match(input,227,FOLLOW_227_in_sc2368); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_227.add(cast(Object)string_literal32);


                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:54: 'enum'
                   {
                   string_literal33=cast(Token)match(input,ENUM_DECLARATION,FOLLOW_ENUM_DECLARATION_in_sc2372); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_ENUM_DECLARATION.add(cast(Object)string_literal33);


                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:63: 'extern'
                   {
                   string_literal34=cast(Token)match(input,232,FOLLOW_232_in_sc2376); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_232.add(cast(Object)string_literal34);


                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:298:74: 'final'
                   {
                   string_literal35=cast(Token)match(input,234,FOLLOW_234_in_sc2380); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_234.add(cast(Object)string_literal35);


                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:5: 'immutable'
                   {
                   string_literal36=cast(Token)match(input,245,FOLLOW_245_in_sc2386); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_245.add(cast(Object)string_literal36);


                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:19: 'inout'
                   {
                   string_literal37=cast(Token)match(input,247,FOLLOW_247_in_sc2390); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_247.add(cast(Object)string_literal37);


                   }
                   break;
               case 10 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:29: 'shared'
                   {
                   string_literal38=cast(Token)match(input,273,FOLLOW_273_in_sc2394); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_273.add(cast(Object)string_literal38);


                   }
                   break;
               case 11 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:40: 'nothrow'
                   {
                   string_literal39=cast(Token)match(input,268,FOLLOW_268_in_sc2398); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_268.add(cast(Object)string_literal39);


                   }
                   break;
               case 12 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:52: 'override'
                   {
                   string_literal40=cast(Token)match(input,269,FOLLOW_269_in_sc2402); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_269.add(cast(Object)string_literal40);


                   }
                   break;
               case 13 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:299:65: 'pure'
                   {
                   string_literal41=cast(Token)match(input,271,FOLLOW_271_in_sc2406); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_271.add(cast(Object)string_literal41);


                   }
                   break;
               case 14 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:300:5: '__gshared'
                   {
                   string_literal42=cast(Token)match(input,210,FOLLOW_210_in_sc2412); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_210.add(cast(Object)string_literal42);


                   }
                   break;
               case 15 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:300:19: 'scope'
                   {
                   string_literal43=cast(Token)match(input,STMT_SCOPE,FOLLOW_STMT_SCOPE_in_sc2416); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_STMT_SCOPE.add(cast(Object)string_literal43);


                   }
                   break;
               case 16 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:300:29: 'static'
                   {
                   string_literal44=cast(Token)match(input,275,FOLLOW_275_in_sc2420); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_275.add(cast(Object)string_literal44);


                   }
                   break;
               case 17 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:300:40: 'synchronized'
                   {
                   string_literal45=cast(Token)match(input,STMT_SYNCHRONIZED,FOLLOW_STMT_SYNCHRONIZED_in_sc2424); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_STMT_SYNCHRONIZED.add(cast(Object)string_literal45);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 300:56: -> STORAGE_CLASS[$start]
            {
                adaptor.addChild(root_0, 
                cast(Object)adaptor.create(STORAGE_CLASS, (cast(Token)retval.start))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sc"," ",7);
        }
        return retval;
    }
    // $ANTLR end "sc"


    public static class storageClass_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "storageClass"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:303:1: storageClass : sc ^ ( decl | autoVariable | storageClass ) ;
    public final dparserParser.storageClass_return storageClass()  {
        debug(trace_rules) writeln("Entering rule:","storageClass"," ",8);
        dparserParser.storageClass_return retval = new dparserParser.storageClass_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.sc_return sc46 =null;

        dparserParser.decl_return decl47 =null;

        dparserParser.autoVariable_return autoVariable48 =null;

        dparserParser.storageClass_return storageClass49 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:304:3: ( sc ^ ( decl | autoVariable | storageClass ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:304:5: sc ^ ( decl | autoVariable | storageClass )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sc_in_storageClass2445);
            sc46=sc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = cast(Object)adaptor.becomeRoot(sc46.getTree(), root_0);

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:305:5: ( decl | autoVariable | storageClass )
            int alt8=3;
            switch ( input.LA(1) ) {
            case 181:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt8=1;
                }
                break;
            case Identifier:
                {
                int LA8_2 = input.LA(2);

                if ( (LA8_2==Identifier||LA8_2==157||LA8_2==172||LA8_2==181||LA8_2==204) ) {
                    alt8=1;
                }
                else if ( (LA8_2==193) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 2, input);

                    throw nvae;

                }
                }
                break;
            case ENUM_DECLARATION:
            case STMT_SCOPE:
            case STMT_SYNCHRONIZED:
            case 210:
            case 211:
            case 214:
            case 222:
            case 227:
            case 232:
            case 234:
            case 245:
            case 247:
            case 268:
            case 269:
            case 271:
            case 273:
            case 275:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:305:7: decl
                   {
                   pushFollow(FOLLOW_decl_in_storageClass2454);
                   decl47=decl();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, decl47.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:305:14: autoVariable
                   {
                   pushFollow(FOLLOW_autoVariable_in_storageClass2458);
                   autoVariable48=autoVariable();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, autoVariable48.getTree());

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:305:29: storageClass
                   {
                   pushFollow(FOLLOW_storageClass_in_storageClass2462);
                   storageClass49=storageClass();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, storageClass49.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","storageClass"," ",8);
        }
        return retval;
    }
    // $ANTLR end "storageClass"


    public static class autoVariable_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autoVariable"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:308:1: autoVariable : defSymbol initializer ';' -> ^( AUTO_VAR defSymbol initializer ) ;
    public final dparserParser.autoVariable_return autoVariable()  {
        debug(trace_rules) writeln("Entering rule:","autoVariable"," ",9);
        dparserParser.autoVariable_return retval = new dparserParser.autoVariable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal52=null;
        dparserParser.defSymbol_return defSymbol50 =null;

        dparserParser.initializer_return initializer51 =null;


        Object char_literal52_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:309:3: ( defSymbol initializer ';' -> ^( AUTO_VAR defSymbol initializer ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:309:5: defSymbol initializer ';'
            {
            pushFollow(FOLLOW_defSymbol_in_autoVariable2479);
            defSymbol50=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol50.getTree());

            pushFollow(FOLLOW_initializer_in_autoVariable2481);
            initializer51=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(cast(Object)initializer51.getTree());

            char_literal52=cast(Token)match(input,186,FOLLOW_186_in_autoVariable2483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal52);


            // AST REWRITE
            // elements: defSymbol, initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 309:31: -> ^( AUTO_VAR defSymbol initializer )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:309:34: ^( AUTO_VAR defSymbol initializer )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(AUTO_VAR, "AUTO_VAR")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                adaptor.addChild(root_1, stream_initializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","autoVariable"," ",9);
        }
        return retval;
    }
    // $ANTLR end "autoVariable"


    public static class decl_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decl"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:312:1: decl : type defSymbol ( '[' ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? ) | '[' assignExpression ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? ) | ( initializer )? ';' -> ^( DEF_VAR type defSymbol ( initializer )? ) | parameters ( memberFunctionAttribute )* ( functionBody | ';' ) -> ^( DEF_FUNC defSymbol type parameters ( functionBody )? ) ) ;
    public final dparserParser.decl_return decl()  {
        debug(trace_rules) writeln("Entering rule:","decl"," ",10);
        dparserParser.decl_return retval = new dparserParser.decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal55=null;
        Token char_literal56=null;
        Token char_literal58=null;
        Token char_literal60=null;
        Token char_literal63=null;
        Token char_literal67=null;
        dparserParser.type_return type53 =null;

        dparserParser.defSymbol_return defSymbol54 =null;

        dparserParser.initializer_return initializer57 =null;

        dparserParser.assignExpression_return assignExpression59 =null;

        dparserParser.initializer_return initializer61 =null;

        dparserParser.initializer_return initializer62 =null;

        dparserParser.parameters_return parameters64 =null;

        dparserParser.memberFunctionAttribute_return memberFunctionAttribute65 =null;

        dparserParser.functionBody_return functionBody66 =null;


        Object char_literal55_tree=null;
        Object char_literal56_tree=null;
        Object char_literal58_tree=null;
        Object char_literal60_tree=null;
        Object char_literal63_tree=null;
        Object char_literal67_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_memberFunctionAttribute=new RewriteRuleSubtreeStream(adaptor,"rule memberFunctionAttribute");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:313:3: ( type defSymbol ( '[' ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? ) | '[' assignExpression ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? ) | ( initializer )? ';' -> ^( DEF_VAR type defSymbol ( initializer )? ) | parameters ( memberFunctionAttribute )* ( functionBody | ';' ) -> ^( DEF_FUNC defSymbol type parameters ( functionBody )? ) ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:313:5: type defSymbol ( '[' ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? ) | '[' assignExpression ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? ) | ( initializer )? ';' -> ^( DEF_VAR type defSymbol ( initializer )? ) | parameters ( memberFunctionAttribute )* ( functionBody | ';' ) -> ^( DEF_FUNC defSymbol type parameters ( functionBody )? ) )
            {
            pushFollow(FOLLOW_type_in_decl2508);
            type53=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(cast(Object)type53.getTree());

            pushFollow(FOLLOW_defSymbol_in_decl2510);
            defSymbol54=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol54.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:5: ( '[' ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? ) | '[' assignExpression ']' ( initializer )? -> ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? ) | ( initializer )? ';' -> ^( DEF_VAR type defSymbol ( initializer )? ) | parameters ( memberFunctionAttribute )* ( functionBody | ';' ) -> ^( DEF_FUNC defSymbol type parameters ( functionBody )? ) )
            int alt14=4;
            switch ( input.LA(1) ) {
            case 204:
                {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==205) ) {
                    alt14=1;
                }
                else if ( (LA14_1==CharacterLiteral||LA14_1==EXP_ASSERT||LA14_1==EXP_CAST||(LA14_1 >=34  && LA14_1<=35)||LA14_1==EXP_IS||LA14_1==EXP_LITERAL_FILE||(LA14_1 >=44  && LA14_1<=45)||(LA14_1 >=48  && LA14_1<=49)||(LA14_1 >=52  && LA14_1<=56)||LA14_1==FloatLiteral||LA14_1==Identifier||LA14_1==IntegerLiteral||LA14_1==StringLiteral||LA14_1==157||LA14_1==168||LA14_1==170||LA14_1==172||(LA14_1 >=174  && LA14_1<=175)||LA14_1==178||LA14_1==181||LA14_1==195||LA14_1==203||LA14_1==226||LA14_1==237||LA14_1==246||LA14_1==268||LA14_1==271||LA14_1==289) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
                }
                break;
            case 186:
            case 193:
                {
                alt14=3;
                }
                break;
            case 170:
                {
                alt14=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:7: '[' ']' ( initializer )?
                   {
                   char_literal55=cast(Token)match(input,204,FOLLOW_204_in_decl2518); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_204.add(cast(Object)char_literal55);


                   char_literal56=cast(Token)match(input,205,FOLLOW_205_in_decl2520); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_205.add(cast(Object)char_literal56);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:15: ( initializer )?
                   int alt9=2;
                   int LA9_0 = input.LA(1);

                   if ( (LA9_0==193) ) {
                       alt9=1;
                   }
                   switch (alt9) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:15: initializer
                          {
                          pushFollow(FOLLOW_initializer_in_decl2522);
                          initializer57=initializer();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_initializer.add(cast(Object)initializer57.getTree());

                          }
                          break;

                       default:
                   }


                   // AST REWRITE
                   // elements: initializer, defSymbol, type
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 314:28: -> ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:32: ^( DEF_VAR ^( TYPE_DYN_ARRAY type ) defSymbol ( initializer )? )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(DEF_VAR, "DEF_VAR")
                       , root_1);

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:42: ^( TYPE_DYN_ARRAY type )
                       {
                       Object root_2 = cast(Object)adaptor.nil();
                       root_2 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(TYPE_DYN_ARRAY, "TYPE_DYN_ARRAY")
                       , root_2);

                       adaptor.addChild(root_2, stream_type.nextTree());

                       adaptor.addChild(root_1, root_2);
                       }

                       adaptor.addChild(root_1, stream_defSymbol.nextTree());

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:314:75: ( initializer )?
                       if ( stream_initializer.hasNext() ) {
                           adaptor.addChild(root_1, stream_initializer.nextTree());

                       }
                       stream_initializer.reset();

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:7: '[' assignExpression ']' ( initializer )?
                   {
                   char_literal58=cast(Token)match(input,204,FOLLOW_204_in_decl2549); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_204.add(cast(Object)char_literal58);


                   pushFollow(FOLLOW_assignExpression_in_decl2551);
                   assignExpression59=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression59.getTree());

                   char_literal60=cast(Token)match(input,205,FOLLOW_205_in_decl2553); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_205.add(cast(Object)char_literal60);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:32: ( initializer )?
                   int alt10=2;
                   int LA10_0 = input.LA(1);

                   if ( (LA10_0==193) ) {
                       alt10=1;
                   }
                   switch (alt10) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:32: initializer
                          {
                          pushFollow(FOLLOW_initializer_in_decl2555);
                          initializer61=initializer();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_initializer.add(cast(Object)initializer61.getTree());

                          }
                          break;

                       default:
                   }


                   // AST REWRITE
                   // elements: type, initializer, defSymbol, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 315:45: -> ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:48: ^( DEF_VAR ^( TYPE_STATIC_ARRAY assignExpression type ) defSymbol ( initializer )? )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(DEF_VAR, "DEF_VAR")
                       , root_1);

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:58: ^( TYPE_STATIC_ARRAY assignExpression type )
                       {
                       Object root_2 = cast(Object)adaptor.nil();
                       root_2 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(TYPE_STATIC_ARRAY, "TYPE_STATIC_ARRAY")
                       , root_2);

                       adaptor.addChild(root_2, stream_assignExpression.nextTree());

                       adaptor.addChild(root_2, stream_type.nextTree());

                       adaptor.addChild(root_1, root_2);
                       }

                       adaptor.addChild(root_1, stream_defSymbol.nextTree());

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:315:111: ( initializer )?
                       if ( stream_initializer.hasNext() ) {
                           adaptor.addChild(root_1, stream_initializer.nextTree());

                       }
                       stream_initializer.reset();

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:316:7: ( initializer )? ';'
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:316:7: ( initializer )?
                   int alt11=2;
                   int LA11_0 = input.LA(1);

                   if ( (LA11_0==193) ) {
                       alt11=1;
                   }
                   switch (alt11) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:316:7: initializer
                          {
                          pushFollow(FOLLOW_initializer_in_decl2583);
                          initializer62=initializer();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_initializer.add(cast(Object)initializer62.getTree());

                          }
                          break;

                       default:
                   }


                   char_literal63=cast(Token)match(input,186,FOLLOW_186_in_decl2586); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal63);


                   // AST REWRITE
                   // elements: type, defSymbol, initializer
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 316:24: -> ^( DEF_VAR type defSymbol ( initializer )? )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:316:27: ^( DEF_VAR type defSymbol ( initializer )? )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(DEF_VAR, "DEF_VAR")
                       , root_1);

                       adaptor.addChild(root_1, stream_type.nextTree());

                       adaptor.addChild(root_1, stream_defSymbol.nextTree());

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:316:52: ( initializer )?
                       if ( stream_initializer.hasNext() ) {
                           adaptor.addChild(root_1, stream_initializer.nextTree());

                       }
                       stream_initializer.reset();

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:7: parameters ( memberFunctionAttribute )* ( functionBody | ';' )
                   {
                   pushFollow(FOLLOW_parameters_in_decl2607);
                   parameters64=parameters();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters64.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:18: ( memberFunctionAttribute )*
                   loop12:
                   do {
                       int alt12=2;
                       int LA12_0 = input.LA(1);

                       if ( (LA12_0==203||LA12_0==222||LA12_0==245||LA12_0==247||LA12_0==268||LA12_0==271||LA12_0==273) ) {
                           alt12=1;
                       }


                       switch (alt12) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:18: memberFunctionAttribute
                   	    {
                   	    pushFollow(FOLLOW_memberFunctionAttribute_in_decl2609);
                   	    memberFunctionAttribute65=memberFunctionAttribute();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_memberFunctionAttribute.add(cast(Object)memberFunctionAttribute65.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop12;
                       }
                   } while (true);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:43: ( functionBody | ';' )
                   int alt13=2;
                   int LA13_0 = input.LA(1);

                   if ( (LA13_0==284) ) {
                       alt13=1;
                   }
                   else if ( (LA13_0==186) ) {
                       alt13=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 13, 0, input);

                       throw nvae;

                   }
                   switch (alt13) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:44: functionBody
                          {
                          pushFollow(FOLLOW_functionBody_in_decl2613);
                          functionBody66=functionBody();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody66.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:59: ';'
                          {
                          char_literal67=cast(Token)match(input,186,FOLLOW_186_in_decl2617); if (state.failed) return retval; 
                          if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal67);


                          }
                          break;

                       default:
                   }


                   // AST REWRITE
                   // elements: functionBody, defSymbol, parameters, type
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 317:64: -> ^( DEF_FUNC defSymbol type parameters ( functionBody )? )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:67: ^( DEF_FUNC defSymbol type parameters ( functionBody )? )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(DEF_FUNC, "DEF_FUNC")
                       , root_1);

                       adaptor.addChild(root_1, stream_defSymbol.nextTree());

                       adaptor.addChild(root_1, stream_type.nextTree());

                       adaptor.addChild(root_1, stream_parameters.nextTree());

                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:317:104: ( functionBody )?
                       if ( stream_functionBody.hasNext() ) {
                           adaptor.addChild(root_1, stream_functionBody.nextTree());

                       }
                       stream_functionBody.reset();

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","decl"," ",10);
        }
        return retval;
    }
    // $ANTLR end "decl"


    public static class memberFunctionAttribute_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "memberFunctionAttribute"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:321:1: memberFunctionAttribute : ( 'const' | 'immutable' | 'inout' | 'shared' | functionAttribute );
    public final dparserParser.memberFunctionAttribute_return memberFunctionAttribute()  {
        debug(trace_rules) writeln("Entering rule:","memberFunctionAttribute"," ",11);
        dparserParser.memberFunctionAttribute_return retval = new dparserParser.memberFunctionAttribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal68=null;
        Token string_literal69=null;
        Token string_literal70=null;
        Token string_literal71=null;
        dparserParser.functionAttribute_return functionAttribute72 =null;


        Object string_literal68_tree=null;
        Object string_literal69_tree=null;
        Object string_literal70_tree=null;
        Object string_literal71_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:322:3: ( 'const' | 'immutable' | 'inout' | 'shared' | functionAttribute )
            int alt15=5;
            switch ( input.LA(1) ) {
            case 222:
                {
                alt15=1;
                }
                break;
            case 245:
                {
                alt15=2;
                }
                break;
            case 247:
                {
                alt15=3;
                }
                break;
            case 273:
                {
                alt15=4;
                }
                break;
            case 203:
            case 268:
            case 271:
                {
                alt15=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }

            switch (alt15) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:322:5: 'const'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal68=cast(Token)match(input,222,FOLLOW_222_in_memberFunctionAttribute2655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal68_tree = 
                    cast(Object)adaptor.create(string_literal68)
                    ;
                    adaptor.addChild(root_0, string_literal68_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:322:15: 'immutable'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal69=cast(Token)match(input,245,FOLLOW_245_in_memberFunctionAttribute2659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal69_tree = 
                    cast(Object)adaptor.create(string_literal69)
                    ;
                    adaptor.addChild(root_0, string_literal69_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:322:29: 'inout'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal70=cast(Token)match(input,247,FOLLOW_247_in_memberFunctionAttribute2663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal70_tree = 
                    cast(Object)adaptor.create(string_literal70)
                    ;
                    adaptor.addChild(root_0, string_literal70_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:322:39: 'shared'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal71=cast(Token)match(input,273,FOLLOW_273_in_memberFunctionAttribute2667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal71_tree = 
                    cast(Object)adaptor.create(string_literal71)
                    ;
                    adaptor.addChild(root_0, string_literal71_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:323:5: functionAttribute
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_functionAttribute_in_memberFunctionAttribute2673);
                    functionAttribute72=functionAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionAttribute72.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","memberFunctionAttribute"," ",11);
        }
        return retval;
    }
    // $ANTLR end "memberFunctionAttribute"


    public static class functionAttribute_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionAttribute"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:326:1: functionAttribute : ( 'nothrow' | 'pure' | property );
    public final dparserParser.functionAttribute_return functionAttribute()  {
        debug(trace_rules) writeln("Entering rule:","functionAttribute"," ",12);
        dparserParser.functionAttribute_return retval = new dparserParser.functionAttribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal73=null;
        Token string_literal74=null;
        dparserParser.property_return property75 =null;


        Object string_literal73_tree=null;
        Object string_literal74_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:327:3: ( 'nothrow' | 'pure' | property )
            int alt16=3;
            switch ( input.LA(1) ) {
            case 268:
                {
                alt16=1;
                }
                break;
            case 271:
                {
                alt16=2;
                }
                break;
            case 203:
                {
                alt16=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:327:5: 'nothrow'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal73=cast(Token)match(input,268,FOLLOW_268_in_functionAttribute2688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal73_tree = 
                    cast(Object)adaptor.create(string_literal73)
                    ;
                    adaptor.addChild(root_0, string_literal73_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:327:17: 'pure'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal74=cast(Token)match(input,271,FOLLOW_271_in_functionAttribute2692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal74_tree = 
                    cast(Object)adaptor.create(string_literal74)
                    ;
                    adaptor.addChild(root_0, string_literal74_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:328:5: property
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_functionAttribute2698);
                    property75=property();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, property75.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","functionAttribute"," ",12);
        }
        return retval;
    }
    // $ANTLR end "functionAttribute"


    public static class defSymbol_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defSymbol"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:331:1: defSymbol : Identifier -> ^( DEF_SYMBOL[$Identifier] ) ;
    public final dparserParser.defSymbol_return defSymbol()  {
        debug(trace_rules) writeln("Entering rule:","defSymbol"," ",13);
        dparserParser.defSymbol_return retval = new dparserParser.defSymbol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier76=null;

        Object Identifier76_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:332:3: ( Identifier -> ^( DEF_SYMBOL[$Identifier] ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:332:5: Identifier
            {
            Identifier76=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_defSymbol2713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier76);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 332:16: -> ^( DEF_SYMBOL[$Identifier] )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:332:19: ^( DEF_SYMBOL[$Identifier] )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DEF_SYMBOL, Identifier76)
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","defSymbol"," ",13);
        }
        return retval;
    }
    // $ANTLR end "defSymbol"


    public static class symbol_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "symbol"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:335:1: symbol : Identifier -> ^( SYMBOL[$Identifier] ) ;
    public final dparserParser.symbol_return symbol()  {
        debug(trace_rules) writeln("Entering rule:","symbol"," ",14);
        dparserParser.symbol_return retval = new dparserParser.symbol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier77=null;

        Object Identifier77_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:336:3: ( Identifier -> ^( SYMBOL[$Identifier] ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:336:5: Identifier
            {
            Identifier77=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_symbol2735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier77);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 336:16: -> ^( SYMBOL[$Identifier] )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:336:19: ^( SYMBOL[$Identifier] )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(SYMBOL, Identifier77)
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","symbol"," ",14);
        }
        return retval;
    }
    // $ANTLR end "symbol"


    public static class initializer_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:339:1: initializer : '=' ! ( voidInitializer | nonVoidInitializer ) ;
    public final dparserParser.initializer_return initializer()  {
        debug(trace_rules) writeln("Entering rule:","initializer"," ",15);
        dparserParser.initializer_return retval = new dparserParser.initializer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal78=null;
        dparserParser.voidInitializer_return voidInitializer79 =null;

        dparserParser.nonVoidInitializer_return nonVoidInitializer80 =null;


        Object char_literal78_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:340:3: ( '=' ! ( voidInitializer | nonVoidInitializer ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:340:5: '=' ! ( voidInitializer | nonVoidInitializer )
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal78=cast(Token)match(input,193,FOLLOW_193_in_initializer2757); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:341:5: ( voidInitializer | nonVoidInitializer )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==282) ) {
                alt17=1;
            }
            else if ( (LA17_0==CharacterLiteral||LA17_0==EXP_ASSERT||LA17_0==EXP_CAST||(LA17_0 >=34  && LA17_0<=35)||LA17_0==EXP_IS||LA17_0==EXP_LITERAL_FILE||(LA17_0 >=44  && LA17_0<=45)||(LA17_0 >=48  && LA17_0<=49)||(LA17_0 >=52  && LA17_0<=56)||LA17_0==FloatLiteral||LA17_0==Identifier||LA17_0==IntegerLiteral||LA17_0==StringLiteral||LA17_0==157||LA17_0==168||LA17_0==170||LA17_0==172||(LA17_0 >=174  && LA17_0<=175)||LA17_0==178||LA17_0==181||LA17_0==195||LA17_0==203||LA17_0==226||LA17_0==237||LA17_0==246||LA17_0==268||LA17_0==271||LA17_0==289) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:341:7: voidInitializer
                   {
                   pushFollow(FOLLOW_voidInitializer_in_initializer2766);
                   voidInitializer79=voidInitializer();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInitializer79.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:342:7: nonVoidInitializer
                   {
                   pushFollow(FOLLOW_nonVoidInitializer_in_initializer2774);
                   nonVoidInitializer80=nonVoidInitializer();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, nonVoidInitializer80.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","initializer"," ",15);
        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class voidInitializer_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "voidInitializer"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:346:1: voidInitializer : 'void' -> ^( INITIALIZER_VOID ) ;
    public final dparserParser.voidInitializer_return voidInitializer()  {
        debug(trace_rules) writeln("Entering rule:","voidInitializer"," ",16);
        dparserParser.voidInitializer_return retval = new dparserParser.voidInitializer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal81=null;

        Object string_literal81_tree=null;
        RewriteRuleTokenStream stream_282=new RewriteRuleTokenStream(adaptor,"token 282");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:347:3: ( 'void' -> ^( INITIALIZER_VOID ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:347:5: 'void'
            {
            string_literal81=cast(Token)match(input,282,FOLLOW_282_in_voidInitializer2795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_282.add(cast(Object)string_literal81);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 347:12: -> ^( INITIALIZER_VOID )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:347:15: ^( INITIALIZER_VOID )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(INITIALIZER_VOID, "INITIALIZER_VOID")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","voidInitializer"," ",16);
        }
        return retval;
    }
    // $ANTLR end "voidInitializer"


    public static class nonVoidInitializer_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nonVoidInitializer"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:350:1: nonVoidInitializer : assignExpression -> ^( INITIALIZER_EXP assignExpression ) ;
    public final dparserParser.nonVoidInitializer_return nonVoidInitializer()  {
        debug(trace_rules) writeln("Entering rule:","nonVoidInitializer"," ",17);
        dparserParser.nonVoidInitializer_return retval = new dparserParser.nonVoidInitializer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.assignExpression_return assignExpression82 =null;


        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:351:3: ( assignExpression -> ^( INITIALIZER_EXP assignExpression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:351:5: assignExpression
            {
            pushFollow(FOLLOW_assignExpression_in_nonVoidInitializer2816);
            assignExpression82=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression82.getTree());

            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 351:22: -> ^( INITIALIZER_EXP assignExpression )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:351:25: ^( INITIALIZER_EXP assignExpression )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(INITIALIZER_EXP, "INITIALIZER_EXP")
                , root_1);

                adaptor.addChild(root_1, stream_assignExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nonVoidInitializer"," ",17);
        }
        return retval;
    }
    // $ANTLR end "nonVoidInitializer"


    public static class basicType_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "basicType"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:354:1: basicType : ( basicTypeX -> ^( REF_IDENTIFIER basicTypeX ) | '.' identifierList -> ^( REF_QUALIFIED identifierList ) | identifierList );
    public final dparserParser.basicType_return basicType()  {
        debug(trace_rules) writeln("Entering rule:","basicType"," ",18);
        dparserParser.basicType_return retval = new dparserParser.basicType_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal84=null;
        dparserParser.basicTypeX_return basicTypeX83 =null;

        dparserParser.identifierList_return identifierList85 =null;

        dparserParser.identifierList_return identifierList86 =null;


        Object char_literal84_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_basicTypeX=new RewriteRuleSubtreeStream(adaptor,"rule basicTypeX");
        RewriteRuleSubtreeStream stream_identifierList=new RewriteRuleSubtreeStream(adaptor,"rule identifierList");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:355:3: ( basicTypeX -> ^( REF_IDENTIFIER basicTypeX ) | '.' identifierList -> ^( REF_QUALIFIED identifierList ) | identifierList )
            int alt18=3;
            switch ( input.LA(1) ) {
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt18=1;
                }
                break;
            case 181:
                {
                alt18=2;
                }
                break;
            case Identifier:
                {
                alt18=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }

            switch (alt18) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:355:5: basicTypeX
                    {
                    pushFollow(FOLLOW_basicTypeX_in_basicType2839);
                    basicTypeX83=basicTypeX();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_basicTypeX.add(cast(Object)basicTypeX83.getTree());

                    // AST REWRITE
                    // elements: basicTypeX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 355:16: -> ^( REF_IDENTIFIER basicTypeX )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:355:19: ^( REF_IDENTIFIER basicTypeX )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_IDENTIFIER, "REF_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_basicTypeX.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:356:5: '.' identifierList
                    {
                    char_literal84=cast(Token)match(input,181,FOLLOW_181_in_basicType2853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal84);


                    pushFollow(FOLLOW_identifierList_in_basicType2855);
                    identifierList85=identifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierList.add(cast(Object)identifierList85.getTree());

                    // AST REWRITE
                    // elements: identifierList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 356:24: -> ^( REF_QUALIFIED identifierList )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:356:27: ^( REF_QUALIFIED identifierList )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifierList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:357:5: identifierList
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_identifierList_in_basicType2869);
                    identifierList86=identifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierList86.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","basicType"," ",18);
        }
        return retval;
    }
    // $ANTLR end "basicType"


    public static class basicTypeX_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "basicTypeX"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:360:1: basicTypeX : ( 'bool' | 'byte' | 'ubyte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' | 'wchar' | 'dchar' | 'float' | 'double' | 'real' | 'ifloat' | 'idouble' | 'ireal' | 'cfloat' | 'cdouble' | 'creal' | 'void' );
    public final dparserParser.basicTypeX_return basicTypeX()  {
        debug(trace_rules) writeln("Entering rule:","basicTypeX"," ",19);
        dparserParser.basicTypeX_return retval = new dparserParser.basicTypeX_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set87=null;

        Object set87_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:361:3: ( 'bool' | 'byte' | 'ubyte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' | 'wchar' | 'dchar' | 'float' | 'double' | 'real' | 'ifloat' | 'idouble' | 'ireal' | 'cfloat' | 'cdouble' | 'creal' | 'void' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:
            {
            root_0 = cast(Object)adaptor.nil();


            set87=cast(Token)input.LT(1);

            if ( (input.LA(1) >=215 && input.LA(1)<=219)||(input.LA(1) >=223 && input.LA(1)<=224)||input.LA(1)==229||input.LA(1)==235||(input.LA(1) >=243 && input.LA(1)<=244)||(input.LA(1) >=248 && input.LA(1)<=249)||input.LA(1)==267||input.LA(1)==272||input.LA(1)==274||(input.LA(1) >=277 && input.LA(1)<=280)||(input.LA(1) >=282 && input.LA(1)<=283) ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set87)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","basicTypeX"," ",19);
        }
        return retval;
    }
    // $ANTLR end "basicTypeX"


    public static class reference_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:369:1: reference : Identifier -> ^( REF_IDENTIFIER Identifier ) ;
    public final dparserParser.reference_return reference()  {
        debug(trace_rules) writeln("Entering rule:","reference"," ",20);
        dparserParser.reference_return retval = new dparserParser.reference_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier88=null;

        Object Identifier88_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:370:3: ( Identifier -> ^( REF_IDENTIFIER Identifier ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:370:5: Identifier
            {
            Identifier88=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_reference2992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier88);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 370:16: -> ^( REF_IDENTIFIER Identifier )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:370:19: ^( REF_IDENTIFIER Identifier )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(REF_IDENTIFIER, "REF_IDENTIFIER")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","reference"," ",20);
        }
        return retval;
    }
    // $ANTLR end "reference"


    public static class refIdentifier_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "refIdentifier"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:373:1: refIdentifier : Identifier -> ^( REF_IDENTIFIER Identifier ) ;
    public final dparserParser.refIdentifier_return refIdentifier()  {
        debug(trace_rules) writeln("Entering rule:","refIdentifier"," ",21);
        dparserParser.refIdentifier_return retval = new dparserParser.refIdentifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier89=null;

        Object Identifier89_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:374:3: ( Identifier -> ^( REF_IDENTIFIER Identifier ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:374:5: Identifier
            {
            Identifier89=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_refIdentifier3015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier89);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 374:16: -> ^( REF_IDENTIFIER Identifier )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:374:19: ^( REF_IDENTIFIER Identifier )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(REF_IDENTIFIER, "REF_IDENTIFIER")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","refIdentifier"," ",21);
        }
        return retval;
    }
    // $ANTLR end "refIdentifier"


    public static class templateInstance_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateInstance"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:377:1: templateInstance : ( refIdentifier '!' templateSingleArgument -> ^( TEMPLATE_INSTANCE refIdentifier templateSingleArgument ) | refIdentifier '!' '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE refIdentifier templateArgumentList ) );
    public final dparserParser.templateInstance_return templateInstance()  {
        debug(trace_rules) writeln("Entering rule:","templateInstance"," ",22);
        dparserParser.templateInstance_return retval = new dparserParser.templateInstance_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal91=null;
        Token char_literal94=null;
        Token char_literal95=null;
        Token char_literal97=null;
        dparserParser.refIdentifier_return refIdentifier90 =null;

        dparserParser.templateSingleArgument_return templateSingleArgument92 =null;

        dparserParser.refIdentifier_return refIdentifier93 =null;

        dparserParser.templateArgumentList_return templateArgumentList96 =null;


        Object char_literal91_tree=null;
        Object char_literal94_tree=null;
        Object char_literal95_tree=null;
        Object char_literal97_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_refIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule refIdentifier");
        RewriteRuleSubtreeStream stream_templateSingleArgument=new RewriteRuleSubtreeStream(adaptor,"rule templateSingleArgument");
        RewriteRuleSubtreeStream stream_templateArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule templateArgumentList");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:378:3: ( refIdentifier '!' templateSingleArgument -> ^( TEMPLATE_INSTANCE refIdentifier templateSingleArgument ) | refIdentifier '!' '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE refIdentifier templateArgumentList ) )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Identifier) ) {
                int LA19_1 = input.LA(2);

                if ( (LA19_1==157) ) {
                    int LA19_2 = input.LA(3);

                    if ( (LA19_2==170) ) {
                        alt19=2;
                    }
                    else if ( (LA19_2==BooleanLiteral||LA19_2==CharacterLiteral||LA19_2==EXP_LITERAL_FILE||(LA19_2 >=44  && LA19_2<=45)||LA19_2==FloatLiteral||LA19_2==Identifier||LA19_2==IntegerLiteral||LA19_2==StringLiteral||(LA19_2 >=215  && LA19_2<=219)||(LA19_2 >=223  && LA19_2<=224)||LA19_2==229||LA19_2==235||(LA19_2 >=243  && LA19_2<=244)||(LA19_2 >=248  && LA19_2<=249)||LA19_2==267||LA19_2==272||LA19_2==274||(LA19_2 >=277  && LA19_2<=280)||(LA19_2 >=282  && LA19_2<=283)) ) {
                        alt19=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:378:5: refIdentifier '!' templateSingleArgument
                    {
                    pushFollow(FOLLOW_refIdentifier_in_templateInstance3038);
                    refIdentifier90=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier90.getTree());

                    char_literal91=cast(Token)match(input,157,FOLLOW_157_in_templateInstance3040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(cast(Object)char_literal91);


                    pushFollow(FOLLOW_templateSingleArgument_in_templateInstance3042);
                    templateSingleArgument92=templateSingleArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_templateSingleArgument.add(cast(Object)templateSingleArgument92.getTree());

                    // AST REWRITE
                    // elements: refIdentifier, templateSingleArgument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 379:7: -> ^( TEMPLATE_INSTANCE refIdentifier templateSingleArgument )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:379:10: ^( TEMPLATE_INSTANCE refIdentifier templateSingleArgument )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(TEMPLATE_INSTANCE, "TEMPLATE_INSTANCE")
                        , root_1);

                        adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_1, stream_templateSingleArgument.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:380:5: refIdentifier '!' '(' templateArgumentList ')'
                    {
                    pushFollow(FOLLOW_refIdentifier_in_templateInstance3064);
                    refIdentifier93=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier93.getTree());

                    char_literal94=cast(Token)match(input,157,FOLLOW_157_in_templateInstance3066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(cast(Object)char_literal94);


                    char_literal95=cast(Token)match(input,170,FOLLOW_170_in_templateInstance3068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal95);


                    pushFollow(FOLLOW_templateArgumentList_in_templateInstance3070);
                    templateArgumentList96=templateArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_templateArgumentList.add(cast(Object)templateArgumentList96.getTree());

                    char_literal97=cast(Token)match(input,171,FOLLOW_171_in_templateInstance3072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal97);


                    // AST REWRITE
                    // elements: templateArgumentList, refIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 381:7: -> ^( TEMPLATE_INSTANCE refIdentifier templateArgumentList )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:381:10: ^( TEMPLATE_INSTANCE refIdentifier templateArgumentList )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(TEMPLATE_INSTANCE, "TEMPLATE_INSTANCE")
                        , root_1);

                        adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_1, stream_templateArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateInstance"," ",22);
        }
        return retval;
    }
    // $ANTLR end "templateInstance"


    public static class templateSingleArgument_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateSingleArgument"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:384:1: templateSingleArgument : ( basicTypeX -> ^( REF_IDENTIFIER basicTypeX ) | refIdentifier | CharacterLiteral -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] ) | StringLiteral -> ^( EXP_LITERAL_STRING[$StringLiteral] ) | IntegerLiteral -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] ) | FloatLiteral -> ^( EXP_LITERAL_REAL[$FloatLiteral] ) | BooleanLiteral -> ^( EXP_LITERAL_BOOL[$BooleanLiteral] ) | EXP_LITERAL_NULL | EXP_LITERAL_FILE | EXP_LITERAL_LINE );
    public final dparserParser.templateSingleArgument_return templateSingleArgument()  {
        debug(trace_rules) writeln("Entering rule:","templateSingleArgument"," ",23);
        dparserParser.templateSingleArgument_return retval = new dparserParser.templateSingleArgument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CharacterLiteral100=null;
        Token StringLiteral101=null;
        Token IntegerLiteral102=null;
        Token FloatLiteral103=null;
        Token BooleanLiteral104=null;
        Token EXP_LITERAL_NULL105=null;
        Token EXP_LITERAL_FILE106=null;
        Token EXP_LITERAL_LINE107=null;
        dparserParser.basicTypeX_return basicTypeX98 =null;

        dparserParser.refIdentifier_return refIdentifier99 =null;


        Object CharacterLiteral100_tree=null;
        Object StringLiteral101_tree=null;
        Object IntegerLiteral102_tree=null;
        Object FloatLiteral103_tree=null;
        Object BooleanLiteral104_tree=null;
        Object EXP_LITERAL_NULL105_tree=null;
        Object EXP_LITERAL_FILE106_tree=null;
        Object EXP_LITERAL_LINE107_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_IntegerLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerLiteral");
        RewriteRuleTokenStream stream_FloatLiteral=new RewriteRuleTokenStream(adaptor,"token FloatLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleTokenStream stream_BooleanLiteral=new RewriteRuleTokenStream(adaptor,"token BooleanLiteral");
        RewriteRuleSubtreeStream stream_basicTypeX=new RewriteRuleSubtreeStream(adaptor,"rule basicTypeX");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:385:3: ( basicTypeX -> ^( REF_IDENTIFIER basicTypeX ) | refIdentifier | CharacterLiteral -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] ) | StringLiteral -> ^( EXP_LITERAL_STRING[$StringLiteral] ) | IntegerLiteral -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] ) | FloatLiteral -> ^( EXP_LITERAL_REAL[$FloatLiteral] ) | BooleanLiteral -> ^( EXP_LITERAL_BOOL[$BooleanLiteral] ) | EXP_LITERAL_NULL | EXP_LITERAL_FILE | EXP_LITERAL_LINE )
            int alt20=10;
            switch ( input.LA(1) ) {
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt20=1;
                }
                break;
            case Identifier:
                {
                alt20=2;
                }
                break;
            case CharacterLiteral:
                {
                alt20=3;
                }
                break;
            case StringLiteral:
                {
                alt20=4;
                }
                break;
            case IntegerLiteral:
                {
                alt20=5;
                }
                break;
            case FloatLiteral:
                {
                alt20=6;
                }
                break;
            case BooleanLiteral:
                {
                alt20=7;
                }
                break;
            case EXP_LITERAL_NULL:
                {
                alt20=8;
                }
                break;
            case EXP_LITERAL_FILE:
                {
                alt20=9;
                }
                break;
            case EXP_LITERAL_LINE:
                {
                alt20=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:385:5: basicTypeX
                    {
                    pushFollow(FOLLOW_basicTypeX_in_templateSingleArgument3103);
                    basicTypeX98=basicTypeX();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_basicTypeX.add(cast(Object)basicTypeX98.getTree());

                    // AST REWRITE
                    // elements: basicTypeX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 385:16: -> ^( REF_IDENTIFIER basicTypeX )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:385:19: ^( REF_IDENTIFIER basicTypeX )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_IDENTIFIER, "REF_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_basicTypeX.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:386:5: refIdentifier
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_refIdentifier_in_templateSingleArgument3117);
                    refIdentifier99=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, refIdentifier99.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:387:5: CharacterLiteral
                    {
                    CharacterLiteral100=cast(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_templateSingleArgument3123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(cast(Object)CharacterLiteral100);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 387:22: -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:387:25: ^( EXP_LITERAL_CHAR[$CharacterLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_CHAR, CharacterLiteral100)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:388:5: StringLiteral
                    {
                    StringLiteral101=cast(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_templateSingleArgument3136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(cast(Object)StringLiteral101);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 388:19: -> ^( EXP_LITERAL_STRING[$StringLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:388:22: ^( EXP_LITERAL_STRING[$StringLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_STRING, StringLiteral101)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:389:5: IntegerLiteral
                    {
                    IntegerLiteral102=cast(Token)match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_templateSingleArgument3149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IntegerLiteral.add(cast(Object)IntegerLiteral102);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 389:20: -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:389:23: ^( EXP_LITERAL_INTEGER[$IntegerLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_INTEGER, IntegerLiteral102)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:390:5: FloatLiteral
                    {
                    FloatLiteral103=cast(Token)match(input,FloatLiteral,FOLLOW_FloatLiteral_in_templateSingleArgument3162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatLiteral.add(cast(Object)FloatLiteral103);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 390:18: -> ^( EXP_LITERAL_REAL[$FloatLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:390:21: ^( EXP_LITERAL_REAL[$FloatLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_REAL, FloatLiteral103)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:391:5: BooleanLiteral
                    {
                    BooleanLiteral104=cast(Token)match(input,BooleanLiteral,FOLLOW_BooleanLiteral_in_templateSingleArgument3175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BooleanLiteral.add(cast(Object)BooleanLiteral104);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 391:20: -> ^( EXP_LITERAL_BOOL[$BooleanLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:391:23: ^( EXP_LITERAL_BOOL[$BooleanLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_BOOL, BooleanLiteral104)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:392:5: EXP_LITERAL_NULL
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_NULL105=cast(Token)match(input,EXP_LITERAL_NULL,FOLLOW_EXP_LITERAL_NULL_in_templateSingleArgument3188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_NULL105_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_NULL105)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_NULL105_tree);
                    }

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:393:5: EXP_LITERAL_FILE
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_FILE106=cast(Token)match(input,EXP_LITERAL_FILE,FOLLOW_EXP_LITERAL_FILE_in_templateSingleArgument3194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_FILE106_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_FILE106)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_FILE106_tree);
                    }

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:394:5: EXP_LITERAL_LINE
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_LINE107=cast(Token)match(input,EXP_LITERAL_LINE,FOLLOW_EXP_LITERAL_LINE_in_templateSingleArgument3200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_LINE107_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_LINE107)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_LINE107_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateSingleArgument"," ",23);
        }
        return retval;
    }
    // $ANTLR end "templateSingleArgument"


    public static class templateArgumentList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateArgumentList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:397:1: templateArgumentList : templateArgument ( ',' templateArgument )* -> ^( AST_NEONODE_ARRAYVIEW ( templateArgument )* ) ;
    public final dparserParser.templateArgumentList_return templateArgumentList()  {
        debug(trace_rules) writeln("Entering rule:","templateArgumentList"," ",24);
        dparserParser.templateArgumentList_return retval = new dparserParser.templateArgumentList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal109=null;
        dparserParser.templateArgument_return templateArgument108 =null;

        dparserParser.templateArgument_return templateArgument110 =null;


        Object char_literal109_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_templateArgument=new RewriteRuleSubtreeStream(adaptor,"rule templateArgument");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:3: ( templateArgument ( ',' templateArgument )* -> ^( AST_NEONODE_ARRAYVIEW ( templateArgument )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:5: templateArgument ( ',' templateArgument )*
            {
            pushFollow(FOLLOW_templateArgument_in_templateArgumentList3215);
            templateArgument108=templateArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_templateArgument.add(cast(Object)templateArgument108.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:22: ( ',' templateArgument )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==177) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:23: ',' templateArgument
            	    {
            	    char_literal109=cast(Token)match(input,177,FOLLOW_177_in_templateArgumentList3218); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal109);


            	    pushFollow(FOLLOW_templateArgument_in_templateArgumentList3220);
            	    templateArgument110=templateArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_templateArgument.add(cast(Object)templateArgument110.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            // AST REWRITE
            // elements: templateArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 398:46: -> ^( AST_NEONODE_ARRAYVIEW ( templateArgument )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:49: ^( AST_NEONODE_ARRAYVIEW ( templateArgument )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(AST_NEONODE_ARRAYVIEW, "AST_NEONODE_ARRAYVIEW")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:398:73: ( templateArgument )*
                while ( stream_templateArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_templateArgument.nextTree());

                }
                stream_templateArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateArgumentList"," ",24);
        }
        return retval;
    }
    // $ANTLR end "templateArgumentList"


    public static class templateArgument_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateArgument"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:401:1: templateArgument : ( ( type )=> ( type ) | assignExpression );
    public final dparserParser.templateArgument_return templateArgument()  {
        debug(trace_rules) writeln("Entering rule:","templateArgument"," ",25);
        dparserParser.templateArgument_return retval = new dparserParser.templateArgument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.type_return type111 =null;

        dparserParser.assignExpression_return assignExpression112 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:3: ( ( type )=> ( type ) | assignExpression )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( ((LA22_0 >=215  && LA22_0<=219)||(LA22_0 >=223  && LA22_0<=224)||LA22_0==229||LA22_0==235||(LA22_0 >=243  && LA22_0<=244)||(LA22_0 >=248  && LA22_0<=249)||LA22_0==267||LA22_0==272||LA22_0==274||(LA22_0 >=277  && LA22_0<=280)||(LA22_0 >=282  && LA22_0<=283)) && (synpred2_dparser())) {
                alt22=1;
            }
            else if ( (LA22_0==181) ) {
                int LA22_2 = input.LA(2);

                if ( (LA22_2==Identifier) ) {
                    int LA22_5 = input.LA(3);

                    if ( (synpred2_dparser()) ) {
                        alt22=1;
                    }
                    else if ( (true) ) {
                        alt22=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 22, 5, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA22_0==Identifier) ) {
                int LA22_3 = input.LA(2);

                if ( (synpred2_dparser()) ) {
                    alt22=1;
                }
                else if ( (true) ) {
                    alt22=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA22_0==CharacterLiteral||LA22_0==EXP_ASSERT||LA22_0==EXP_CAST||(LA22_0 >=34  && LA22_0<=35)||LA22_0==EXP_IS||LA22_0==EXP_LITERAL_FILE||(LA22_0 >=44  && LA22_0<=45)||(LA22_0 >=48  && LA22_0<=49)||(LA22_0 >=52  && LA22_0<=56)||LA22_0==FloatLiteral||LA22_0==IntegerLiteral||LA22_0==StringLiteral||LA22_0==157||LA22_0==168||LA22_0==170||LA22_0==172||(LA22_0 >=174  && LA22_0<=175)||LA22_0==178||LA22_0==195||LA22_0==203||LA22_0==226||LA22_0==237||LA22_0==246||LA22_0==268||LA22_0==271||LA22_0==289) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:5: ( type )=> ( type )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:14: ( type )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:15: type
                    {
                    pushFollow(FOLLOW_type_in_templateArgument3255);
                    type111=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type111.getTree());

                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:404:5: assignExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_assignExpression_in_templateArgument3262);
                    assignExpression112=assignExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression112.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateArgument"," ",25);
        }
        return retval;
    }
    // $ANTLR end "templateArgument"


    public static class identifierList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifierList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:409:1: identifierList : ( ( Identifier '!' )=> ( templateInstance -> templateInstance ) | ( refIdentifier -> refIdentifier ) ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )* ) ;
    public final dparserParser.identifierList_return identifierList()  {
        debug(trace_rules) writeln("Entering rule:","identifierList"," ",26);
        dparserParser.identifierList_return retval = new dparserParser.identifierList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal115=null;
        dparserParser.templateInstance_return templateInstance113 =null;

        dparserParser.refIdentifier_return refIdentifier114 =null;

        dparserParser.templateInstance_return templateInstance116 =null;

        dparserParser.refIdentifier_return refIdentifier117 =null;


        Object char_literal115_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_templateInstance=new RewriteRuleSubtreeStream(adaptor,"rule templateInstance");
        RewriteRuleSubtreeStream stream_refIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule refIdentifier");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:3: ( ( ( Identifier '!' )=> ( templateInstance -> templateInstance ) | ( refIdentifier -> refIdentifier ) ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:5: ( ( Identifier '!' )=> ( templateInstance -> templateInstance ) | ( refIdentifier -> refIdentifier ) ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )* )
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:5: ( ( Identifier '!' )=> ( templateInstance -> templateInstance ) | ( refIdentifier -> refIdentifier ) ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )* )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==Identifier) ) {
                int LA25_1 = input.LA(2);

                if ( (synpred3_dparser()) ) {
                    alt25=1;
                }
                else if ( (true) ) {
                    alt25=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 25, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:7: ( Identifier '!' )=> ( templateInstance -> templateInstance )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:26: ( templateInstance -> templateInstance )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:27: templateInstance
                   {
                   pushFollow(FOLLOW_templateInstance_in_identifierList3293);
                   templateInstance113=templateInstance();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_templateInstance.add(cast(Object)templateInstance113.getTree());

                   // AST REWRITE
                   // elements: templateInstance
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 410:44: -> templateInstance
                   {
                       adaptor.addChild(root_0, stream_templateInstance.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:411:7: ( refIdentifier -> refIdentifier ) ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )*
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:411:7: ( refIdentifier -> refIdentifier )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:411:8: refIdentifier
                   {
                   pushFollow(FOLLOW_refIdentifier_in_identifierList3307);
                   refIdentifier114=refIdentifier();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier114.getTree());

                   // AST REWRITE
                   // elements: refIdentifier
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 411:22: -> refIdentifier
                   {
                       adaptor.addChild(root_0, stream_refIdentifier.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:412:6: ( options {greedy=true; } : '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) ) )*
                   loop24:
                   do {
                       int alt24=2;
                       int LA24_0 = input.LA(1);

                       if ( (LA24_0==181) ) {
                           int LA24_2 = input.LA(2);

                           if ( (LA24_2==Identifier) ) {
                               alt24=1;
                           }


                       }


                       switch (alt24) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:412:37: '.' ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) )
                   	    {
                   	    char_literal115=cast(Token)match(input,181,FOLLOW_181_in_identifierList3334); if (state.failed) return retval; 
                   	    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal115);


                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:8: ( ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) ) | refIdentifier -> ^( REF_QUALIFIED $identifierList refIdentifier ) )
                   	    int alt23=2;
                   	    int LA23_0 = input.LA(1);

                   	    if ( (LA23_0==Identifier) ) {
                   	        int LA23_1 = input.LA(2);

                   	        if ( (synpred4_dparser()) ) {
                   	            alt23=1;
                   	        }
                   	        else if ( (true) ) {
                   	            alt23=2;
                   	        }
                   	        else {
                   	            if (state.backtracking>0) {state.failed=true; return retval;}
                   	            NoViableAltException nvae =
                   	                new NoViableAltException("", 23, 1, input);

                   	            throw nvae;

                   	        }
                   	    }
                   	    else {
                   	        if (state.backtracking>0) {state.failed=true; return retval;}
                   	        NoViableAltException nvae =
                   	            new NoViableAltException("", 23, 0, input);

                   	        throw nvae;

                   	    }
                   	    switch (alt23) {
                   	       case 1 :
                   	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:10: ( Identifier '!' )=> ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) )
                   	           {
                   	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:29: ( templateInstance -> ^( REF_QUALIFIED $identifierList templateInstance ) )
                   	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:30: templateInstance
                   	           {
                   	           pushFollow(FOLLOW_templateInstance_in_identifierList3353);
                   	           templateInstance116=templateInstance();

                   	           state._fsp--;
                   	           if (state.failed) return retval;
                   	           if ( state.backtracking==0 ) stream_templateInstance.add(cast(Object)templateInstance116.getTree());

                   	           // AST REWRITE
                   	           // elements: identifierList, templateInstance
                   	           // token labels: 
                   	           // rule labels: retval
                   	           // token list labels: 
                   	           // rule list labels: 
                   	           // wildcard labels: 
                   	           if ( state.backtracking==0 ) {

                   	           retval.tree = root_0;
                   	           RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   	           root_0 = cast(Object)adaptor.nil();
                   	           // 413:47: -> ^( REF_QUALIFIED $identifierList templateInstance )
                   	           {
                   	               // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:50: ^( REF_QUALIFIED $identifierList templateInstance )
                   	               {
                   	               Object root_1 = cast(Object)adaptor.nil();
                   	               root_1 = cast(Object)adaptor.becomeRoot(
                   	               cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                   	               , root_1);

                   	               adaptor.addChild(root_1, stream_retval.nextTree());

                   	               adaptor.addChild(root_1, stream_templateInstance.nextTree());

                   	               adaptor.addChild(root_0, root_1);
                   	               }

                   	           }


                   	           retval.tree = root_0;
                   	           }

                   	           }


                   	           }
                   	           break;
                   	       case 2 :
                   	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:414:9: refIdentifier
                   	           {
                   	           pushFollow(FOLLOW_refIdentifier_in_identifierList3375);
                   	           refIdentifier117=refIdentifier();

                   	           state._fsp--;
                   	           if (state.failed) return retval;
                   	           if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier117.getTree());

                   	           // AST REWRITE
                   	           // elements: refIdentifier, identifierList
                   	           // token labels: 
                   	           // rule labels: retval
                   	           // token list labels: 
                   	           // rule list labels: 
                   	           // wildcard labels: 
                   	           if ( state.backtracking==0 ) {

                   	           retval.tree = root_0;
                   	           RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   	           root_0 = cast(Object)adaptor.nil();
                   	           // 414:23: -> ^( REF_QUALIFIED $identifierList refIdentifier )
                   	           {
                   	               // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:414:26: ^( REF_QUALIFIED $identifierList refIdentifier )
                   	               {
                   	               Object root_1 = cast(Object)adaptor.nil();
                   	               root_1 = cast(Object)adaptor.becomeRoot(
                   	               cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                   	               , root_1);

                   	               adaptor.addChild(root_1, stream_retval.nextTree());

                   	               adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                   	               adaptor.addChild(root_0, root_1);
                   	               }

                   	           }


                   	           retval.tree = root_0;
                   	           }

                   	           }
                   	           break;

                   	        default:
                   	    }


                   	    }
                   	    break;

                   	default :
                   	    break loop24;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","identifierList"," ",26);
        }
        return retval;
    }
    // $ANTLR end "identifierList"


    public static class type_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:420:1: type : ( basicType -> basicType ) ( options {greedy=true; } : '*' -> ^( TYPE_POINTER $type) | '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']' )? ;
    public final dparserParser.type_return type()  {
        debug(trace_rules) writeln("Entering rule:","type"," ",27);
        dparserParser.type_return retval = new dparserParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal119=null;
        Token char_literal120=null;
        Token string_literal122=null;
        Token char_literal124=null;
        dparserParser.basicType_return basicType118 =null;

        dparserParser.assignExpression_return assignExpression121 =null;

        dparserParser.assignExpression_return assignExpression123 =null;


        Object char_literal119_tree=null;
        Object char_literal120_tree=null;
        Object string_literal122_tree=null;
        Object char_literal124_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_Range=new RewriteRuleTokenStream(adaptor,"token Range");
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_basicType=new RewriteRuleSubtreeStream(adaptor,"rule basicType");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:421:3: ( ( basicType -> basicType ) ( options {greedy=true; } : '*' -> ^( TYPE_POINTER $type) | '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:421:5: ( basicType -> basicType ) ( options {greedy=true; } : '*' -> ^( TYPE_POINTER $type) | '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']' )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:421:5: ( basicType -> basicType )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:421:7: basicType
            {
            pushFollow(FOLLOW_basicType_in_type3422);
            basicType118=basicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_basicType.add(cast(Object)basicType118.getTree());

            // AST REWRITE
            // elements: basicType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 421:17: -> basicType
            {
                adaptor.addChild(root_0, stream_basicType.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:423:4: ( options {greedy=true; } : '*' -> ^( TYPE_POINTER $type) | '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']' )?
            int alt28=3;
            alt28 = dfa28.predict(input);
            switch (alt28) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:424:6: '*'
                   {
                   char_literal119=cast(Token)match(input,172,FOLLOW_172_in_type3452); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_172.add(cast(Object)char_literal119);


                   // AST REWRITE
                   // elements: type
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 424:10: -> ^( TYPE_POINTER $type)
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:424:13: ^( TYPE_POINTER $type)
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(TYPE_POINTER, "TYPE_POINTER")
                       , root_1);

                       adaptor.addChild(root_1, stream_retval.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:425:6: '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']'
                   {
                   char_literal120=cast(Token)match(input,204,FOLLOW_204_in_type3468); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_204.add(cast(Object)char_literal120);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:425:10: ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) )
                   int alt27=2;
                   int LA27_0 = input.LA(1);

                   if ( (LA27_0==205) ) {
                       alt27=1;
                   }
                   else if ( (LA27_0==CharacterLiteral||LA27_0==EXP_ASSERT||LA27_0==EXP_CAST||(LA27_0 >=34  && LA27_0<=35)||LA27_0==EXP_IS||LA27_0==EXP_LITERAL_FILE||(LA27_0 >=44  && LA27_0<=45)||(LA27_0 >=48  && LA27_0<=49)||(LA27_0 >=52  && LA27_0<=56)||LA27_0==FloatLiteral||LA27_0==Identifier||LA27_0==IntegerLiteral||LA27_0==StringLiteral||LA27_0==157||LA27_0==168||LA27_0==170||LA27_0==172||(LA27_0 >=174  && LA27_0<=175)||LA27_0==178||LA27_0==181||LA27_0==195||LA27_0==203||LA27_0==226||LA27_0==237||LA27_0==246||LA27_0==268||LA27_0==271||LA27_0==289) ) {
                       alt27=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 27, 0, input);

                       throw nvae;

                   }
                   switch (alt27) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:425:13: 
                          {
                          // AST REWRITE
                          // elements: type
                          // token labels: 
                          // rule labels: retval
                          // token list labels: 
                          // rule list labels: 
                          // wildcard labels: 
                          if ( state.backtracking==0 ) {

                          retval.tree = root_0;
                          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                          root_0 = cast(Object)adaptor.nil();
                          // 425:13: -> ^( TYPE_DYN_ARRAY $type)
                          {
                              // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:425:16: ^( TYPE_DYN_ARRAY $type)
                              {
                              Object root_1 = cast(Object)adaptor.nil();
                              root_1 = cast(Object)adaptor.becomeRoot(
                              cast(Object)adaptor.create(TYPE_DYN_ARRAY, "TYPE_DYN_ARRAY")
                              , root_1);

                              adaptor.addChild(root_1, stream_retval.nextTree());

                              adaptor.addChild(root_0, root_1);
                              }

                          }


                          retval.tree = root_0;
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:426:13: assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) )
                          {
                          pushFollow(FOLLOW_assignExpression_in_type3494);
                          assignExpression121=assignExpression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression121.getTree());

                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:427:13: ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) )
                          int alt26=2;
                          int LA26_0 = input.LA(1);

                          if ( (LA26_0==205) ) {
                              alt26=1;
                          }
                          else if ( (LA26_0==Range) ) {
                              alt26=2;
                          }
                          else {
                              if (state.backtracking>0) {state.failed=true; return retval;}
                              NoViableAltException nvae =
                                  new NoViableAltException("", 26, 0, input);

                              throw nvae;

                          }
                          switch (alt26) {
                             case 1 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:427:15: 
                                 {
                                 // AST REWRITE
                                 // elements: assignExpression, type
                                 // token labels: 
                                 // rule labels: retval
                                 // token list labels: 
                                 // rule list labels: 
                                 // wildcard labels: 
                                 if ( state.backtracking==0 ) {

                                 retval.tree = root_0;
                                 RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                                 root_0 = cast(Object)adaptor.nil();
                                 // 427:15: -> ^( TYPE_STATIC_ARRAY assignExpression $type)
                                 {
                                     // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:427:18: ^( TYPE_STATIC_ARRAY assignExpression $type)
                                     {
                                     Object root_1 = cast(Object)adaptor.nil();
                                     root_1 = cast(Object)adaptor.becomeRoot(
                                     cast(Object)adaptor.create(TYPE_STATIC_ARRAY, "TYPE_STATIC_ARRAY")
                                     , root_1);

                                     adaptor.addChild(root_1, stream_assignExpression.nextTree());

                                     adaptor.addChild(root_1, stream_retval.nextTree());

                                     adaptor.addChild(root_0, root_1);
                                     }

                                 }


                                 retval.tree = root_0;
                                 }

                                 }
                                 break;
                             case 2 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:428:15: '..' assignExpression
                                 {
                                 string_literal122=cast(Token)match(input,Range,FOLLOW_Range_in_type3535); if (state.failed) return retval; 
                                 if ( state.backtracking==0 ) stream_Range.add(cast(Object)string_literal122);


                                 pushFollow(FOLLOW_assignExpression_in_type3537);
                                 assignExpression123=assignExpression();

                                 state._fsp--;
                                 if (state.failed) return retval;
                                 if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression123.getTree());

                                 // AST REWRITE
                                 // elements: assignExpression, type, assignExpression
                                 // token labels: 
                                 // rule labels: retval
                                 // token list labels: 
                                 // rule list labels: 
                                 // wildcard labels: 
                                 if ( state.backtracking==0 ) {

                                 retval.tree = root_0;
                                 RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                                 root_0 = cast(Object)adaptor.nil();
                                 // 428:37: -> ^( REF_TYPE_SLICE assignExpression assignExpression $type)
                                 {
                                     // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:428:40: ^( REF_TYPE_SLICE assignExpression assignExpression $type)
                                     {
                                     Object root_1 = cast(Object)adaptor.nil();
                                     root_1 = cast(Object)adaptor.becomeRoot(
                                     cast(Object)adaptor.create(REF_TYPE_SLICE, "REF_TYPE_SLICE")
                                     , root_1);

                                     adaptor.addChild(root_1, stream_assignExpression.nextTree());

                                     adaptor.addChild(root_1, stream_assignExpression.nextTree());

                                     adaptor.addChild(root_1, stream_retval.nextTree());

                                     adaptor.addChild(root_0, root_1);
                                     }

                                 }


                                 retval.tree = root_0;
                                 }

                                 }
                                 break;

                              default:
                          }


                          }
                          break;

                       default:
                   }


                   char_literal124=cast(Token)match(input,205,FOLLOW_205_in_type3584); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_205.add(cast(Object)char_literal124);


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type"," ",27);
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class property_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:435:1: property : '@' PropertyIdentifier -> PropertyIdentifier ;
    public final dparserParser.property_return property()  {
        debug(trace_rules) writeln("Entering rule:","property"," ",28);
        dparserParser.property_return retval = new dparserParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal125=null;
        Token PropertyIdentifier126=null;

        Object char_literal125_tree=null;
        Object PropertyIdentifier126_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_PropertyIdentifier=new RewriteRuleTokenStream(adaptor,"token PropertyIdentifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:436:3: ( '@' PropertyIdentifier -> PropertyIdentifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:436:5: '@' PropertyIdentifier
            {
            char_literal125=cast(Token)match(input,203,FOLLOW_203_in_property3605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(cast(Object)char_literal125);


            PropertyIdentifier126=cast(Token)match(input,PropertyIdentifier,FOLLOW_PropertyIdentifier_in_property3607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PropertyIdentifier.add(cast(Object)PropertyIdentifier126);


            // AST REWRITE
            // elements: PropertyIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 436:28: -> PropertyIdentifier
            {
                adaptor.addChild(root_0, 
                stream_PropertyIdentifier.nextNode()
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","property"," ",28);
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class parameters_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameters"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:439:1: parameters : '(' ! parameterList ')' !;
    public final dparserParser.parameters_return parameters()  {
        debug(trace_rules) writeln("Entering rule:","parameters"," ",29);
        dparserParser.parameters_return retval = new dparserParser.parameters_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal127=null;
        Token char_literal129=null;
        dparserParser.parameterList_return parameterList128 =null;


        Object char_literal127_tree=null;
        Object char_literal129_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:440:3: ( '(' ! parameterList ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:440:5: '(' ! parameterList ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal127=cast(Token)match(input,170,FOLLOW_170_in_parameters3626); if (state.failed) return retval;

            pushFollow(FOLLOW_parameterList_in_parameters3629);
            parameterList128=parameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterList128.getTree());

            char_literal129=cast(Token)match(input,171,FOLLOW_171_in_parameters3631); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameters"," ",29);
        }
        return retval;
    }
    // $ANTLR end "parameters"


    public static class parameterList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameterList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:443:1: parameterList : ( parameter ( ',' parameter )* )? -> ^( PARAMETER_LIST ( parameter )* ) ;
    public final dparserParser.parameterList_return parameterList()  {
        debug(trace_rules) writeln("Entering rule:","parameterList"," ",30);
        dparserParser.parameterList_return retval = new dparserParser.parameterList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal131=null;
        dparserParser.parameter_return parameter130 =null;

        dparserParser.parameter_return parameter132 =null;


        Object char_literal131_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:3: ( ( parameter ( ',' parameter )* )? -> ^( PARAMETER_LIST ( parameter )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:5: ( parameter ( ',' parameter )* )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:5: ( parameter ( ',' parameter )* )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==Identifier||LA30_0==ParameterAttribute||LA30_0==181||(LA30_0 >=215  && LA30_0<=219)||(LA30_0 >=223  && LA30_0<=224)||LA30_0==229||LA30_0==235||(LA30_0 >=243  && LA30_0<=244)||(LA30_0 >=248  && LA30_0<=249)||LA30_0==267||LA30_0==272||LA30_0==274||(LA30_0 >=277  && LA30_0<=280)||(LA30_0 >=282  && LA30_0<=283)) ) {
                alt30=1;
            }
            switch (alt30) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:7: parameter ( ',' parameter )*
                   {
                   pushFollow(FOLLOW_parameter_in_parameterList3651);
                   parameter130=parameter();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_parameter.add(cast(Object)parameter130.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:17: ( ',' parameter )*
                   loop29:
                   do {
                       int alt29=2;
                       int LA29_0 = input.LA(1);

                       if ( (LA29_0==177) ) {
                           alt29=1;
                       }


                       switch (alt29) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:18: ',' parameter
                   	    {
                   	    char_literal131=cast(Token)match(input,177,FOLLOW_177_in_parameterList3654); if (state.failed) return retval; 
                   	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal131);


                   	    pushFollow(FOLLOW_parameter_in_parameterList3656);
                   	    parameter132=parameter();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_parameter.add(cast(Object)parameter132.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop29;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 444:37: -> ^( PARAMETER_LIST ( parameter )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:40: ^( PARAMETER_LIST ( parameter )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(PARAMETER_LIST, "PARAMETER_LIST")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:444:57: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameterList"," ",30);
        }
        return retval;
    }
    // $ANTLR end "parameterList"


    public static class parameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:447:1: parameter : ( ParameterAttribute )* type defSymbol ( defaultInitializerExpression )? -> ^( FUNC_PARAM type defSymbol ( ParameterAttribute )* ( defaultInitializerExpression )? ) ;
    public final dparserParser.parameter_return parameter()  {
        debug(trace_rules) writeln("Entering rule:","parameter"," ",31);
        dparserParser.parameter_return retval = new dparserParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ParameterAttribute133=null;
        dparserParser.type_return type134 =null;

        dparserParser.defSymbol_return defSymbol135 =null;

        dparserParser.defaultInitializerExpression_return defaultInitializerExpression136 =null;


        Object ParameterAttribute133_tree=null;
        RewriteRuleTokenStream stream_ParameterAttribute=new RewriteRuleTokenStream(adaptor,"token ParameterAttribute");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        RewriteRuleSubtreeStream stream_defaultInitializerExpression=new RewriteRuleSubtreeStream(adaptor,"rule defaultInitializerExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:3: ( ( ParameterAttribute )* type defSymbol ( defaultInitializerExpression )? -> ^( FUNC_PARAM type defSymbol ( ParameterAttribute )* ( defaultInitializerExpression )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:5: ( ParameterAttribute )* type defSymbol ( defaultInitializerExpression )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:5: ( ParameterAttribute )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ParameterAttribute) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:5: ParameterAttribute
            	    {
            	    ParameterAttribute133=cast(Token)match(input,ParameterAttribute,FOLLOW_ParameterAttribute_in_parameter3685); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ParameterAttribute.add(cast(Object)ParameterAttribute133);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_type_in_parameter3688);
            type134=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(cast(Object)type134.getTree());

            pushFollow(FOLLOW_defSymbol_in_parameter3690);
            defSymbol135=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol135.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:40: ( defaultInitializerExpression )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==CharacterLiteral||LA32_0==EXP_ASSERT||LA32_0==EXP_DOLLAR||LA32_0==EXP_IS||LA32_0==EXP_LITERAL_FILE||(LA32_0 >=44  && LA32_0<=45)||LA32_0==EXP_MIXIN||(LA32_0 >=52  && LA32_0<=56)||LA32_0==FloatLiteral||LA32_0==Identifier||LA32_0==IntegerLiteral||LA32_0==StringLiteral||LA32_0==170||LA32_0==181||LA32_0==195||LA32_0==203||LA32_0==226||LA32_0==237||LA32_0==246||LA32_0==268||LA32_0==271) ) {
                alt32=1;
            }
            switch (alt32) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:448:40: defaultInitializerExpression
                   {
                   pushFollow(FOLLOW_defaultInitializerExpression_in_parameter3692);
                   defaultInitializerExpression136=defaultInitializerExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_defaultInitializerExpression.add(cast(Object)defaultInitializerExpression136.getTree());

                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: defSymbol, ParameterAttribute, type, defaultInitializerExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 449:7: -> ^( FUNC_PARAM type defSymbol ( ParameterAttribute )* ( defaultInitializerExpression )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:449:10: ^( FUNC_PARAM type defSymbol ( ParameterAttribute )* ( defaultInitializerExpression )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(FUNC_PARAM, "FUNC_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:449:38: ( ParameterAttribute )*
                while ( stream_ParameterAttribute.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ParameterAttribute.nextNode()
                    );

                }
                stream_ParameterAttribute.reset();

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:449:58: ( defaultInitializerExpression )?
                if ( stream_defaultInitializerExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_defaultInitializerExpression.nextTree());

                }
                stream_defaultInitializerExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameter"," ",31);
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class functionBody_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionBody"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:452:1: functionBody : blockStatement ;
    public final dparserParser.functionBody_return functionBody()  {
        debug(trace_rules) writeln("Entering rule:","functionBody"," ",32);
        dparserParser.functionBody_return retval = new dparserParser.functionBody_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.blockStatement_return blockStatement137 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:453:3: ( blockStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:453:5: blockStatement
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_blockStatement_in_functionBody3730);
            blockStatement137=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement137.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","functionBody"," ",32);
        }
        return retval;
    }
    // $ANTLR end "functionBody"


    public static class defaultInitializerExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultInitializerExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:456:1: defaultInitializerExpression : primaryExpression ;
    public final dparserParser.defaultInitializerExpression_return defaultInitializerExpression()  {
        debug(trace_rules) writeln("Entering rule:","defaultInitializerExpression"," ",33);
        dparserParser.defaultInitializerExpression_return retval = new dparserParser.defaultInitializerExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.primaryExpression_return primaryExpression138 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:457:3: ( primaryExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:457:5: primaryExpression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_primaryExpression_in_defaultInitializerExpression3745);
            primaryExpression138=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression138.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","defaultInitializerExpression"," ",33);
        }
        return retval;
    }
    // $ANTLR end "defaultInitializerExpression"


    public static class importDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:463:1: importDeclaration : ( 'static' )? 'import' importFragment ( ',' importFragment )* ';' -> ^( DECL_IMPORT ( importFragment )* ( 'static' )? ) ;
    public final dparserParser.importDeclaration_return importDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","importDeclaration"," ",34);
        dparserParser.importDeclaration_return retval = new dparserParser.importDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal139=null;
        Token string_literal140=null;
        Token char_literal142=null;
        Token char_literal144=null;
        dparserParser.importFragment_return importFragment141 =null;

        dparserParser.importFragment_return importFragment143 =null;


        Object string_literal139_tree=null;
        Object string_literal140_tree=null;
        Object char_literal142_tree=null;
        Object char_literal144_tree=null;
        RewriteRuleTokenStream stream_275=new RewriteRuleTokenStream(adaptor,"token 275");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_246=new RewriteRuleTokenStream(adaptor,"token 246");
        RewriteRuleSubtreeStream stream_importFragment=new RewriteRuleSubtreeStream(adaptor,"rule importFragment");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:3: ( ( 'static' )? 'import' importFragment ( ',' importFragment )* ';' -> ^( DECL_IMPORT ( importFragment )* ( 'static' )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:5: ( 'static' )? 'import' importFragment ( ',' importFragment )* ';'
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:5: ( 'static' )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==275) ) {
                alt33=1;
            }
            switch (alt33) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:5: 'static'
                   {
                   string_literal139=cast(Token)match(input,275,FOLLOW_275_in_importDeclaration3764); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_275.add(cast(Object)string_literal139);


                   }
                   break;

                default:
            }


            string_literal140=cast(Token)match(input,246,FOLLOW_246_in_importDeclaration3767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_246.add(cast(Object)string_literal140);


            pushFollow(FOLLOW_importFragment_in_importDeclaration3769);
            importFragment141=importFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importFragment.add(cast(Object)importFragment141.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:39: ( ',' importFragment )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==177) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:40: ',' importFragment
            	    {
            	    char_literal142=cast(Token)match(input,177,FOLLOW_177_in_importDeclaration3772); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal142);


            	    pushFollow(FOLLOW_importFragment_in_importDeclaration3774);
            	    importFragment143=importFragment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importFragment.add(cast(Object)importFragment143.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            char_literal144=cast(Token)match(input,186,FOLLOW_186_in_importDeclaration3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal144);


            // AST REWRITE
            // elements: 275, importFragment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 464:65: -> ^( DECL_IMPORT ( importFragment )* ( 'static' )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:68: ^( DECL_IMPORT ( importFragment )* ( 'static' )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DECL_IMPORT, "DECL_IMPORT")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:82: ( importFragment )*
                while ( stream_importFragment.hasNext() ) {
                    adaptor.addChild(root_1, stream_importFragment.nextTree());

                }
                stream_importFragment.reset();

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:464:98: ( 'static' )?
                if ( stream_275.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_275.nextNode()
                    );

                }
                stream_275.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","importDeclaration"," ",34);
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"


    public static class importFragment_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFragment"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:467:1: importFragment : ( importEntry -> importEntry | importEntry ':' Identifier -> ^( IMPORT_BINDING importEntry Identifier ) );
    public final dparserParser.importFragment_return importFragment()  {
        debug(trace_rules) writeln("Entering rule:","importFragment"," ",35);
        dparserParser.importFragment_return retval = new dparserParser.importFragment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal147=null;
        Token Identifier148=null;
        dparserParser.importEntry_return importEntry145 =null;

        dparserParser.importEntry_return importEntry146 =null;


        Object char_literal147_tree=null;
        Object Identifier148_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_importEntry=new RewriteRuleSubtreeStream(adaptor,"rule importEntry");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:468:3: ( importEntry -> importEntry | importEntry ':' Identifier -> ^( IMPORT_BINDING importEntry Identifier ) )
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:468:5: importEntry
                    {
                    pushFollow(FOLLOW_importEntry_in_importFragment3806);
                    importEntry145=importEntry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importEntry.add(cast(Object)importEntry145.getTree());

                    // AST REWRITE
                    // elements: importEntry
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 468:17: -> importEntry
                    {
                        adaptor.addChild(root_0, stream_importEntry.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:469:5: importEntry ':' Identifier
                    {
                    pushFollow(FOLLOW_importEntry_in_importFragment3816);
                    importEntry146=importEntry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importEntry.add(cast(Object)importEntry146.getTree());

                    char_literal147=cast(Token)match(input,185,FOLLOW_185_in_importFragment3818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal147);


                    Identifier148=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_importFragment3820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier148);


                    // AST REWRITE
                    // elements: Identifier, importEntry
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 469:32: -> ^( IMPORT_BINDING importEntry Identifier )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:469:35: ^( IMPORT_BINDING importEntry Identifier )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(IMPORT_BINDING, "IMPORT_BINDING")
                        , root_1);

                        adaptor.addChild(root_1, stream_importEntry.nextTree());

                        adaptor.addChild(root_1, 
                        stream_Identifier.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","importFragment"," ",35);
        }
        return retval;
    }
    // $ANTLR end "importFragment"


    public static class importEntry_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importEntry"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:472:1: importEntry : ( ( Identifier '=' )=> ( Identifier '=' refModule -> ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule ) ) | refModule -> ^( IMPORT_CONTENT refModule ) );
    public final dparserParser.importEntry_return importEntry()  {
        debug(trace_rules) writeln("Entering rule:","importEntry"," ",36);
        dparserParser.importEntry_return retval = new dparserParser.importEntry_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier149=null;
        Token char_literal150=null;
        dparserParser.refModule_return refModule151 =null;

        dparserParser.refModule_return refModule152 =null;


        Object Identifier149_tree=null;
        Object char_literal150_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_refModule=new RewriteRuleSubtreeStream(adaptor,"rule refModule");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:3: ( ( Identifier '=' )=> ( Identifier '=' refModule -> ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule ) ) | refModule -> ^( IMPORT_CONTENT refModule ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==Identifier) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==193) && (synpred5_dparser())) {
                    alt36=1;
                }
                else if ( (LA36_1==177||LA36_1==181||(LA36_1 >=185  && LA36_1<=186)) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:5: ( Identifier '=' )=> ( Identifier '=' refModule -> ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule ) )
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:24: ( Identifier '=' refModule -> ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule ) )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:25: Identifier '=' refModule
                    {
                    Identifier149=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_importEntry3853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier149);


                    char_literal150=cast(Token)match(input,193,FOLLOW_193_in_importEntry3855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal150);


                    pushFollow(FOLLOW_refModule_in_importEntry3857);
                    refModule151=refModule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refModule.add(cast(Object)refModule151.getTree());

                    // AST REWRITE
                    // elements: Identifier, refModule
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 473:50: -> ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:53: ^( IMPORT_ALIAS ^( REF_MODULE Identifier ) refModule )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(IMPORT_ALIAS, "IMPORT_ALIAS")
                        , root_1);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:68: ^( REF_MODULE Identifier )
                        {
                        Object root_2 = cast(Object)adaptor.nil();
                        root_2 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_MODULE, "REF_MODULE")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_Identifier.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_refModule.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:474:5: refModule
                    {
                    pushFollow(FOLLOW_refModule_in_importEntry3878);
                    refModule152=refModule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refModule.add(cast(Object)refModule152.getTree());

                    // AST REWRITE
                    // elements: refModule
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 474:15: -> ^( IMPORT_CONTENT refModule )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:474:18: ^( IMPORT_CONTENT refModule )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(IMPORT_CONTENT, "IMPORT_CONTENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_refModule.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","importEntry"," ",36);
        }
        return retval;
    }
    // $ANTLR end "importEntry"


    public static class refModule_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "refModule"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:477:1: refModule : Identifier ( '.' Identifier )* -> ^( REF_MODULE ( Identifier )* ) ;
    public final dparserParser.refModule_return refModule()  {
        debug(trace_rules) writeln("Entering rule:","refModule"," ",37);
        dparserParser.refModule_return retval = new dparserParser.refModule_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier153=null;
        Token char_literal154=null;
        Token Identifier155=null;

        Object Identifier153_tree=null;
        Object char_literal154_tree=null;
        Object Identifier155_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:3: ( Identifier ( '.' Identifier )* -> ^( REF_MODULE ( Identifier )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:5: Identifier ( '.' Identifier )*
            {
            Identifier153=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_refModule3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier153);


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:16: ( '.' Identifier )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==181) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:17: '.' Identifier
            	    {
            	    char_literal154=cast(Token)match(input,181,FOLLOW_181_in_refModule3904); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal154);


            	    Identifier155=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_refModule3906); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier155);


            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 478:34: -> ^( REF_MODULE ( Identifier )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:37: ^( REF_MODULE ( Identifier )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(REF_MODULE, "REF_MODULE")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:478:50: ( Identifier )*
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","refModule"," ",37);
        }
        return retval;
    }
    // $ANTLR end "refModule"


    public static class enumDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:484:3: enumDeclaration : ENUM_DECLARATION ^ ( defSymbol )? ( ':' ! type )? enumBody ;
    public final dparserParser.enumDeclaration_return enumDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","enumDeclaration"," ",38);
        dparserParser.enumDeclaration_return retval = new dparserParser.enumDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_DECLARATION156=null;
        Token char_literal158=null;
        dparserParser.defSymbol_return defSymbol157 =null;

        dparserParser.type_return type159 =null;

        dparserParser.enumBody_return enumBody160 =null;


        Object ENUM_DECLARATION156_tree=null;
        Object char_literal158_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:5: ( ENUM_DECLARATION ^ ( defSymbol )? ( ':' ! type )? enumBody )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:7: ENUM_DECLARATION ^ ( defSymbol )? ( ':' ! type )? enumBody
            {
            root_0 = cast(Object)adaptor.nil();


            ENUM_DECLARATION156=cast(Token)match(input,ENUM_DECLARATION,FOLLOW_ENUM_DECLARATION_in_enumDeclaration3937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENUM_DECLARATION156_tree = 
            cast(Object)adaptor.create(ENUM_DECLARATION156)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(ENUM_DECLARATION156_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:25: ( defSymbol )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==Identifier) ) {
                alt38=1;
            }
            switch (alt38) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:25: defSymbol
                   {
                   pushFollow(FOLLOW_defSymbol_in_enumDeclaration3940);
                   defSymbol157=defSymbol();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, defSymbol157.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:37: ( ':' ! type )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==185) ) {
                alt39=1;
            }
            switch (alt39) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:485:38: ':' ! type
                   {
                   char_literal158=cast(Token)match(input,185,FOLLOW_185_in_enumDeclaration3945); if (state.failed) return retval;

                   pushFollow(FOLLOW_type_in_enumDeclaration3948);
                   type159=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, type159.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_enumBody_in_enumDeclaration3952);
            enumBody160=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBody160.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","enumDeclaration"," ",38);
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"


    public static class enumBody_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumBody"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:488:3: enumBody : ( '{' ! enumMembers '}' !| ';' !);
    public final dparserParser.enumBody_return enumBody()  {
        debug(trace_rules) writeln("Entering rule:","enumBody"," ",39);
        dparserParser.enumBody_return retval = new dparserParser.enumBody_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal161=null;
        Token char_literal163=null;
        Token char_literal164=null;
        dparserParser.enumMembers_return enumMembers162 =null;


        Object char_literal161_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:489:5: ( '{' ! enumMembers '}' !| ';' !)
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==284) ) {
                alt40=1;
            }
            else if ( (LA40_0==186) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:489:7: '{' ! enumMembers '}' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal161=cast(Token)match(input,284,FOLLOW_284_in_enumBody3976); if (state.failed) return retval;

                    pushFollow(FOLLOW_enumMembers_in_enumBody3979);
                    enumMembers162=enumMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumMembers162.getTree());

                    char_literal163=cast(Token)match(input,288,FOLLOW_288_in_enumBody3981); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:490:7: ';' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal164=cast(Token)match(input,186,FOLLOW_186_in_enumBody3990); if (state.failed) return retval;

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","enumBody"," ",39);
        }
        return retval;
    }
    // $ANTLR end "enumBody"


    public static class enumMembers_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumMembers"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:493:3: enumMembers : enumMember ( ',' ! enumMember )* ;
    public final dparserParser.enumMembers_return enumMembers()  {
        debug(trace_rules) writeln("Entering rule:","enumMembers"," ",40);
        dparserParser.enumMembers_return retval = new dparserParser.enumMembers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal166=null;
        dparserParser.enumMember_return enumMember165 =null;

        dparserParser.enumMember_return enumMember167 =null;


        Object char_literal166_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:494:5: ( enumMember ( ',' ! enumMember )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:494:7: enumMember ( ',' ! enumMember )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_enumMember_in_enumMembers4014);
            enumMember165=enumMember();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumMember165.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:494:18: ( ',' ! enumMember )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==177) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:494:20: ',' ! enumMember
            	    {
            	    char_literal166=cast(Token)match(input,177,FOLLOW_177_in_enumMembers4018); if (state.failed) return retval;

            	    pushFollow(FOLLOW_enumMember_in_enumMembers4021);
            	    enumMember167=enumMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumMember167.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","enumMembers"," ",40);
        }
        return retval;
    }
    // $ANTLR end "enumMembers"


    public static class enumMember_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumMember"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:497:3: enumMember : defSymbol ( '=' primaryExpression )? -> ^( ENUM_MEMBER defSymbol ( primaryExpression )? ) ;
    public final dparserParser.enumMember_return enumMember()  {
        debug(trace_rules) writeln("Entering rule:","enumMember"," ",41);
        dparserParser.enumMember_return retval = new dparserParser.enumMember_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal169=null;
        dparserParser.defSymbol_return defSymbol168 =null;

        dparserParser.primaryExpression_return primaryExpression170 =null;


        Object char_literal169_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:5: ( defSymbol ( '=' primaryExpression )? -> ^( ENUM_MEMBER defSymbol ( primaryExpression )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:7: defSymbol ( '=' primaryExpression )?
            {
            pushFollow(FOLLOW_defSymbol_in_enumMember4046);
            defSymbol168=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol168.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:17: ( '=' primaryExpression )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==193) ) {
                alt42=1;
            }
            switch (alt42) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:18: '=' primaryExpression
                   {
                   char_literal169=cast(Token)match(input,193,FOLLOW_193_in_enumMember4049); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal169);


                   pushFollow(FOLLOW_primaryExpression_in_enumMember4051);
                   primaryExpression170=primaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_primaryExpression.add(cast(Object)primaryExpression170.getTree());

                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: primaryExpression, defSymbol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 498:42: -> ^( ENUM_MEMBER defSymbol ( primaryExpression )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:45: ^( ENUM_MEMBER defSymbol ( primaryExpression )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(ENUM_MEMBER, "ENUM_MEMBER")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:498:69: ( primaryExpression )?
                if ( stream_primaryExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_primaryExpression.nextTree());

                }
                stream_primaryExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","enumMember"," ",41);
        }
        return retval;
    }
    // $ANTLR end "enumMember"


    public static class classDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:504:2: classDeclaration : CLASS_DECLARATION ^ defSymbol ( baseClassList )? classBody ;
    public final dparserParser.classDeclaration_return classDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","classDeclaration"," ",42);
        dparserParser.classDeclaration_return retval = new dparserParser.classDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CLASS_DECLARATION171=null;
        dparserParser.defSymbol_return defSymbol172 =null;

        dparserParser.baseClassList_return baseClassList173 =null;

        dparserParser.classBody_return classBody174 =null;


        Object CLASS_DECLARATION171_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:505:3: ( CLASS_DECLARATION ^ defSymbol ( baseClassList )? classBody )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:505:5: CLASS_DECLARATION ^ defSymbol ( baseClassList )? classBody
            {
            root_0 = cast(Object)adaptor.nil();


            CLASS_DECLARATION171=cast(Token)match(input,CLASS_DECLARATION,FOLLOW_CLASS_DECLARATION_in_classDeclaration4087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLASS_DECLARATION171_tree = 
            cast(Object)adaptor.create(CLASS_DECLARATION171)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(CLASS_DECLARATION171_tree, root_0);
            }

            pushFollow(FOLLOW_defSymbol_in_classDeclaration4090);
            defSymbol172=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, defSymbol172.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:505:34: ( baseClassList )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==185) ) {
                alt43=1;
            }
            switch (alt43) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:505:34: baseClassList
                   {
                   pushFollow(FOLLOW_baseClassList_in_classDeclaration4092);
                   baseClassList173=baseClassList();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, baseClassList173.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_classBody_in_classDeclaration4095);
            classBody174=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody174.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","classDeclaration"," ",42);
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"


    public static class baseClassList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "baseClassList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:508:1: baseClassList : ':' identifierList ( ',' identifierList )* -> ^( BASE_CLASSES ( ^( BASE_CLASS identifierList ) )* ) ;
    public final dparserParser.baseClassList_return baseClassList()  {
        debug(trace_rules) writeln("Entering rule:","baseClassList"," ",43);
        dparserParser.baseClassList_return retval = new dparserParser.baseClassList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal175=null;
        Token char_literal177=null;
        dparserParser.identifierList_return identifierList176 =null;

        dparserParser.identifierList_return identifierList178 =null;


        Object char_literal175_tree=null;
        Object char_literal177_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_identifierList=new RewriteRuleSubtreeStream(adaptor,"rule identifierList");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:3: ( ':' identifierList ( ',' identifierList )* -> ^( BASE_CLASSES ( ^( BASE_CLASS identifierList ) )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:5: ':' identifierList ( ',' identifierList )*
            {
            char_literal175=cast(Token)match(input,185,FOLLOW_185_in_baseClassList4110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal175);


            pushFollow(FOLLOW_identifierList_in_baseClassList4112);
            identifierList176=identifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifierList.add(cast(Object)identifierList176.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:24: ( ',' identifierList )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==177) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:25: ',' identifierList
            	    {
            	    char_literal177=cast(Token)match(input,177,FOLLOW_177_in_baseClassList4115); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal177);


            	    pushFollow(FOLLOW_identifierList_in_baseClassList4117);
            	    identifierList178=identifierList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifierList.add(cast(Object)identifierList178.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            // AST REWRITE
            // elements: identifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 509:46: -> ^( BASE_CLASSES ( ^( BASE_CLASS identifierList ) )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:49: ^( BASE_CLASSES ( ^( BASE_CLASS identifierList ) )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(BASE_CLASSES, "BASE_CLASSES")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:64: ( ^( BASE_CLASS identifierList ) )*
                while ( stream_identifierList.hasNext() ) {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:509:64: ^( BASE_CLASS identifierList )
                    {
                    Object root_2 = cast(Object)adaptor.nil();
                    root_2 = cast(Object)adaptor.becomeRoot(
                    cast(Object)adaptor.create(BASE_CLASS, "BASE_CLASS")
                    , root_2);

                    adaptor.addChild(root_2, stream_identifierList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_identifierList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","baseClassList"," ",43);
        }
        return retval;
    }
    // $ANTLR end "baseClassList"


    public static class classBody_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classBody"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:512:1: classBody : '{' ! ( classMember )* '}' !;
    public final dparserParser.classBody_return classBody()  {
        debug(trace_rules) writeln("Entering rule:","classBody"," ",44);
        dparserParser.classBody_return retval = new dparserParser.classBody_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal179=null;
        Token char_literal181=null;
        dparserParser.classMember_return classMember180 =null;


        Object char_literal179_tree=null;
        Object char_literal181_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:513:3: ( '{' ! ( classMember )* '}' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:513:5: '{' ! ( classMember )* '}' !
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal179=cast(Token)match(input,284,FOLLOW_284_in_classBody4146); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:513:10: ( classMember )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==CLASS_DECLARATION||LA45_0==ENUM_DECLARATION||LA45_0==EXP_DELETE||(LA45_0 >=48  && LA45_0<=49)||LA45_0==EXP_THIS||(LA45_0 >=73  && LA45_0<=74)||LA45_0==Identifier||LA45_0==STMT_SCOPE||LA45_0==STMT_SYNCHRONIZED||LA45_0==STRUCT_DECLARATION||LA45_0==TEMPLATE_DECLARATION||(LA45_0 >=154  && LA45_0<=155)||LA45_0==181||(LA45_0 >=210  && LA45_0<=211)||(LA45_0 >=214  && LA45_0<=219)||(LA45_0 >=222  && LA45_0<=225)||LA45_0==227||LA45_0==229||LA45_0==232||(LA45_0 >=234  && LA45_0<=235)||(LA45_0 >=243  && LA45_0<=249)||(LA45_0 >=267  && LA45_0<=269)||(LA45_0 >=271  && LA45_0<=275)||(LA45_0 >=277  && LA45_0<=283)||LA45_0==291) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:513:10: classMember
            	    {
            	    pushFollow(FOLLOW_classMember_in_classBody4149);
            	    classMember180=classMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classMember180.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            char_literal181=cast(Token)match(input,288,FOLLOW_288_in_classBody4152); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","classBody"," ",44);
        }
        return retval;
    }
    // $ANTLR end "classBody"


    public static class classMember_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classMember"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:516:1: classMember : ( declDef | classAllocator | classDeallocator | invariant_ );
    public final dparserParser.classMember_return classMember()  {
        debug(trace_rules) writeln("Entering rule:","classMember"," ",45);
        dparserParser.classMember_return retval = new dparserParser.classMember_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.declDef_return declDef182 =null;

        dparserParser.classAllocator_return classAllocator183 =null;

        dparserParser.classDeallocator_return classDeallocator184 =null;

        dparserParser.invariant__return invariant_185 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:517:3: ( declDef | classAllocator | classDeallocator | invariant_ )
            int alt46=4;
            switch ( input.LA(1) ) {
            case CLASS_DECLARATION:
            case ENUM_DECLARATION:
            case EXP_MIXIN:
            case EXP_THIS:
            case INTERFACE_DECLARATION:
            case Identifier:
            case STMT_SCOPE:
            case STMT_SYNCHRONIZED:
            case STRUCT_DECLARATION:
            case TEMPLATE_DECLARATION:
            case UNION_DECLARATION:
            case UNITTEST_DECLARATION:
            case 181:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 291:
                {
                alt46=1;
                }
                break;
            case EXP_NEW:
                {
                alt46=2;
                }
                break;
            case EXP_DELETE:
                {
                alt46=3;
                }
                break;
            case INVARIANT:
                {
                alt46=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:517:5: declDef
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_declDef_in_classMember4168);
                    declDef182=declDef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declDef182.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:518:5: classAllocator
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_classAllocator_in_classMember4174);
                    classAllocator183=classAllocator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classAllocator183.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:519:5: classDeallocator
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_classDeallocator_in_classMember4180);
                    classDeallocator184=classDeallocator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeallocator184.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:520:5: invariant_
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_invariant__in_classMember4186);
                    invariant_185=invariant_();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invariant_185.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","classMember"," ",45);
        }
        return retval;
    }
    // $ANTLR end "classMember"


    public static class classAllocator_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classAllocator"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:523:1: classAllocator : 'new' parameters functionBody -> ^( DEF_CTOR[\"new\"] parameters functionBody ) ;
    public final dparserParser.classAllocator_return classAllocator()  {
        debug(trace_rules) writeln("Entering rule:","classAllocator"," ",46);
        dparserParser.classAllocator_return retval = new dparserParser.classAllocator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal186=null;
        dparserParser.parameters_return parameters187 =null;

        dparserParser.functionBody_return functionBody188 =null;


        Object string_literal186_tree=null;
        RewriteRuleTokenStream stream_EXP_NEW=new RewriteRuleTokenStream(adaptor,"token EXP_NEW");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:524:3: ( 'new' parameters functionBody -> ^( DEF_CTOR[\"new\"] parameters functionBody ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:524:5: 'new' parameters functionBody
            {
            string_literal186=cast(Token)match(input,EXP_NEW,FOLLOW_EXP_NEW_in_classAllocator4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_NEW.add(cast(Object)string_literal186);


            pushFollow(FOLLOW_parameters_in_classAllocator4203);
            parameters187=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters187.getTree());

            pushFollow(FOLLOW_functionBody_in_classAllocator4205);
            functionBody188=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody188.getTree());

            // AST REWRITE
            // elements: functionBody, parameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 524:35: -> ^( DEF_CTOR[\"new\"] parameters functionBody )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:524:38: ^( DEF_CTOR[\"new\"] parameters functionBody )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DEF_CTOR, "new")
                , root_1);

                adaptor.addChild(root_1, stream_parameters.nextTree());

                adaptor.addChild(root_1, stream_functionBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","classAllocator"," ",46);
        }
        return retval;
    }
    // $ANTLR end "classAllocator"


    public static class classDeallocator_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDeallocator"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:527:1: classDeallocator : 'delete' parameters functionBody -> ^( DEF_CTOR[\"delete\"] parameters functionBody ) ;
    public final dparserParser.classDeallocator_return classDeallocator()  {
        debug(trace_rules) writeln("Entering rule:","classDeallocator"," ",47);
        dparserParser.classDeallocator_return retval = new dparserParser.classDeallocator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal189=null;
        dparserParser.parameters_return parameters190 =null;

        dparserParser.functionBody_return functionBody191 =null;


        Object string_literal189_tree=null;
        RewriteRuleTokenStream stream_EXP_DELETE=new RewriteRuleTokenStream(adaptor,"token EXP_DELETE");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:528:3: ( 'delete' parameters functionBody -> ^( DEF_CTOR[\"delete\"] parameters functionBody ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:528:5: 'delete' parameters functionBody
            {
            string_literal189=cast(Token)match(input,EXP_DELETE,FOLLOW_EXP_DELETE_in_classDeallocator4231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_DELETE.add(cast(Object)string_literal189);


            pushFollow(FOLLOW_parameters_in_classDeallocator4233);
            parameters190=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters190.getTree());

            pushFollow(FOLLOW_functionBody_in_classDeallocator4235);
            functionBody191=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody191.getTree());

            // AST REWRITE
            // elements: functionBody, parameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 528:38: -> ^( DEF_CTOR[\"delete\"] parameters functionBody )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:528:41: ^( DEF_CTOR[\"delete\"] parameters functionBody )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DEF_CTOR, "delete")
                , root_1);

                adaptor.addChild(root_1, stream_parameters.nextTree());

                adaptor.addChild(root_1, stream_functionBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","classDeallocator"," ",47);
        }
        return retval;
    }
    // $ANTLR end "classDeallocator"


    public static class invariant__return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invariant_"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:531:1: invariant_ : INVARIANT ^ '(' ! ')' ! blockStatement ;
    public final dparserParser.invariant__return invariant_()  {
        debug(trace_rules) writeln("Entering rule:","invariant_"," ",48);
        dparserParser.invariant__return retval = new dparserParser.invariant__return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INVARIANT192=null;
        Token char_literal193=null;
        Token char_literal194=null;
        dparserParser.blockStatement_return blockStatement195 =null;


        Object INVARIANT192_tree=null;
        Object char_literal193_tree=null;
        Object char_literal194_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:532:3: ( INVARIANT ^ '(' ! ')' ! blockStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:532:5: INVARIANT ^ '(' ! ')' ! blockStatement
            {
            root_0 = cast(Object)adaptor.nil();


            INVARIANT192=cast(Token)match(input,INVARIANT,FOLLOW_INVARIANT_in_invariant_4261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INVARIANT192_tree = 
            cast(Object)adaptor.create(INVARIANT192)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(INVARIANT192_tree, root_0);
            }

            char_literal193=cast(Token)match(input,170,FOLLOW_170_in_invariant_4264); if (state.failed) return retval;

            char_literal194=cast(Token)match(input,171,FOLLOW_171_in_invariant_4267); if (state.failed) return retval;

            pushFollow(FOLLOW_blockStatement_in_invariant_4270);
            blockStatement195=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement195.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","invariant_"," ",48);
        }
        return retval;
    }
    // $ANTLR end "invariant_"


    public static class interfaceDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:538:1: interfaceDeclaration : INTERFACE_DECLARATION ^ defSymbol ( baseClassList )? interfaceBody ;
    public final dparserParser.interfaceDeclaration_return interfaceDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","interfaceDeclaration"," ",49);
        dparserParser.interfaceDeclaration_return retval = new dparserParser.interfaceDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INTERFACE_DECLARATION196=null;
        dparserParser.defSymbol_return defSymbol197 =null;

        dparserParser.baseClassList_return baseClassList198 =null;

        dparserParser.interfaceBody_return interfaceBody199 =null;


        Object INTERFACE_DECLARATION196_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:539:3: ( INTERFACE_DECLARATION ^ defSymbol ( baseClassList )? interfaceBody )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:539:5: INTERFACE_DECLARATION ^ defSymbol ( baseClassList )? interfaceBody
            {
            root_0 = cast(Object)adaptor.nil();


            INTERFACE_DECLARATION196=cast(Token)match(input,INTERFACE_DECLARATION,FOLLOW_INTERFACE_DECLARATION_in_interfaceDeclaration4289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERFACE_DECLARATION196_tree = 
            cast(Object)adaptor.create(INTERFACE_DECLARATION196)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(INTERFACE_DECLARATION196_tree, root_0);
            }

            pushFollow(FOLLOW_defSymbol_in_interfaceDeclaration4292);
            defSymbol197=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, defSymbol197.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:539:38: ( baseClassList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==185) ) {
                alt47=1;
            }
            switch (alt47) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:539:38: baseClassList
                   {
                   pushFollow(FOLLOW_baseClassList_in_interfaceDeclaration4294);
                   baseClassList198=baseClassList();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, baseClassList198.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_interfaceBody_in_interfaceDeclaration4297);
            interfaceBody199=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBody199.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","interfaceDeclaration"," ",49);
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"


    public static class interfaceBody_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceBody"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:542:1: interfaceBody : '{' ! ( declDef )* '}' !;
    public final dparserParser.interfaceBody_return interfaceBody()  {
        debug(trace_rules) writeln("Entering rule:","interfaceBody"," ",50);
        dparserParser.interfaceBody_return retval = new dparserParser.interfaceBody_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal200=null;
        Token char_literal202=null;
        dparserParser.declDef_return declDef201 =null;


        Object char_literal200_tree=null;
        Object char_literal202_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:543:3: ( '{' ! ( declDef )* '}' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:543:5: '{' ! ( declDef )* '}' !
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal200=cast(Token)match(input,284,FOLLOW_284_in_interfaceBody4312); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:543:10: ( declDef )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==CLASS_DECLARATION||LA48_0==ENUM_DECLARATION||LA48_0==EXP_MIXIN||LA48_0==EXP_THIS||LA48_0==INTERFACE_DECLARATION||LA48_0==Identifier||LA48_0==STMT_SCOPE||LA48_0==STMT_SYNCHRONIZED||LA48_0==STRUCT_DECLARATION||LA48_0==TEMPLATE_DECLARATION||(LA48_0 >=154  && LA48_0<=155)||LA48_0==181||(LA48_0 >=210  && LA48_0<=211)||(LA48_0 >=214  && LA48_0<=219)||(LA48_0 >=222  && LA48_0<=225)||LA48_0==227||LA48_0==229||LA48_0==232||(LA48_0 >=234  && LA48_0<=235)||(LA48_0 >=243  && LA48_0<=249)||(LA48_0 >=267  && LA48_0<=269)||(LA48_0 >=271  && LA48_0<=275)||(LA48_0 >=277  && LA48_0<=283)||LA48_0==291) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:543:10: declDef
            	    {
            	    pushFollow(FOLLOW_declDef_in_interfaceBody4315);
            	    declDef201=declDef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declDef201.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            char_literal202=cast(Token)match(input,288,FOLLOW_288_in_interfaceBody4318); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","interfaceBody"," ",50);
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"


    public static class aggregateDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "aggregateDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:549:1: aggregateDeclaration : ( STRUCT_DECLARATION ^| UNION_DECLARATION ^) defSymbol ( ';' !| structBody ) ;
    public final dparserParser.aggregateDeclaration_return aggregateDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","aggregateDeclaration"," ",51);
        dparserParser.aggregateDeclaration_return retval = new dparserParser.aggregateDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_DECLARATION203=null;
        Token UNION_DECLARATION204=null;
        Token char_literal206=null;
        dparserParser.defSymbol_return defSymbol205 =null;

        dparserParser.structBody_return structBody207 =null;


        Object STRUCT_DECLARATION203_tree=null;
        Object UNION_DECLARATION204_tree=null;
        Object char_literal206_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:3: ( ( STRUCT_DECLARATION ^| UNION_DECLARATION ^) defSymbol ( ';' !| structBody ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:5: ( STRUCT_DECLARATION ^| UNION_DECLARATION ^) defSymbol ( ';' !| structBody )
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:5: ( STRUCT_DECLARATION ^| UNION_DECLARATION ^)
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==STRUCT_DECLARATION) ) {
                alt49=1;
            }
            else if ( (LA49_0==UNION_DECLARATION) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:6: STRUCT_DECLARATION ^
                   {
                   STRUCT_DECLARATION203=cast(Token)match(input,STRUCT_DECLARATION,FOLLOW_STRUCT_DECLARATION_in_aggregateDeclaration4340); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   STRUCT_DECLARATION203_tree = 
                   cast(Object)adaptor.create(STRUCT_DECLARATION203)
                   ;
                   root_0 = cast(Object)adaptor.becomeRoot(STRUCT_DECLARATION203_tree, root_0);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:28: UNION_DECLARATION ^
                   {
                   UNION_DECLARATION204=cast(Token)match(input,UNION_DECLARATION,FOLLOW_UNION_DECLARATION_in_aggregateDeclaration4345); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   UNION_DECLARATION204_tree = 
                   cast(Object)adaptor.create(UNION_DECLARATION204)
                   ;
                   root_0 = cast(Object)adaptor.becomeRoot(UNION_DECLARATION204_tree, root_0);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_defSymbol_in_aggregateDeclaration4349);
            defSymbol205=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, defSymbol205.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:58: ( ';' !| structBody )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==186) ) {
                alt50=1;
            }
            else if ( (LA50_0==284) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:59: ';' !
                   {
                   char_literal206=cast(Token)match(input,186,FOLLOW_186_in_aggregateDeclaration4352); if (state.failed) return retval;

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:550:66: structBody
                   {
                   pushFollow(FOLLOW_structBody_in_aggregateDeclaration4357);
                   structBody207=structBody();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, structBody207.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","aggregateDeclaration"," ",51);
        }
        return retval;
    }
    // $ANTLR end "aggregateDeclaration"


    public static class structBody_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "structBody"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:553:2: structBody : '{' ! ( structMember )* '}' !;
    public final dparserParser.structBody_return structBody()  {
        debug(trace_rules) writeln("Entering rule:","structBody"," ",52);
        dparserParser.structBody_return retval = new dparserParser.structBody_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal208=null;
        Token char_literal210=null;
        dparserParser.structMember_return structMember209 =null;


        Object char_literal208_tree=null;
        Object char_literal210_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:554:3: ( '{' ! ( structMember )* '}' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:554:5: '{' ! ( structMember )* '}' !
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal208=cast(Token)match(input,284,FOLLOW_284_in_structBody4376); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:554:10: ( structMember )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==CLASS_DECLARATION||LA51_0==ENUM_DECLARATION||LA51_0==EXP_DELETE||(LA51_0 >=48  && LA51_0<=49)||LA51_0==EXP_THIS||LA51_0==INTERFACE_DECLARATION||LA51_0==Identifier||LA51_0==STMT_SCOPE||LA51_0==STMT_SYNCHRONIZED||LA51_0==STRUCT_DECLARATION||LA51_0==TEMPLATE_DECLARATION||(LA51_0 >=154  && LA51_0<=155)||LA51_0==181||(LA51_0 >=210  && LA51_0<=211)||(LA51_0 >=214  && LA51_0<=219)||(LA51_0 >=222  && LA51_0<=225)||LA51_0==227||LA51_0==229||LA51_0==232||(LA51_0 >=234  && LA51_0<=235)||(LA51_0 >=243  && LA51_0<=249)||(LA51_0 >=267  && LA51_0<=269)||(LA51_0 >=271  && LA51_0<=275)||(LA51_0 >=277  && LA51_0<=283)||LA51_0==291) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:554:10: structMember
            	    {
            	    pushFollow(FOLLOW_structMember_in_structBody4379);
            	    structMember209=structMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, structMember209.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            char_literal210=cast(Token)match(input,288,FOLLOW_288_in_structBody4382); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","structBody"," ",52);
        }
        return retval;
    }
    // $ANTLR end "structBody"


    public static class structMember_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "structMember"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:557:1: structMember : ( declDef | classAllocator | classDeallocator );
    public final dparserParser.structMember_return structMember()  {
        debug(trace_rules) writeln("Entering rule:","structMember"," ",53);
        dparserParser.structMember_return retval = new dparserParser.structMember_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.declDef_return declDef211 =null;

        dparserParser.classAllocator_return classAllocator212 =null;

        dparserParser.classDeallocator_return classDeallocator213 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:558:3: ( declDef | classAllocator | classDeallocator )
            int alt52=3;
            switch ( input.LA(1) ) {
            case CLASS_DECLARATION:
            case ENUM_DECLARATION:
            case EXP_MIXIN:
            case EXP_THIS:
            case INTERFACE_DECLARATION:
            case Identifier:
            case STMT_SCOPE:
            case STMT_SYNCHRONIZED:
            case STRUCT_DECLARATION:
            case TEMPLATE_DECLARATION:
            case UNION_DECLARATION:
            case UNITTEST_DECLARATION:
            case 181:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 291:
                {
                alt52=1;
                }
                break;
            case EXP_NEW:
                {
                alt52=2;
                }
                break;
            case EXP_DELETE:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:558:5: declDef
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_declDef_in_structMember4396);
                    declDef211=declDef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declDef211.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:559:5: classAllocator
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_classAllocator_in_structMember4402);
                    classAllocator212=classAllocator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classAllocator212.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:560:5: classDeallocator
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_classDeallocator_in_structMember4408);
                    classDeallocator213=classDeallocator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeallocator213.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","structMember"," ",53);
        }
        return retval;
    }
    // $ANTLR end "structMember"


    public static class ctorDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ctorDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:566:1: ctorDeclaration : ( 'this' parameters functionBody -> ^( DEF_CTOR[\"this\"] parameters functionBody ) | '~this' '(' ')' functionBody -> ^( DEF_CTOR[\"~this\"] PARAMETER_LIST functionBody ) );
    public final dparserParser.ctorDeclaration_return ctorDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","ctorDeclaration"," ",54);
        dparserParser.ctorDeclaration_return retval = new dparserParser.ctorDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal214=null;
        Token string_literal217=null;
        Token char_literal218=null;
        Token char_literal219=null;
        dparserParser.parameters_return parameters215 =null;

        dparserParser.functionBody_return functionBody216 =null;

        dparserParser.functionBody_return functionBody220 =null;


        Object string_literal214_tree=null;
        Object string_literal217_tree=null;
        Object char_literal218_tree=null;
        Object char_literal219_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_EXP_THIS=new RewriteRuleTokenStream(adaptor,"token EXP_THIS");
        RewriteRuleTokenStream stream_291=new RewriteRuleTokenStream(adaptor,"token 291");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:567:3: ( 'this' parameters functionBody -> ^( DEF_CTOR[\"this\"] parameters functionBody ) | '~this' '(' ')' functionBody -> ^( DEF_CTOR[\"~this\"] PARAMETER_LIST functionBody ) )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EXP_THIS) ) {
                alt53=1;
            }
            else if ( (LA53_0==291) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:567:5: 'this' parameters functionBody
                    {
                    string_literal214=cast(Token)match(input,EXP_THIS,FOLLOW_EXP_THIS_in_ctorDeclaration4424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXP_THIS.add(cast(Object)string_literal214);


                    pushFollow(FOLLOW_parameters_in_ctorDeclaration4426);
                    parameters215=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters215.getTree());

                    pushFollow(FOLLOW_functionBody_in_ctorDeclaration4428);
                    functionBody216=functionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody216.getTree());

                    // AST REWRITE
                    // elements: parameters, functionBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 567:36: -> ^( DEF_CTOR[\"this\"] parameters functionBody )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:567:39: ^( DEF_CTOR[\"this\"] parameters functionBody )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(DEF_CTOR, "this")
                        , root_1);

                        adaptor.addChild(root_1, stream_parameters.nextTree());

                        adaptor.addChild(root_1, stream_functionBody.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:568:5: '~this' '(' ')' functionBody
                    {
                    string_literal217=cast(Token)match(input,291,FOLLOW_291_in_ctorDeclaration4445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_291.add(cast(Object)string_literal217);


                    char_literal218=cast(Token)match(input,170,FOLLOW_170_in_ctorDeclaration4447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal218);


                    char_literal219=cast(Token)match(input,171,FOLLOW_171_in_ctorDeclaration4449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal219);


                    pushFollow(FOLLOW_functionBody_in_ctorDeclaration4451);
                    functionBody220=functionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody220.getTree());

                    // AST REWRITE
                    // elements: functionBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 568:34: -> ^( DEF_CTOR[\"~this\"] PARAMETER_LIST functionBody )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:568:37: ^( DEF_CTOR[\"~this\"] PARAMETER_LIST functionBody )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(DEF_CTOR, "~this")
                        , root_1);

                        adaptor.addChild(root_1, 
                        cast(Object)adaptor.create(PARAMETER_LIST, "PARAMETER_LIST")
                        );

                        adaptor.addChild(root_1, stream_functionBody.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","ctorDeclaration"," ",54);
        }
        return retval;
    }
    // $ANTLR end "ctorDeclaration"


    public static class unittestDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unittestDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:572:1: unittestDeclaration : UNITTEST_DECLARATION ^ blockStatement ;
    public final dparserParser.unittestDeclaration_return unittestDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","unittestDeclaration"," ",55);
        dparserParser.unittestDeclaration_return retval = new dparserParser.unittestDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNITTEST_DECLARATION221=null;
        dparserParser.blockStatement_return blockStatement222 =null;


        Object UNITTEST_DECLARATION221_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:573:3: ( UNITTEST_DECLARATION ^ blockStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:573:5: UNITTEST_DECLARATION ^ blockStatement
            {
            root_0 = cast(Object)adaptor.nil();


            UNITTEST_DECLARATION221=cast(Token)match(input,UNITTEST_DECLARATION,FOLLOW_UNITTEST_DECLARATION_in_unittestDeclaration4478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNITTEST_DECLARATION221_tree = 
            cast(Object)adaptor.create(UNITTEST_DECLARATION221)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(UNITTEST_DECLARATION221_tree, root_0);
            }

            pushFollow(FOLLOW_blockStatement_in_unittestDeclaration4482);
            blockStatement222=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement222.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","unittestDeclaration"," ",55);
        }
        return retval;
    }
    // $ANTLR end "unittestDeclaration"


    public static class mixinDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mixinDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:576:1: mixinDeclaration : 'mixin' '(' assignExpression ')' ';' -> ^( MIXIN_DECLARATION assignExpression ) ;
    public final dparserParser.mixinDeclaration_return mixinDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","mixinDeclaration"," ",56);
        dparserParser.mixinDeclaration_return retval = new dparserParser.mixinDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal223=null;
        Token char_literal224=null;
        Token char_literal226=null;
        Token char_literal227=null;
        dparserParser.assignExpression_return assignExpression225 =null;


        Object string_literal223_tree=null;
        Object char_literal224_tree=null;
        Object char_literal226_tree=null;
        Object char_literal227_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_EXP_MIXIN=new RewriteRuleTokenStream(adaptor,"token EXP_MIXIN");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:577:3: ( 'mixin' '(' assignExpression ')' ';' -> ^( MIXIN_DECLARATION assignExpression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:577:5: 'mixin' '(' assignExpression ')' ';'
            {
            string_literal223=cast(Token)match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_mixinDeclaration4497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_MIXIN.add(cast(Object)string_literal223);


            char_literal224=cast(Token)match(input,170,FOLLOW_170_in_mixinDeclaration4499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal224);


            pushFollow(FOLLOW_assignExpression_in_mixinDeclaration4501);
            assignExpression225=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression225.getTree());

            char_literal226=cast(Token)match(input,171,FOLLOW_171_in_mixinDeclaration4503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal226);


            char_literal227=cast(Token)match(input,186,FOLLOW_186_in_mixinDeclaration4505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal227);


            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 577:41: -> ^( MIXIN_DECLARATION assignExpression )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:577:44: ^( MIXIN_DECLARATION assignExpression )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(MIXIN_DECLARATION, "MIXIN_DECLARATION")
                , root_1);

                adaptor.addChild(root_1, stream_assignExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","mixinDeclaration"," ",56);
        }
        return retval;
    }
    // $ANTLR end "mixinDeclaration"


    public static class conditionalDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:582:1: conditionalDeclaration : condition declarationBlock ( ( 'else' )=> 'else' declarationBlock )? -> ^( CONDITIONAL_DECL condition ( declarationBlock )+ ) ;
    public final dparserParser.conditionalDeclaration_return conditionalDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","conditionalDeclaration"," ",57);
        dparserParser.conditionalDeclaration_return retval = new dparserParser.conditionalDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal230=null;
        dparserParser.condition_return condition228 =null;

        dparserParser.declarationBlock_return declarationBlock229 =null;

        dparserParser.declarationBlock_return declarationBlock231 =null;


        Object string_literal230_tree=null;
        RewriteRuleTokenStream stream_230=new RewriteRuleTokenStream(adaptor,"token 230");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_declarationBlock=new RewriteRuleSubtreeStream(adaptor,"rule declarationBlock");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:583:3: ( condition declarationBlock ( ( 'else' )=> 'else' declarationBlock )? -> ^( CONDITIONAL_DECL condition ( declarationBlock )+ ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:583:5: condition declarationBlock ( ( 'else' )=> 'else' declarationBlock )?
            {
            pushFollow(FOLLOW_condition_in_conditionalDeclaration4529);
            condition228=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(cast(Object)condition228.getTree());

            pushFollow(FOLLOW_declarationBlock_in_conditionalDeclaration4531);
            declarationBlock229=declarationBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declarationBlock.add(cast(Object)declarationBlock229.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:584:5: ( ( 'else' )=> 'else' declarationBlock )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==230) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred6_dparser()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:584:7: ( 'else' )=> 'else' declarationBlock
                   {
                   string_literal230=cast(Token)match(input,230,FOLLOW_230_in_conditionalDeclaration4544); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_230.add(cast(Object)string_literal230);


                   pushFollow(FOLLOW_declarationBlock_in_conditionalDeclaration4546);
                   declarationBlock231=declarationBlock();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_declarationBlock.add(cast(Object)declarationBlock231.getTree());

                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: condition, declarationBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 585:7: -> ^( CONDITIONAL_DECL condition ( declarationBlock )+ )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:585:10: ^( CONDITIONAL_DECL condition ( declarationBlock )+ )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(CONDITIONAL_DECL, "CONDITIONAL_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_condition.nextTree());

                if ( !(stream_declarationBlock.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_declarationBlock.hasNext() ) {
                    adaptor.addChild(root_1, stream_declarationBlock.nextTree());

                }
                stream_declarationBlock.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","conditionalDeclaration"," ",57);
        }
        return retval;
    }
    // $ANTLR end "conditionalDeclaration"


    public static class condition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:588:1: condition : ( 'version' '(' symbol ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol ) | 'debug' '(' symbol ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol ) | 'static' 'if' '(' assignExpression ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[\"static if\"] assignExpression ) );
    public final dparserParser.condition_return condition()  {
        debug(trace_rules) writeln("Entering rule:","condition"," ",58);
        dparserParser.condition_return retval = new dparserParser.condition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal232=null;
        Token char_literal233=null;
        Token char_literal235=null;
        Token string_literal236=null;
        Token char_literal237=null;
        Token char_literal239=null;
        Token string_literal240=null;
        Token string_literal241=null;
        Token char_literal242=null;
        Token char_literal244=null;
        dparserParser.symbol_return symbol234 =null;

        dparserParser.symbol_return symbol238 =null;

        dparserParser.assignExpression_return assignExpression243 =null;


        Object string_literal232_tree=null;
        Object char_literal233_tree=null;
        Object char_literal235_tree=null;
        Object string_literal236_tree=null;
        Object char_literal237_tree=null;
        Object char_literal239_tree=null;
        Object string_literal240_tree=null;
        Object string_literal241_tree=null;
        Object char_literal242_tree=null;
        Object char_literal244_tree=null;
        RewriteRuleTokenStream stream_275=new RewriteRuleTokenStream(adaptor,"token 275");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_STMT_IF=new RewriteRuleTokenStream(adaptor,"token STMT_IF");
        RewriteRuleTokenStream stream_225=new RewriteRuleTokenStream(adaptor,"token 225");
        RewriteRuleTokenStream stream_281=new RewriteRuleTokenStream(adaptor,"token 281");
        RewriteRuleSubtreeStream stream_symbol=new RewriteRuleSubtreeStream(adaptor,"rule symbol");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:589:3: ( 'version' '(' symbol ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol ) | 'debug' '(' symbol ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol ) | 'static' 'if' '(' assignExpression ')' -> ^( CONDITIONAL_COMPILATION_CONDITION[\"static if\"] assignExpression ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case 281:
                {
                alt55=1;
                }
                break;
            case 225:
                {
                alt55=2;
                }
                break;
            case 275:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }

            switch (alt55) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:589:5: 'version' '(' symbol ')'
                    {
                    string_literal232=cast(Token)match(input,281,FOLLOW_281_in_condition4580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_281.add(cast(Object)string_literal232);


                    char_literal233=cast(Token)match(input,170,FOLLOW_170_in_condition4582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal233);


                    pushFollow(FOLLOW_symbol_in_condition4584);
                    symbol234=symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_symbol.add(cast(Object)symbol234.getTree());

                    char_literal235=cast(Token)match(input,171,FOLLOW_171_in_condition4586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal235);


                    // AST REWRITE
                    // elements: symbol
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 589:30: -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:589:33: ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(CONDITIONAL_COMPILATION_CONDITION, (cast(Token)retval.start))
                        , root_1);

                        adaptor.addChild(root_1, stream_symbol.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:590:5: 'debug' '(' symbol ')'
                    {
                    string_literal236=cast(Token)match(input,225,FOLLOW_225_in_condition4601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_225.add(cast(Object)string_literal236);


                    char_literal237=cast(Token)match(input,170,FOLLOW_170_in_condition4603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal237);


                    pushFollow(FOLLOW_symbol_in_condition4605);
                    symbol238=symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_symbol.add(cast(Object)symbol238.getTree());

                    char_literal239=cast(Token)match(input,171,FOLLOW_171_in_condition4607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal239);


                    // AST REWRITE
                    // elements: symbol
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 590:28: -> ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:590:31: ^( CONDITIONAL_COMPILATION_CONDITION[$start] symbol )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(CONDITIONAL_COMPILATION_CONDITION, (cast(Token)retval.start))
                        , root_1);

                        adaptor.addChild(root_1, stream_symbol.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:591:5: 'static' 'if' '(' assignExpression ')'
                    {
                    string_literal240=cast(Token)match(input,275,FOLLOW_275_in_condition4622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_275.add(cast(Object)string_literal240);


                    string_literal241=cast(Token)match(input,STMT_IF,FOLLOW_STMT_IF_in_condition4624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STMT_IF.add(cast(Object)string_literal241);


                    char_literal242=cast(Token)match(input,170,FOLLOW_170_in_condition4626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal242);


                    pushFollow(FOLLOW_assignExpression_in_condition4628);
                    assignExpression243=assignExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression243.getTree());

                    char_literal244=cast(Token)match(input,171,FOLLOW_171_in_condition4630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal244);


                    // AST REWRITE
                    // elements: assignExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 591:44: -> ^( CONDITIONAL_COMPILATION_CONDITION[\"static if\"] assignExpression )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:591:47: ^( CONDITIONAL_COMPILATION_CONDITION[\"static if\"] assignExpression )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(CONDITIONAL_COMPILATION_CONDITION, "static if")
                        , root_1);

                        adaptor.addChild(root_1, stream_assignExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition"," ",58);
        }
        return retval;
    }
    // $ANTLR end "condition"


    public static class dvSpecification_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dvSpecification"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:594:1: dvSpecification : ( 'version' | 'debug' ) '=' symbol ';' -> ^( DV_SPEC[$start] symbol ) ;
    public final dparserParser.dvSpecification_return dvSpecification()  {
        debug(trace_rules) writeln("Entering rule:","dvSpecification"," ",59);
        dparserParser.dvSpecification_return retval = new dparserParser.dvSpecification_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal245=null;
        Token string_literal246=null;
        Token char_literal247=null;
        Token char_literal249=null;
        dparserParser.symbol_return symbol248 =null;


        Object string_literal245_tree=null;
        Object string_literal246_tree=null;
        Object char_literal247_tree=null;
        Object char_literal249_tree=null;
        RewriteRuleTokenStream stream_225=new RewriteRuleTokenStream(adaptor,"token 225");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_281=new RewriteRuleTokenStream(adaptor,"token 281");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_symbol=new RewriteRuleSubtreeStream(adaptor,"rule symbol");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:3: ( ( 'version' | 'debug' ) '=' symbol ';' -> ^( DV_SPEC[$start] symbol ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:5: ( 'version' | 'debug' ) '=' symbol ';'
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:5: ( 'version' | 'debug' )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==281) ) {
                alt56=1;
            }
            else if ( (LA56_0==225) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:6: 'version'
                   {
                   string_literal245=cast(Token)match(input,281,FOLLOW_281_in_dvSpecification4653); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_281.add(cast(Object)string_literal245);


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:18: 'debug'
                   {
                   string_literal246=cast(Token)match(input,225,FOLLOW_225_in_dvSpecification4657); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_225.add(cast(Object)string_literal246);


                   }
                   break;

                default:
            }


            char_literal247=cast(Token)match(input,193,FOLLOW_193_in_dvSpecification4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal247);


            pushFollow(FOLLOW_symbol_in_dvSpecification4662);
            symbol248=symbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_symbol.add(cast(Object)symbol248.getTree());

            char_literal249=cast(Token)match(input,186,FOLLOW_186_in_dvSpecification4664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal249);


            // AST REWRITE
            // elements: symbol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 595:42: -> ^( DV_SPEC[$start] symbol )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:595:45: ^( DV_SPEC[$start] symbol )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DV_SPEC, (cast(Token)retval.start))
                , root_1);

                adaptor.addChild(root_1, stream_symbol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","dvSpecification"," ",59);
        }
        return retval;
    }
    // $ANTLR end "dvSpecification"


    public static class staticAssert_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "staticAssert"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:598:1: staticAssert : 'static' 'assert' '(' assignExpression ( ',' assignExpression )? ')' ';' -> ^( STATIC_ASSERT ( assignExpression )* ) ;
    public final dparserParser.staticAssert_return staticAssert()  {
        debug(trace_rules) writeln("Entering rule:","staticAssert"," ",60);
        dparserParser.staticAssert_return retval = new dparserParser.staticAssert_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal250=null;
        Token string_literal251=null;
        Token char_literal252=null;
        Token char_literal254=null;
        Token char_literal256=null;
        Token char_literal257=null;
        dparserParser.assignExpression_return assignExpression253 =null;

        dparserParser.assignExpression_return assignExpression255 =null;


        Object string_literal250_tree=null;
        Object string_literal251_tree=null;
        Object char_literal252_tree=null;
        Object char_literal254_tree=null;
        Object char_literal256_tree=null;
        Object char_literal257_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_275=new RewriteRuleTokenStream(adaptor,"token 275");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_EXP_ASSERT=new RewriteRuleTokenStream(adaptor,"token EXP_ASSERT");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:599:3: ( 'static' 'assert' '(' assignExpression ( ',' assignExpression )? ')' ';' -> ^( STATIC_ASSERT ( assignExpression )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:599:5: 'static' 'assert' '(' assignExpression ( ',' assignExpression )? ')' ';'
            {
            string_literal250=cast(Token)match(input,275,FOLLOW_275_in_staticAssert4688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_275.add(cast(Object)string_literal250);


            string_literal251=cast(Token)match(input,EXP_ASSERT,FOLLOW_EXP_ASSERT_in_staticAssert4690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_ASSERT.add(cast(Object)string_literal251);


            char_literal252=cast(Token)match(input,170,FOLLOW_170_in_staticAssert4692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal252);


            pushFollow(FOLLOW_assignExpression_in_staticAssert4694);
            assignExpression253=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression253.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:599:44: ( ',' assignExpression )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==177) ) {
                alt57=1;
            }
            switch (alt57) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:599:45: ',' assignExpression
                   {
                   char_literal254=cast(Token)match(input,177,FOLLOW_177_in_staticAssert4697); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal254);


                   pushFollow(FOLLOW_assignExpression_in_staticAssert4699);
                   assignExpression255=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression255.getTree());

                   }
                   break;

                default:
            }


            char_literal256=cast(Token)match(input,171,FOLLOW_171_in_staticAssert4703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal256);


            char_literal257=cast(Token)match(input,186,FOLLOW_186_in_staticAssert4705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal257);


            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 600:5: -> ^( STATIC_ASSERT ( assignExpression )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:600:8: ^( STATIC_ASSERT ( assignExpression )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STATIC_ASSERT, "STATIC_ASSERT")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:600:24: ( assignExpression )*
                while ( stream_assignExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_assignExpression.nextTree());

                }
                stream_assignExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","staticAssert"," ",60);
        }
        return retval;
    }
    // $ANTLR end "staticAssert"


    public static class templateDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:606:1: templateDeclaration : TEMPLATE_DECLARATION ^ defSymbol '(' ! templateParameterList ')' ! ( constraint )? templateDeclarationBlock ;
    public final dparserParser.templateDeclaration_return templateDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","templateDeclaration"," ",61);
        dparserParser.templateDeclaration_return retval = new dparserParser.templateDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TEMPLATE_DECLARATION258=null;
        Token char_literal260=null;
        Token char_literal262=null;
        dparserParser.defSymbol_return defSymbol259 =null;

        dparserParser.templateParameterList_return templateParameterList261 =null;

        dparserParser.constraint_return constraint263 =null;

        dparserParser.templateDeclarationBlock_return templateDeclarationBlock264 =null;


        Object TEMPLATE_DECLARATION258_tree=null;
        Object char_literal260_tree=null;
        Object char_literal262_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:607:3: ( TEMPLATE_DECLARATION ^ defSymbol '(' ! templateParameterList ')' ! ( constraint )? templateDeclarationBlock )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:607:5: TEMPLATE_DECLARATION ^ defSymbol '(' ! templateParameterList ')' ! ( constraint )? templateDeclarationBlock
            {
            root_0 = cast(Object)adaptor.nil();


            TEMPLATE_DECLARATION258=cast(Token)match(input,TEMPLATE_DECLARATION,FOLLOW_TEMPLATE_DECLARATION_in_templateDeclaration4734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEMPLATE_DECLARATION258_tree = 
            cast(Object)adaptor.create(TEMPLATE_DECLARATION258)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(TEMPLATE_DECLARATION258_tree, root_0);
            }

            pushFollow(FOLLOW_defSymbol_in_templateDeclaration4741);
            defSymbol259=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, defSymbol259.getTree());

            char_literal260=cast(Token)match(input,170,FOLLOW_170_in_templateDeclaration4743); if (state.failed) return retval;

            pushFollow(FOLLOW_templateParameterList_in_templateDeclaration4746);
            templateParameterList261=templateParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, templateParameterList261.getTree());

            char_literal262=cast(Token)match(input,171,FOLLOW_171_in_templateDeclaration4748); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:609:5: ( constraint )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==STMT_IF) ) {
                alt58=1;
            }
            switch (alt58) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:609:5: constraint
                   {
                   pushFollow(FOLLOW_constraint_in_templateDeclaration4755);
                   constraint263=constraint();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint263.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_templateDeclarationBlock_in_templateDeclaration4762);
            templateDeclarationBlock264=templateDeclarationBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, templateDeclarationBlock264.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateDeclaration"," ",61);
        }
        return retval;
    }
    // $ANTLR end "templateDeclaration"


    public static class templateParameterList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateParameterList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:613:1: templateParameterList : ( templateParameter ( ',' templateParameter )* )? -> ^( TEMPLATE_PARAM_LIST ( templateParameter )* ) ;
    public final dparserParser.templateParameterList_return templateParameterList()  {
        debug(trace_rules) writeln("Entering rule:","templateParameterList"," ",62);
        dparserParser.templateParameterList_return retval = new dparserParser.templateParameterList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal266=null;
        dparserParser.templateParameter_return templateParameter265 =null;

        dparserParser.templateParameter_return templateParameter267 =null;


        Object char_literal266_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_templateParameter=new RewriteRuleSubtreeStream(adaptor,"rule templateParameter");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:3: ( ( templateParameter ( ',' templateParameter )* )? -> ^( TEMPLATE_PARAM_LIST ( templateParameter )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:6: ( templateParameter ( ',' templateParameter )* )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:6: ( templateParameter ( ',' templateParameter )* )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==EXP_THIS||LA60_0==Identifier||LA60_0==181||LA60_0==212||(LA60_0 >=215  && LA60_0<=219)||(LA60_0 >=223  && LA60_0<=224)||LA60_0==229||LA60_0==235||(LA60_0 >=243  && LA60_0<=244)||(LA60_0 >=248  && LA60_0<=249)||LA60_0==267||LA60_0==272||LA60_0==274||(LA60_0 >=277  && LA60_0<=280)||(LA60_0 >=282  && LA60_0<=283)) ) {
                alt60=1;
            }
            switch (alt60) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:8: templateParameter ( ',' templateParameter )*
                   {
                   pushFollow(FOLLOW_templateParameter_in_templateParameterList4780);
                   templateParameter265=templateParameter();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_templateParameter.add(cast(Object)templateParameter265.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:26: ( ',' templateParameter )*
                   loop59:
                   do {
                       int alt59=2;
                       int LA59_0 = input.LA(1);

                       if ( (LA59_0==177) ) {
                           alt59=1;
                       }


                       switch (alt59) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:27: ',' templateParameter
                   	    {
                   	    char_literal266=cast(Token)match(input,177,FOLLOW_177_in_templateParameterList4783); if (state.failed) return retval; 
                   	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal266);


                   	    pushFollow(FOLLOW_templateParameter_in_templateParameterList4785);
                   	    templateParameter267=templateParameter();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_templateParameter.add(cast(Object)templateParameter267.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop59;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: templateParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 614:54: -> ^( TEMPLATE_PARAM_LIST ( templateParameter )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:57: ^( TEMPLATE_PARAM_LIST ( templateParameter )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_LIST, "TEMPLATE_PARAM_LIST")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:614:79: ( templateParameter )*
                while ( stream_templateParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_templateParameter.nextTree());

                }
                stream_templateParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateParameterList"," ",62);
        }
        return retval;
    }
    // $ANTLR end "templateParameterList"


    public static class templateParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:617:1: templateParameter : ( templateTypeParameter | templateValueParameter | templateAliasParameter | templateTupleParameter | templateThisParameter );
    public final dparserParser.templateParameter_return templateParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateParameter"," ",63);
        dparserParser.templateParameter_return retval = new dparserParser.templateParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.templateTypeParameter_return templateTypeParameter268 =null;

        dparserParser.templateValueParameter_return templateValueParameter269 =null;

        dparserParser.templateAliasParameter_return templateAliasParameter270 =null;

        dparserParser.templateTupleParameter_return templateTupleParameter271 =null;

        dparserParser.templateThisParameter_return templateThisParameter272 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:618:3: ( templateTypeParameter | templateValueParameter | templateAliasParameter | templateTupleParameter | templateThisParameter )
            int alt61=5;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 171:
                case 177:
                case 185:
                case 193:
                    {
                    alt61=1;
                    }
                    break;
                case Identifier:
                case 157:
                case 172:
                case 181:
                case 204:
                    {
                    alt61=2;
                    }
                    break;
                case 182:
                    {
                    alt61=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae = 
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;

                }

                }
                break;
            case 181:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt61=2;
                }
                break;
            case 212:
                {
                alt61=3;
                }
                break;
            case EXP_THIS:
                {
                alt61=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }

            switch (alt61) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:618:5: templateTypeParameter
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateTypeParameter_in_templateParameter4814);
                    templateTypeParameter268=templateTypeParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateTypeParameter268.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:619:5: templateValueParameter
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateValueParameter_in_templateParameter4820);
                    templateValueParameter269=templateValueParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateValueParameter269.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:620:5: templateAliasParameter
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateAliasParameter_in_templateParameter4826);
                    templateAliasParameter270=templateAliasParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateAliasParameter270.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:621:5: templateTupleParameter
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateTupleParameter_in_templateParameter4832);
                    templateTupleParameter271=templateTupleParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateTupleParameter271.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:622:5: templateThisParameter
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_templateThisParameter_in_templateParameter4838);
                    templateThisParameter272=templateThisParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateThisParameter272.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateParameter"," ",63);
        }
        return retval;
    }
    // $ANTLR end "templateParameter"


    public static class templateTypeParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateTypeParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:625:1: templateTypeParameter : defSymbol ( ':' type )? ( '=' type )? -> ^( TEMPLATE_PARAM_TYPE defSymbol ( type )* ) ;
    public final dparserParser.templateTypeParameter_return templateTypeParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateTypeParameter"," ",64);
        dparserParser.templateTypeParameter_return retval = new dparserParser.templateTypeParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal274=null;
        Token char_literal276=null;
        dparserParser.defSymbol_return defSymbol273 =null;

        dparserParser.type_return type275 =null;

        dparserParser.type_return type277 =null;


        Object char_literal274_tree=null;
        Object char_literal276_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:3: ( defSymbol ( ':' type )? ( '=' type )? -> ^( TEMPLATE_PARAM_TYPE defSymbol ( type )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:5: defSymbol ( ':' type )? ( '=' type )?
            {
            pushFollow(FOLLOW_defSymbol_in_templateTypeParameter4853);
            defSymbol273=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol273.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:15: ( ':' type )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==185) ) {
                alt62=1;
            }
            switch (alt62) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:16: ':' type
                   {
                   char_literal274=cast(Token)match(input,185,FOLLOW_185_in_templateTypeParameter4856); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal274);


                   pushFollow(FOLLOW_type_in_templateTypeParameter4858);
                   type275=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_type.add(cast(Object)type275.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:27: ( '=' type )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==193) ) {
                alt63=1;
            }
            switch (alt63) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:28: '=' type
                   {
                   char_literal276=cast(Token)match(input,193,FOLLOW_193_in_templateTypeParameter4863); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal276);


                   pushFollow(FOLLOW_type_in_templateTypeParameter4865);
                   type277=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_type.add(cast(Object)type277.getTree());

                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: defSymbol, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 626:39: -> ^( TEMPLATE_PARAM_TYPE defSymbol ( type )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:42: ^( TEMPLATE_PARAM_TYPE defSymbol ( type )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_TYPE, "TEMPLATE_PARAM_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:626:74: ( type )*
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateTypeParameter"," ",64);
        }
        return retval;
    }
    // $ANTLR end "templateTypeParameter"


    public static class templateValueParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateValueParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:629:1: templateValueParameter : type defSymbol ( ':' conditionalExpression )? ( '=' assignExpression )? -> ^( TEMPLATE_PARAM_VALUE defSymbol type ( conditionalExpression )? ( assignExpression )? ) ;
    public final dparserParser.templateValueParameter_return templateValueParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateValueParameter"," ",65);
        dparserParser.templateValueParameter_return retval = new dparserParser.templateValueParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal280=null;
        Token char_literal282=null;
        dparserParser.type_return type278 =null;

        dparserParser.defSymbol_return defSymbol279 =null;

        dparserParser.conditionalExpression_return conditionalExpression281 =null;

        dparserParser.assignExpression_return assignExpression283 =null;


        Object char_literal280_tree=null;
        Object char_literal282_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:630:3: ( type defSymbol ( ':' conditionalExpression )? ( '=' assignExpression )? -> ^( TEMPLATE_PARAM_VALUE defSymbol type ( conditionalExpression )? ( assignExpression )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:630:5: type defSymbol ( ':' conditionalExpression )? ( '=' assignExpression )?
            {
            pushFollow(FOLLOW_type_in_templateValueParameter4893);
            type278=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(cast(Object)type278.getTree());

            pushFollow(FOLLOW_defSymbol_in_templateValueParameter4895);
            defSymbol279=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol279.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:631:5: ( ':' conditionalExpression )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==185) ) {
                alt64=1;
            }
            switch (alt64) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:631:6: ':' conditionalExpression
                   {
                   char_literal280=cast(Token)match(input,185,FOLLOW_185_in_templateValueParameter4902); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal280);


                   pushFollow(FOLLOW_conditionalExpression_in_templateValueParameter4904);
                   conditionalExpression281=conditionalExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression281.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:632:5: ( '=' assignExpression )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==193) ) {
                alt65=1;
            }
            switch (alt65) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:632:6: '=' assignExpression
                   {
                   char_literal282=cast(Token)match(input,193,FOLLOW_193_in_templateValueParameter4913); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal282);


                   pushFollow(FOLLOW_assignExpression_in_templateValueParameter4915);
                   assignExpression283=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression283.getTree());

                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: type, defSymbol, assignExpression, conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 633:5: -> ^( TEMPLATE_PARAM_VALUE defSymbol type ( conditionalExpression )? ( assignExpression )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:633:8: ^( TEMPLATE_PARAM_VALUE defSymbol type ( conditionalExpression )? ( assignExpression )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_VALUE, "TEMPLATE_PARAM_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                adaptor.addChild(root_1, stream_type.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:633:46: ( conditionalExpression )?
                if ( stream_conditionalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                }
                stream_conditionalExpression.reset();

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:633:69: ( assignExpression )?
                if ( stream_assignExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_assignExpression.nextTree());

                }
                stream_assignExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateValueParameter"," ",65);
        }
        return retval;
    }
    // $ANTLR end "templateValueParameter"


    public static class templateAliasParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateAliasParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:636:1: templateAliasParameter : 'alias' ( type )? defSymbol ( ':' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )? ( '=' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )? -> ^( TEMPLATE_PARAM_ALIAS defSymbol ) ;
    public final dparserParser.templateAliasParameter_return templateAliasParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateAliasParameter"," ",66);
        dparserParser.templateAliasParameter_return retval = new dparserParser.templateAliasParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal284=null;
        Token char_literal287=null;
        Token char_literal291=null;
        dparserParser.type_return type285 =null;

        dparserParser.defSymbol_return defSymbol286 =null;

        dparserParser.lambdaExpression_return lambdaExpression288 =null;

        dparserParser.type_return type289 =null;

        dparserParser.conditionalExpression_return conditionalExpression290 =null;

        dparserParser.lambdaExpression_return lambdaExpression292 =null;

        dparserParser.type_return type293 =null;

        dparserParser.conditionalExpression_return conditionalExpression294 =null;


        Object string_literal284_tree=null;
        Object char_literal287_tree=null;
        Object char_literal291_tree=null;
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_lambdaExpression=new RewriteRuleSubtreeStream(adaptor,"rule lambdaExpression");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:637:3: ( 'alias' ( type )? defSymbol ( ':' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )? ( '=' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )? -> ^( TEMPLATE_PARAM_ALIAS defSymbol ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:637:5: 'alias' ( type )? defSymbol ( ':' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )? ( '=' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )?
            {
            string_literal284=cast(Token)match(input,212,FOLLOW_212_in_templateAliasParameter4952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_212.add(cast(Object)string_literal284);


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:637:13: ( type )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==181||(LA66_0 >=215  && LA66_0<=219)||(LA66_0 >=223  && LA66_0<=224)||LA66_0==229||LA66_0==235||(LA66_0 >=243  && LA66_0<=244)||(LA66_0 >=248  && LA66_0<=249)||LA66_0==267||LA66_0==272||LA66_0==274||(LA66_0 >=277  && LA66_0<=280)||(LA66_0 >=282  && LA66_0<=283)) ) {
                alt66=1;
            }
            else if ( (LA66_0==Identifier) ) {
                int LA66_2 = input.LA(2);

                if ( (LA66_2==Identifier||LA66_2==157||LA66_2==172||LA66_2==181||LA66_2==204) ) {
                    alt66=1;
                }
            }
            switch (alt66) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:637:13: type
                   {
                   pushFollow(FOLLOW_type_in_templateAliasParameter4954);
                   type285=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_type.add(cast(Object)type285.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_defSymbol_in_templateAliasParameter4957);
            defSymbol286=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol286.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:5: ( ':' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==185) ) {
                alt68=1;
            }
            switch (alt68) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:6: ':' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression )
                   {
                   char_literal287=cast(Token)match(input,185,FOLLOW_185_in_templateAliasParameter4964); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal287);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:10: ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression )
                   int alt67=3;
                   int LA67_0 = input.LA(1);

                   if ( (LA67_0==Identifier) ) {
                       int LA67_1 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (synpred8_dparser()) ) {
                           alt67=2;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 1, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==170) ) {
                       int LA67_2 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 2, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==268) ) {
                       int LA67_3 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 3, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==271) ) {
                       int LA67_4 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 4, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==203) ) {
                       int LA67_5 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 5, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==195) ) {
                       int LA67_6 = input.LA(2);

                       if ( (synpred7_dparser()) ) {
                           alt67=1;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 6, input);

                           throw nvae;

                       }
                   }
                   else if ( ((LA67_0 >=215  && LA67_0<=219)||(LA67_0 >=223  && LA67_0<=224)||LA67_0==229||LA67_0==235||(LA67_0 >=243  && LA67_0<=244)||(LA67_0 >=248  && LA67_0<=249)||LA67_0==267||LA67_0==272||LA67_0==274||(LA67_0 >=277  && LA67_0<=280)||(LA67_0 >=282  && LA67_0<=283)) && (synpred8_dparser())) {
                       alt67=2;
                   }
                   else if ( (LA67_0==181) ) {
                       int LA67_8 = input.LA(2);

                       if ( (synpred8_dparser()) ) {
                           alt67=2;
                       }
                       else if ( (true) ) {
                           alt67=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 67, 8, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA67_0==CharacterLiteral||LA67_0==EXP_ASSERT||LA67_0==EXP_CAST||(LA67_0 >=34  && LA67_0<=35)||LA67_0==EXP_IS||LA67_0==EXP_LITERAL_FILE||(LA67_0 >=44  && LA67_0<=45)||(LA67_0 >=48  && LA67_0<=49)||(LA67_0 >=52  && LA67_0<=56)||LA67_0==FloatLiteral||LA67_0==IntegerLiteral||LA67_0==StringLiteral||LA67_0==157||LA67_0==168||LA67_0==172||(LA67_0 >=174  && LA67_0<=175)||LA67_0==178||LA67_0==226||LA67_0==237||LA67_0==246||LA67_0==289) ) {
                       alt67=3;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 67, 0, input);

                       throw nvae;

                   }
                   switch (alt67) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:12: ( Identifier '=>' )=> ( lambdaExpression )
                          {
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:32: ( lambdaExpression )
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:33: lambdaExpression
                          {
                          pushFollow(FOLLOW_lambdaExpression_in_templateAliasParameter4976);
                          lambdaExpression288=lambdaExpression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_lambdaExpression.add(cast(Object)lambdaExpression288.getTree());

                          }


                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:639:12: ( type )=> ( type )
                          {
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:639:21: ( type )
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:639:22: type
                          {
                          pushFollow(FOLLOW_type_in_templateAliasParameter4996);
                          type289=type();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_type.add(cast(Object)type289.getTree());

                          }


                          }
                          break;
                      case 3 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:640:12: conditionalExpression
                          {
                          pushFollow(FOLLOW_conditionalExpression_in_templateAliasParameter5010);
                          conditionalExpression290=conditionalExpression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression290.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:5: ( '=' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==193) ) {
                alt70=1;
            }
            switch (alt70) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:6: '=' ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression )
                   {
                   char_literal291=cast(Token)match(input,193,FOLLOW_193_in_templateAliasParameter5045); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_193.add(cast(Object)char_literal291);


                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:10: ( ( Identifier '=>' )=> ( lambdaExpression ) | ( type )=> ( type ) | conditionalExpression )
                   int alt69=3;
                   int LA69_0 = input.LA(1);

                   if ( (LA69_0==Identifier) ) {
                       int LA69_1 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (synpred10_dparser()) ) {
                           alt69=2;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 1, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==170) ) {
                       int LA69_2 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 2, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==268) ) {
                       int LA69_3 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 3, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==271) ) {
                       int LA69_4 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 4, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==203) ) {
                       int LA69_5 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 5, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==195) ) {
                       int LA69_6 = input.LA(2);

                       if ( (synpred9_dparser()) ) {
                           alt69=1;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 6, input);

                           throw nvae;

                       }
                   }
                   else if ( ((LA69_0 >=215  && LA69_0<=219)||(LA69_0 >=223  && LA69_0<=224)||LA69_0==229||LA69_0==235||(LA69_0 >=243  && LA69_0<=244)||(LA69_0 >=248  && LA69_0<=249)||LA69_0==267||LA69_0==272||LA69_0==274||(LA69_0 >=277  && LA69_0<=280)||(LA69_0 >=282  && LA69_0<=283)) && (synpred10_dparser())) {
                       alt69=2;
                   }
                   else if ( (LA69_0==181) ) {
                       int LA69_8 = input.LA(2);

                       if ( (synpred10_dparser()) ) {
                           alt69=2;
                       }
                       else if ( (true) ) {
                           alt69=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 69, 8, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA69_0==CharacterLiteral||LA69_0==EXP_ASSERT||LA69_0==EXP_CAST||(LA69_0 >=34  && LA69_0<=35)||LA69_0==EXP_IS||LA69_0==EXP_LITERAL_FILE||(LA69_0 >=44  && LA69_0<=45)||(LA69_0 >=48  && LA69_0<=49)||(LA69_0 >=52  && LA69_0<=56)||LA69_0==FloatLiteral||LA69_0==IntegerLiteral||LA69_0==StringLiteral||LA69_0==157||LA69_0==168||LA69_0==172||(LA69_0 >=174  && LA69_0<=175)||LA69_0==178||LA69_0==226||LA69_0==237||LA69_0==246||LA69_0==289) ) {
                       alt69=3;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 69, 0, input);

                       throw nvae;

                   }
                   switch (alt69) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:12: ( Identifier '=>' )=> ( lambdaExpression )
                          {
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:32: ( lambdaExpression )
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:33: lambdaExpression
                          {
                          pushFollow(FOLLOW_lambdaExpression_in_templateAliasParameter5057);
                          lambdaExpression292=lambdaExpression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_lambdaExpression.add(cast(Object)lambdaExpression292.getTree());

                          }


                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:645:12: ( type )=> ( type )
                          {
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:645:21: ( type )
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:645:22: type
                          {
                          pushFollow(FOLLOW_type_in_templateAliasParameter5077);
                          type293=type();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_type.add(cast(Object)type293.getTree());

                          }


                          }
                          break;
                      case 3 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:646:12: conditionalExpression
                          {
                          pushFollow(FOLLOW_conditionalExpression_in_templateAliasParameter5091);
                          conditionalExpression294=conditionalExpression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression294.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: defSymbol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 649:5: -> ^( TEMPLATE_PARAM_ALIAS defSymbol )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:649:8: ^( TEMPLATE_PARAM_ALIAS defSymbol )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_ALIAS, "TEMPLATE_PARAM_ALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateAliasParameter"," ",66);
        }
        return retval;
    }
    // $ANTLR end "templateAliasParameter"


    public static class templateTupleParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateTupleParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:652:1: templateTupleParameter : defSymbol '...' -> ^( TEMPLATE_PARAM_TUPLE defSymbol ) ;
    public final dparserParser.templateTupleParameter_return templateTupleParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateTupleParameter"," ",67);
        dparserParser.templateTupleParameter_return retval = new dparserParser.templateTupleParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal296=null;
        dparserParser.defSymbol_return defSymbol295 =null;


        Object string_literal296_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_defSymbol=new RewriteRuleSubtreeStream(adaptor,"rule defSymbol");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:653:3: ( defSymbol '...' -> ^( TEMPLATE_PARAM_TUPLE defSymbol ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:653:5: defSymbol '...'
            {
            pushFollow(FOLLOW_defSymbol_in_templateTupleParameter5136);
            defSymbol295=defSymbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defSymbol.add(cast(Object)defSymbol295.getTree());

            string_literal296=cast(Token)match(input,182,FOLLOW_182_in_templateTupleParameter5138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(cast(Object)string_literal296);


            // AST REWRITE
            // elements: defSymbol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 653:21: -> ^( TEMPLATE_PARAM_TUPLE defSymbol )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:653:24: ^( TEMPLATE_PARAM_TUPLE defSymbol )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_TUPLE, "TEMPLATE_PARAM_TUPLE")
                , root_1);

                adaptor.addChild(root_1, stream_defSymbol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateTupleParameter"," ",67);
        }
        return retval;
    }
    // $ANTLR end "templateTupleParameter"


    public static class templateThisParameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateThisParameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:656:1: templateThisParameter : 'this' templateTypeParameter -> ^( TEMPLATE_PARAM_THIS templateTypeParameter ) ;
    public final dparserParser.templateThisParameter_return templateThisParameter()  {
        debug(trace_rules) writeln("Entering rule:","templateThisParameter"," ",68);
        dparserParser.templateThisParameter_return retval = new dparserParser.templateThisParameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal297=null;
        dparserParser.templateTypeParameter_return templateTypeParameter298 =null;


        Object string_literal297_tree=null;
        RewriteRuleTokenStream stream_EXP_THIS=new RewriteRuleTokenStream(adaptor,"token EXP_THIS");
        RewriteRuleSubtreeStream stream_templateTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule templateTypeParameter");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:657:3: ( 'this' templateTypeParameter -> ^( TEMPLATE_PARAM_THIS templateTypeParameter ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:657:5: 'this' templateTypeParameter
            {
            string_literal297=cast(Token)match(input,EXP_THIS,FOLLOW_EXP_THIS_in_templateThisParameter5161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_THIS.add(cast(Object)string_literal297);


            pushFollow(FOLLOW_templateTypeParameter_in_templateThisParameter5163);
            templateTypeParameter298=templateTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_templateTypeParameter.add(cast(Object)templateTypeParameter298.getTree());

            // AST REWRITE
            // elements: templateTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 657:34: -> ^( TEMPLATE_PARAM_THIS templateTypeParameter )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:657:37: ^( TEMPLATE_PARAM_THIS templateTypeParameter )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_PARAM_THIS, "TEMPLATE_PARAM_THIS")
                , root_1);

                adaptor.addChild(root_1, stream_templateTypeParameter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateThisParameter"," ",68);
        }
        return retval;
    }
    // $ANTLR end "templateThisParameter"


    public static class constraint_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraint"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:660:1: constraint : 'if' ! '(' ! expression ')' !;
    public final dparserParser.constraint_return constraint()  {
        debug(trace_rules) writeln("Entering rule:","constraint"," ",69);
        dparserParser.constraint_return retval = new dparserParser.constraint_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal299=null;
        Token char_literal300=null;
        Token char_literal302=null;
        dparserParser.expression_return expression301 =null;


        Object string_literal299_tree=null;
        Object char_literal300_tree=null;
        Object char_literal302_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:661:3: ( 'if' ! '(' ! expression ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:661:5: 'if' ! '(' ! expression ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal299=cast(Token)match(input,STMT_IF,FOLLOW_STMT_IF_in_constraint5186); if (state.failed) return retval;

            char_literal300=cast(Token)match(input,170,FOLLOW_170_in_constraint5189); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_constraint5192);
            expression301=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression301.getTree());

            char_literal302=cast(Token)match(input,171,FOLLOW_171_in_constraint5194); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","constraint"," ",69);
        }
        return retval;
    }
    // $ANTLR end "constraint"


    public static class templateDeclarationBlock_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateDeclarationBlock"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:664:1: templateDeclarationBlock : '{' ( declDef )* '}' -> ^( DECLARATION_BLOCK ( declDef )* ) ;
    public final dparserParser.templateDeclarationBlock_return templateDeclarationBlock()  {
        debug(trace_rules) writeln("Entering rule:","templateDeclarationBlock"," ",70);
        dparserParser.templateDeclarationBlock_return retval = new dparserParser.templateDeclarationBlock_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal303=null;
        Token char_literal305=null;
        dparserParser.declDef_return declDef304 =null;


        Object char_literal303_tree=null;
        Object char_literal305_tree=null;
        RewriteRuleTokenStream stream_288=new RewriteRuleTokenStream(adaptor,"token 288");
        RewriteRuleTokenStream stream_284=new RewriteRuleTokenStream(adaptor,"token 284");
        RewriteRuleSubtreeStream stream_declDef=new RewriteRuleSubtreeStream(adaptor,"rule declDef");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:3: ( '{' ( declDef )* '}' -> ^( DECLARATION_BLOCK ( declDef )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:5: '{' ( declDef )* '}'
            {
            char_literal303=cast(Token)match(input,284,FOLLOW_284_in_templateDeclarationBlock5211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_284.add(cast(Object)char_literal303);


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:9: ( declDef )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==CLASS_DECLARATION||LA71_0==ENUM_DECLARATION||LA71_0==EXP_MIXIN||LA71_0==EXP_THIS||LA71_0==INTERFACE_DECLARATION||LA71_0==Identifier||LA71_0==STMT_SCOPE||LA71_0==STMT_SYNCHRONIZED||LA71_0==STRUCT_DECLARATION||LA71_0==TEMPLATE_DECLARATION||(LA71_0 >=154  && LA71_0<=155)||LA71_0==181||(LA71_0 >=210  && LA71_0<=211)||(LA71_0 >=214  && LA71_0<=219)||(LA71_0 >=222  && LA71_0<=225)||LA71_0==227||LA71_0==229||LA71_0==232||(LA71_0 >=234  && LA71_0<=235)||(LA71_0 >=243  && LA71_0<=249)||(LA71_0 >=267  && LA71_0<=269)||(LA71_0 >=271  && LA71_0<=275)||(LA71_0 >=277  && LA71_0<=283)||LA71_0==291) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:9: declDef
            	    {
            	    pushFollow(FOLLOW_declDef_in_templateDeclarationBlock5213);
            	    declDef304=declDef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declDef.add(cast(Object)declDef304.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            char_literal305=cast(Token)match(input,288,FOLLOW_288_in_templateDeclarationBlock5216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_288.add(cast(Object)char_literal305);


            // AST REWRITE
            // elements: declDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 665:22: -> ^( DECLARATION_BLOCK ( declDef )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:25: ^( DECLARATION_BLOCK ( declDef )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(DECLARATION_BLOCK, "DECLARATION_BLOCK")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:665:45: ( declDef )*
                while ( stream_declDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_declDef.nextTree());

                }
                stream_declDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateDeclarationBlock"," ",70);
        }
        return retval;
    }
    // $ANTLR end "templateDeclarationBlock"


    public static class templateMixinDeclaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateMixinDeclaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:668:1: templateMixinDeclaration : 'mixin' templateDeclaration -> ^( TEMPLATE_MIXIN_DECLARATION templateDeclaration ) ;
    public final dparserParser.templateMixinDeclaration_return templateMixinDeclaration()  {
        debug(trace_rules) writeln("Entering rule:","templateMixinDeclaration"," ",71);
        dparserParser.templateMixinDeclaration_return retval = new dparserParser.templateMixinDeclaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal306=null;
        dparserParser.templateDeclaration_return templateDeclaration307 =null;


        Object string_literal306_tree=null;
        RewriteRuleTokenStream stream_EXP_MIXIN=new RewriteRuleTokenStream(adaptor,"token EXP_MIXIN");
        RewriteRuleSubtreeStream stream_templateDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule templateDeclaration");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:669:3: ( 'mixin' templateDeclaration -> ^( TEMPLATE_MIXIN_DECLARATION templateDeclaration ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:669:5: 'mixin' templateDeclaration
            {
            string_literal306=cast(Token)match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_templateMixinDeclaration5240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_MIXIN.add(cast(Object)string_literal306);


            pushFollow(FOLLOW_templateDeclaration_in_templateMixinDeclaration5242);
            templateDeclaration307=templateDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_templateDeclaration.add(cast(Object)templateDeclaration307.getTree());

            // AST REWRITE
            // elements: templateDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 669:33: -> ^( TEMPLATE_MIXIN_DECLARATION templateDeclaration )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:669:36: ^( TEMPLATE_MIXIN_DECLARATION templateDeclaration )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_MIXIN_DECLARATION, "TEMPLATE_MIXIN_DECLARATION")
                , root_1);

                adaptor.addChild(root_1, stream_templateDeclaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateMixinDeclaration"," ",71);
        }
        return retval;
    }
    // $ANTLR end "templateMixinDeclaration"


    public static class templateMixin_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "templateMixin"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:672:1: templateMixin : 'mixin' type ( options {greedy=true; } : Identifier )? -> ^( TEMPLATE_MIXIN type ( Identifier )? ) ;
    public final dparserParser.templateMixin_return templateMixin()  {
        debug(trace_rules) writeln("Entering rule:","templateMixin"," ",72);
        dparserParser.templateMixin_return retval = new dparserParser.templateMixin_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal308=null;
        Token Identifier310=null;
        dparserParser.type_return type309 =null;


        Object string_literal308_tree=null;
        Object Identifier310_tree=null;
        RewriteRuleTokenStream stream_EXP_MIXIN=new RewriteRuleTokenStream(adaptor,"token EXP_MIXIN");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:3: ( 'mixin' type ( options {greedy=true; } : Identifier )? -> ^( TEMPLATE_MIXIN type ( Identifier )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:5: 'mixin' type ( options {greedy=true; } : Identifier )?
            {
            string_literal308=cast(Token)match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_templateMixin5265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXP_MIXIN.add(cast(Object)string_literal308);


            pushFollow(FOLLOW_type_in_templateMixin5267);
            type309=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(cast(Object)type309.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:18: ( options {greedy=true; } : Identifier )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Identifier) ) {
                alt72=1;
            }
            switch (alt72) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:45: Identifier
                   {
                   Identifier310=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_templateMixin5280); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier310);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: type, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 673:58: -> ^( TEMPLATE_MIXIN type ( Identifier )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:61: ^( TEMPLATE_MIXIN type ( Identifier )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(TEMPLATE_MIXIN, "TEMPLATE_MIXIN")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:673:83: ( Identifier )?
                if ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","templateMixin"," ",72);
        }
        return retval;
    }
    // $ANTLR end "templateMixin"


    public static class blockStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blockStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:676:1: blockStatement : '{' ( statement )* '}' -> ^( STMT_BLOCK ( statement )* ) ;
    public final dparserParser.blockStatement_return blockStatement()  {
        debug(trace_rules) writeln("Entering rule:","blockStatement"," ",73);
        dparserParser.blockStatement_return retval = new dparserParser.blockStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal311=null;
        Token char_literal313=null;
        dparserParser.statement_return statement312 =null;


        Object char_literal311_tree=null;
        Object char_literal313_tree=null;
        RewriteRuleTokenStream stream_288=new RewriteRuleTokenStream(adaptor,"token 288");
        RewriteRuleTokenStream stream_284=new RewriteRuleTokenStream(adaptor,"token 284");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:3: ( '{' ( statement )* '}' -> ^( STMT_BLOCK ( statement )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:5: '{' ( statement )* '}'
            {
            char_literal311=cast(Token)match(input,284,FOLLOW_284_in_blockStatement5306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_284.add(cast(Object)char_literal311);


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:9: ( statement )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==CharacterLiteral||LA73_0==ENUM_DECLARATION||LA73_0==EXP_ASSERT||LA73_0==EXP_CAST||(LA73_0 >=34  && LA73_0<=35)||LA73_0==EXP_IS||LA73_0==EXP_LITERAL_FILE||(LA73_0 >=44  && LA73_0<=45)||(LA73_0 >=48  && LA73_0<=49)||(LA73_0 >=52  && LA73_0<=56)||LA73_0==FloatLiteral||LA73_0==Identifier||LA73_0==IntegerLiteral||LA73_0==STMT_ASM||(LA73_0 >=108  && LA73_0<=109)||LA73_0==STMT_CONTINUE||(LA73_0 >=114  && LA73_0<=115)||(LA73_0 >=119  && LA73_0<=120)||(LA73_0 >=122  && LA73_0<=123)||(LA73_0 >=126  && LA73_0<=134)||LA73_0==StringLiteral||LA73_0==157||LA73_0==168||LA73_0==170||LA73_0==172||(LA73_0 >=174  && LA73_0<=175)||LA73_0==178||LA73_0==181||LA73_0==186||LA73_0==195||LA73_0==203||(LA73_0 >=210  && LA73_0<=211)||(LA73_0 >=214  && LA73_0<=219)||(LA73_0 >=222  && LA73_0<=227)||LA73_0==229||LA73_0==232||(LA73_0 >=234  && LA73_0<=237)||(LA73_0 >=243  && LA73_0<=249)||(LA73_0 >=267  && LA73_0<=269)||(LA73_0 >=271  && LA73_0<=275)||(LA73_0 >=277  && LA73_0<=284)||LA73_0==289) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_blockStatement5308);
            	    statement312=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(cast(Object)statement312.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            char_literal313=cast(Token)match(input,288,FOLLOW_288_in_blockStatement5311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_288.add(cast(Object)char_literal313);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 677:24: -> ^( STMT_BLOCK ( statement )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:27: ^( STMT_BLOCK ( statement )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_BLOCK, "STMT_BLOCK")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:677:40: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","blockStatement"," ",73);
        }
        return retval;
    }
    // $ANTLR end "blockStatement"


    public static class expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:682:1: expression : commaExpression ;
    public final dparserParser.expression_return expression()  {
        debug(trace_rules) writeln("Entering rule:","expression"," ",74);
        dparserParser.expression_return retval = new dparserParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.commaExpression_return commaExpression314 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:683:3: ( commaExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:683:5: commaExpression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_commaExpression_in_expression5337);
            commaExpression314=commaExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, commaExpression314.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expression"," ",74);
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class commaExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commaExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:686:1: commaExpression : ( assignExpression -> assignExpression ) ( ',' assignExpression -> ^( INFIX[\",\"] $commaExpression assignExpression ) )* ;
    public final dparserParser.commaExpression_return commaExpression()  {
        debug(trace_rules) writeln("Entering rule:","commaExpression"," ",75);
        dparserParser.commaExpression_return retval = new dparserParser.commaExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal316=null;
        dparserParser.assignExpression_return assignExpression315 =null;

        dparserParser.assignExpression_return assignExpression317 =null;


        Object char_literal316_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:687:3: ( ( assignExpression -> assignExpression ) ( ',' assignExpression -> ^( INFIX[\",\"] $commaExpression assignExpression ) )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:687:5: ( assignExpression -> assignExpression ) ( ',' assignExpression -> ^( INFIX[\",\"] $commaExpression assignExpression ) )*
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:687:5: ( assignExpression -> assignExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:687:6: assignExpression
            {
            pushFollow(FOLLOW_assignExpression_in_commaExpression5353);
            assignExpression315=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression315.getTree());

            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 687:23: -> assignExpression
            {
                adaptor.addChild(root_0, stream_assignExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:688:5: ( ',' assignExpression -> ^( INFIX[\",\"] $commaExpression assignExpression ) )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==177) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:688:6: ',' assignExpression
            	    {
            	    char_literal316=cast(Token)match(input,177,FOLLOW_177_in_commaExpression5365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal316);


            	    pushFollow(FOLLOW_assignExpression_in_commaExpression5367);
            	    assignExpression317=assignExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression317.getTree());

            	    // AST REWRITE
            	    // elements: assignExpression, commaExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 688:27: -> ^( INFIX[\",\"] $commaExpression assignExpression )
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:688:30: ^( INFIX[\",\"] $commaExpression assignExpression )
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(INFIX, ",")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_assignExpression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","commaExpression"," ",75);
        }
        return retval;
    }
    // $ANTLR end "commaExpression"


    public static class assignExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:691:1: assignExpression : ( conditionalExpression -> conditionalExpression ) ( options {greedy=true; } :op= '=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '+=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '-=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '*=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '/=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '%=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '&=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '|=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '~=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '<<=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) )? ;
    public final dparserParser.assignExpression_return assignExpression()  {
        debug(trace_rules) writeln("Entering rule:","assignExpression"," ",76);
        dparserParser.assignExpression_return retval = new dparserParser.assignExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token op=null;
        dparserParser.conditionalExpression_return conditionalExpression318 =null;

        dparserParser.assignExpression_return assignExpression319 =null;

        dparserParser.assignExpression_return assignExpression320 =null;

        dparserParser.assignExpression_return assignExpression321 =null;

        dparserParser.assignExpression_return assignExpression322 =null;

        dparserParser.assignExpression_return assignExpression323 =null;

        dparserParser.assignExpression_return assignExpression324 =null;

        dparserParser.assignExpression_return assignExpression325 =null;

        dparserParser.assignExpression_return assignExpression326 =null;

        dparserParser.assignExpression_return assignExpression327 =null;

        dparserParser.assignExpression_return assignExpression328 =null;

        dparserParser.assignExpression_return assignExpression329 =null;

        dparserParser.assignExpression_return assignExpression330 =null;

        dparserParser.assignExpression_return assignExpression331 =null;

        dparserParser.assignExpression_return assignExpression332 =null;


        Object op_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_290=new RewriteRuleTokenStream(adaptor,"token 290");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_286=new RewriteRuleTokenStream(adaptor,"token 286");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:692:3: ( ( conditionalExpression -> conditionalExpression ) ( options {greedy=true; } :op= '=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '+=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '-=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '*=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '/=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '%=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '&=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '|=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '~=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '<<=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:692:5: ( conditionalExpression -> conditionalExpression ) ( options {greedy=true; } :op= '=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '+=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '-=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '*=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '/=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '%=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '&=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '|=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '~=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '<<=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:692:5: ( conditionalExpression -> conditionalExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:692:6: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_assignExpression5397);
            conditionalExpression318=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression318.getTree());

            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 692:28: -> conditionalExpression
            {
                adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:693:5: ( options {greedy=true; } :op= '=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '+=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '-=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '*=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '/=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '%=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '&=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '|=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '~=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '<<=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '>>>=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) |op= '^^=' assignExpression -> ^( INFIX[$op] conditionalExpression assignExpression ) )?
            int alt75=15;
            switch ( input.LA(1) ) {
                case 193:
                    {
                    alt75=1;
                    }
                    break;
                case 176:
                    {
                    alt75=2;
                    }
                    break;
                case 180:
                    {
                    alt75=3;
                    }
                    break;
                case 173:
                    {
                    alt75=4;
                    }
                    break;
                case 184:
                    {
                    alt75=5;
                    }
                    break;
                case 166:
                    {
                    alt75=6;
                    }
                    break;
                case 169:
                    {
                    alt75=7;
                    }
                    break;
                case 286:
                    {
                    alt75=8;
                    }
                    break;
                case 207:
                    {
                    alt75=9;
                    }
                    break;
                case 290:
                    {
                    alt75=10;
                    }
                    break;
                case 189:
                    {
                    alt75=11;
                    }
                    break;
                case 199:
                    {
                    alt75=12;
                    }
                    break;
                case 201:
                    {
                    alt75=13;
                    }
                    break;
                case 209:
                    {
                    alt75=14;
                    }
                    break;
                default:
            }

            switch (alt75) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:694:7: op= '=' assignExpression
                   {
                   op=cast(Token)match(input,193,FOLLOW_193_in_assignExpression5429); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_193.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5431);
                   assignExpression319=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression319.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 694:31: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:694:34: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:695:7: op= '+=' assignExpression
                   {
                   op=cast(Token)match(input,176,FOLLOW_176_in_assignExpression5452); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_176.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5454);
                   assignExpression320=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression320.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 695:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:695:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:696:7: op= '-=' assignExpression
                   {
                   op=cast(Token)match(input,180,FOLLOW_180_in_assignExpression5475); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_180.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5477);
                   assignExpression321=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression321.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 696:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:696:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:697:7: op= '*=' assignExpression
                   {
                   op=cast(Token)match(input,173,FOLLOW_173_in_assignExpression5498); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_173.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5500);
                   assignExpression322=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression322.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 697:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:697:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:698:7: op= '/=' assignExpression
                   {
                   op=cast(Token)match(input,184,FOLLOW_184_in_assignExpression5521); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_184.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5523);
                   assignExpression323=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression323.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 698:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:698:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:699:7: op= '%=' assignExpression
                   {
                   op=cast(Token)match(input,166,FOLLOW_166_in_assignExpression5544); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_166.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5546);
                   assignExpression324=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression324.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 699:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:699:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:700:7: op= '&=' assignExpression
                   {
                   op=cast(Token)match(input,169,FOLLOW_169_in_assignExpression5567); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_169.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5569);
                   assignExpression325=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression325.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 700:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:700:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:701:7: op= '|=' assignExpression
                   {
                   op=cast(Token)match(input,286,FOLLOW_286_in_assignExpression5590); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_286.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5592);
                   assignExpression326=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression326.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 701:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:701:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:702:7: op= '^=' assignExpression
                   {
                   op=cast(Token)match(input,207,FOLLOW_207_in_assignExpression5613); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_207.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5615);
                   assignExpression327=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression327.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 702:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:702:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 10 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:703:7: op= '~=' assignExpression
                   {
                   op=cast(Token)match(input,290,FOLLOW_290_in_assignExpression5636); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_290.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5638);
                   assignExpression328=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression328.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 703:32: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:703:35: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 11 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:704:7: op= '<<=' assignExpression
                   {
                   op=cast(Token)match(input,189,FOLLOW_189_in_assignExpression5659); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_189.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5661);
                   assignExpression329=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression329.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 704:33: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:704:36: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 12 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:705:7: op= '>>=' assignExpression
                   {
                   op=cast(Token)match(input,199,FOLLOW_199_in_assignExpression5682); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_199.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5684);
                   assignExpression330=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression330.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, assignExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 705:33: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:705:36: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 13 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:706:7: op= '>>>=' assignExpression
                   {
                   op=cast(Token)match(input,201,FOLLOW_201_in_assignExpression5705); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_201.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5707);
                   assignExpression331=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression331.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 706:34: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:706:37: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 14 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:707:7: op= '^^=' assignExpression
                   {
                   op=cast(Token)match(input,209,FOLLOW_209_in_assignExpression5728); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_209.add(cast(Object)op);


                   pushFollow(FOLLOW_assignExpression_in_assignExpression5730);
                   assignExpression332=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression332.getTree());

                   // AST REWRITE
                   // elements: assignExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 707:33: -> ^( INFIX[$op] conditionalExpression assignExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:707:36: ^( INFIX[$op] conditionalExpression assignExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, op)
                       , root_1);

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_assignExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","assignExpression"," ",76);
        }
        return retval;
    }
    // $ANTLR end "assignExpression"


    public static class conditionalExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:711:1: conditionalExpression : ( ororExpression -> ororExpression ) ( options {greedy=true; } : '?' conditionalExpression ':' conditionalExpression -> ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression ) )? ;
    public final dparserParser.conditionalExpression_return conditionalExpression()  {
        debug(trace_rules) writeln("Entering rule:","conditionalExpression"," ",77);
        dparserParser.conditionalExpression_return retval = new dparserParser.conditionalExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal334=null;
        Token char_literal336=null;
        dparserParser.ororExpression_return ororExpression333 =null;

        dparserParser.conditionalExpression_return conditionalExpression335 =null;

        dparserParser.conditionalExpression_return conditionalExpression337 =null;


        Object char_literal334_tree=null;
        Object char_literal336_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleSubtreeStream stream_ororExpression=new RewriteRuleSubtreeStream(adaptor,"rule ororExpression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:712:3: ( ( ororExpression -> ororExpression ) ( options {greedy=true; } : '?' conditionalExpression ':' conditionalExpression -> ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:712:5: ( ororExpression -> ororExpression ) ( options {greedy=true; } : '?' conditionalExpression ':' conditionalExpression -> ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:712:5: ( ororExpression -> ororExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:712:7: ororExpression
            {
            pushFollow(FOLLOW_ororExpression_in_conditionalExpression5763);
            ororExpression333=ororExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ororExpression.add(cast(Object)ororExpression333.getTree());

            // AST REWRITE
            // elements: ororExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 712:22: -> ororExpression
            {
                adaptor.addChild(root_0, stream_ororExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:713:5: ( options {greedy=true; } : '?' conditionalExpression ':' conditionalExpression -> ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression ) )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==202) ) {
                alt76=1;
            }
            switch (alt76) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:713:33: '?' conditionalExpression ':' conditionalExpression
                   {
                   char_literal334=cast(Token)match(input,202,FOLLOW_202_in_conditionalExpression5787); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_202.add(cast(Object)char_literal334);


                   pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression5789);
                   conditionalExpression335=conditionalExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression335.getTree());

                   char_literal336=cast(Token)match(input,185,FOLLOW_185_in_conditionalExpression5792); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal336);


                   pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression5794);
                   conditionalExpression337=conditionalExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_conditionalExpression.add(cast(Object)conditionalExpression337.getTree());

                   // AST REWRITE
                   // elements: conditionalExpression, ororExpression, conditionalExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 714:7: -> ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:714:10: ^( EXP_CONDITIONAL ororExpression conditionalExpression conditionalExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(EXP_CONDITIONAL, "EXP_CONDITIONAL")
                       , root_1);

                       adaptor.addChild(root_1, stream_ororExpression.nextTree());

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","conditionalExpression"," ",77);
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"


    public static class ororExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ororExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:718:1: ororExpression : ( andandExpression -> andandExpression ) ( options {greedy=true; } : '||' ororExpression -> ^( INFIX[\"||\"] andandExpression ororExpression ) )? ;
    public final dparserParser.ororExpression_return ororExpression()  {
        debug(trace_rules) writeln("Entering rule:","ororExpression"," ",78);
        dparserParser.ororExpression_return retval = new dparserParser.ororExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal339=null;
        dparserParser.andandExpression_return andandExpression338 =null;

        dparserParser.ororExpression_return ororExpression340 =null;


        Object string_literal339_tree=null;
        RewriteRuleTokenStream stream_287=new RewriteRuleTokenStream(adaptor,"token 287");
        RewriteRuleSubtreeStream stream_ororExpression=new RewriteRuleSubtreeStream(adaptor,"rule ororExpression");
        RewriteRuleSubtreeStream stream_andandExpression=new RewriteRuleSubtreeStream(adaptor,"rule andandExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:719:3: ( ( andandExpression -> andandExpression ) ( options {greedy=true; } : '||' ororExpression -> ^( INFIX[\"||\"] andandExpression ororExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:719:5: ( andandExpression -> andandExpression ) ( options {greedy=true; } : '||' ororExpression -> ^( INFIX[\"||\"] andandExpression ororExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:719:5: ( andandExpression -> andandExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:719:6: andandExpression
            {
            pushFollow(FOLLOW_andandExpression_in_ororExpression5835);
            andandExpression338=andandExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andandExpression.add(cast(Object)andandExpression338.getTree());

            // AST REWRITE
            // elements: andandExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 719:23: -> andandExpression
            {
                adaptor.addChild(root_0, stream_andandExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:720:5: ( options {greedy=true; } : '||' ororExpression -> ^( INFIX[\"||\"] andandExpression ororExpression ) )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==287) ) {
                alt77=1;
            }
            switch (alt77) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:720:33: '||' ororExpression
                   {
                   string_literal339=cast(Token)match(input,287,FOLLOW_287_in_ororExpression5858); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_287.add(cast(Object)string_literal339);


                   pushFollow(FOLLOW_ororExpression_in_ororExpression5860);
                   ororExpression340=ororExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_ororExpression.add(cast(Object)ororExpression340.getTree());

                   // AST REWRITE
                   // elements: ororExpression, andandExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 720:53: -> ^( INFIX[\"||\"] andandExpression ororExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:720:56: ^( INFIX[\"||\"] andandExpression ororExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "||")
                       , root_1);

                       adaptor.addChild(root_1, stream_andandExpression.nextTree());

                       adaptor.addChild(root_1, stream_ororExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","ororExpression"," ",78);
        }
        return retval;
    }
    // $ANTLR end "ororExpression"


    public static class andandExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "andandExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:723:1: andandExpression : ( orCmpExpression -> orCmpExpression ) ( options {greedy=true; } : '&&' andandExpression -> ^( INFIX[\"&&\"] orCmpExpression andandExpression ) )? ;
    public final dparserParser.andandExpression_return andandExpression()  {
        debug(trace_rules) writeln("Entering rule:","andandExpression"," ",79);
        dparserParser.andandExpression_return retval = new dparserParser.andandExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal342=null;
        dparserParser.orCmpExpression_return orCmpExpression341 =null;

        dparserParser.andandExpression_return andandExpression343 =null;


        Object string_literal342_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_andandExpression=new RewriteRuleSubtreeStream(adaptor,"rule andandExpression");
        RewriteRuleSubtreeStream stream_orCmpExpression=new RewriteRuleSubtreeStream(adaptor,"rule orCmpExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:724:3: ( ( orCmpExpression -> orCmpExpression ) ( options {greedy=true; } : '&&' andandExpression -> ^( INFIX[\"&&\"] orCmpExpression andandExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:724:5: ( orCmpExpression -> orCmpExpression ) ( options {greedy=true; } : '&&' andandExpression -> ^( INFIX[\"&&\"] orCmpExpression andandExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:724:5: ( orCmpExpression -> orCmpExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:724:6: orCmpExpression
            {
            pushFollow(FOLLOW_orCmpExpression_in_andandExpression5890);
            orCmpExpression341=orCmpExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression341.getTree());

            // AST REWRITE
            // elements: orCmpExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 724:22: -> orCmpExpression
            {
                adaptor.addChild(root_0, stream_orCmpExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:725:5: ( options {greedy=true; } : '&&' andandExpression -> ^( INFIX[\"&&\"] orCmpExpression andandExpression ) )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==167) ) {
                alt78=1;
            }
            switch (alt78) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:725:33: '&&' andandExpression
                   {
                   string_literal342=cast(Token)match(input,167,FOLLOW_167_in_andandExpression5913); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_167.add(cast(Object)string_literal342);


                   pushFollow(FOLLOW_andandExpression_in_andandExpression5915);
                   andandExpression343=andandExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_andandExpression.add(cast(Object)andandExpression343.getTree());

                   // AST REWRITE
                   // elements: andandExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 725:55: -> ^( INFIX[\"&&\"] orCmpExpression andandExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:725:58: ^( INFIX[\"&&\"] orCmpExpression andandExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "&&")
                       , root_1);

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_1, stream_andandExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","andandExpression"," ",79);
        }
        return retval;
    }
    // $ANTLR end "andandExpression"


    public static class orCmpExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orCmpExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:728:1: orCmpExpression : ( xorExpression -> xorExpression ) ( options {greedy=true; } : '|' orCmpExpression -> ^( INFIX[\"|\"] xorExpression orCmpExpression ) | '==' orCmpExpression -> ^( INFIX[\"==\"] xorExpression orCmpExpression ) | '!=' orCmpExpression -> ^( INFIX[\"!=\"] xorExpression orCmpExpression ) | 'is' orCmpExpression -> ^( INFIX[\"is\"] xorExpression orCmpExpression ) | '!is' orCmpExpression -> ^( INFIX[\"!is\"] xorExpression orCmpExpression ) | '<' orCmpExpression -> ^( INFIX[\"<\"] xorExpression orCmpExpression ) | '<=' orCmpExpression -> ^( INFIX[\"<=\"] xorExpression orCmpExpression ) | '>' orCmpExpression -> ^( INFIX[\">\"] xorExpression orCmpExpression ) | '>=' orCmpExpression -> ^( INFIX[\">=\"] xorExpression orCmpExpression ) | '!<>=' orCmpExpression -> ^( INFIX[\"!<>=\"] xorExpression orCmpExpression ) | '<>' orCmpExpression -> ^( INFIX[\"<>\"] xorExpression orCmpExpression ) | '<>=' orCmpExpression -> ^( INFIX[\"<>=\"] xorExpression orCmpExpression ) | '!>' orCmpExpression -> ^( INFIX[\"!>\"] xorExpression orCmpExpression ) | '!>=' orCmpExpression -> ^( INFIX[\"!>=\"] xorExpression orCmpExpression ) | '!<' orCmpExpression -> ^( INFIX[\"!<\"] xorExpression orCmpExpression ) | '!<=' orCmpExpression -> ^( INFIX[\"!<=\"] xorExpression orCmpExpression ) )? ;
    public final dparserParser.orCmpExpression_return orCmpExpression()  {
        debug(trace_rules) writeln("Entering rule:","orCmpExpression"," ",80);
        dparserParser.orCmpExpression_return retval = new dparserParser.orCmpExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal345=null;
        Token string_literal347=null;
        Token string_literal349=null;
        Token string_literal351=null;
        Token string_literal353=null;
        Token char_literal355=null;
        Token string_literal357=null;
        Token char_literal359=null;
        Token string_literal361=null;
        Token string_literal363=null;
        Token string_literal365=null;
        Token string_literal367=null;
        Token string_literal369=null;
        Token string_literal371=null;
        Token string_literal373=null;
        Token string_literal375=null;
        dparserParser.xorExpression_return xorExpression344 =null;

        dparserParser.orCmpExpression_return orCmpExpression346 =null;

        dparserParser.orCmpExpression_return orCmpExpression348 =null;

        dparserParser.orCmpExpression_return orCmpExpression350 =null;

        dparserParser.orCmpExpression_return orCmpExpression352 =null;

        dparserParser.orCmpExpression_return orCmpExpression354 =null;

        dparserParser.orCmpExpression_return orCmpExpression356 =null;

        dparserParser.orCmpExpression_return orCmpExpression358 =null;

        dparserParser.orCmpExpression_return orCmpExpression360 =null;

        dparserParser.orCmpExpression_return orCmpExpression362 =null;

        dparserParser.orCmpExpression_return orCmpExpression364 =null;

        dparserParser.orCmpExpression_return orCmpExpression366 =null;

        dparserParser.orCmpExpression_return orCmpExpression368 =null;

        dparserParser.orCmpExpression_return orCmpExpression370 =null;

        dparserParser.orCmpExpression_return orCmpExpression372 =null;

        dparserParser.orCmpExpression_return orCmpExpression374 =null;

        dparserParser.orCmpExpression_return orCmpExpression376 =null;


        Object char_literal345_tree=null;
        Object string_literal347_tree=null;
        Object string_literal349_tree=null;
        Object string_literal351_tree=null;
        Object string_literal353_tree=null;
        Object char_literal355_tree=null;
        Object string_literal357_tree=null;
        Object char_literal359_tree=null;
        Object string_literal361_tree=null;
        Object string_literal363_tree=null;
        Object string_literal365_tree=null;
        Object string_literal367_tree=null;
        Object string_literal369_tree=null;
        Object string_literal371_tree=null;
        Object string_literal373_tree=null;
        Object string_literal375_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_285=new RewriteRuleTokenStream(adaptor,"token 285");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_EXP_IS=new RewriteRuleTokenStream(adaptor,"token EXP_IS");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_orCmpExpression=new RewriteRuleSubtreeStream(adaptor,"rule orCmpExpression");
        RewriteRuleSubtreeStream stream_xorExpression=new RewriteRuleSubtreeStream(adaptor,"rule xorExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:729:3: ( ( xorExpression -> xorExpression ) ( options {greedy=true; } : '|' orCmpExpression -> ^( INFIX[\"|\"] xorExpression orCmpExpression ) | '==' orCmpExpression -> ^( INFIX[\"==\"] xorExpression orCmpExpression ) | '!=' orCmpExpression -> ^( INFIX[\"!=\"] xorExpression orCmpExpression ) | 'is' orCmpExpression -> ^( INFIX[\"is\"] xorExpression orCmpExpression ) | '!is' orCmpExpression -> ^( INFIX[\"!is\"] xorExpression orCmpExpression ) | '<' orCmpExpression -> ^( INFIX[\"<\"] xorExpression orCmpExpression ) | '<=' orCmpExpression -> ^( INFIX[\"<=\"] xorExpression orCmpExpression ) | '>' orCmpExpression -> ^( INFIX[\">\"] xorExpression orCmpExpression ) | '>=' orCmpExpression -> ^( INFIX[\">=\"] xorExpression orCmpExpression ) | '!<>=' orCmpExpression -> ^( INFIX[\"!<>=\"] xorExpression orCmpExpression ) | '<>' orCmpExpression -> ^( INFIX[\"<>\"] xorExpression orCmpExpression ) | '<>=' orCmpExpression -> ^( INFIX[\"<>=\"] xorExpression orCmpExpression ) | '!>' orCmpExpression -> ^( INFIX[\"!>\"] xorExpression orCmpExpression ) | '!>=' orCmpExpression -> ^( INFIX[\"!>=\"] xorExpression orCmpExpression ) | '!<' orCmpExpression -> ^( INFIX[\"!<\"] xorExpression orCmpExpression ) | '!<=' orCmpExpression -> ^( INFIX[\"!<=\"] xorExpression orCmpExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:729:5: ( xorExpression -> xorExpression ) ( options {greedy=true; } : '|' orCmpExpression -> ^( INFIX[\"|\"] xorExpression orCmpExpression ) | '==' orCmpExpression -> ^( INFIX[\"==\"] xorExpression orCmpExpression ) | '!=' orCmpExpression -> ^( INFIX[\"!=\"] xorExpression orCmpExpression ) | 'is' orCmpExpression -> ^( INFIX[\"is\"] xorExpression orCmpExpression ) | '!is' orCmpExpression -> ^( INFIX[\"!is\"] xorExpression orCmpExpression ) | '<' orCmpExpression -> ^( INFIX[\"<\"] xorExpression orCmpExpression ) | '<=' orCmpExpression -> ^( INFIX[\"<=\"] xorExpression orCmpExpression ) | '>' orCmpExpression -> ^( INFIX[\">\"] xorExpression orCmpExpression ) | '>=' orCmpExpression -> ^( INFIX[\">=\"] xorExpression orCmpExpression ) | '!<>=' orCmpExpression -> ^( INFIX[\"!<>=\"] xorExpression orCmpExpression ) | '<>' orCmpExpression -> ^( INFIX[\"<>\"] xorExpression orCmpExpression ) | '<>=' orCmpExpression -> ^( INFIX[\"<>=\"] xorExpression orCmpExpression ) | '!>' orCmpExpression -> ^( INFIX[\"!>\"] xorExpression orCmpExpression ) | '!>=' orCmpExpression -> ^( INFIX[\"!>=\"] xorExpression orCmpExpression ) | '!<' orCmpExpression -> ^( INFIX[\"!<\"] xorExpression orCmpExpression ) | '!<=' orCmpExpression -> ^( INFIX[\"!<=\"] xorExpression orCmpExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:729:5: ( xorExpression -> xorExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:729:6: xorExpression
            {
            pushFollow(FOLLOW_xorExpression_in_orCmpExpression5945);
            xorExpression344=xorExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_xorExpression.add(cast(Object)xorExpression344.getTree());

            // AST REWRITE
            // elements: xorExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 729:20: -> xorExpression
            {
                adaptor.addChild(root_0, stream_xorExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:730:5: ( options {greedy=true; } : '|' orCmpExpression -> ^( INFIX[\"|\"] xorExpression orCmpExpression ) | '==' orCmpExpression -> ^( INFIX[\"==\"] xorExpression orCmpExpression ) | '!=' orCmpExpression -> ^( INFIX[\"!=\"] xorExpression orCmpExpression ) | 'is' orCmpExpression -> ^( INFIX[\"is\"] xorExpression orCmpExpression ) | '!is' orCmpExpression -> ^( INFIX[\"!is\"] xorExpression orCmpExpression ) | '<' orCmpExpression -> ^( INFIX[\"<\"] xorExpression orCmpExpression ) | '<=' orCmpExpression -> ^( INFIX[\"<=\"] xorExpression orCmpExpression ) | '>' orCmpExpression -> ^( INFIX[\">\"] xorExpression orCmpExpression ) | '>=' orCmpExpression -> ^( INFIX[\">=\"] xorExpression orCmpExpression ) | '!<>=' orCmpExpression -> ^( INFIX[\"!<>=\"] xorExpression orCmpExpression ) | '<>' orCmpExpression -> ^( INFIX[\"<>\"] xorExpression orCmpExpression ) | '<>=' orCmpExpression -> ^( INFIX[\"<>=\"] xorExpression orCmpExpression ) | '!>' orCmpExpression -> ^( INFIX[\"!>\"] xorExpression orCmpExpression ) | '!>=' orCmpExpression -> ^( INFIX[\"!>=\"] xorExpression orCmpExpression ) | '!<' orCmpExpression -> ^( INFIX[\"!<\"] xorExpression orCmpExpression ) | '!<=' orCmpExpression -> ^( INFIX[\"!<=\"] xorExpression orCmpExpression ) )?
            int alt79=17;
            switch ( input.LA(1) ) {
                case 285:
                    {
                    alt79=1;
                    }
                    break;
                case 194:
                    {
                    alt79=2;
                    }
                    break;
                case 161:
                    {
                    alt79=3;
                    }
                    break;
                case EXP_IS:
                    {
                    alt79=4;
                    }
                    break;
                case 164:
                    {
                    alt79=5;
                    }
                    break;
                case 187:
                    {
                    alt79=6;
                    }
                    break;
                case 190:
                    {
                    alt79=7;
                    }
                    break;
                case 196:
                    {
                    alt79=8;
                    }
                    break;
                case 197:
                    {
                    alt79=9;
                    }
                    break;
                case 160:
                    {
                    alt79=10;
                    }
                    break;
                case 191:
                    {
                    alt79=11;
                    }
                    break;
                case 192:
                    {
                    alt79=12;
                    }
                    break;
                case 162:
                    {
                    alt79=13;
                    }
                    break;
                case 163:
                    {
                    alt79=14;
                    }
                    break;
                case 158:
                    {
                    alt79=15;
                    }
                    break;
                case 159:
                    {
                    alt79=16;
                    }
                    break;
                default:
            }

            switch (alt79) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:731:7: '|' orCmpExpression
                   {
                   char_literal345=cast(Token)match(input,285,FOLLOW_285_in_orCmpExpression5973); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_285.add(cast(Object)char_literal345);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression5975);
                   orCmpExpression346=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression346.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 731:27: -> ^( INFIX[\"|\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:731:30: ^( INFIX[\"|\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "|")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:732:7: '==' orCmpExpression
                   {
                   string_literal347=cast(Token)match(input,194,FOLLOW_194_in_orCmpExpression5994); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_194.add(cast(Object)string_literal347);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression5996);
                   orCmpExpression348=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression348.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 732:28: -> ^( INFIX[\"==\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:732:31: ^( INFIX[\"==\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "==")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:733:7: '!=' orCmpExpression
                   {
                   string_literal349=cast(Token)match(input,161,FOLLOW_161_in_orCmpExpression6015); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_161.add(cast(Object)string_literal349);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6017);
                   orCmpExpression350=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression350.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 733:28: -> ^( INFIX[\"!=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:733:31: ^( INFIX[\"!=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:734:7: 'is' orCmpExpression
                   {
                   string_literal351=cast(Token)match(input,EXP_IS,FOLLOW_EXP_IS_in_orCmpExpression6036); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_EXP_IS.add(cast(Object)string_literal351);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6038);
                   orCmpExpression352=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression352.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 734:28: -> ^( INFIX[\"is\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:734:31: ^( INFIX[\"is\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "is")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:735:7: '!is' orCmpExpression
                   {
                   string_literal353=cast(Token)match(input,164,FOLLOW_164_in_orCmpExpression6057); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_164.add(cast(Object)string_literal353);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6059);
                   orCmpExpression354=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression354.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 735:29: -> ^( INFIX[\"!is\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:735:32: ^( INFIX[\"!is\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!is")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:736:7: '<' orCmpExpression
                   {
                   char_literal355=cast(Token)match(input,187,FOLLOW_187_in_orCmpExpression6078); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_187.add(cast(Object)char_literal355);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6080);
                   orCmpExpression356=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression356.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 736:27: -> ^( INFIX[\"<\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:736:30: ^( INFIX[\"<\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "<")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:737:7: '<=' orCmpExpression
                   {
                   string_literal357=cast(Token)match(input,190,FOLLOW_190_in_orCmpExpression6099); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_190.add(cast(Object)string_literal357);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6101);
                   orCmpExpression358=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression358.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 737:28: -> ^( INFIX[\"<=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:737:31: ^( INFIX[\"<=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "<=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:738:7: '>' orCmpExpression
                   {
                   char_literal359=cast(Token)match(input,196,FOLLOW_196_in_orCmpExpression6120); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_196.add(cast(Object)char_literal359);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6122);
                   orCmpExpression360=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression360.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 738:27: -> ^( INFIX[\">\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:738:30: ^( INFIX[\">\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, ">")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:739:7: '>=' orCmpExpression
                   {
                   string_literal361=cast(Token)match(input,197,FOLLOW_197_in_orCmpExpression6141); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_197.add(cast(Object)string_literal361);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6143);
                   orCmpExpression362=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression362.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 739:28: -> ^( INFIX[\">=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:739:31: ^( INFIX[\">=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, ">=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 10 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:740:7: '!<>=' orCmpExpression
                   {
                   string_literal363=cast(Token)match(input,160,FOLLOW_160_in_orCmpExpression6162); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_160.add(cast(Object)string_literal363);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6164);
                   orCmpExpression364=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression364.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 740:30: -> ^( INFIX[\"!<>=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:740:33: ^( INFIX[\"!<>=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!<>=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 11 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:741:7: '<>' orCmpExpression
                   {
                   string_literal365=cast(Token)match(input,191,FOLLOW_191_in_orCmpExpression6183); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_191.add(cast(Object)string_literal365);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6185);
                   orCmpExpression366=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression366.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 741:28: -> ^( INFIX[\"<>\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:741:31: ^( INFIX[\"<>\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "<>")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 12 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:742:7: '<>=' orCmpExpression
                   {
                   string_literal367=cast(Token)match(input,192,FOLLOW_192_in_orCmpExpression6204); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_192.add(cast(Object)string_literal367);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6206);
                   orCmpExpression368=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression368.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 742:29: -> ^( INFIX[\"<>=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:742:32: ^( INFIX[\"<>=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "<>=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 13 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:743:7: '!>' orCmpExpression
                   {
                   string_literal369=cast(Token)match(input,162,FOLLOW_162_in_orCmpExpression6225); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_162.add(cast(Object)string_literal369);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6227);
                   orCmpExpression370=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression370.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 743:28: -> ^( INFIX[\"!>\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:743:31: ^( INFIX[\"!>\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!>")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 14 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:744:7: '!>=' orCmpExpression
                   {
                   string_literal371=cast(Token)match(input,163,FOLLOW_163_in_orCmpExpression6246); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_163.add(cast(Object)string_literal371);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6248);
                   orCmpExpression372=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression372.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 744:29: -> ^( INFIX[\"!>=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:744:32: ^( INFIX[\"!>=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!>=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 15 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:745:7: '!<' orCmpExpression
                   {
                   string_literal373=cast(Token)match(input,158,FOLLOW_158_in_orCmpExpression6267); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_158.add(cast(Object)string_literal373);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6269);
                   orCmpExpression374=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression374.getTree());

                   // AST REWRITE
                   // elements: orCmpExpression, xorExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 745:28: -> ^( INFIX[\"!<\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:745:31: ^( INFIX[\"!<\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!<")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 16 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:746:7: '!<=' orCmpExpression
                   {
                   string_literal375=cast(Token)match(input,159,FOLLOW_159_in_orCmpExpression6288); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_159.add(cast(Object)string_literal375);


                   pushFollow(FOLLOW_orCmpExpression_in_orCmpExpression6290);
                   orCmpExpression376=orCmpExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_orCmpExpression.add(cast(Object)orCmpExpression376.getTree());

                   // AST REWRITE
                   // elements: xorExpression, orCmpExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 746:29: -> ^( INFIX[\"!<=\"] xorExpression orCmpExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:746:32: ^( INFIX[\"!<=\"] xorExpression orCmpExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "!<=")
                       , root_1);

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_1, stream_orCmpExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","orCmpExpression"," ",80);
        }
        return retval;
    }
    // $ANTLR end "orCmpExpression"


    public static class xorExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xorExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:750:1: xorExpression : ( andExpression -> andExpression ) ( options {greedy=true; } : '^' xorExpression -> ^( INFIX[\"^\"] andExpression xorExpression ) )? ;
    public final dparserParser.xorExpression_return xorExpression()  {
        debug(trace_rules) writeln("Entering rule:","xorExpression"," ",81);
        dparserParser.xorExpression_return retval = new dparserParser.xorExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal378=null;
        dparserParser.andExpression_return andExpression377 =null;

        dparserParser.xorExpression_return xorExpression379 =null;


        Object char_literal378_tree=null;
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_xorExpression=new RewriteRuleSubtreeStream(adaptor,"rule xorExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:751:3: ( ( andExpression -> andExpression ) ( options {greedy=true; } : '^' xorExpression -> ^( INFIX[\"^\"] andExpression xorExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:751:5: ( andExpression -> andExpression ) ( options {greedy=true; } : '^' xorExpression -> ^( INFIX[\"^\"] andExpression xorExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:751:5: ( andExpression -> andExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:751:6: andExpression
            {
            pushFollow(FOLLOW_andExpression_in_xorExpression6324);
            andExpression377=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(cast(Object)andExpression377.getTree());

            // AST REWRITE
            // elements: andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 751:20: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:752:5: ( options {greedy=true; } : '^' xorExpression -> ^( INFIX[\"^\"] andExpression xorExpression ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==206) ) {
                alt80=1;
            }
            switch (alt80) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:752:33: '^' xorExpression
                   {
                   char_literal378=cast(Token)match(input,206,FOLLOW_206_in_xorExpression6347); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_206.add(cast(Object)char_literal378);


                   pushFollow(FOLLOW_xorExpression_in_xorExpression6349);
                   xorExpression379=xorExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_xorExpression.add(cast(Object)xorExpression379.getTree());

                   // AST REWRITE
                   // elements: xorExpression, andExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 752:51: -> ^( INFIX[\"^\"] andExpression xorExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:752:54: ^( INFIX[\"^\"] andExpression xorExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "^")
                       , root_1);

                       adaptor.addChild(root_1, stream_andExpression.nextTree());

                       adaptor.addChild(root_1, stream_xorExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","xorExpression"," ",81);
        }
        return retval;
    }
    // $ANTLR end "xorExpression"


    public static class andExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "andExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:755:1: andExpression : ( shiftExpression -> shiftExpression ) ( options {greedy=true; } : '&' andExpression -> ^( INFIX[\"&\"] shiftExpression andExpression ) )? ;
    public final dparserParser.andExpression_return andExpression()  {
        debug(trace_rules) writeln("Entering rule:","andExpression"," ",82);
        dparserParser.andExpression_return retval = new dparserParser.andExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal381=null;
        dparserParser.shiftExpression_return shiftExpression380 =null;

        dparserParser.andExpression_return andExpression382 =null;


        Object char_literal381_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:756:3: ( ( shiftExpression -> shiftExpression ) ( options {greedy=true; } : '&' andExpression -> ^( INFIX[\"&\"] shiftExpression andExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:756:5: ( shiftExpression -> shiftExpression ) ( options {greedy=true; } : '&' andExpression -> ^( INFIX[\"&\"] shiftExpression andExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:756:5: ( shiftExpression -> shiftExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:756:6: shiftExpression
            {
            pushFollow(FOLLOW_shiftExpression_in_andExpression6379);
            shiftExpression380=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(cast(Object)shiftExpression380.getTree());

            // AST REWRITE
            // elements: shiftExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 756:22: -> shiftExpression
            {
                adaptor.addChild(root_0, stream_shiftExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:757:5: ( options {greedy=true; } : '&' andExpression -> ^( INFIX[\"&\"] shiftExpression andExpression ) )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==168) ) {
                alt81=1;
            }
            switch (alt81) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:757:33: '&' andExpression
                   {
                   char_literal381=cast(Token)match(input,168,FOLLOW_168_in_andExpression6402); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_168.add(cast(Object)char_literal381);


                   pushFollow(FOLLOW_andExpression_in_andExpression6404);
                   andExpression382=andExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_andExpression.add(cast(Object)andExpression382.getTree());

                   // AST REWRITE
                   // elements: andExpression, shiftExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 757:51: -> ^( INFIX[\"&\"] shiftExpression andExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:757:54: ^( INFIX[\"&\"] shiftExpression andExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "&")
                       , root_1);

                       adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                       adaptor.addChild(root_1, stream_andExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","andExpression"," ",82);
        }
        return retval;
    }
    // $ANTLR end "andExpression"


    public static class shiftExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:760:1: shiftExpression : ( addExpression -> addExpression ) ( options {greedy=true; } : '<<' shiftExpression -> ^( INFIX[\"<<\"] addExpression shiftExpression ) | '>>' shiftExpression -> ^( INFIX[\">>\"] addExpression shiftExpression ) | '>>>' shiftExpression -> ^( INFIX[\">>>\"] addExpression shiftExpression ) )? ;
    public final dparserParser.shiftExpression_return shiftExpression()  {
        debug(trace_rules) writeln("Entering rule:","shiftExpression"," ",83);
        dparserParser.shiftExpression_return retval = new dparserParser.shiftExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal384=null;
        Token string_literal386=null;
        Token string_literal388=null;
        dparserParser.addExpression_return addExpression383 =null;

        dparserParser.shiftExpression_return shiftExpression385 =null;

        dparserParser.shiftExpression_return shiftExpression387 =null;

        dparserParser.shiftExpression_return shiftExpression389 =null;


        Object string_literal384_tree=null;
        Object string_literal386_tree=null;
        Object string_literal388_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleSubtreeStream stream_addExpression=new RewriteRuleSubtreeStream(adaptor,"rule addExpression");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:761:3: ( ( addExpression -> addExpression ) ( options {greedy=true; } : '<<' shiftExpression -> ^( INFIX[\"<<\"] addExpression shiftExpression ) | '>>' shiftExpression -> ^( INFIX[\">>\"] addExpression shiftExpression ) | '>>>' shiftExpression -> ^( INFIX[\">>>\"] addExpression shiftExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:761:5: ( addExpression -> addExpression ) ( options {greedy=true; } : '<<' shiftExpression -> ^( INFIX[\"<<\"] addExpression shiftExpression ) | '>>' shiftExpression -> ^( INFIX[\">>\"] addExpression shiftExpression ) | '>>>' shiftExpression -> ^( INFIX[\">>>\"] addExpression shiftExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:761:5: ( addExpression -> addExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:761:6: addExpression
            {
            pushFollow(FOLLOW_addExpression_in_shiftExpression6432);
            addExpression383=addExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_addExpression.add(cast(Object)addExpression383.getTree());

            // AST REWRITE
            // elements: addExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 761:20: -> addExpression
            {
                adaptor.addChild(root_0, stream_addExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:762:5: ( options {greedy=true; } : '<<' shiftExpression -> ^( INFIX[\"<<\"] addExpression shiftExpression ) | '>>' shiftExpression -> ^( INFIX[\">>\"] addExpression shiftExpression ) | '>>>' shiftExpression -> ^( INFIX[\">>>\"] addExpression shiftExpression ) )?
            int alt82=4;
            switch ( input.LA(1) ) {
                case 188:
                    {
                    alt82=1;
                    }
                    break;
                case 198:
                    {
                    alt82=2;
                    }
                    break;
                case 200:
                    {
                    alt82=3;
                    }
                    break;
                default:
            }

            switch (alt82) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:763:7: '<<' shiftExpression
                   {
                   string_literal384=cast(Token)match(input,188,FOLLOW_188_in_shiftExpression6460); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_188.add(cast(Object)string_literal384);


                   pushFollow(FOLLOW_shiftExpression_in_shiftExpression6462);
                   shiftExpression385=shiftExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_shiftExpression.add(cast(Object)shiftExpression385.getTree());

                   // AST REWRITE
                   // elements: addExpression, shiftExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 763:28: -> ^( INFIX[\"<<\"] addExpression shiftExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:763:31: ^( INFIX[\"<<\"] addExpression shiftExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "<<")
                       , root_1);

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:764:7: '>>' shiftExpression
                   {
                   string_literal386=cast(Token)match(input,198,FOLLOW_198_in_shiftExpression6481); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_198.add(cast(Object)string_literal386);


                   pushFollow(FOLLOW_shiftExpression_in_shiftExpression6483);
                   shiftExpression387=shiftExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_shiftExpression.add(cast(Object)shiftExpression387.getTree());

                   // AST REWRITE
                   // elements: shiftExpression, addExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 764:28: -> ^( INFIX[\">>\"] addExpression shiftExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:764:31: ^( INFIX[\">>\"] addExpression shiftExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, ">>")
                       , root_1);

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:765:7: '>>>' shiftExpression
                   {
                   string_literal388=cast(Token)match(input,200,FOLLOW_200_in_shiftExpression6502); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_200.add(cast(Object)string_literal388);


                   pushFollow(FOLLOW_shiftExpression_in_shiftExpression6504);
                   shiftExpression389=shiftExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_shiftExpression.add(cast(Object)shiftExpression389.getTree());

                   // AST REWRITE
                   // elements: shiftExpression, addExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 765:29: -> ^( INFIX[\">>>\"] addExpression shiftExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:765:32: ^( INFIX[\">>>\"] addExpression shiftExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, ">>>")
                       , root_1);

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","shiftExpression"," ",83);
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"


    public static class addExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:769:1: addExpression : ( mulExpression -> mulExpression ) ( options {greedy=true; } : '+' addExpression -> ^( INFIX[\"+\"] mulExpression addExpression ) | '-' addExpression -> ^( INFIX[\"-\"] mulExpression addExpression ) | '~' addExpression -> ^( INFIX[\"~\"] mulExpression addExpression ) )? ;
    public final dparserParser.addExpression_return addExpression()  {
        debug(trace_rules) writeln("Entering rule:","addExpression"," ",84);
        dparserParser.addExpression_return retval = new dparserParser.addExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal391=null;
        Token char_literal393=null;
        Token char_literal395=null;
        dparserParser.mulExpression_return mulExpression390 =null;

        dparserParser.addExpression_return addExpression392 =null;

        dparserParser.addExpression_return addExpression394 =null;

        dparserParser.addExpression_return addExpression396 =null;


        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object char_literal395_tree=null;
        RewriteRuleTokenStream stream_289=new RewriteRuleTokenStream(adaptor,"token 289");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_mulExpression=new RewriteRuleSubtreeStream(adaptor,"rule mulExpression");
        RewriteRuleSubtreeStream stream_addExpression=new RewriteRuleSubtreeStream(adaptor,"rule addExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:770:3: ( ( mulExpression -> mulExpression ) ( options {greedy=true; } : '+' addExpression -> ^( INFIX[\"+\"] mulExpression addExpression ) | '-' addExpression -> ^( INFIX[\"-\"] mulExpression addExpression ) | '~' addExpression -> ^( INFIX[\"~\"] mulExpression addExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:770:5: ( mulExpression -> mulExpression ) ( options {greedy=true; } : '+' addExpression -> ^( INFIX[\"+\"] mulExpression addExpression ) | '-' addExpression -> ^( INFIX[\"-\"] mulExpression addExpression ) | '~' addExpression -> ^( INFIX[\"~\"] mulExpression addExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:770:5: ( mulExpression -> mulExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:770:6: mulExpression
            {
            pushFollow(FOLLOW_mulExpression_in_addExpression6536);
            mulExpression390=mulExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_mulExpression.add(cast(Object)mulExpression390.getTree());

            // AST REWRITE
            // elements: mulExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 770:20: -> mulExpression
            {
                adaptor.addChild(root_0, stream_mulExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:771:5: ( options {greedy=true; } : '+' addExpression -> ^( INFIX[\"+\"] mulExpression addExpression ) | '-' addExpression -> ^( INFIX[\"-\"] mulExpression addExpression ) | '~' addExpression -> ^( INFIX[\"~\"] mulExpression addExpression ) )?
            int alt83=4;
            switch ( input.LA(1) ) {
                case 174:
                    {
                    alt83=1;
                    }
                    break;
                case 178:
                    {
                    alt83=2;
                    }
                    break;
                case 289:
                    {
                    alt83=3;
                    }
                    break;
                default:
            }

            switch (alt83) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:772:7: '+' addExpression
                   {
                   char_literal391=cast(Token)match(input,174,FOLLOW_174_in_addExpression6564); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_174.add(cast(Object)char_literal391);


                   pushFollow(FOLLOW_addExpression_in_addExpression6566);
                   addExpression392=addExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_addExpression.add(cast(Object)addExpression392.getTree());

                   // AST REWRITE
                   // elements: addExpression, mulExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 772:25: -> ^( INFIX[\"+\"] mulExpression addExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:772:28: ^( INFIX[\"+\"] mulExpression addExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "+")
                       , root_1);

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:773:7: '-' addExpression
                   {
                   char_literal393=cast(Token)match(input,178,FOLLOW_178_in_addExpression6585); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_178.add(cast(Object)char_literal393);


                   pushFollow(FOLLOW_addExpression_in_addExpression6587);
                   addExpression394=addExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_addExpression.add(cast(Object)addExpression394.getTree());

                   // AST REWRITE
                   // elements: addExpression, mulExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 773:25: -> ^( INFIX[\"-\"] mulExpression addExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:773:28: ^( INFIX[\"-\"] mulExpression addExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "-")
                       , root_1);

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:774:7: '~' addExpression
                   {
                   char_literal395=cast(Token)match(input,289,FOLLOW_289_in_addExpression6606); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_289.add(cast(Object)char_literal395);


                   pushFollow(FOLLOW_addExpression_in_addExpression6608);
                   addExpression396=addExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_addExpression.add(cast(Object)addExpression396.getTree());

                   // AST REWRITE
                   // elements: addExpression, mulExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 774:25: -> ^( INFIX[\"~\"] mulExpression addExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:774:28: ^( INFIX[\"~\"] mulExpression addExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "~")
                       , root_1);

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_1, stream_addExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","addExpression"," ",84);
        }
        return retval;
    }
    // $ANTLR end "addExpression"


    public static class mulExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mulExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:778:1: mulExpression : ( unaryExpression -> unaryExpression ) ( options {greedy=true; } : '*' mulExpression -> ^( INFIX[\"*\"] unaryExpression mulExpression ) | '/' mulExpression -> ^( INFIX[\"/\"] unaryExpression mulExpression ) | '%' mulExpression -> ^( INFIX[\"\\%\"] unaryExpression mulExpression ) )? ;
    public final dparserParser.mulExpression_return mulExpression()  {
        debug(trace_rules) writeln("Entering rule:","mulExpression"," ",85);
        dparserParser.mulExpression_return retval = new dparserParser.mulExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal398=null;
        Token char_literal400=null;
        Token char_literal402=null;
        dparserParser.unaryExpression_return unaryExpression397 =null;

        dparserParser.mulExpression_return mulExpression399 =null;

        dparserParser.mulExpression_return mulExpression401 =null;

        dparserParser.mulExpression_return mulExpression403 =null;


        Object char_literal398_tree=null;
        Object char_literal400_tree=null;
        Object char_literal402_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_mulExpression=new RewriteRuleSubtreeStream(adaptor,"rule mulExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:779:3: ( ( unaryExpression -> unaryExpression ) ( options {greedy=true; } : '*' mulExpression -> ^( INFIX[\"*\"] unaryExpression mulExpression ) | '/' mulExpression -> ^( INFIX[\"/\"] unaryExpression mulExpression ) | '%' mulExpression -> ^( INFIX[\"\\%\"] unaryExpression mulExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:779:5: ( unaryExpression -> unaryExpression ) ( options {greedy=true; } : '*' mulExpression -> ^( INFIX[\"*\"] unaryExpression mulExpression ) | '/' mulExpression -> ^( INFIX[\"/\"] unaryExpression mulExpression ) | '%' mulExpression -> ^( INFIX[\"\\%\"] unaryExpression mulExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:779:5: ( unaryExpression -> unaryExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:779:6: unaryExpression
            {
            pushFollow(FOLLOW_unaryExpression_in_mulExpression6642);
            unaryExpression397=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression397.getTree());

            // AST REWRITE
            // elements: unaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 779:22: -> unaryExpression
            {
                adaptor.addChild(root_0, stream_unaryExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:780:5: ( options {greedy=true; } : '*' mulExpression -> ^( INFIX[\"*\"] unaryExpression mulExpression ) | '/' mulExpression -> ^( INFIX[\"/\"] unaryExpression mulExpression ) | '%' mulExpression -> ^( INFIX[\"\\%\"] unaryExpression mulExpression ) )?
            int alt84=4;
            switch ( input.LA(1) ) {
                case 172:
                    {
                    alt84=1;
                    }
                    break;
                case 183:
                    {
                    alt84=2;
                    }
                    break;
                case 165:
                    {
                    alt84=3;
                    }
                    break;
                default:
            }

            switch (alt84) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:781:7: '*' mulExpression
                   {
                   char_literal398=cast(Token)match(input,172,FOLLOW_172_in_mulExpression6670); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_172.add(cast(Object)char_literal398);


                   pushFollow(FOLLOW_mulExpression_in_mulExpression6672);
                   mulExpression399=mulExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_mulExpression.add(cast(Object)mulExpression399.getTree());

                   // AST REWRITE
                   // elements: mulExpression, unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 781:25: -> ^( INFIX[\"*\"] unaryExpression mulExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:781:28: ^( INFIX[\"*\"] unaryExpression mulExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "*")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:782:7: '/' mulExpression
                   {
                   char_literal400=cast(Token)match(input,183,FOLLOW_183_in_mulExpression6691); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_183.add(cast(Object)char_literal400);


                   pushFollow(FOLLOW_mulExpression_in_mulExpression6693);
                   mulExpression401=mulExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_mulExpression.add(cast(Object)mulExpression401.getTree());

                   // AST REWRITE
                   // elements: unaryExpression, mulExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 782:25: -> ^( INFIX[\"/\"] unaryExpression mulExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:782:28: ^( INFIX[\"/\"] unaryExpression mulExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "/")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:783:7: '%' mulExpression
                   {
                   char_literal402=cast(Token)match(input,165,FOLLOW_165_in_mulExpression6712); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_165.add(cast(Object)char_literal402);


                   pushFollow(FOLLOW_mulExpression_in_mulExpression6714);
                   mulExpression403=mulExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_mulExpression.add(cast(Object)mulExpression403.getTree());

                   // AST REWRITE
                   // elements: unaryExpression, mulExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 783:25: -> ^( INFIX[\"\\%\"] unaryExpression mulExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:783:28: ^( INFIX[\"\\%\"] unaryExpression mulExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "%")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_1, stream_mulExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","mulExpression"," ",85);
        }
        return retval;
    }
    // $ANTLR end "mulExpression"


    public static class unaryExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unaryExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:787:1: unaryExpression : ( powExpression -> powExpression | '&' unaryExpression -> ^( PREFIX[\"&\"] unaryExpression ) | '++' unaryExpression -> ^( PREFIX[\"++\"] unaryExpression ) | '*' unaryExpression -> ^( PREFIX[\"*\"] unaryExpression ) | '+' unaryExpression -> ^( PREFIX[\"+\"] unaryExpression ) | '-' unaryExpression -> ^( PREFIX[\"-\"] unaryExpression ) | '!' unaryExpression -> ^( PREFIX[\"!\"] unaryExpression ) | '~' unaryExpression -> ^( PREFIX[\"~\"] unaryExpression ) | newExpression -> newExpression | deleteExpression -> deleteExpression | castExpression -> castExpression ) ;
    public final dparserParser.unaryExpression_return unaryExpression()  {
        debug(trace_rules) writeln("Entering rule:","unaryExpression"," ",86);
        dparserParser.unaryExpression_return retval = new dparserParser.unaryExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal405=null;
        Token string_literal407=null;
        Token char_literal409=null;
        Token char_literal411=null;
        Token char_literal413=null;
        Token char_literal415=null;
        Token char_literal417=null;
        dparserParser.powExpression_return powExpression404 =null;

        dparserParser.unaryExpression_return unaryExpression406 =null;

        dparserParser.unaryExpression_return unaryExpression408 =null;

        dparserParser.unaryExpression_return unaryExpression410 =null;

        dparserParser.unaryExpression_return unaryExpression412 =null;

        dparserParser.unaryExpression_return unaryExpression414 =null;

        dparserParser.unaryExpression_return unaryExpression416 =null;

        dparserParser.unaryExpression_return unaryExpression418 =null;

        dparserParser.newExpression_return newExpression419 =null;

        dparserParser.deleteExpression_return deleteExpression420 =null;

        dparserParser.castExpression_return castExpression421 =null;


        Object char_literal405_tree=null;
        Object string_literal407_tree=null;
        Object char_literal409_tree=null;
        Object char_literal411_tree=null;
        Object char_literal413_tree=null;
        Object char_literal415_tree=null;
        Object char_literal417_tree=null;
        RewriteRuleTokenStream stream_289=new RewriteRuleTokenStream(adaptor,"token 289");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_powExpression=new RewriteRuleSubtreeStream(adaptor,"rule powExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_castExpression=new RewriteRuleSubtreeStream(adaptor,"rule castExpression");
        RewriteRuleSubtreeStream stream_deleteExpression=new RewriteRuleSubtreeStream(adaptor,"rule deleteExpression");
        RewriteRuleSubtreeStream stream_newExpression=new RewriteRuleSubtreeStream(adaptor,"rule newExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:788:3: ( ( powExpression -> powExpression | '&' unaryExpression -> ^( PREFIX[\"&\"] unaryExpression ) | '++' unaryExpression -> ^( PREFIX[\"++\"] unaryExpression ) | '*' unaryExpression -> ^( PREFIX[\"*\"] unaryExpression ) | '+' unaryExpression -> ^( PREFIX[\"+\"] unaryExpression ) | '-' unaryExpression -> ^( PREFIX[\"-\"] unaryExpression ) | '!' unaryExpression -> ^( PREFIX[\"!\"] unaryExpression ) | '~' unaryExpression -> ^( PREFIX[\"~\"] unaryExpression ) | newExpression -> newExpression | deleteExpression -> deleteExpression | castExpression -> castExpression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:788:5: ( powExpression -> powExpression | '&' unaryExpression -> ^( PREFIX[\"&\"] unaryExpression ) | '++' unaryExpression -> ^( PREFIX[\"++\"] unaryExpression ) | '*' unaryExpression -> ^( PREFIX[\"*\"] unaryExpression ) | '+' unaryExpression -> ^( PREFIX[\"+\"] unaryExpression ) | '-' unaryExpression -> ^( PREFIX[\"-\"] unaryExpression ) | '!' unaryExpression -> ^( PREFIX[\"!\"] unaryExpression ) | '~' unaryExpression -> ^( PREFIX[\"~\"] unaryExpression ) | newExpression -> newExpression | deleteExpression -> deleteExpression | castExpression -> castExpression )
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:788:5: ( powExpression -> powExpression | '&' unaryExpression -> ^( PREFIX[\"&\"] unaryExpression ) | '++' unaryExpression -> ^( PREFIX[\"++\"] unaryExpression ) | '*' unaryExpression -> ^( PREFIX[\"*\"] unaryExpression ) | '+' unaryExpression -> ^( PREFIX[\"+\"] unaryExpression ) | '-' unaryExpression -> ^( PREFIX[\"-\"] unaryExpression ) | '!' unaryExpression -> ^( PREFIX[\"!\"] unaryExpression ) | '~' unaryExpression -> ^( PREFIX[\"~\"] unaryExpression ) | newExpression -> newExpression | deleteExpression -> deleteExpression | castExpression -> castExpression )
            int alt85=11;
            switch ( input.LA(1) ) {
            case CharacterLiteral:
            case EXP_ASSERT:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case Identifier:
            case IntegerLiteral:
            case StringLiteral:
            case 170:
            case 181:
            case 195:
            case 203:
            case 226:
            case 237:
            case 246:
            case 268:
            case 271:
                {
                alt85=1;
                }
                break;
            case 168:
                {
                alt85=2;
                }
                break;
            case 175:
                {
                alt85=3;
                }
                break;
            case 172:
                {
                alt85=4;
                }
                break;
            case 174:
                {
                alt85=5;
                }
                break;
            case 178:
                {
                alt85=6;
                }
                break;
            case 157:
                {
                alt85=7;
                }
                break;
            case 289:
                {
                alt85=8;
                }
                break;
            case EXP_NEW:
                {
                alt85=9;
                }
                break;
            case EXP_DELETE:
                {
                alt85=10;
                }
                break;
            case EXP_CAST:
                {
                alt85=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }

            switch (alt85) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:788:7: powExpression
                   {
                   pushFollow(FOLLOW_powExpression_in_unaryExpression6749);
                   powExpression404=powExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_powExpression.add(cast(Object)powExpression404.getTree());

                   // AST REWRITE
                   // elements: powExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 788:21: -> powExpression
                   {
                       adaptor.addChild(root_0, stream_powExpression.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:789:7: '&' unaryExpression
                   {
                   char_literal405=cast(Token)match(input,168,FOLLOW_168_in_unaryExpression6761); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_168.add(cast(Object)char_literal405);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6763);
                   unaryExpression406=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression406.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 789:27: -> ^( PREFIX[\"&\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:789:30: ^( PREFIX[\"&\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "&")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:790:7: '++' unaryExpression
                   {
                   string_literal407=cast(Token)match(input,175,FOLLOW_175_in_unaryExpression6780); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_175.add(cast(Object)string_literal407);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6782);
                   unaryExpression408=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression408.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 790:28: -> ^( PREFIX[\"++\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:790:31: ^( PREFIX[\"++\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "++")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:791:7: '*' unaryExpression
                   {
                   char_literal409=cast(Token)match(input,172,FOLLOW_172_in_unaryExpression6799); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_172.add(cast(Object)char_literal409);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6801);
                   unaryExpression410=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression410.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 791:27: -> ^( PREFIX[\"*\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:791:30: ^( PREFIX[\"*\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "*")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:792:7: '+' unaryExpression
                   {
                   char_literal411=cast(Token)match(input,174,FOLLOW_174_in_unaryExpression6818); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_174.add(cast(Object)char_literal411);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6820);
                   unaryExpression412=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression412.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 792:27: -> ^( PREFIX[\"+\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:792:30: ^( PREFIX[\"+\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "+")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:793:7: '-' unaryExpression
                   {
                   char_literal413=cast(Token)match(input,178,FOLLOW_178_in_unaryExpression6837); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_178.add(cast(Object)char_literal413);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6839);
                   unaryExpression414=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression414.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 793:27: -> ^( PREFIX[\"-\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:793:30: ^( PREFIX[\"-\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "-")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:794:7: '!' unaryExpression
                   {
                   char_literal415=cast(Token)match(input,157,FOLLOW_157_in_unaryExpression6856); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_157.add(cast(Object)char_literal415);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6858);
                   unaryExpression416=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression416.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 794:27: -> ^( PREFIX[\"!\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:794:30: ^( PREFIX[\"!\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "!")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:795:7: '~' unaryExpression
                   {
                   char_literal417=cast(Token)match(input,289,FOLLOW_289_in_unaryExpression6875); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_289.add(cast(Object)char_literal417);


                   pushFollow(FOLLOW_unaryExpression_in_unaryExpression6877);
                   unaryExpression418=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression418.getTree());

                   // AST REWRITE
                   // elements: unaryExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 795:27: -> ^( PREFIX[\"~\"] unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:795:30: ^( PREFIX[\"~\"] unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(PREFIX, "~")
                       , root_1);

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:797:7: newExpression
                   {
                   pushFollow(FOLLOW_newExpression_in_unaryExpression6899);
                   newExpression419=newExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_newExpression.add(cast(Object)newExpression419.getTree());

                   // AST REWRITE
                   // elements: newExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 797:21: -> newExpression
                   {
                       adaptor.addChild(root_0, stream_newExpression.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 10 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:798:7: deleteExpression
                   {
                   pushFollow(FOLLOW_deleteExpression_in_unaryExpression6911);
                   deleteExpression420=deleteExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_deleteExpression.add(cast(Object)deleteExpression420.getTree());

                   // AST REWRITE
                   // elements: deleteExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 798:24: -> deleteExpression
                   {
                       adaptor.addChild(root_0, stream_deleteExpression.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;
               case 11 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:799:7: castExpression
                   {
                   pushFollow(FOLLOW_castExpression_in_unaryExpression6923);
                   castExpression421=castExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_castExpression.add(cast(Object)castExpression421.getTree());

                   // AST REWRITE
                   // elements: castExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 799:22: -> castExpression
                   {
                       adaptor.addChild(root_0, stream_castExpression.nextTree());

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","unaryExpression"," ",86);
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"


    public static class newExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "newExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:803:1: newExpression : EXP_NEW ^ ( allocArgs )? type ( options {greedy=true; } : '(' ! argumentList ')' !)? ;
    public final dparserParser.newExpression_return newExpression()  {
        debug(trace_rules) writeln("Entering rule:","newExpression"," ",87);
        dparserParser.newExpression_return retval = new dparserParser.newExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_NEW422=null;
        Token char_literal425=null;
        Token char_literal427=null;
        dparserParser.allocArgs_return allocArgs423 =null;

        dparserParser.type_return type424 =null;

        dparserParser.argumentList_return argumentList426 =null;


        Object EXP_NEW422_tree=null;
        Object char_literal425_tree=null;
        Object char_literal427_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:804:3: ( EXP_NEW ^ ( allocArgs )? type ( options {greedy=true; } : '(' ! argumentList ')' !)? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:804:5: EXP_NEW ^ ( allocArgs )? type ( options {greedy=true; } : '(' ! argumentList ')' !)?
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_NEW422=cast(Token)match(input,EXP_NEW,FOLLOW_EXP_NEW_in_newExpression6950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_NEW422_tree = 
            cast(Object)adaptor.create(EXP_NEW422)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_NEW422_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:805:5: ( allocArgs )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==170) ) {
                alt86=1;
            }
            switch (alt86) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:805:5: allocArgs
                   {
                   pushFollow(FOLLOW_allocArgs_in_newExpression6957);
                   allocArgs423=allocArgs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, allocArgs423.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_type_in_newExpression6960);
            type424=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type424.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:805:21: ( options {greedy=true; } : '(' ! argumentList ')' !)?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:805:49: '(' ! argumentList ')' !
                   {
                   char_literal425=cast(Token)match(input,170,FOLLOW_170_in_newExpression6974); if (state.failed) return retval;

                   pushFollow(FOLLOW_argumentList_in_newExpression6977);
                   argumentList426=argumentList();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, argumentList426.getTree());

                   char_literal427=cast(Token)match(input,171,FOLLOW_171_in_newExpression6979); if (state.failed) return retval;

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","newExpression"," ",87);
        }
        return retval;
    }
    // $ANTLR end "newExpression"


    public static class allocArgs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "allocArgs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:808:1: allocArgs : '(' ! argumentList ')' !;
    public final dparserParser.allocArgs_return allocArgs()  {
        debug(trace_rules) writeln("Entering rule:","allocArgs"," ",88);
        dparserParser.allocArgs_return retval = new dparserParser.allocArgs_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal428=null;
        Token char_literal430=null;
        dparserParser.argumentList_return argumentList429 =null;


        Object char_literal428_tree=null;
        Object char_literal430_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:809:3: ( '(' ! argumentList ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:809:5: '(' ! argumentList ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            char_literal428=cast(Token)match(input,170,FOLLOW_170_in_allocArgs6996); if (state.failed) return retval;

            pushFollow(FOLLOW_argumentList_in_allocArgs6999);
            argumentList429=argumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argumentList429.getTree());

            char_literal430=cast(Token)match(input,171,FOLLOW_171_in_allocArgs7001); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","allocArgs"," ",88);
        }
        return retval;
    }
    // $ANTLR end "allocArgs"


    public static class deleteExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:812:1: deleteExpression : EXP_DELETE ^ unaryExpression ;
    public final dparserParser.deleteExpression_return deleteExpression()  {
        debug(trace_rules) writeln("Entering rule:","deleteExpression"," ",89);
        dparserParser.deleteExpression_return retval = new dparserParser.deleteExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_DELETE431=null;
        dparserParser.unaryExpression_return unaryExpression432 =null;


        Object EXP_DELETE431_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:813:3: ( EXP_DELETE ^ unaryExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:813:4: EXP_DELETE ^ unaryExpression
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_DELETE431=cast(Token)match(input,EXP_DELETE,FOLLOW_EXP_DELETE_in_deleteExpression7017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_DELETE431_tree = 
            cast(Object)adaptor.create(EXP_DELETE431)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_DELETE431_tree, root_0);
            }

            pushFollow(FOLLOW_unaryExpression_in_deleteExpression7020);
            unaryExpression432=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression432.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","deleteExpression"," ",89);
        }
        return retval;
    }
    // $ANTLR end "deleteExpression"


    public static class castExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "castExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:816:1: castExpression : EXP_CAST ^ '(' ! ( type | castQual )? ')' ! unaryExpression ;
    public final dparserParser.castExpression_return castExpression()  {
        debug(trace_rules) writeln("Entering rule:","castExpression"," ",90);
        dparserParser.castExpression_return retval = new dparserParser.castExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_CAST433=null;
        Token char_literal434=null;
        Token char_literal437=null;
        dparserParser.type_return type435 =null;

        dparserParser.castQual_return castQual436 =null;

        dparserParser.unaryExpression_return unaryExpression438 =null;


        Object EXP_CAST433_tree=null;
        Object char_literal434_tree=null;
        Object char_literal437_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:817:3: ( EXP_CAST ^ '(' ! ( type | castQual )? ')' ! unaryExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:817:5: EXP_CAST ^ '(' ! ( type | castQual )? ')' ! unaryExpression
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_CAST433=cast(Token)match(input,EXP_CAST,FOLLOW_EXP_CAST_in_castExpression7035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_CAST433_tree = 
            cast(Object)adaptor.create(EXP_CAST433)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_CAST433_tree, root_0);
            }

            char_literal434=cast(Token)match(input,170,FOLLOW_170_in_castExpression7042); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:818:10: ( type | castQual )?
            int alt88=3;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==Identifier||LA88_0==181||(LA88_0 >=215  && LA88_0<=219)||(LA88_0 >=223  && LA88_0<=224)||LA88_0==229||LA88_0==235||(LA88_0 >=243  && LA88_0<=244)||(LA88_0 >=248  && LA88_0<=249)||LA88_0==267||LA88_0==272||LA88_0==274||(LA88_0 >=277  && LA88_0<=280)||(LA88_0 >=282  && LA88_0<=283)) ) {
                alt88=1;
            }
            else if ( (LA88_0==222||LA88_0==245||LA88_0==247||LA88_0==273) ) {
                alt88=2;
            }
            switch (alt88) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:818:11: type
                   {
                   pushFollow(FOLLOW_type_in_castExpression7046);
                   type435=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, type435.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:818:18: castQual
                   {
                   pushFollow(FOLLOW_castQual_in_castExpression7050);
                   castQual436=castQual();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, castQual436.getTree());

                   }
                   break;

                default:
            }


            char_literal437=cast(Token)match(input,171,FOLLOW_171_in_castExpression7054); if (state.failed) return retval;

            pushFollow(FOLLOW_unaryExpression_in_castExpression7057);
            unaryExpression438=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression438.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","castExpression"," ",90);
        }
        return retval;
    }
    // $ANTLR end "castExpression"


    public static class castQual_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "castQual"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:821:1: castQual : castQualifier -> ^( CAST_QUALIFIER castQualifier ) ;
    public final dparserParser.castQual_return castQual()  {
        debug(trace_rules) writeln("Entering rule:","castQual"," ",91);
        dparserParser.castQual_return retval = new dparserParser.castQual_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.castQualifier_return castQualifier439 =null;


        RewriteRuleSubtreeStream stream_castQualifier=new RewriteRuleSubtreeStream(adaptor,"rule castQualifier");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:822:3: ( castQualifier -> ^( CAST_QUALIFIER castQualifier ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:822:5: castQualifier
            {
            pushFollow(FOLLOW_castQualifier_in_castQual7072);
            castQualifier439=castQualifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_castQualifier.add(cast(Object)castQualifier439.getTree());

            // AST REWRITE
            // elements: castQualifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 822:19: -> ^( CAST_QUALIFIER castQualifier )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:822:22: ^( CAST_QUALIFIER castQualifier )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(CAST_QUALIFIER, "CAST_QUALIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_castQualifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","castQual"," ",91);
        }
        return retval;
    }
    // $ANTLR end "castQual"


    public static class castQualifier_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "castQualifier"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:825:1: castQualifier : ( 'const' ( 'shared' )? | 'shared' ( 'const' | 'inout' )? | 'inout' ( 'shared' )? | 'immutable' );
    public final dparserParser.castQualifier_return castQualifier()  {
        debug(trace_rules) writeln("Entering rule:","castQualifier"," ",92);
        dparserParser.castQualifier_return retval = new dparserParser.castQualifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal440=null;
        Token string_literal441=null;
        Token string_literal442=null;
        Token set443=null;
        Token string_literal444=null;
        Token string_literal445=null;
        Token string_literal446=null;

        Object string_literal440_tree=null;
        Object string_literal441_tree=null;
        Object string_literal442_tree=null;
        Object set443_tree=null;
        Object string_literal444_tree=null;
        Object string_literal445_tree=null;
        Object string_literal446_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:826:3: ( 'const' ( 'shared' )? | 'shared' ( 'const' | 'inout' )? | 'inout' ( 'shared' )? | 'immutable' )
            int alt92=4;
            switch ( input.LA(1) ) {
            case 222:
                {
                alt92=1;
                }
                break;
            case 273:
                {
                alt92=2;
                }
                break;
            case 247:
                {
                alt92=3;
                }
                break;
            case 245:
                {
                alt92=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }

            switch (alt92) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:826:5: 'const' ( 'shared' )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal440=cast(Token)match(input,222,FOLLOW_222_in_castQualifier7095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal440_tree = 
                    cast(Object)adaptor.create(string_literal440)
                    ;
                    adaptor.addChild(root_0, string_literal440_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:826:13: ( 'shared' )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==273) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:826:13: 'shared'
                           {
                           string_literal441=cast(Token)match(input,273,FOLLOW_273_in_castQualifier7097); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal441_tree = 
                           cast(Object)adaptor.create(string_literal441)
                           ;
                           adaptor.addChild(root_0, string_literal441_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:827:5: 'shared' ( 'const' | 'inout' )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal442=cast(Token)match(input,273,FOLLOW_273_in_castQualifier7104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal442_tree = 
                    cast(Object)adaptor.create(string_literal442)
                    ;
                    adaptor.addChild(root_0, string_literal442_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:827:14: ( 'const' | 'inout' )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==222||LA90_0==247) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:
                           {
                           set443=cast(Token)input.LT(1);

                           if ( input.LA(1)==222||input.LA(1)==247 ) {
                               input.consume();
                               debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                               if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                               cast(Object)adaptor.create(set443)
                               );
                               state.errorRecovery=false;
                               state.failed=false;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               MismatchedSetException mse = new MismatchedSetException(null,input);
                               throw mse;
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:828:5: 'inout' ( 'shared' )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal444=cast(Token)match(input,247,FOLLOW_247_in_castQualifier7120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal444_tree = 
                    cast(Object)adaptor.create(string_literal444)
                    ;
                    adaptor.addChild(root_0, string_literal444_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:828:13: ( 'shared' )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==273) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:828:13: 'shared'
                           {
                           string_literal445=cast(Token)match(input,273,FOLLOW_273_in_castQualifier7122); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal445_tree = 
                           cast(Object)adaptor.create(string_literal445)
                           ;
                           adaptor.addChild(root_0, string_literal445_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:829:5: 'immutable'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal446=cast(Token)match(input,245,FOLLOW_245_in_castQualifier7129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal446_tree = 
                    cast(Object)adaptor.create(string_literal446)
                    ;
                    adaptor.addChild(root_0, string_literal446_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","castQualifier"," ",92);
        }
        return retval;
    }
    // $ANTLR end "castQualifier"


    public static class powExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "powExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:832:1: powExpression : ( postFixExpression -> postFixExpression ) ( options {greedy=true; } : '^^' unaryExpression -> ^( INFIX[\"^^\"] postFixExpression unaryExpression ) )? ;
    public final dparserParser.powExpression_return powExpression()  {
        debug(trace_rules) writeln("Entering rule:","powExpression"," ",93);
        dparserParser.powExpression_return retval = new dparserParser.powExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal448=null;
        dparserParser.postFixExpression_return postFixExpression447 =null;

        dparserParser.unaryExpression_return unaryExpression449 =null;


        Object string_literal448_tree=null;
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_postFixExpression=new RewriteRuleSubtreeStream(adaptor,"rule postFixExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:833:3: ( ( postFixExpression -> postFixExpression ) ( options {greedy=true; } : '^^' unaryExpression -> ^( INFIX[\"^^\"] postFixExpression unaryExpression ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:833:5: ( postFixExpression -> postFixExpression ) ( options {greedy=true; } : '^^' unaryExpression -> ^( INFIX[\"^^\"] postFixExpression unaryExpression ) )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:833:5: ( postFixExpression -> postFixExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:833:6: postFixExpression
            {
            pushFollow(FOLLOW_postFixExpression_in_powExpression7145);
            postFixExpression447=postFixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_postFixExpression.add(cast(Object)postFixExpression447.getTree());

            // AST REWRITE
            // elements: postFixExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 833:24: -> postFixExpression
            {
                adaptor.addChild(root_0, stream_postFixExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:834:5: ( options {greedy=true; } : '^^' unaryExpression -> ^( INFIX[\"^^\"] postFixExpression unaryExpression ) )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==208) ) {
                alt93=1;
            }
            switch (alt93) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:834:33: '^^' unaryExpression
                   {
                   string_literal448=cast(Token)match(input,208,FOLLOW_208_in_powExpression7168); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_208.add(cast(Object)string_literal448);


                   pushFollow(FOLLOW_unaryExpression_in_powExpression7170);
                   unaryExpression449=unaryExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_unaryExpression.add(cast(Object)unaryExpression449.getTree());

                   // AST REWRITE
                   // elements: unaryExpression, postFixExpression
                   // token labels: 
                   // rule labels: retval
                   // token list labels: 
                   // rule list labels: 
                   // wildcard labels: 
                   if ( state.backtracking==0 ) {

                   retval.tree = root_0;
                   RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                   root_0 = cast(Object)adaptor.nil();
                   // 834:54: -> ^( INFIX[\"^^\"] postFixExpression unaryExpression )
                   {
                       // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:834:57: ^( INFIX[\"^^\"] postFixExpression unaryExpression )
                       {
                       Object root_1 = cast(Object)adaptor.nil();
                       root_1 = cast(Object)adaptor.becomeRoot(
                       cast(Object)adaptor.create(INFIX, "^^")
                       , root_1);

                       adaptor.addChild(root_1, stream_postFixExpression.nextTree());

                       adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                       adaptor.addChild(root_0, root_1);
                       }

                   }


                   retval.tree = root_0;
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","powExpression"," ",93);
        }
        return retval;
    }
    // $ANTLR end "powExpression"


    public static class postFixExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "postFixExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:837:1: postFixExpression : ( primaryExpression -> primaryExpression ) ( options {greedy=true; } : '++' -> ^( POSTFIX[\"++\"] $postFixExpression) | '--' -> ^( POSTFIX[\"--\"] $postFixExpression) | '(' argumentList ')' -> ^( EXP_CALL $postFixExpression argumentList ) | ( '[' assignExpression '..' )=> ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) ) | ( '[' assignExpression ',' )=> ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) ) | '.' Identifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) ) | '!' ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) ) )* ;
    public final dparserParser.postFixExpression_return postFixExpression()  {
        debug(trace_rules) writeln("Entering rule:","postFixExpression"," ",94);
        dparserParser.postFixExpression_return retval = new dparserParser.postFixExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal451=null;
        Token string_literal452=null;
        Token char_literal453=null;
        Token char_literal455=null;
        Token char_literal456=null;
        Token string_literal458=null;
        Token char_literal460=null;
        Token char_literal461=null;
        Token char_literal463=null;
        Token char_literal464=null;
        Token Identifier465=null;
        Token char_literal466=null;
        Token char_literal468=null;
        Token char_literal470=null;
        dparserParser.primaryExpression_return primaryExpression450 =null;

        dparserParser.argumentList_return argumentList454 =null;

        dparserParser.assignExpression_return assignExpression457 =null;

        dparserParser.assignExpression_return assignExpression459 =null;

        dparserParser.argumentList_return argumentList462 =null;

        dparserParser.templateSingleArgument_return templateSingleArgument467 =null;

        dparserParser.templateArgumentList_return templateArgumentList469 =null;


        Object string_literal451_tree=null;
        Object string_literal452_tree=null;
        Object char_literal453_tree=null;
        Object char_literal455_tree=null;
        Object char_literal456_tree=null;
        Object string_literal458_tree=null;
        Object char_literal460_tree=null;
        Object char_literal461_tree=null;
        Object char_literal463_tree=null;
        Object char_literal464_tree=null;
        Object Identifier465_tree=null;
        Object char_literal466_tree=null;
        Object char_literal468_tree=null;
        Object char_literal470_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_Range=new RewriteRuleTokenStream(adaptor,"token Range");
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_templateSingleArgument=new RewriteRuleSubtreeStream(adaptor,"rule templateSingleArgument");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_argumentList=new RewriteRuleSubtreeStream(adaptor,"rule argumentList");
        RewriteRuleSubtreeStream stream_templateArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule templateArgumentList");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:838:3: ( ( primaryExpression -> primaryExpression ) ( options {greedy=true; } : '++' -> ^( POSTFIX[\"++\"] $postFixExpression) | '--' -> ^( POSTFIX[\"--\"] $postFixExpression) | '(' argumentList ')' -> ^( EXP_CALL $postFixExpression argumentList ) | ( '[' assignExpression '..' )=> ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) ) | ( '[' assignExpression ',' )=> ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) ) | '.' Identifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) ) | '!' ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) ) )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:838:5: ( primaryExpression -> primaryExpression ) ( options {greedy=true; } : '++' -> ^( POSTFIX[\"++\"] $postFixExpression) | '--' -> ^( POSTFIX[\"--\"] $postFixExpression) | '(' argumentList ')' -> ^( EXP_CALL $postFixExpression argumentList ) | ( '[' assignExpression '..' )=> ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) ) | ( '[' assignExpression ',' )=> ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) ) | '.' Identifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) ) | '!' ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) ) )*
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:838:5: ( primaryExpression -> primaryExpression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:838:6: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postFixExpression7200);
            primaryExpression450=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(cast(Object)primaryExpression450.getTree());

            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 838:24: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:840:4: ( options {greedy=true; } : '++' -> ^( POSTFIX[\"++\"] $postFixExpression) | '--' -> ^( POSTFIX[\"--\"] $postFixExpression) | '(' argumentList ')' -> ^( EXP_CALL $postFixExpression argumentList ) | ( '[' assignExpression '..' )=> ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) ) | ( '[' assignExpression ',' )=> ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) ) | '.' Identifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) ) | '!' ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) ) )*
            loop95:
            do {
                int alt95=8;
                switch ( input.LA(1) ) {
                case 181:
                    {
                    alt95=6;
                    }
                    break;
                case 170:
                    {
                    alt95=3;
                    }
                    break;
                case 175:
                    {
                    alt95=1;
                    }
                    break;
                case 157:
                    {
                    alt95=7;
                    }
                    break;
                case 179:
                    {
                    alt95=2;
                    }
                    break;
                case 204:
                    {
                    int LA95_7 = input.LA(2);

                    if ( (synpred11_dparser()) ) {
                        alt95=4;
                    }
                    else if ( (synpred12_dparser()) ) {
                        alt95=5;
                    }


                    }
                    break;

                default:
                }

                switch (alt95) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:841:6: '++'
            	    {
            	    string_literal451=cast(Token)match(input,175,FOLLOW_175_in_postFixExpression7231); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_175.add(cast(Object)string_literal451);


            	    // AST REWRITE
            	    // elements: postFixExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 841:11: -> ^( POSTFIX[\"++\"] $postFixExpression)
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:841:14: ^( POSTFIX[\"++\"] $postFixExpression)
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(POSTFIX, "++")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 2 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:842:6: '--'
            	    {
            	    string_literal452=cast(Token)match(input,179,FOLLOW_179_in_postFixExpression7248); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_179.add(cast(Object)string_literal452);


            	    // AST REWRITE
            	    // elements: postFixExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 842:11: -> ^( POSTFIX[\"--\"] $postFixExpression)
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:842:14: ^( POSTFIX[\"--\"] $postFixExpression)
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(POSTFIX, "--")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 3 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:843:6: '(' argumentList ')'
            	    {
            	    char_literal453=cast(Token)match(input,170,FOLLOW_170_in_postFixExpression7265); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal453);


            	    pushFollow(FOLLOW_argumentList_in_postFixExpression7267);
            	    argumentList454=argumentList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_argumentList.add(cast(Object)argumentList454.getTree());

            	    char_literal455=cast(Token)match(input,171,FOLLOW_171_in_postFixExpression7269); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal455);


            	    // AST REWRITE
            	    // elements: postFixExpression, argumentList
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 843:27: -> ^( EXP_CALL $postFixExpression argumentList )
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:843:30: ^( EXP_CALL $postFixExpression argumentList )
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(EXP_CALL, "EXP_CALL")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_argumentList.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 4 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:844:6: ( '[' assignExpression '..' )=> ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) )
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:844:38: ( '[' assignExpression '..' assignExpression ']' -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression ) )
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:844:39: '[' assignExpression '..' assignExpression ']'
            	    {
            	    char_literal456=cast(Token)match(input,204,FOLLOW_204_in_postFixExpression7299); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_204.add(cast(Object)char_literal456);


            	    pushFollow(FOLLOW_assignExpression_in_postFixExpression7301);
            	    assignExpression457=assignExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression457.getTree());

            	    string_literal458=cast(Token)match(input,Range,FOLLOW_Range_in_postFixExpression7303); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Range.add(cast(Object)string_literal458);


            	    pushFollow(FOLLOW_assignExpression_in_postFixExpression7305);
            	    assignExpression459=assignExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression459.getTree());

            	    char_literal460=cast(Token)match(input,205,FOLLOW_205_in_postFixExpression7307); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_205.add(cast(Object)char_literal460);


            	    // AST REWRITE
            	    // elements: postFixExpression, assignExpression, assignExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 845:10: -> ^( EXP_SLICE $postFixExpression assignExpression assignExpression )
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:845:13: ^( EXP_SLICE $postFixExpression assignExpression assignExpression )
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(EXP_SLICE, "EXP_SLICE")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_assignExpression.nextTree());

            	        adaptor.addChild(root_1, stream_assignExpression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }


            	    }
            	    break;
            	case 5 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:6: ( '[' assignExpression ',' )=> ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) )
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:37: ( '[' argumentList ']' -> ^( EXP_INDEX argumentList ) )
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:38: '[' argumentList ']'
            	    {
            	    char_literal461=cast(Token)match(input,204,FOLLOW_204_in_postFixExpression7349); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_204.add(cast(Object)char_literal461);


            	    pushFollow(FOLLOW_argumentList_in_postFixExpression7351);
            	    argumentList462=argumentList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_argumentList.add(cast(Object)argumentList462.getTree());

            	    char_literal463=cast(Token)match(input,205,FOLLOW_205_in_postFixExpression7353); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_205.add(cast(Object)char_literal463);


            	    // AST REWRITE
            	    // elements: argumentList
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 846:59: -> ^( EXP_INDEX argumentList )
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:62: ^( EXP_INDEX argumentList )
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(EXP_INDEX, "EXP_INDEX")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_argumentList.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }


            	    }
            	    break;
            	case 6 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:847:6: '.' Identifier
            	    {
            	    char_literal464=cast(Token)match(input,181,FOLLOW_181_in_postFixExpression7369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal464);


            	    Identifier465=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_postFixExpression7371); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier465);


            	    // AST REWRITE
            	    // elements: postFixExpression, Identifier
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	    root_0 = cast(Object)adaptor.nil();
            	    // 847:21: -> ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) )
            	    {
            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:847:24: ^( EXP_REFERENCE ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) ) )
            	        {
            	        Object root_1 = cast(Object)adaptor.nil();
            	        root_1 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(EXP_REFERENCE, "EXP_REFERENCE")
            	        , root_1);

            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:847:40: ^( REF_QUALIFIED $postFixExpression ^( REF_IDENTIFIER Identifier ) )
            	        {
            	        Object root_2 = cast(Object)adaptor.nil();
            	        root_2 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
            	        , root_2);

            	        adaptor.addChild(root_2, stream_retval.nextTree());

            	        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:847:75: ^( REF_IDENTIFIER Identifier )
            	        {
            	        Object root_3 = cast(Object)adaptor.nil();
            	        root_3 = cast(Object)adaptor.becomeRoot(
            	        cast(Object)adaptor.create(REF_IDENTIFIER, "REF_IDENTIFIER")
            	        , root_3);

            	        adaptor.addChild(root_3, 
            	        stream_Identifier.nextNode()
            	        );

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 7 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:850:7: '!' ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) )
            	    {
            	    char_literal466=cast(Token)match(input,157,FOLLOW_157_in_postFixExpression7406); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_157.add(cast(Object)char_literal466);


            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:850:11: ( templateSingleArgument -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument ) | '(' templateArgumentList ')' -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList ) )
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==BooleanLiteral||LA94_0==CharacterLiteral||LA94_0==EXP_LITERAL_FILE||(LA94_0 >=44  && LA94_0<=45)||LA94_0==FloatLiteral||LA94_0==Identifier||LA94_0==IntegerLiteral||LA94_0==StringLiteral||(LA94_0 >=215  && LA94_0<=219)||(LA94_0 >=223  && LA94_0<=224)||LA94_0==229||LA94_0==235||(LA94_0 >=243  && LA94_0<=244)||(LA94_0 >=248  && LA94_0<=249)||LA94_0==267||LA94_0==272||LA94_0==274||(LA94_0 >=277  && LA94_0<=280)||(LA94_0 >=282  && LA94_0<=283)) ) {
            	        alt94=1;
            	    }
            	    else if ( (LA94_0==170) ) {
            	        alt94=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 94, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt94) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:850:13: templateSingleArgument
            	           {
            	           pushFollow(FOLLOW_templateSingleArgument_in_postFixExpression7410);
            	           templateSingleArgument467=templateSingleArgument();

            	           state._fsp--;
            	           if (state.failed) return retval;
            	           if ( state.backtracking==0 ) stream_templateSingleArgument.add(cast(Object)templateSingleArgument467.getTree());

            	           // AST REWRITE
            	           // elements: templateSingleArgument, postFixExpression
            	           // token labels: 
            	           // rule labels: retval
            	           // token list labels: 
            	           // rule list labels: 
            	           // wildcard labels: 
            	           if ( state.backtracking==0 ) {

            	           retval.tree = root_0;
            	           RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	           root_0 = cast(Object)adaptor.nil();
            	           // 850:36: -> ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument )
            	           {
            	               // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:850:39: ^( TEMPLATE_INSTANCE $postFixExpression templateSingleArgument )
            	               {
            	               Object root_1 = cast(Object)adaptor.nil();
            	               root_1 = cast(Object)adaptor.becomeRoot(
            	               cast(Object)adaptor.create(TEMPLATE_INSTANCE, "TEMPLATE_INSTANCE")
            	               , root_1);

            	               adaptor.addChild(root_1, stream_retval.nextTree());

            	               adaptor.addChild(root_1, stream_templateSingleArgument.nextTree());

            	               adaptor.addChild(root_0, root_1);
            	               }

            	           }


            	           retval.tree = root_0;
            	           }

            	           }
            	           break;
            	       case 2 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:851:13: '(' templateArgumentList ')'
            	           {
            	           char_literal468=cast(Token)match(input,170,FOLLOW_170_in_postFixExpression7435); if (state.failed) return retval; 
            	           if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal468);


            	           pushFollow(FOLLOW_templateArgumentList_in_postFixExpression7437);
            	           templateArgumentList469=templateArgumentList();

            	           state._fsp--;
            	           if (state.failed) return retval;
            	           if ( state.backtracking==0 ) stream_templateArgumentList.add(cast(Object)templateArgumentList469.getTree());

            	           char_literal470=cast(Token)match(input,171,FOLLOW_171_in_postFixExpression7439); if (state.failed) return retval; 
            	           if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal470);


            	           // AST REWRITE
            	           // elements: postFixExpression, templateArgumentList
            	           // token labels: 
            	           // rule labels: retval
            	           // token list labels: 
            	           // rule list labels: 
            	           // wildcard labels: 
            	           if ( state.backtracking==0 ) {

            	           retval.tree = root_0;
            	           RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            	           root_0 = cast(Object)adaptor.nil();
            	           // 851:41: -> ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList )
            	           {
            	               // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:851:44: ^( TEMPLATE_INSTANCE $postFixExpression templateArgumentList )
            	               {
            	               Object root_1 = cast(Object)adaptor.nil();
            	               root_1 = cast(Object)adaptor.becomeRoot(
            	               cast(Object)adaptor.create(TEMPLATE_INSTANCE, "TEMPLATE_INSTANCE")
            	               , root_1);

            	               adaptor.addChild(root_1, stream_retval.nextTree());

            	               adaptor.addChild(root_1, stream_templateArgumentList.nextTree());

            	               adaptor.addChild(root_0, root_1);
            	               }

            	           }


            	           retval.tree = root_0;
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","postFixExpression"," ",94);
        }
        return retval;
    }
    // $ANTLR end "postFixExpression"


    public static class primaryExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primaryExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:856:1: primaryExpression : ( IntegerLiteral -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] ) | FloatLiteral -> ^( EXP_LITERAL_REAL[$FloatLiteral] ) | CharacterLiteral -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] ) | StringLiteral -> ^( EXP_LITERAL_STRING[$StringLiteral] ) | EXP_THIS | EXP_SUPER | EXP_LITERAL_NULL | ( '.' Identifier '.' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) ) | ( '.' Identifier '!' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) ) | '.' refIdentifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED refIdentifier ) ) | ( Identifier '.' )=> ( refIdentifier ) | ( Identifier '!' )=> ( refIdentifier ) | ( Identifier '=>' )=> ( lambdaExpression ) | refIdentifier -> ^( EXP_REFERENCE refIdentifier ) | EXP_DOLLAR | EXP_LITERAL_FILE | EXP_LITERAL_LINE | ( parameters '=>' )=> ( lambdaExpression ) | '(' ! assignExpression ')' !| assertExpression | mixinExpression | typeOfExpression | typeIdExpression | functionLiteral | importExpression | isExpression | traitsExpression );
    public final dparserParser.primaryExpression_return primaryExpression()  {
        debug(trace_rules) writeln("Entering rule:","primaryExpression"," ",95);
        dparserParser.primaryExpression_return retval = new dparserParser.primaryExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IntegerLiteral471=null;
        Token FloatLiteral472=null;
        Token CharacterLiteral473=null;
        Token StringLiteral474=null;
        Token EXP_THIS475=null;
        Token EXP_SUPER476=null;
        Token EXP_LITERAL_NULL477=null;
        Token char_literal478=null;
        Token char_literal480=null;
        Token char_literal482=null;
        Token EXP_DOLLAR488=null;
        Token EXP_LITERAL_FILE489=null;
        Token EXP_LITERAL_LINE490=null;
        Token char_literal492=null;
        Token char_literal494=null;
        dparserParser.refIdentifier_return refIdentifier479 =null;

        dparserParser.refIdentifier_return refIdentifier481 =null;

        dparserParser.refIdentifier_return refIdentifier483 =null;

        dparserParser.refIdentifier_return refIdentifier484 =null;

        dparserParser.refIdentifier_return refIdentifier485 =null;

        dparserParser.lambdaExpression_return lambdaExpression486 =null;

        dparserParser.refIdentifier_return refIdentifier487 =null;

        dparserParser.lambdaExpression_return lambdaExpression491 =null;

        dparserParser.assignExpression_return assignExpression493 =null;

        dparserParser.assertExpression_return assertExpression495 =null;

        dparserParser.mixinExpression_return mixinExpression496 =null;

        dparserParser.typeOfExpression_return typeOfExpression497 =null;

        dparserParser.typeIdExpression_return typeIdExpression498 =null;

        dparserParser.functionLiteral_return functionLiteral499 =null;

        dparserParser.importExpression_return importExpression500 =null;

        dparserParser.isExpression_return isExpression501 =null;

        dparserParser.traitsExpression_return traitsExpression502 =null;


        Object IntegerLiteral471_tree=null;
        Object FloatLiteral472_tree=null;
        Object CharacterLiteral473_tree=null;
        Object StringLiteral474_tree=null;
        Object EXP_THIS475_tree=null;
        Object EXP_SUPER476_tree=null;
        Object EXP_LITERAL_NULL477_tree=null;
        Object char_literal478_tree=null;
        Object char_literal480_tree=null;
        Object char_literal482_tree=null;
        Object EXP_DOLLAR488_tree=null;
        Object EXP_LITERAL_FILE489_tree=null;
        Object EXP_LITERAL_LINE490_tree=null;
        Object char_literal492_tree=null;
        Object char_literal494_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_IntegerLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerLiteral");
        RewriteRuleTokenStream stream_FloatLiteral=new RewriteRuleTokenStream(adaptor,"token FloatLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_refIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule refIdentifier");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:857:3: ( IntegerLiteral -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] ) | FloatLiteral -> ^( EXP_LITERAL_REAL[$FloatLiteral] ) | CharacterLiteral -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] ) | StringLiteral -> ^( EXP_LITERAL_STRING[$StringLiteral] ) | EXP_THIS | EXP_SUPER | EXP_LITERAL_NULL | ( '.' Identifier '.' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) ) | ( '.' Identifier '!' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) ) | '.' refIdentifier -> ^( EXP_REFERENCE ^( REF_QUALIFIED refIdentifier ) ) | ( Identifier '.' )=> ( refIdentifier ) | ( Identifier '!' )=> ( refIdentifier ) | ( Identifier '=>' )=> ( lambdaExpression ) | refIdentifier -> ^( EXP_REFERENCE refIdentifier ) | EXP_DOLLAR | EXP_LITERAL_FILE | EXP_LITERAL_LINE | ( parameters '=>' )=> ( lambdaExpression ) | '(' ! assignExpression ')' !| assertExpression | mixinExpression | typeOfExpression | typeIdExpression | functionLiteral | importExpression | isExpression | traitsExpression )
            int alt96=27;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
                {
                alt96=1;
                }
                break;
            case FloatLiteral:
                {
                alt96=2;
                }
                break;
            case CharacterLiteral:
                {
                alt96=3;
                }
                break;
            case StringLiteral:
                {
                alt96=4;
                }
                break;
            case EXP_THIS:
                {
                alt96=5;
                }
                break;
            case EXP_SUPER:
                {
                alt96=6;
                }
                break;
            case EXP_LITERAL_NULL:
                {
                alt96=7;
                }
                break;
            case 181:
                {
                int LA96_8 = input.LA(2);

                if ( (synpred13_dparser()) ) {
                    alt96=8;
                }
                else if ( (synpred14_dparser()) ) {
                    alt96=9;
                }
                else if ( (true) ) {
                    alt96=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 8, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
                {
                int LA96_9 = input.LA(2);

                if ( (synpred15_dparser()) ) {
                    alt96=11;
                }
                else if ( (synpred16_dparser()) ) {
                    alt96=12;
                }
                else if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (true) ) {
                    alt96=14;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 9, input);

                    throw nvae;

                }
                }
                break;
            case 170:
                {
                int LA96_10 = input.LA(2);

                if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else if ( (true) ) {
                    alt96=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 10, input);

                    throw nvae;

                }
                }
                break;
            case 268:
                {
                int LA96_11 = input.LA(2);

                if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 11, input);

                    throw nvae;

                }
                }
                break;
            case 271:
                {
                int LA96_12 = input.LA(2);

                if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 12, input);

                    throw nvae;

                }
                }
                break;
            case 203:
                {
                int LA96_13 = input.LA(2);

                if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 13, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA96_14 = input.LA(2);

                if ( (synpred17_dparser()) ) {
                    alt96=13;
                }
                else if ( (synpred18_dparser()) ) {
                    alt96=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 14, input);

                    throw nvae;

                }
                }
                break;
            case EXP_DOLLAR:
                {
                alt96=15;
                }
                break;
            case EXP_LITERAL_FILE:
                {
                alt96=16;
                }
                break;
            case EXP_LITERAL_LINE:
                {
                alt96=17;
                }
                break;
            case EXP_ASSERT:
                {
                alt96=20;
                }
                break;
            case EXP_MIXIN:
                {
                alt96=21;
                }
                break;
            case EXP_TYPEOF:
                {
                alt96=22;
                }
                break;
            case EXP_TYPEID:
                {
                alt96=23;
                }
                break;
            case 226:
            case 237:
                {
                alt96=24;
                }
                break;
            case 246:
                {
                alt96=25;
                }
                break;
            case EXP_IS:
                {
                alt96=26;
                }
                break;
            case EXP_TRAITS:
                {
                alt96=27;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:857:5: IntegerLiteral
                    {
                    IntegerLiteral471=cast(Token)match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_primaryExpression7480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IntegerLiteral.add(cast(Object)IntegerLiteral471);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 857:20: -> ^( EXP_LITERAL_INTEGER[$IntegerLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:857:23: ^( EXP_LITERAL_INTEGER[$IntegerLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_INTEGER, IntegerLiteral471)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:858:5: FloatLiteral
                    {
                    FloatLiteral472=cast(Token)match(input,FloatLiteral,FOLLOW_FloatLiteral_in_primaryExpression7493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatLiteral.add(cast(Object)FloatLiteral472);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 858:18: -> ^( EXP_LITERAL_REAL[$FloatLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:858:21: ^( EXP_LITERAL_REAL[$FloatLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_REAL, FloatLiteral472)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:859:5: CharacterLiteral
                    {
                    CharacterLiteral473=cast(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_primaryExpression7506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(cast(Object)CharacterLiteral473);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 859:22: -> ^( EXP_LITERAL_CHAR[$CharacterLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:859:25: ^( EXP_LITERAL_CHAR[$CharacterLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_CHAR, CharacterLiteral473)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:860:5: StringLiteral
                    {
                    StringLiteral474=cast(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_primaryExpression7519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(cast(Object)StringLiteral474);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 860:19: -> ^( EXP_LITERAL_STRING[$StringLiteral] )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:860:22: ^( EXP_LITERAL_STRING[$StringLiteral] )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_STRING, StringLiteral474)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:861:5: EXP_THIS
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_THIS475=cast(Token)match(input,EXP_THIS,FOLLOW_EXP_THIS_in_primaryExpression7532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_THIS475_tree = 
                    cast(Object)adaptor.create(EXP_THIS475)
                    ;
                    adaptor.addChild(root_0, EXP_THIS475_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:862:5: EXP_SUPER
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_SUPER476=cast(Token)match(input,EXP_SUPER,FOLLOW_EXP_SUPER_in_primaryExpression7538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_SUPER476_tree = 
                    cast(Object)adaptor.create(EXP_SUPER476)
                    ;
                    adaptor.addChild(root_0, EXP_SUPER476_tree);
                    }

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:863:5: EXP_LITERAL_NULL
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_NULL477=cast(Token)match(input,EXP_LITERAL_NULL,FOLLOW_EXP_LITERAL_NULL_in_primaryExpression7544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_NULL477_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_NULL477)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_NULL477_tree);
                    }

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:5: ( '.' Identifier '.' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) )
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:28: ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:29: '.' refIdentifier
                    {
                    char_literal478=cast(Token)match(input,181,FOLLOW_181_in_primaryExpression7560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal478);


                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7562);
                    refIdentifier479=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier479.getTree());

                    // AST REWRITE
                    // elements: refIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 864:47: -> ^( REF_QUALIFIED refIdentifier )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:50: ^( REF_QUALIFIED refIdentifier )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                        , root_1);

                        adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:5: ( '.' Identifier '!' )=> ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) )
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:28: ( '.' refIdentifier -> ^( REF_QUALIFIED refIdentifier ) )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:29: '.' refIdentifier
                    {
                    char_literal480=cast(Token)match(input,181,FOLLOW_181_in_primaryExpression7587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal480);


                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7589);
                    refIdentifier481=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier481.getTree());

                    // AST REWRITE
                    // elements: refIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 865:47: -> ^( REF_QUALIFIED refIdentifier )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:50: ^( REF_QUALIFIED refIdentifier )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                        , root_1);

                        adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:866:5: '.' refIdentifier
                    {
                    char_literal482=cast(Token)match(input,181,FOLLOW_181_in_primaryExpression7604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(cast(Object)char_literal482);


                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7606);
                    refIdentifier483=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier483.getTree());

                    // AST REWRITE
                    // elements: refIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 866:23: -> ^( EXP_REFERENCE ^( REF_QUALIFIED refIdentifier ) )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:866:26: ^( EXP_REFERENCE ^( REF_QUALIFIED refIdentifier ) )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_REFERENCE, "EXP_REFERENCE")
                        , root_1);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:866:42: ^( REF_QUALIFIED refIdentifier )
                        {
                        Object root_2 = cast(Object)adaptor.nil();
                        root_2 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(REF_QUALIFIED, "REF_QUALIFIED")
                        , root_2);

                        adaptor.addChild(root_2, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:867:5: ( Identifier '.' )=> ( refIdentifier )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:867:24: ( refIdentifier )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:867:25: refIdentifier
                    {
                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7632);
                    refIdentifier484=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, refIdentifier484.getTree());

                    }


                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:868:5: ( Identifier '!' )=> ( refIdentifier )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:868:24: ( refIdentifier )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:868:25: refIdentifier
                    {
                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7647);
                    refIdentifier485=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, refIdentifier485.getTree());

                    }


                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:869:5: ( Identifier '=>' )=> ( lambdaExpression )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:869:25: ( lambdaExpression )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:869:26: lambdaExpression
                    {
                    pushFollow(FOLLOW_lambdaExpression_in_primaryExpression7662);
                    lambdaExpression486=lambdaExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambdaExpression486.getTree());

                    }


                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:870:5: refIdentifier
                    {
                    pushFollow(FOLLOW_refIdentifier_in_primaryExpression7669);
                    refIdentifier487=refIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refIdentifier.add(cast(Object)refIdentifier487.getTree());

                    // AST REWRITE
                    // elements: refIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 870:19: -> ^( EXP_REFERENCE refIdentifier )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:870:22: ^( EXP_REFERENCE refIdentifier )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_REFERENCE, "EXP_REFERENCE")
                        , root_1);

                        adaptor.addChild(root_1, stream_refIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:871:5: EXP_DOLLAR
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_DOLLAR488=cast(Token)match(input,EXP_DOLLAR,FOLLOW_EXP_DOLLAR_in_primaryExpression7683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_DOLLAR488_tree = 
                    cast(Object)adaptor.create(EXP_DOLLAR488)
                    ;
                    adaptor.addChild(root_0, EXP_DOLLAR488_tree);
                    }

                    }
                    break;
                case 16 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:872:5: EXP_LITERAL_FILE
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_FILE489=cast(Token)match(input,EXP_LITERAL_FILE,FOLLOW_EXP_LITERAL_FILE_in_primaryExpression7689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_FILE489_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_FILE489)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_FILE489_tree);
                    }

                    }
                    break;
                case 17 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:873:5: EXP_LITERAL_LINE
                    {
                    root_0 = cast(Object)adaptor.nil();


                    EXP_LITERAL_LINE490=cast(Token)match(input,EXP_LITERAL_LINE,FOLLOW_EXP_LITERAL_LINE_in_primaryExpression7695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP_LITERAL_LINE490_tree = 
                    cast(Object)adaptor.create(EXP_LITERAL_LINE490)
                    ;
                    adaptor.addChild(root_0, EXP_LITERAL_LINE490_tree);
                    }

                    }
                    break;
                case 18 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:874:5: ( parameters '=>' )=> ( lambdaExpression )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:874:25: ( lambdaExpression )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:874:26: lambdaExpression
                    {
                    pushFollow(FOLLOW_lambdaExpression_in_primaryExpression7709);
                    lambdaExpression491=lambdaExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambdaExpression491.getTree());

                    }


                    }
                    break;
                case 19 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:875:5: '(' ! assignExpression ')' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal492=cast(Token)match(input,170,FOLLOW_170_in_primaryExpression7716); if (state.failed) return retval;

                    pushFollow(FOLLOW_assignExpression_in_primaryExpression7719);
                    assignExpression493=assignExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression493.getTree());

                    char_literal494=cast(Token)match(input,171,FOLLOW_171_in_primaryExpression7721); if (state.failed) return retval;

                    }
                    break;
                case 20 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:876:5: assertExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_assertExpression_in_primaryExpression7728);
                    assertExpression495=assertExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assertExpression495.getTree());

                    }
                    break;
                case 21 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:877:5: mixinExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_mixinExpression_in_primaryExpression7734);
                    mixinExpression496=mixinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixinExpression496.getTree());

                    }
                    break;
                case 22 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:878:5: typeOfExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_typeOfExpression_in_primaryExpression7740);
                    typeOfExpression497=typeOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeOfExpression497.getTree());

                    }
                    break;
                case 23 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:879:5: typeIdExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_typeIdExpression_in_primaryExpression7746);
                    typeIdExpression498=typeIdExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeIdExpression498.getTree());

                    }
                    break;
                case 24 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:880:5: functionLiteral
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_functionLiteral_in_primaryExpression7752);
                    functionLiteral499=functionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionLiteral499.getTree());

                    }
                    break;
                case 25 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:881:5: importExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_importExpression_in_primaryExpression7758);
                    importExpression500=importExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importExpression500.getTree());

                    }
                    break;
                case 26 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:882:5: isExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_isExpression_in_primaryExpression7764);
                    isExpression501=isExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, isExpression501.getTree());

                    }
                    break;
                case 27 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:883:5: traitsExpression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_traitsExpression_in_primaryExpression7770);
                    traitsExpression502=traitsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, traitsExpression502.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","primaryExpression"," ",95);
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"


    public static class assertExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assertExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:886:1: assertExpression : EXP_ASSERT ^ '(' ! assignExpression ( ',' assignExpression )? ')' !;
    public final dparserParser.assertExpression_return assertExpression()  {
        debug(trace_rules) writeln("Entering rule:","assertExpression"," ",96);
        dparserParser.assertExpression_return retval = new dparserParser.assertExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_ASSERT503=null;
        Token char_literal504=null;
        Token char_literal506=null;
        Token char_literal508=null;
        dparserParser.assignExpression_return assignExpression505 =null;

        dparserParser.assignExpression_return assignExpression507 =null;


        Object EXP_ASSERT503_tree=null;
        Object char_literal504_tree=null;
        Object char_literal506_tree=null;
        Object char_literal508_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:887:3: ( EXP_ASSERT ^ '(' ! assignExpression ( ',' assignExpression )? ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:887:5: EXP_ASSERT ^ '(' ! assignExpression ( ',' assignExpression )? ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_ASSERT503=cast(Token)match(input,EXP_ASSERT,FOLLOW_EXP_ASSERT_in_assertExpression7785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_ASSERT503_tree = 
            cast(Object)adaptor.create(EXP_ASSERT503)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_ASSERT503_tree, root_0);
            }

            char_literal504=cast(Token)match(input,170,FOLLOW_170_in_assertExpression7788); if (state.failed) return retval;

            pushFollow(FOLLOW_assignExpression_in_assertExpression7791);
            assignExpression505=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression505.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:887:39: ( ',' assignExpression )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==177) ) {
                alt97=1;
            }
            switch (alt97) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:887:40: ',' assignExpression
                   {
                   char_literal506=cast(Token)match(input,177,FOLLOW_177_in_assertExpression7794); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   char_literal506_tree = 
                   cast(Object)adaptor.create(char_literal506)
                   ;
                   adaptor.addChild(root_0, char_literal506_tree);
                   }

                   pushFollow(FOLLOW_assignExpression_in_assertExpression7796);
                   assignExpression507=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression507.getTree());

                   }
                   break;

                default:
            }


            char_literal508=cast(Token)match(input,171,FOLLOW_171_in_assertExpression7800); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","assertExpression"," ",96);
        }
        return retval;
    }
    // $ANTLR end "assertExpression"


    public static class mixinExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mixinExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:890:1: mixinExpression : EXP_MIXIN ^ '(' ! assignExpression ')' !;
    public final dparserParser.mixinExpression_return mixinExpression()  {
        debug(trace_rules) writeln("Entering rule:","mixinExpression"," ",97);
        dparserParser.mixinExpression_return retval = new dparserParser.mixinExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_MIXIN509=null;
        Token char_literal510=null;
        Token char_literal512=null;
        dparserParser.assignExpression_return assignExpression511 =null;


        Object EXP_MIXIN509_tree=null;
        Object char_literal510_tree=null;
        Object char_literal512_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:891:3: ( EXP_MIXIN ^ '(' ! assignExpression ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:891:5: EXP_MIXIN ^ '(' ! assignExpression ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_MIXIN509=cast(Token)match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_mixinExpression7816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_MIXIN509_tree = 
            cast(Object)adaptor.create(EXP_MIXIN509)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_MIXIN509_tree, root_0);
            }

            char_literal510=cast(Token)match(input,170,FOLLOW_170_in_mixinExpression7819); if (state.failed) return retval;

            pushFollow(FOLLOW_assignExpression_in_mixinExpression7822);
            assignExpression511=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression511.getTree());

            char_literal512=cast(Token)match(input,171,FOLLOW_171_in_mixinExpression7824); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","mixinExpression"," ",97);
        }
        return retval;
    }
    // $ANTLR end "mixinExpression"


    public static class typeOfExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeOfExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:894:1: typeOfExpression : EXP_TYPEOF '(' ! ( 'return' | expression ) ')' !;
    public final dparserParser.typeOfExpression_return typeOfExpression()  {
        debug(trace_rules) writeln("Entering rule:","typeOfExpression"," ",98);
        dparserParser.typeOfExpression_return retval = new dparserParser.typeOfExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_TYPEOF513=null;
        Token char_literal514=null;
        Token string_literal515=null;
        Token char_literal517=null;
        dparserParser.expression_return expression516 =null;


        Object EXP_TYPEOF513_tree=null;
        Object char_literal514_tree=null;
        Object string_literal515_tree=null;
        Object char_literal517_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:895:3: ( EXP_TYPEOF '(' ! ( 'return' | expression ) ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:895:5: EXP_TYPEOF '(' ! ( 'return' | expression ) ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_TYPEOF513=cast(Token)match(input,EXP_TYPEOF,FOLLOW_EXP_TYPEOF_in_typeOfExpression7840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_TYPEOF513_tree = 
            cast(Object)adaptor.create(EXP_TYPEOF513)
            ;
            adaptor.addChild(root_0, EXP_TYPEOF513_tree);
            }

            char_literal514=cast(Token)match(input,170,FOLLOW_170_in_typeOfExpression7842); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:895:21: ( 'return' | expression )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==STMT_RETURN) ) {
                alt98=1;
            }
            else if ( (LA98_0==CharacterLiteral||LA98_0==EXP_ASSERT||LA98_0==EXP_CAST||(LA98_0 >=34  && LA98_0<=35)||LA98_0==EXP_IS||LA98_0==EXP_LITERAL_FILE||(LA98_0 >=44  && LA98_0<=45)||(LA98_0 >=48  && LA98_0<=49)||(LA98_0 >=52  && LA98_0<=56)||LA98_0==FloatLiteral||LA98_0==Identifier||LA98_0==IntegerLiteral||LA98_0==StringLiteral||LA98_0==157||LA98_0==168||LA98_0==170||LA98_0==172||(LA98_0 >=174  && LA98_0<=175)||LA98_0==178||LA98_0==181||LA98_0==195||LA98_0==203||LA98_0==226||LA98_0==237||LA98_0==246||LA98_0==268||LA98_0==271||LA98_0==289) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:895:23: 'return'
                   {
                   string_literal515=cast(Token)match(input,STMT_RETURN,FOLLOW_STMT_RETURN_in_typeOfExpression7847); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal515_tree = 
                   cast(Object)adaptor.create(string_literal515)
                   ;
                   adaptor.addChild(root_0, string_literal515_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:895:34: expression
                   {
                   pushFollow(FOLLOW_expression_in_typeOfExpression7851);
                   expression516=expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, expression516.getTree());

                   }
                   break;

                default:
            }


            char_literal517=cast(Token)match(input,171,FOLLOW_171_in_typeOfExpression7854); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","typeOfExpression"," ",98);
        }
        return retval;
    }
    // $ANTLR end "typeOfExpression"


    public static class typeIdExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeIdExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:898:1: typeIdExpression : EXP_TYPEID ^ '(' ! expression ')' !;
    public final dparserParser.typeIdExpression_return typeIdExpression()  {
        debug(trace_rules) writeln("Entering rule:","typeIdExpression"," ",99);
        dparserParser.typeIdExpression_return retval = new dparserParser.typeIdExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_TYPEID518=null;
        Token char_literal519=null;
        Token char_literal521=null;
        dparserParser.expression_return expression520 =null;


        Object EXP_TYPEID518_tree=null;
        Object char_literal519_tree=null;
        Object char_literal521_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:899:3: ( EXP_TYPEID ^ '(' ! expression ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:899:5: EXP_TYPEID ^ '(' ! expression ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_TYPEID518=cast(Token)match(input,EXP_TYPEID,FOLLOW_EXP_TYPEID_in_typeIdExpression7870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_TYPEID518_tree = 
            cast(Object)adaptor.create(EXP_TYPEID518)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_TYPEID518_tree, root_0);
            }

            char_literal519=cast(Token)match(input,170,FOLLOW_170_in_typeIdExpression7873); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_typeIdExpression7876);
            expression520=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());

            char_literal521=cast(Token)match(input,171,FOLLOW_171_in_typeIdExpression7878); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","typeIdExpression"," ",99);
        }
        return retval;
    }
    // $ANTLR end "typeIdExpression"


    public static class lambdaExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lambdaExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:902:1: lambdaExpression : ( Identifier '=>' assignExpression -> ^( EXP_LITERAL_FUNCTION ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) ) | ( parameters )? ( functionAttribute )* '=>' assignExpression -> ^( EXP_LITERAL_FUNCTION ( parameters )? ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) ) );
    public final dparserParser.lambdaExpression_return lambdaExpression()  {
        debug(trace_rules) writeln("Entering rule:","lambdaExpression"," ",100);
        dparserParser.lambdaExpression_return retval = new dparserParser.lambdaExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier522=null;
        Token string_literal523=null;
        Token string_literal527=null;
        dparserParser.assignExpression_return assignExpression524 =null;

        dparserParser.parameters_return parameters525 =null;

        dparserParser.functionAttribute_return functionAttribute526 =null;

        dparserParser.assignExpression_return assignExpression528 =null;


        Object Identifier522_tree=null;
        Object string_literal523_tree=null;
        Object string_literal527_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_functionAttribute=new RewriteRuleSubtreeStream(adaptor,"rule functionAttribute");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:903:3: ( Identifier '=>' assignExpression -> ^( EXP_LITERAL_FUNCTION ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) ) | ( parameters )? ( functionAttribute )* '=>' assignExpression -> ^( EXP_LITERAL_FUNCTION ( parameters )? ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) ) )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==Identifier) ) {
                alt101=1;
            }
            else if ( (LA101_0==170||LA101_0==195||LA101_0==203||LA101_0==268||LA101_0==271) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:903:5: Identifier '=>' assignExpression
                    {
                    Identifier522=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_lambdaExpression7892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier522);


                    string_literal523=cast(Token)match(input,195,FOLLOW_195_in_lambdaExpression7894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(cast(Object)string_literal523);


                    pushFollow(FOLLOW_assignExpression_in_lambdaExpression7896);
                    assignExpression524=assignExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression524.getTree());

                    // AST REWRITE
                    // elements: assignExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 903:38: -> ^( EXP_LITERAL_FUNCTION ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:903:41: ^( EXP_LITERAL_FUNCTION ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_FUNCTION, "EXP_LITERAL_FUNCTION")
                        , root_1);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:903:64: ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) )
                        {
                        Object root_2 = cast(Object)adaptor.nil();
                        root_2 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_BLOCK, "STMT_BLOCK")
                        , root_2);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:903:77: ^( STMT_RETURN assignExpression )
                        {
                        Object root_3 = cast(Object)adaptor.nil();
                        root_3 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_RETURN, "STMT_RETURN")
                        , root_3);

                        adaptor.addChild(root_3, stream_assignExpression.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:904:5: ( parameters )? ( functionAttribute )* '=>' assignExpression
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:904:5: ( parameters )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==170) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:904:5: parameters
                           {
                           pushFollow(FOLLOW_parameters_in_lambdaExpression7918);
                           parameters525=parameters();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters525.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:904:17: ( functionAttribute )*
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);

                        if ( (LA100_0==203||LA100_0==268||LA100_0==271) ) {
                            alt100=1;
                        }


                        switch (alt100) {
                    	case 1 :
                    	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:904:17: functionAttribute
                    	    {
                    	    pushFollow(FOLLOW_functionAttribute_in_lambdaExpression7921);
                    	    functionAttribute526=functionAttribute();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_functionAttribute.add(cast(Object)functionAttribute526.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop100;
                        }
                    } while (true);


                    string_literal527=cast(Token)match(input,195,FOLLOW_195_in_lambdaExpression7924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(cast(Object)string_literal527);


                    pushFollow(FOLLOW_assignExpression_in_lambdaExpression7926);
                    assignExpression528=assignExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression528.getTree());

                    // AST REWRITE
                    // elements: parameters, assignExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 905:5: -> ^( EXP_LITERAL_FUNCTION ( parameters )? ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:905:8: ^( EXP_LITERAL_FUNCTION ( parameters )? ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) ) )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(EXP_LITERAL_FUNCTION, "EXP_LITERAL_FUNCTION")
                        , root_1);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:905:31: ( parameters )?
                        if ( stream_parameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_parameters.nextTree());

                        }
                        stream_parameters.reset();

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:905:43: ^( STMT_BLOCK ^( STMT_RETURN assignExpression ) )
                        {
                        Object root_2 = cast(Object)adaptor.nil();
                        root_2 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_BLOCK, "STMT_BLOCK")
                        , root_2);

                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:905:56: ^( STMT_RETURN assignExpression )
                        {
                        Object root_3 = cast(Object)adaptor.nil();
                        root_3 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_RETURN, "STMT_RETURN")
                        , root_3);

                        adaptor.addChild(root_3, stream_assignExpression.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lambdaExpression"," ",100);
        }
        return retval;
    }
    // $ANTLR end "lambdaExpression"


    public static class functionLiteral_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionLiteral"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:908:1: functionLiteral : ( 'function' | 'delegate' ) ( type )? ( parameters ( functionAttribute )* )? functionBody -> ^( EXP_LITERAL_FUNCTION ( type )? ( parameters )? functionBody ) ;
    public final dparserParser.functionLiteral_return functionLiteral()  {
        debug(trace_rules) writeln("Entering rule:","functionLiteral"," ",101);
        dparserParser.functionLiteral_return retval = new dparserParser.functionLiteral_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal529=null;
        Token string_literal530=null;
        dparserParser.type_return type531 =null;

        dparserParser.parameters_return parameters532 =null;

        dparserParser.functionAttribute_return functionAttribute533 =null;

        dparserParser.functionBody_return functionBody534 =null;


        Object string_literal529_tree=null;
        Object string_literal530_tree=null;
        RewriteRuleTokenStream stream_226=new RewriteRuleTokenStream(adaptor,"token 226");
        RewriteRuleTokenStream stream_237=new RewriteRuleTokenStream(adaptor,"token 237");
        RewriteRuleSubtreeStream stream_functionAttribute=new RewriteRuleSubtreeStream(adaptor,"rule functionAttribute");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:3: ( ( 'function' | 'delegate' ) ( type )? ( parameters ( functionAttribute )* )? functionBody -> ^( EXP_LITERAL_FUNCTION ( type )? ( parameters )? functionBody ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:5: ( 'function' | 'delegate' ) ( type )? ( parameters ( functionAttribute )* )? functionBody
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:5: ( 'function' | 'delegate' )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==237) ) {
                alt102=1;
            }
            else if ( (LA102_0==226) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:7: 'function'
                   {
                   string_literal529=cast(Token)match(input,237,FOLLOW_237_in_functionLiteral7966); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_237.add(cast(Object)string_literal529);


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:20: 'delegate'
                   {
                   string_literal530=cast(Token)match(input,226,FOLLOW_226_in_functionLiteral7970); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_226.add(cast(Object)string_literal530);


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:32: ( type )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==Identifier||LA103_0==181||(LA103_0 >=215  && LA103_0<=219)||(LA103_0 >=223  && LA103_0<=224)||LA103_0==229||LA103_0==235||(LA103_0 >=243  && LA103_0<=244)||(LA103_0 >=248  && LA103_0<=249)||LA103_0==267||LA103_0==272||LA103_0==274||(LA103_0 >=277  && LA103_0<=280)||(LA103_0 >=282  && LA103_0<=283)) ) {
                alt103=1;
            }
            switch (alt103) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:32: type
                   {
                   pushFollow(FOLLOW_type_in_functionLiteral7973);
                   type531=type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_type.add(cast(Object)type531.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:38: ( parameters ( functionAttribute )* )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==170) ) {
                alt105=1;
            }
            switch (alt105) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:39: parameters ( functionAttribute )*
                   {
                   pushFollow(FOLLOW_parameters_in_functionLiteral7977);
                   parameters532=parameters();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_parameters.add(cast(Object)parameters532.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:50: ( functionAttribute )*
                   loop104:
                   do {
                       int alt104=2;
                       int LA104_0 = input.LA(1);

                       if ( (LA104_0==203||LA104_0==268||LA104_0==271) ) {
                           alt104=1;
                       }


                       switch (alt104) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:909:50: functionAttribute
                   	    {
                   	    pushFollow(FOLLOW_functionAttribute_in_functionLiteral7979);
                   	    functionAttribute533=functionAttribute();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_functionAttribute.add(cast(Object)functionAttribute533.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop104;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_functionBody_in_functionLiteral7984);
            functionBody534=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionBody.add(cast(Object)functionBody534.getTree());

            // AST REWRITE
            // elements: parameters, functionBody, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 910:6: -> ^( EXP_LITERAL_FUNCTION ( type )? ( parameters )? functionBody )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:910:9: ^( EXP_LITERAL_FUNCTION ( type )? ( parameters )? functionBody )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(EXP_LITERAL_FUNCTION, "EXP_LITERAL_FUNCTION")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:910:32: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:910:38: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();

                adaptor.addChild(root_1, stream_functionBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","functionLiteral"," ",101);
        }
        return retval;
    }
    // $ANTLR end "functionLiteral"


    public static class importExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:913:1: importExpression : 'import' '(' assignExpression ')' -> ^( EXP_LITERAL_IMPORTEDSTRING assignExpression ) ;
    public final dparserParser.importExpression_return importExpression()  {
        debug(trace_rules) writeln("Entering rule:","importExpression"," ",102);
        dparserParser.importExpression_return retval = new dparserParser.importExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal535=null;
        Token char_literal536=null;
        Token char_literal538=null;
        dparserParser.assignExpression_return assignExpression537 =null;


        Object string_literal535_tree=null;
        Object char_literal536_tree=null;
        Object char_literal538_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_246=new RewriteRuleTokenStream(adaptor,"token 246");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:914:3: ( 'import' '(' assignExpression ')' -> ^( EXP_LITERAL_IMPORTEDSTRING assignExpression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:914:5: 'import' '(' assignExpression ')'
            {
            string_literal535=cast(Token)match(input,246,FOLLOW_246_in_importExpression8018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_246.add(cast(Object)string_literal535);


            char_literal536=cast(Token)match(input,170,FOLLOW_170_in_importExpression8020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal536);


            pushFollow(FOLLOW_assignExpression_in_importExpression8022);
            assignExpression537=assignExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression537.getTree());

            char_literal538=cast(Token)match(input,171,FOLLOW_171_in_importExpression8024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal538);


            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 914:39: -> ^( EXP_LITERAL_IMPORTEDSTRING assignExpression )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:914:42: ^( EXP_LITERAL_IMPORTEDSTRING assignExpression )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(EXP_LITERAL_IMPORTEDSTRING, "EXP_LITERAL_IMPORTEDSTRING")
                , root_1);

                adaptor.addChild(root_1, stream_assignExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","importExpression"," ",102);
        }
        return retval;
    }
    // $ANTLR end "importExpression"


    public static class isExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "isExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:917:1: isExpression : EXP_IS ^ '(' ! type ( ( Identifier )? ) ! ( ':' ! typeSpecialization | '==' ! typeSpecialization ) ( ',' templateParameterList )? ')' !;
    public final dparserParser.isExpression_return isExpression()  {
        debug(trace_rules) writeln("Entering rule:","isExpression"," ",103);
        dparserParser.isExpression_return retval = new dparserParser.isExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_IS539=null;
        Token char_literal540=null;
        Token Identifier542=null;
        Token char_literal543=null;
        Token string_literal545=null;
        Token char_literal547=null;
        Token char_literal549=null;
        dparserParser.type_return type541 =null;

        dparserParser.typeSpecialization_return typeSpecialization544 =null;

        dparserParser.typeSpecialization_return typeSpecialization546 =null;

        dparserParser.templateParameterList_return templateParameterList548 =null;


        Object EXP_IS539_tree=null;
        Object char_literal540_tree=null;
        Object Identifier542_tree=null;
        Object char_literal543_tree=null;
        Object string_literal545_tree=null;
        Object char_literal547_tree=null;
        Object char_literal549_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:3: ( EXP_IS ^ '(' ! type ( ( Identifier )? ) ! ( ':' ! typeSpecialization | '==' ! typeSpecialization ) ( ',' templateParameterList )? ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:5: EXP_IS ^ '(' ! type ( ( Identifier )? ) ! ( ':' ! typeSpecialization | '==' ! typeSpecialization ) ( ',' templateParameterList )? ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_IS539=cast(Token)match(input,EXP_IS,FOLLOW_EXP_IS_in_isExpression8047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_IS539_tree = 
            cast(Object)adaptor.create(EXP_IS539)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(EXP_IS539_tree, root_0);
            }

            char_literal540=cast(Token)match(input,170,FOLLOW_170_in_isExpression8050); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_isExpression8053);
            type541=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type541.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:23: ( ( Identifier )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:24: ( Identifier )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:24: ( Identifier )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Identifier) ) {
                alt106=1;
            }
            switch (alt106) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:918:24: Identifier
                   {
                   Identifier542=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_isExpression8056); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   Identifier542_tree = 
                   cast(Object)adaptor.create(Identifier542)
                   ;
                   adaptor.addChild(root_0, Identifier542_tree);
                   }

                   }
                   break;

                default:
            }


            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:919:5: ( ':' ! typeSpecialization | '==' ! typeSpecialization )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==185) ) {
                alt107=1;
            }
            else if ( (LA107_0==194) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:919:6: ':' ! typeSpecialization
                   {
                   char_literal543=cast(Token)match(input,185,FOLLOW_185_in_isExpression8066); if (state.failed) return retval;

                   pushFollow(FOLLOW_typeSpecialization_in_isExpression8069);
                   typeSpecialization544=typeSpecialization();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSpecialization544.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:919:33: '==' ! typeSpecialization
                   {
                   string_literal545=cast(Token)match(input,194,FOLLOW_194_in_isExpression8074); if (state.failed) return retval;

                   pushFollow(FOLLOW_typeSpecialization_in_isExpression8077);
                   typeSpecialization546=typeSpecialization();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSpecialization546.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:920:5: ( ',' templateParameterList )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==177) ) {
                alt108=1;
            }
            switch (alt108) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:920:6: ',' templateParameterList
                   {
                   char_literal547=cast(Token)match(input,177,FOLLOW_177_in_isExpression8085); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   char_literal547_tree = 
                   cast(Object)adaptor.create(char_literal547)
                   ;
                   adaptor.addChild(root_0, char_literal547_tree);
                   }

                   pushFollow(FOLLOW_templateParameterList_in_isExpression8087);
                   templateParameterList548=templateParameterList();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, templateParameterList548.getTree());

                   }
                   break;

                default:
            }


            char_literal549=cast(Token)match(input,171,FOLLOW_171_in_isExpression8091); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","isExpression"," ",103);
        }
        return retval;
    }
    // $ANTLR end "isExpression"


    public static class typeSpecialization_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeSpecialization"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:923:1: typeSpecialization : ( type | 'struct' | 'union' | 'class' | 'interface' | 'enum' | 'function' | 'delegate' | 'super' | 'const' | 'immutable' | 'inout' | 'shared' | 'return' );
    public final dparserParser.typeSpecialization_return typeSpecialization()  {
        debug(trace_rules) writeln("Entering rule:","typeSpecialization"," ",104);
        dparserParser.typeSpecialization_return retval = new dparserParser.typeSpecialization_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal551=null;
        Token string_literal552=null;
        Token string_literal553=null;
        Token string_literal554=null;
        Token string_literal555=null;
        Token string_literal556=null;
        Token string_literal557=null;
        Token string_literal558=null;
        Token string_literal559=null;
        Token string_literal560=null;
        Token string_literal561=null;
        Token string_literal562=null;
        Token string_literal563=null;
        dparserParser.type_return type550 =null;


        Object string_literal551_tree=null;
        Object string_literal552_tree=null;
        Object string_literal553_tree=null;
        Object string_literal554_tree=null;
        Object string_literal555_tree=null;
        Object string_literal556_tree=null;
        Object string_literal557_tree=null;
        Object string_literal558_tree=null;
        Object string_literal559_tree=null;
        Object string_literal560_tree=null;
        Object string_literal561_tree=null;
        Object string_literal562_tree=null;
        Object string_literal563_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:924:3: ( type | 'struct' | 'union' | 'class' | 'interface' | 'enum' | 'function' | 'delegate' | 'super' | 'const' | 'immutable' | 'inout' | 'shared' | 'return' )
            int alt109=14;
            switch ( input.LA(1) ) {
            case Identifier:
            case 181:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt109=1;
                }
                break;
            case STRUCT_DECLARATION:
                {
                alt109=2;
                }
                break;
            case UNION_DECLARATION:
                {
                alt109=3;
                }
                break;
            case CLASS_DECLARATION:
                {
                alt109=4;
                }
                break;
            case INTERFACE_DECLARATION:
                {
                alt109=5;
                }
                break;
            case ENUM_DECLARATION:
                {
                alt109=6;
                }
                break;
            case 237:
                {
                alt109=7;
                }
                break;
            case 226:
                {
                alt109=8;
                }
                break;
            case EXP_SUPER:
                {
                alt109=9;
                }
                break;
            case 222:
                {
                alt109=10;
                }
                break;
            case 245:
                {
                alt109=11;
                }
                break;
            case 247:
                {
                alt109=12;
                }
                break;
            case 273:
                {
                alt109=13;
                }
                break;
            case STMT_RETURN:
                {
                alt109=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }

            switch (alt109) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:924:5: type
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_type_in_typeSpecialization8107);
                    type550=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type550.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:925:5: 'struct'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal551=cast(Token)match(input,STRUCT_DECLARATION,FOLLOW_STRUCT_DECLARATION_in_typeSpecialization8113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal551_tree = 
                    cast(Object)adaptor.create(string_literal551)
                    ;
                    adaptor.addChild(root_0, string_literal551_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:925:16: 'union'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal552=cast(Token)match(input,UNION_DECLARATION,FOLLOW_UNION_DECLARATION_in_typeSpecialization8117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal552_tree = 
                    cast(Object)adaptor.create(string_literal552)
                    ;
                    adaptor.addChild(root_0, string_literal552_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:925:26: 'class'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal553=cast(Token)match(input,CLASS_DECLARATION,FOLLOW_CLASS_DECLARATION_in_typeSpecialization8121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal553_tree = 
                    cast(Object)adaptor.create(string_literal553)
                    ;
                    adaptor.addChild(root_0, string_literal553_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:926:5: 'interface'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal554=cast(Token)match(input,INTERFACE_DECLARATION,FOLLOW_INTERFACE_DECLARATION_in_typeSpecialization8127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal554_tree = 
                    cast(Object)adaptor.create(string_literal554)
                    ;
                    adaptor.addChild(root_0, string_literal554_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:926:19: 'enum'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal555=cast(Token)match(input,ENUM_DECLARATION,FOLLOW_ENUM_DECLARATION_in_typeSpecialization8131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal555_tree = 
                    cast(Object)adaptor.create(string_literal555)
                    ;
                    adaptor.addChild(root_0, string_literal555_tree);
                    }

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:926:28: 'function'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal556=cast(Token)match(input,237,FOLLOW_237_in_typeSpecialization8135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal556_tree = 
                    cast(Object)adaptor.create(string_literal556)
                    ;
                    adaptor.addChild(root_0, string_literal556_tree);
                    }

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:927:5: 'delegate'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal557=cast(Token)match(input,226,FOLLOW_226_in_typeSpecialization8141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal557_tree = 
                    cast(Object)adaptor.create(string_literal557)
                    ;
                    adaptor.addChild(root_0, string_literal557_tree);
                    }

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:927:18: 'super'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal558=cast(Token)match(input,EXP_SUPER,FOLLOW_EXP_SUPER_in_typeSpecialization8145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal558_tree = 
                    cast(Object)adaptor.create(string_literal558)
                    ;
                    adaptor.addChild(root_0, string_literal558_tree);
                    }

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:927:28: 'const'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal559=cast(Token)match(input,222,FOLLOW_222_in_typeSpecialization8149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal559_tree = 
                    cast(Object)adaptor.create(string_literal559)
                    ;
                    adaptor.addChild(root_0, string_literal559_tree);
                    }

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:928:5: 'immutable'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal560=cast(Token)match(input,245,FOLLOW_245_in_typeSpecialization8155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal560_tree = 
                    cast(Object)adaptor.create(string_literal560)
                    ;
                    adaptor.addChild(root_0, string_literal560_tree);
                    }

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:928:19: 'inout'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal561=cast(Token)match(input,247,FOLLOW_247_in_typeSpecialization8159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal561_tree = 
                    cast(Object)adaptor.create(string_literal561)
                    ;
                    adaptor.addChild(root_0, string_literal561_tree);
                    }

                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:928:29: 'shared'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal562=cast(Token)match(input,273,FOLLOW_273_in_typeSpecialization8163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal562_tree = 
                    cast(Object)adaptor.create(string_literal562)
                    ;
                    adaptor.addChild(root_0, string_literal562_tree);
                    }

                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:929:5: 'return'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal563=cast(Token)match(input,STMT_RETURN,FOLLOW_STMT_RETURN_in_typeSpecialization8169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal563_tree = 
                    cast(Object)adaptor.create(string_literal563)
                    ;
                    adaptor.addChild(root_0, string_literal563_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","typeSpecialization"," ",104);
        }
        return retval;
    }
    // $ANTLR end "typeSpecialization"


    public static class traitsExpression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "traitsExpression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:932:1: traitsExpression : EXP_TRAITS '(' ! ( 'isAbstractClass' | 'isArithmetic' | 'isAssociativeArray' | 'isFinalClass' | 'isFloating' | 'isIntegral' | 'isScalar' | 'isStaticArray' | 'isUnsigned' | 'isVirtualFunction' 'isAbstractFunction' | 'isFinalFunction' | 'isStaticFunction' | 'isRef' | 'isOut' | 'isLazy' | 'hasMember' | 'identifier' | 'getMember' | 'getOverloads' | 'getVirtualFunctions' | 'parent' | 'classInstanceSize' | 'allMembers' | 'derivedMembers' | 'isSame' | 'compiles' ) ( ',' ! assignExpression | type )+ ')' !;
    public final dparserParser.traitsExpression_return traitsExpression()  {
        debug(trace_rules) writeln("Entering rule:","traitsExpression"," ",105);
        dparserParser.traitsExpression_return retval = new dparserParser.traitsExpression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXP_TRAITS564=null;
        Token char_literal565=null;
        Token string_literal566=null;
        Token string_literal567=null;
        Token string_literal568=null;
        Token string_literal569=null;
        Token string_literal570=null;
        Token string_literal571=null;
        Token string_literal572=null;
        Token string_literal573=null;
        Token string_literal574=null;
        Token string_literal575=null;
        Token string_literal576=null;
        Token string_literal577=null;
        Token string_literal578=null;
        Token string_literal579=null;
        Token string_literal580=null;
        Token string_literal581=null;
        Token string_literal582=null;
        Token string_literal583=null;
        Token string_literal584=null;
        Token string_literal585=null;
        Token string_literal586=null;
        Token string_literal587=null;
        Token string_literal588=null;
        Token string_literal589=null;
        Token string_literal590=null;
        Token string_literal591=null;
        Token string_literal592=null;
        Token char_literal593=null;
        Token char_literal596=null;
        dparserParser.assignExpression_return assignExpression594 =null;

        dparserParser.type_return type595 =null;


        Object EXP_TRAITS564_tree=null;
        Object char_literal565_tree=null;
        Object string_literal566_tree=null;
        Object string_literal567_tree=null;
        Object string_literal568_tree=null;
        Object string_literal569_tree=null;
        Object string_literal570_tree=null;
        Object string_literal571_tree=null;
        Object string_literal572_tree=null;
        Object string_literal573_tree=null;
        Object string_literal574_tree=null;
        Object string_literal575_tree=null;
        Object string_literal576_tree=null;
        Object string_literal577_tree=null;
        Object string_literal578_tree=null;
        Object string_literal579_tree=null;
        Object string_literal580_tree=null;
        Object string_literal581_tree=null;
        Object string_literal582_tree=null;
        Object string_literal583_tree=null;
        Object string_literal584_tree=null;
        Object string_literal585_tree=null;
        Object string_literal586_tree=null;
        Object string_literal587_tree=null;
        Object string_literal588_tree=null;
        Object string_literal589_tree=null;
        Object string_literal590_tree=null;
        Object string_literal591_tree=null;
        Object string_literal592_tree=null;
        Object char_literal593_tree=null;
        Object char_literal596_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:933:3: ( EXP_TRAITS '(' ! ( 'isAbstractClass' | 'isArithmetic' | 'isAssociativeArray' | 'isFinalClass' | 'isFloating' | 'isIntegral' | 'isScalar' | 'isStaticArray' | 'isUnsigned' | 'isVirtualFunction' 'isAbstractFunction' | 'isFinalFunction' | 'isStaticFunction' | 'isRef' | 'isOut' | 'isLazy' | 'hasMember' | 'identifier' | 'getMember' | 'getOverloads' | 'getVirtualFunctions' | 'parent' | 'classInstanceSize' | 'allMembers' | 'derivedMembers' | 'isSame' | 'compiles' ) ( ',' ! assignExpression | type )+ ')' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:933:5: EXP_TRAITS '(' ! ( 'isAbstractClass' | 'isArithmetic' | 'isAssociativeArray' | 'isFinalClass' | 'isFloating' | 'isIntegral' | 'isScalar' | 'isStaticArray' | 'isUnsigned' | 'isVirtualFunction' 'isAbstractFunction' | 'isFinalFunction' | 'isStaticFunction' | 'isRef' | 'isOut' | 'isLazy' | 'hasMember' | 'identifier' | 'getMember' | 'getOverloads' | 'getVirtualFunctions' | 'parent' | 'classInstanceSize' | 'allMembers' | 'derivedMembers' | 'isSame' | 'compiles' ) ( ',' ! assignExpression | type )+ ')' !
            {
            root_0 = cast(Object)adaptor.nil();


            EXP_TRAITS564=cast(Token)match(input,EXP_TRAITS,FOLLOW_EXP_TRAITS_in_traitsExpression8184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXP_TRAITS564_tree = 
            cast(Object)adaptor.create(EXP_TRAITS564)
            ;
            adaptor.addChild(root_0, EXP_TRAITS564_tree);
            }

            char_literal565=cast(Token)match(input,170,FOLLOW_170_in_traitsExpression8186); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:934:5: ( 'isAbstractClass' | 'isArithmetic' | 'isAssociativeArray' | 'isFinalClass' | 'isFloating' | 'isIntegral' | 'isScalar' | 'isStaticArray' | 'isUnsigned' | 'isVirtualFunction' 'isAbstractFunction' | 'isFinalFunction' | 'isStaticFunction' | 'isRef' | 'isOut' | 'isLazy' | 'hasMember' | 'identifier' | 'getMember' | 'getOverloads' | 'getVirtualFunctions' | 'parent' | 'classInstanceSize' | 'allMembers' | 'derivedMembers' | 'isSame' | 'compiles' )
            int alt110=26;
            switch ( input.LA(1) ) {
            case 250:
                {
                alt110=1;
                }
                break;
            case 252:
                {
                alt110=2;
                }
                break;
            case 253:
                {
                alt110=3;
                }
                break;
            case 254:
                {
                alt110=4;
                }
                break;
            case 256:
                {
                alt110=5;
                }
                break;
            case 257:
                {
                alt110=6;
                }
                break;
            case 262:
                {
                alt110=7;
                }
                break;
            case 263:
                {
                alt110=8;
                }
                break;
            case 265:
                {
                alt110=9;
                }
                break;
            case 266:
                {
                alt110=10;
                }
                break;
            case 255:
                {
                alt110=11;
                }
                break;
            case 264:
                {
                alt110=12;
                }
                break;
            case 260:
                {
                alt110=13;
                }
                break;
            case 259:
                {
                alt110=14;
                }
                break;
            case 258:
                {
                alt110=15;
                }
                break;
            case 241:
                {
                alt110=16;
                }
                break;
            case 242:
                {
                alt110=17;
                }
                break;
            case 238:
                {
                alt110=18;
                }
                break;
            case 239:
                {
                alt110=19;
                }
                break;
            case 240:
                {
                alt110=20;
                }
                break;
            case 270:
                {
                alt110=21;
                }
                break;
            case 220:
                {
                alt110=22;
                }
                break;
            case 213:
                {
                alt110=23;
                }
                break;
            case 228:
                {
                alt110=24;
                }
                break;
            case 261:
                {
                alt110=25;
                }
                break;
            case 221:
                {
                alt110=26;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:934:7: 'isAbstractClass'
                   {
                   string_literal566=cast(Token)match(input,250,FOLLOW_250_in_traitsExpression8195); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal566_tree = 
                   cast(Object)adaptor.create(string_literal566)
                   ;
                   adaptor.addChild(root_0, string_literal566_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:934:27: 'isArithmetic'
                   {
                   string_literal567=cast(Token)match(input,252,FOLLOW_252_in_traitsExpression8199); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal567_tree = 
                   cast(Object)adaptor.create(string_literal567)
                   ;
                   adaptor.addChild(root_0, string_literal567_tree);
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:934:44: 'isAssociativeArray'
                   {
                   string_literal568=cast(Token)match(input,253,FOLLOW_253_in_traitsExpression8203); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal568_tree = 
                   cast(Object)adaptor.create(string_literal568)
                   ;
                   adaptor.addChild(root_0, string_literal568_tree);
                   }

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:934:67: 'isFinalClass'
                   {
                   string_literal569=cast(Token)match(input,254,FOLLOW_254_in_traitsExpression8207); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal569_tree = 
                   cast(Object)adaptor.create(string_literal569)
                   ;
                   adaptor.addChild(root_0, string_literal569_tree);
                   }

                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:935:7: 'isFloating'
                   {
                   string_literal570=cast(Token)match(input,256,FOLLOW_256_in_traitsExpression8216); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal570_tree = 
                   cast(Object)adaptor.create(string_literal570)
                   ;
                   adaptor.addChild(root_0, string_literal570_tree);
                   }

                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:935:22: 'isIntegral'
                   {
                   string_literal571=cast(Token)match(input,257,FOLLOW_257_in_traitsExpression8220); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal571_tree = 
                   cast(Object)adaptor.create(string_literal571)
                   ;
                   adaptor.addChild(root_0, string_literal571_tree);
                   }

                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:935:37: 'isScalar'
                   {
                   string_literal572=cast(Token)match(input,262,FOLLOW_262_in_traitsExpression8224); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal572_tree = 
                   cast(Object)adaptor.create(string_literal572)
                   ;
                   adaptor.addChild(root_0, string_literal572_tree);
                   }

                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:935:50: 'isStaticArray'
                   {
                   string_literal573=cast(Token)match(input,263,FOLLOW_263_in_traitsExpression8228); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal573_tree = 
                   cast(Object)adaptor.create(string_literal573)
                   ;
                   adaptor.addChild(root_0, string_literal573_tree);
                   }

                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:935:68: 'isUnsigned'
                   {
                   string_literal574=cast(Token)match(input,265,FOLLOW_265_in_traitsExpression8232); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal574_tree = 
                   cast(Object)adaptor.create(string_literal574)
                   ;
                   adaptor.addChild(root_0, string_literal574_tree);
                   }

                   }
                   break;
               case 10 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:936:7: 'isVirtualFunction' 'isAbstractFunction'
                   {
                   string_literal575=cast(Token)match(input,266,FOLLOW_266_in_traitsExpression8241); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal575_tree = 
                   cast(Object)adaptor.create(string_literal575)
                   ;
                   adaptor.addChild(root_0, string_literal575_tree);
                   }

                   string_literal576=cast(Token)match(input,251,FOLLOW_251_in_traitsExpression8243); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal576_tree = 
                   cast(Object)adaptor.create(string_literal576)
                   ;
                   adaptor.addChild(root_0, string_literal576_tree);
                   }

                   }
                   break;
               case 11 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:936:50: 'isFinalFunction'
                   {
                   string_literal577=cast(Token)match(input,255,FOLLOW_255_in_traitsExpression8247); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal577_tree = 
                   cast(Object)adaptor.create(string_literal577)
                   ;
                   adaptor.addChild(root_0, string_literal577_tree);
                   }

                   }
                   break;
               case 12 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:936:70: 'isStaticFunction'
                   {
                   string_literal578=cast(Token)match(input,264,FOLLOW_264_in_traitsExpression8251); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal578_tree = 
                   cast(Object)adaptor.create(string_literal578)
                   ;
                   adaptor.addChild(root_0, string_literal578_tree);
                   }

                   }
                   break;
               case 13 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:7: 'isRef'
                   {
                   string_literal579=cast(Token)match(input,260,FOLLOW_260_in_traitsExpression8259); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal579_tree = 
                   cast(Object)adaptor.create(string_literal579)
                   ;
                   adaptor.addChild(root_0, string_literal579_tree);
                   }

                   }
                   break;
               case 14 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:17: 'isOut'
                   {
                   string_literal580=cast(Token)match(input,259,FOLLOW_259_in_traitsExpression8263); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal580_tree = 
                   cast(Object)adaptor.create(string_literal580)
                   ;
                   adaptor.addChild(root_0, string_literal580_tree);
                   }

                   }
                   break;
               case 15 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:27: 'isLazy'
                   {
                   string_literal581=cast(Token)match(input,258,FOLLOW_258_in_traitsExpression8267); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal581_tree = 
                   cast(Object)adaptor.create(string_literal581)
                   ;
                   adaptor.addChild(root_0, string_literal581_tree);
                   }

                   }
                   break;
               case 16 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:38: 'hasMember'
                   {
                   string_literal582=cast(Token)match(input,241,FOLLOW_241_in_traitsExpression8271); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal582_tree = 
                   cast(Object)adaptor.create(string_literal582)
                   ;
                   adaptor.addChild(root_0, string_literal582_tree);
                   }

                   }
                   break;
               case 17 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:52: 'identifier'
                   {
                   string_literal583=cast(Token)match(input,242,FOLLOW_242_in_traitsExpression8275); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal583_tree = 
                   cast(Object)adaptor.create(string_literal583)
                   ;
                   adaptor.addChild(root_0, string_literal583_tree);
                   }

                   }
                   break;
               case 18 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:937:67: 'getMember'
                   {
                   string_literal584=cast(Token)match(input,238,FOLLOW_238_in_traitsExpression8279); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal584_tree = 
                   cast(Object)adaptor.create(string_literal584)
                   ;
                   adaptor.addChild(root_0, string_literal584_tree);
                   }

                   }
                   break;
               case 19 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:938:7: 'getOverloads'
                   {
                   string_literal585=cast(Token)match(input,239,FOLLOW_239_in_traitsExpression8287); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal585_tree = 
                   cast(Object)adaptor.create(string_literal585)
                   ;
                   adaptor.addChild(root_0, string_literal585_tree);
                   }

                   }
                   break;
               case 20 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:938:23: 'getVirtualFunctions'
                   {
                   string_literal586=cast(Token)match(input,240,FOLLOW_240_in_traitsExpression8290); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal586_tree = 
                   cast(Object)adaptor.create(string_literal586)
                   ;
                   adaptor.addChild(root_0, string_literal586_tree);
                   }

                   }
                   break;
               case 21 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:938:47: 'parent'
                   {
                   string_literal587=cast(Token)match(input,270,FOLLOW_270_in_traitsExpression8294); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal587_tree = 
                   cast(Object)adaptor.create(string_literal587)
                   ;
                   adaptor.addChild(root_0, string_literal587_tree);
                   }

                   }
                   break;
               case 22 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:938:58: 'classInstanceSize'
                   {
                   string_literal588=cast(Token)match(input,220,FOLLOW_220_in_traitsExpression8298); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal588_tree = 
                   cast(Object)adaptor.create(string_literal588)
                   ;
                   adaptor.addChild(root_0, string_literal588_tree);
                   }

                   }
                   break;
               case 23 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:938:80: 'allMembers'
                   {
                   string_literal589=cast(Token)match(input,213,FOLLOW_213_in_traitsExpression8302); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal589_tree = 
                   cast(Object)adaptor.create(string_literal589)
                   ;
                   adaptor.addChild(root_0, string_literal589_tree);
                   }

                   }
                   break;
               case 24 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:939:7: 'derivedMembers'
                   {
                   string_literal590=cast(Token)match(input,228,FOLLOW_228_in_traitsExpression8310); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal590_tree = 
                   cast(Object)adaptor.create(string_literal590)
                   ;
                   adaptor.addChild(root_0, string_literal590_tree);
                   }

                   }
                   break;
               case 25 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:939:26: 'isSame'
                   {
                   string_literal591=cast(Token)match(input,261,FOLLOW_261_in_traitsExpression8314); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal591_tree = 
                   cast(Object)adaptor.create(string_literal591)
                   ;
                   adaptor.addChild(root_0, string_literal591_tree);
                   }

                   }
                   break;
               case 26 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:939:37: 'compiles'
                   {
                   string_literal592=cast(Token)match(input,221,FOLLOW_221_in_traitsExpression8318); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal592_tree = 
                   cast(Object)adaptor.create(string_literal592)
                   ;
                   adaptor.addChild(root_0, string_literal592_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:941:5: ( ',' ! assignExpression | type )+
            int cnt111=0;
            loop111:
            do {
                int alt111=3;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==177) ) {
                    alt111=1;
                }
                else if ( (LA111_0==Identifier||LA111_0==181||(LA111_0 >=215  && LA111_0<=219)||(LA111_0 >=223  && LA111_0<=224)||LA111_0==229||LA111_0==235||(LA111_0 >=243  && LA111_0<=244)||(LA111_0 >=248  && LA111_0<=249)||LA111_0==267||LA111_0==272||LA111_0==274||(LA111_0 >=277  && LA111_0<=280)||(LA111_0 >=282  && LA111_0<=283)) ) {
                    alt111=2;
                }


                switch (alt111) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:941:7: ',' ! assignExpression
            	    {
            	    char_literal593=cast(Token)match(input,177,FOLLOW_177_in_traitsExpression8332); if (state.failed) return retval;

            	    pushFollow(FOLLOW_assignExpression_in_traitsExpression8336);
            	    assignExpression594=assignExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignExpression594.getTree());

            	    }
            	    break;
            	case 2 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:941:32: type
            	    {
            	    pushFollow(FOLLOW_type_in_traitsExpression8340);
            	    type595=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type595.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);


            char_literal596=cast(Token)match(input,171,FOLLOW_171_in_traitsExpression8349); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","traitsExpression"," ",105);
        }
        return retval;
    }
    // $ANTLR end "traitsExpression"


    public static class statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:947:1: statement : ( ';' !| nonEmptyStatement | scopeBlockStatement );
    public final dparserParser.statement_return statement()  {
        debug(trace_rules) writeln("Entering rule:","statement"," ",106);
        dparserParser.statement_return retval = new dparserParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal597=null;
        dparserParser.nonEmptyStatement_return nonEmptyStatement598 =null;

        dparserParser.scopeBlockStatement_return scopeBlockStatement599 =null;


        Object char_literal597_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:948:3: ( ';' !| nonEmptyStatement | scopeBlockStatement )
            int alt112=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                alt112=1;
                }
                break;
            case CharacterLiteral:
            case ENUM_DECLARATION:
            case EXP_ASSERT:
            case EXP_CAST:
            case EXP_DELETE:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_NEW:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case Identifier:
            case IntegerLiteral:
            case STMT_ASM:
            case STMT_BREAK:
            case STMT_CASE:
            case STMT_CONTINUE:
            case STMT_DEFAULT:
            case STMT_DO:
            case STMT_FOR:
            case STMT_FOREACH:
            case STMT_GOTO:
            case STMT_IF:
            case STMT_PRAGMA:
            case STMT_RETURN:
            case STMT_SCOPE:
            case STMT_SWITCH:
            case STMT_SYNCHRONIZED:
            case STMT_THROW:
            case STMT_TRY:
            case STMT_WHILE:
            case STMT_WITH:
            case StringLiteral:
            case 157:
            case 168:
            case 170:
            case 172:
            case 174:
            case 175:
            case 178:
            case 181:
            case 195:
            case 203:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 236:
            case 237:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 289:
                {
                alt112=2;
                }
                break;
            case 284:
                {
                alt112=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }

            switch (alt112) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:948:5: ';' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal597=cast(Token)match(input,186,FOLLOW_186_in_statement8367); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:949:5: nonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatement_in_statement8374);
                    nonEmptyStatement598=nonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatement598.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:950:5: scopeBlockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_scopeBlockStatement_in_statement8380);
                    scopeBlockStatement599=scopeBlockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeBlockStatement599.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","statement"," ",106);
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class noScopeNonEmptyStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noScopeNonEmptyStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:953:1: noScopeNonEmptyStatement : ( nonEmptyStatement | blockStatement );
    public final dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement()  {
        debug(trace_rules) writeln("Entering rule:","noScopeNonEmptyStatement"," ",107);
        dparserParser.noScopeNonEmptyStatement_return retval = new dparserParser.noScopeNonEmptyStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.nonEmptyStatement_return nonEmptyStatement600 =null;

        dparserParser.blockStatement_return blockStatement601 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:954:3: ( nonEmptyStatement | blockStatement )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==CharacterLiteral||LA113_0==ENUM_DECLARATION||LA113_0==EXP_ASSERT||LA113_0==EXP_CAST||(LA113_0 >=34  && LA113_0<=35)||LA113_0==EXP_IS||LA113_0==EXP_LITERAL_FILE||(LA113_0 >=44  && LA113_0<=45)||(LA113_0 >=48  && LA113_0<=49)||(LA113_0 >=52  && LA113_0<=56)||LA113_0==FloatLiteral||LA113_0==Identifier||LA113_0==IntegerLiteral||LA113_0==STMT_ASM||(LA113_0 >=108  && LA113_0<=109)||LA113_0==STMT_CONTINUE||(LA113_0 >=114  && LA113_0<=115)||(LA113_0 >=119  && LA113_0<=120)||(LA113_0 >=122  && LA113_0<=123)||(LA113_0 >=126  && LA113_0<=134)||LA113_0==StringLiteral||LA113_0==157||LA113_0==168||LA113_0==170||LA113_0==172||(LA113_0 >=174  && LA113_0<=175)||LA113_0==178||LA113_0==181||LA113_0==195||LA113_0==203||(LA113_0 >=210  && LA113_0<=211)||(LA113_0 >=214  && LA113_0<=219)||(LA113_0 >=222  && LA113_0<=227)||LA113_0==229||LA113_0==232||(LA113_0 >=234  && LA113_0<=237)||(LA113_0 >=243  && LA113_0<=249)||(LA113_0 >=267  && LA113_0<=269)||(LA113_0 >=271  && LA113_0<=275)||(LA113_0 >=277  && LA113_0<=283)||LA113_0==289) ) {
                alt113=1;
            }
            else if ( (LA113_0==284) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:954:5: nonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatement_in_noScopeNonEmptyStatement8395);
                    nonEmptyStatement600=nonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatement600.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:955:5: blockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_blockStatement_in_noScopeNonEmptyStatement8401);
                    blockStatement601=blockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement601.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","noScopeNonEmptyStatement"," ",107);
        }
        return retval;
    }
    // $ANTLR end "noScopeNonEmptyStatement"


    public static class noScopeStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noScopeStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:958:1: noScopeStatement : ( ';' !| nonEmptyStatement | blockStatement );
    public final dparserParser.noScopeStatement_return noScopeStatement()  {
        debug(trace_rules) writeln("Entering rule:","noScopeStatement"," ",108);
        dparserParser.noScopeStatement_return retval = new dparserParser.noScopeStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal602=null;
        dparserParser.nonEmptyStatement_return nonEmptyStatement603 =null;

        dparserParser.blockStatement_return blockStatement604 =null;


        Object char_literal602_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:959:3: ( ';' !| nonEmptyStatement | blockStatement )
            int alt114=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                alt114=1;
                }
                break;
            case CharacterLiteral:
            case ENUM_DECLARATION:
            case EXP_ASSERT:
            case EXP_CAST:
            case EXP_DELETE:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_NEW:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case Identifier:
            case IntegerLiteral:
            case STMT_ASM:
            case STMT_BREAK:
            case STMT_CASE:
            case STMT_CONTINUE:
            case STMT_DEFAULT:
            case STMT_DO:
            case STMT_FOR:
            case STMT_FOREACH:
            case STMT_GOTO:
            case STMT_IF:
            case STMT_PRAGMA:
            case STMT_RETURN:
            case STMT_SCOPE:
            case STMT_SWITCH:
            case STMT_SYNCHRONIZED:
            case STMT_THROW:
            case STMT_TRY:
            case STMT_WHILE:
            case STMT_WITH:
            case StringLiteral:
            case 157:
            case 168:
            case 170:
            case 172:
            case 174:
            case 175:
            case 178:
            case 181:
            case 195:
            case 203:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 236:
            case 237:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 289:
                {
                alt114=2;
                }
                break;
            case 284:
                {
                alt114=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }

            switch (alt114) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:959:5: ';' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal602=cast(Token)match(input,186,FOLLOW_186_in_noScopeStatement8414); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:960:5: nonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatement_in_noScopeStatement8421);
                    nonEmptyStatement603=nonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatement603.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:961:5: blockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_blockStatement_in_noScopeStatement8427);
                    blockStatement604=blockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement604.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","noScopeStatement"," ",108);
        }
        return retval;
    }
    // $ANTLR end "noScopeStatement"


    public static class nonEmptyOrScopeBlockStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nonEmptyOrScopeBlockStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:964:1: nonEmptyOrScopeBlockStatement : ( nonEmptyStatement | scopeBlockStatement );
    public final dparserParser.nonEmptyOrScopeBlockStatement_return nonEmptyOrScopeBlockStatement()  {
        debug(trace_rules) writeln("Entering rule:","nonEmptyOrScopeBlockStatement"," ",109);
        dparserParser.nonEmptyOrScopeBlockStatement_return retval = new dparserParser.nonEmptyOrScopeBlockStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.nonEmptyStatement_return nonEmptyStatement605 =null;

        dparserParser.scopeBlockStatement_return scopeBlockStatement606 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:965:3: ( nonEmptyStatement | scopeBlockStatement )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==CharacterLiteral||LA115_0==ENUM_DECLARATION||LA115_0==EXP_ASSERT||LA115_0==EXP_CAST||(LA115_0 >=34  && LA115_0<=35)||LA115_0==EXP_IS||LA115_0==EXP_LITERAL_FILE||(LA115_0 >=44  && LA115_0<=45)||(LA115_0 >=48  && LA115_0<=49)||(LA115_0 >=52  && LA115_0<=56)||LA115_0==FloatLiteral||LA115_0==Identifier||LA115_0==IntegerLiteral||LA115_0==STMT_ASM||(LA115_0 >=108  && LA115_0<=109)||LA115_0==STMT_CONTINUE||(LA115_0 >=114  && LA115_0<=115)||(LA115_0 >=119  && LA115_0<=120)||(LA115_0 >=122  && LA115_0<=123)||(LA115_0 >=126  && LA115_0<=134)||LA115_0==StringLiteral||LA115_0==157||LA115_0==168||LA115_0==170||LA115_0==172||(LA115_0 >=174  && LA115_0<=175)||LA115_0==178||LA115_0==181||LA115_0==195||LA115_0==203||(LA115_0 >=210  && LA115_0<=211)||(LA115_0 >=214  && LA115_0<=219)||(LA115_0 >=222  && LA115_0<=227)||LA115_0==229||LA115_0==232||(LA115_0 >=234  && LA115_0<=237)||(LA115_0 >=243  && LA115_0<=249)||(LA115_0 >=267  && LA115_0<=269)||(LA115_0 >=271  && LA115_0<=275)||(LA115_0 >=277  && LA115_0<=283)||LA115_0==289) ) {
                alt115=1;
            }
            else if ( (LA115_0==284) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:965:5: nonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatement_in_nonEmptyOrScopeBlockStatement8442);
                    nonEmptyStatement605=nonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatement605.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:966:5: scopeBlockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_scopeBlockStatement_in_nonEmptyOrScopeBlockStatement8448);
                    scopeBlockStatement606=scopeBlockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeBlockStatement606.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nonEmptyOrScopeBlockStatement"," ",109);
        }
        return retval;
    }
    // $ANTLR end "nonEmptyOrScopeBlockStatement"


    public static class nonEmptyStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nonEmptyStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:969:1: nonEmptyStatement : ( nonEmptyStatementNoCaseNoDefault | caseStatement | defaultStatement );
    public final dparserParser.nonEmptyStatement_return nonEmptyStatement()  {
        debug(trace_rules) writeln("Entering rule:","nonEmptyStatement"," ",110);
        dparserParser.nonEmptyStatement_return retval = new dparserParser.nonEmptyStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.nonEmptyStatementNoCaseNoDefault_return nonEmptyStatementNoCaseNoDefault607 =null;

        dparserParser.caseStatement_return caseStatement608 =null;

        dparserParser.defaultStatement_return defaultStatement609 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:970:3: ( nonEmptyStatementNoCaseNoDefault | caseStatement | defaultStatement )
            int alt116=3;
            switch ( input.LA(1) ) {
            case CharacterLiteral:
            case ENUM_DECLARATION:
            case EXP_ASSERT:
            case EXP_CAST:
            case EXP_DELETE:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_NEW:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case Identifier:
            case IntegerLiteral:
            case STMT_ASM:
            case STMT_BREAK:
            case STMT_CONTINUE:
            case STMT_DO:
            case STMT_FOR:
            case STMT_FOREACH:
            case STMT_GOTO:
            case STMT_IF:
            case STMT_PRAGMA:
            case STMT_RETURN:
            case STMT_SCOPE:
            case STMT_SWITCH:
            case STMT_SYNCHRONIZED:
            case STMT_THROW:
            case STMT_TRY:
            case STMT_WHILE:
            case STMT_WITH:
            case StringLiteral:
            case 157:
            case 168:
            case 170:
            case 172:
            case 174:
            case 175:
            case 178:
            case 181:
            case 195:
            case 203:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 236:
            case 237:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 289:
                {
                alt116=1;
                }
                break;
            case STMT_CASE:
                {
                alt116=2;
                }
                break;
            case STMT_DEFAULT:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:970:5: nonEmptyStatementNoCaseNoDefault
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatementNoCaseNoDefault_in_nonEmptyStatement8463);
                    nonEmptyStatementNoCaseNoDefault607=nonEmptyStatementNoCaseNoDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatementNoCaseNoDefault607.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:971:5: caseStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_caseStatement_in_nonEmptyStatement8469);
                    caseStatement608=caseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement608.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:974:5: defaultStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_defaultStatement_in_nonEmptyStatement8481);
                    defaultStatement609=defaultStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultStatement609.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nonEmptyStatement"," ",110);
        }
        return retval;
    }
    // $ANTLR end "nonEmptyStatement"


    public static class nonEmptyStatementNoCaseNoDefault_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nonEmptyStatementNoCaseNoDefault"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:977:1: nonEmptyStatementNoCaseNoDefault : ( ( Identifier ':' )=> ( labeledStatement ) | ( 'final' 'switch' )=> ( finalSwitchStatement ) | ( 'static' 'if' )=> ( conditionalStatement ) | ( 'static' 'assert' )=> ( staticAssert ) | ( declarationStatement )=> ( declarationStatement ) | ( 'mixin' '(' )=> ( expressionStatement ) | ( 'mixin' Identifier )=> ( templateMixin ) | expressionStatement | ifStatement | whileStatement | doStatement | forStatement | foreachStatement | switchStatement | finalSwitchStatement | continueStatement | breakStatement | returnStatement | gotoStatement | withStatement | synchronizedStatement | tryStatement | scopeGuardStatement | throwStatement | asmStatement | pragmaStatement | conditionalStatement );
    public final dparserParser.nonEmptyStatementNoCaseNoDefault_return nonEmptyStatementNoCaseNoDefault()  {
        debug(trace_rules) writeln("Entering rule:","nonEmptyStatementNoCaseNoDefault"," ",111);
        dparserParser.nonEmptyStatementNoCaseNoDefault_return retval = new dparserParser.nonEmptyStatementNoCaseNoDefault_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.labeledStatement_return labeledStatement610 =null;

        dparserParser.finalSwitchStatement_return finalSwitchStatement611 =null;

        dparserParser.conditionalStatement_return conditionalStatement612 =null;

        dparserParser.staticAssert_return staticAssert613 =null;

        dparserParser.declarationStatement_return declarationStatement614 =null;

        dparserParser.expressionStatement_return expressionStatement615 =null;

        dparserParser.templateMixin_return templateMixin616 =null;

        dparserParser.expressionStatement_return expressionStatement617 =null;

        dparserParser.ifStatement_return ifStatement618 =null;

        dparserParser.whileStatement_return whileStatement619 =null;

        dparserParser.doStatement_return doStatement620 =null;

        dparserParser.forStatement_return forStatement621 =null;

        dparserParser.foreachStatement_return foreachStatement622 =null;

        dparserParser.switchStatement_return switchStatement623 =null;

        dparserParser.finalSwitchStatement_return finalSwitchStatement624 =null;

        dparserParser.continueStatement_return continueStatement625 =null;

        dparserParser.breakStatement_return breakStatement626 =null;

        dparserParser.returnStatement_return returnStatement627 =null;

        dparserParser.gotoStatement_return gotoStatement628 =null;

        dparserParser.withStatement_return withStatement629 =null;

        dparserParser.synchronizedStatement_return synchronizedStatement630 =null;

        dparserParser.tryStatement_return tryStatement631 =null;

        dparserParser.scopeGuardStatement_return scopeGuardStatement632 =null;

        dparserParser.throwStatement_return throwStatement633 =null;

        dparserParser.asmStatement_return asmStatement634 =null;

        dparserParser.pragmaStatement_return pragmaStatement635 =null;

        dparserParser.conditionalStatement_return conditionalStatement636 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:3: ( ( Identifier ':' )=> ( labeledStatement ) | ( 'final' 'switch' )=> ( finalSwitchStatement ) | ( 'static' 'if' )=> ( conditionalStatement ) | ( 'static' 'assert' )=> ( staticAssert ) | ( declarationStatement )=> ( declarationStatement ) | ( 'mixin' '(' )=> ( expressionStatement ) | ( 'mixin' Identifier )=> ( templateMixin ) | expressionStatement | ifStatement | whileStatement | doStatement | forStatement | foreachStatement | switchStatement | finalSwitchStatement | continueStatement | breakStatement | returnStatement | gotoStatement | withStatement | synchronizedStatement | tryStatement | scopeGuardStatement | throwStatement | asmStatement | pragmaStatement | conditionalStatement )
            int alt117=27;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:5: ( Identifier ':' )=> ( labeledStatement )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:24: ( labeledStatement )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:25: labeledStatement
                    {
                    pushFollow(FOLLOW_labeledStatement_in_nonEmptyStatementNoCaseNoDefault8504);
                    labeledStatement610=labeledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labeledStatement610.getTree());

                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:979:5: ( 'final' 'switch' )=> ( finalSwitchStatement )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:979:26: ( finalSwitchStatement )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:979:27: finalSwitchStatement
                    {
                    pushFollow(FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8519);
                    finalSwitchStatement611=finalSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finalSwitchStatement611.getTree());

                    }


                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:980:5: ( 'static' 'if' )=> ( conditionalStatement )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:980:23: ( conditionalStatement )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:980:24: conditionalStatement
                    {
                    pushFollow(FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8534);
                    conditionalStatement612=conditionalStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalStatement612.getTree());

                    }


                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:981:5: ( 'static' 'assert' )=> ( staticAssert )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:981:27: ( staticAssert )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:981:28: staticAssert
                    {
                    pushFollow(FOLLOW_staticAssert_in_nonEmptyStatementNoCaseNoDefault8549);
                    staticAssert613=staticAssert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, staticAssert613.getTree());

                    }


                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:982:5: ( declarationStatement )=> ( declarationStatement )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:982:30: ( declarationStatement )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:982:31: declarationStatement
                    {
                    pushFollow(FOLLOW_declarationStatement_in_nonEmptyStatementNoCaseNoDefault8562);
                    declarationStatement614=declarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarationStatement614.getTree());

                    }


                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:983:5: ( 'mixin' '(' )=> ( expressionStatement )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:983:21: ( expressionStatement )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:983:22: expressionStatement
                    {
                    pushFollow(FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8577);
                    expressionStatement615=expressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionStatement615.getTree());

                    }


                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:984:5: ( 'mixin' Identifier )=> ( templateMixin )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:984:28: ( templateMixin )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:984:29: templateMixin
                    {
                    pushFollow(FOLLOW_templateMixin_in_nonEmptyStatementNoCaseNoDefault8592);
                    templateMixin616=templateMixin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, templateMixin616.getTree());

                    }


                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:985:5: expressionStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8599);
                    expressionStatement617=expressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionStatement617.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:986:5: ifStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_ifStatement_in_nonEmptyStatementNoCaseNoDefault8605);
                    ifStatement618=ifStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement618.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:987:5: whileStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_whileStatement_in_nonEmptyStatementNoCaseNoDefault8611);
                    whileStatement619=whileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement619.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:988:5: doStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_doStatement_in_nonEmptyStatementNoCaseNoDefault8617);
                    doStatement620=doStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doStatement620.getTree());

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:989:5: forStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_forStatement_in_nonEmptyStatementNoCaseNoDefault8623);
                    forStatement621=forStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement621.getTree());

                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:990:5: foreachStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_foreachStatement_in_nonEmptyStatementNoCaseNoDefault8629);
                    foreachStatement622=foreachStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreachStatement622.getTree());

                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:991:5: switchStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_switchStatement_in_nonEmptyStatementNoCaseNoDefault8635);
                    switchStatement623=switchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchStatement623.getTree());

                    }
                    break;
                case 15 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:992:5: finalSwitchStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8641);
                    finalSwitchStatement624=finalSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finalSwitchStatement624.getTree());

                    }
                    break;
                case 16 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:993:5: continueStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_continueStatement_in_nonEmptyStatementNoCaseNoDefault8647);
                    continueStatement625=continueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continueStatement625.getTree());

                    }
                    break;
                case 17 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:994:5: breakStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_breakStatement_in_nonEmptyStatementNoCaseNoDefault8653);
                    breakStatement626=breakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakStatement626.getTree());

                    }
                    break;
                case 18 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:995:5: returnStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_returnStatement_in_nonEmptyStatementNoCaseNoDefault8659);
                    returnStatement627=returnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returnStatement627.getTree());

                    }
                    break;
                case 19 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:996:5: gotoStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_gotoStatement_in_nonEmptyStatementNoCaseNoDefault8665);
                    gotoStatement628=gotoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement628.getTree());

                    }
                    break;
                case 20 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:997:5: withStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_withStatement_in_nonEmptyStatementNoCaseNoDefault8671);
                    withStatement629=withStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement629.getTree());

                    }
                    break;
                case 21 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:998:5: synchronizedStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronizedStatement_in_nonEmptyStatementNoCaseNoDefault8677);
                    synchronizedStatement630=synchronizedStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronizedStatement630.getTree());

                    }
                    break;
                case 22 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:999:5: tryStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_tryStatement_in_nonEmptyStatementNoCaseNoDefault8683);
                    tryStatement631=tryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement631.getTree());

                    }
                    break;
                case 23 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1000:5: scopeGuardStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_scopeGuardStatement_in_nonEmptyStatementNoCaseNoDefault8689);
                    scopeGuardStatement632=scopeGuardStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeGuardStatement632.getTree());

                    }
                    break;
                case 24 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1001:5: throwStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_throwStatement_in_nonEmptyStatementNoCaseNoDefault8695);
                    throwStatement633=throwStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throwStatement633.getTree());

                    }
                    break;
                case 25 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1002:5: asmStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_asmStatement_in_nonEmptyStatementNoCaseNoDefault8701);
                    asmStatement634=asmStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asmStatement634.getTree());

                    }
                    break;
                case 26 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1003:5: pragmaStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_pragmaStatement_in_nonEmptyStatementNoCaseNoDefault8707);
                    pragmaStatement635=pragmaStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragmaStatement635.getTree());

                    }
                    break;
                case 27 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1007:5: conditionalStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8722);
                    conditionalStatement636=conditionalStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalStatement636.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nonEmptyStatementNoCaseNoDefault"," ",111);
        }
        return retval;
    }
    // $ANTLR end "nonEmptyStatementNoCaseNoDefault"


    public static class scopeBlockStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scopeBlockStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1010:1: scopeBlockStatement : blockStatement ;
    public final dparserParser.scopeBlockStatement_return scopeBlockStatement()  {
        debug(trace_rules) writeln("Entering rule:","scopeBlockStatement"," ",112);
        dparserParser.scopeBlockStatement_return retval = new dparserParser.scopeBlockStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.blockStatement_return blockStatement637 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1011:3: ( blockStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1011:5: blockStatement
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_blockStatement_in_scopeBlockStatement8737);
            blockStatement637=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement637.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","scopeBlockStatement"," ",112);
        }
        return retval;
    }
    // $ANTLR end "scopeBlockStatement"


    public static class scopeStatementList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scopeStatementList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1014:1: scopeStatementList : ( options {greedy=true; } : statementNoCaseNoDefault )* ;
    public final dparserParser.scopeStatementList_return scopeStatementList()  {
        debug(trace_rules) writeln("Entering rule:","scopeStatementList"," ",113);
        dparserParser.scopeStatementList_return retval = new dparserParser.scopeStatementList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.statementNoCaseNoDefault_return statementNoCaseNoDefault638 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1015:3: ( ( options {greedy=true; } : statementNoCaseNoDefault )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1015:5: ( options {greedy=true; } : statementNoCaseNoDefault )*
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1015:5: ( options {greedy=true; } : statementNoCaseNoDefault )*
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1015:31: statementNoCaseNoDefault
            	    {
            	    pushFollow(FOLLOW_statementNoCaseNoDefault_in_scopeStatementList8762);
            	    statementNoCaseNoDefault638=statementNoCaseNoDefault();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementNoCaseNoDefault638.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","scopeStatementList"," ",113);
        }
        return retval;
    }
    // $ANTLR end "scopeStatementList"


    public static class statementNoCaseNoDefault_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statementNoCaseNoDefault"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1018:1: statementNoCaseNoDefault : ( ';' !| nonEmptyStatementNoCaseNoDefault | scopeBlockStatement );
    public final dparserParser.statementNoCaseNoDefault_return statementNoCaseNoDefault()  {
        debug(trace_rules) writeln("Entering rule:","statementNoCaseNoDefault"," ",114);
        dparserParser.statementNoCaseNoDefault_return retval = new dparserParser.statementNoCaseNoDefault_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal639=null;
        dparserParser.nonEmptyStatementNoCaseNoDefault_return nonEmptyStatementNoCaseNoDefault640 =null;

        dparserParser.scopeBlockStatement_return scopeBlockStatement641 =null;


        Object char_literal639_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1019:3: ( ';' !| nonEmptyStatementNoCaseNoDefault | scopeBlockStatement )
            int alt119=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                alt119=1;
                }
                break;
            case CharacterLiteral:
            case ENUM_DECLARATION:
            case EXP_ASSERT:
            case EXP_CAST:
            case EXP_DELETE:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_NEW:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case Identifier:
            case IntegerLiteral:
            case STMT_ASM:
            case STMT_BREAK:
            case STMT_CONTINUE:
            case STMT_DO:
            case STMT_FOR:
            case STMT_FOREACH:
            case STMT_GOTO:
            case STMT_IF:
            case STMT_PRAGMA:
            case STMT_RETURN:
            case STMT_SCOPE:
            case STMT_SWITCH:
            case STMT_SYNCHRONIZED:
            case STMT_THROW:
            case STMT_TRY:
            case STMT_WHILE:
            case STMT_WITH:
            case StringLiteral:
            case 157:
            case 168:
            case 170:
            case 172:
            case 174:
            case 175:
            case 178:
            case 181:
            case 195:
            case 203:
            case 210:
            case 211:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 229:
            case 232:
            case 234:
            case 235:
            case 236:
            case 237:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 267:
            case 268:
            case 269:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 289:
                {
                alt119=2;
                }
                break;
            case 284:
                {
                alt119=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }

            switch (alt119) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1019:5: ';' !
                    {
                    root_0 = cast(Object)adaptor.nil();


                    char_literal639=cast(Token)match(input,186,FOLLOW_186_in_statementNoCaseNoDefault8779); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1020:5: nonEmptyStatementNoCaseNoDefault
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatementNoCaseNoDefault_in_statementNoCaseNoDefault8786);
                    nonEmptyStatementNoCaseNoDefault640=nonEmptyStatementNoCaseNoDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatementNoCaseNoDefault640.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1021:5: scopeBlockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_scopeBlockStatement_in_statementNoCaseNoDefault8792);
                    scopeBlockStatement641=scopeBlockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeBlockStatement641.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","statementNoCaseNoDefault"," ",114);
        }
        return retval;
    }
    // $ANTLR end "statementNoCaseNoDefault"


    public static class scopeStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scopeStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1024:1: scopeStatement : ( nonEmptyStatement | blockStatement );
    public final dparserParser.scopeStatement_return scopeStatement()  {
        debug(trace_rules) writeln("Entering rule:","scopeStatement"," ",115);
        dparserParser.scopeStatement_return retval = new dparserParser.scopeStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.nonEmptyStatement_return nonEmptyStatement642 =null;

        dparserParser.blockStatement_return blockStatement643 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1025:3: ( nonEmptyStatement | blockStatement )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==CharacterLiteral||LA120_0==ENUM_DECLARATION||LA120_0==EXP_ASSERT||LA120_0==EXP_CAST||(LA120_0 >=34  && LA120_0<=35)||LA120_0==EXP_IS||LA120_0==EXP_LITERAL_FILE||(LA120_0 >=44  && LA120_0<=45)||(LA120_0 >=48  && LA120_0<=49)||(LA120_0 >=52  && LA120_0<=56)||LA120_0==FloatLiteral||LA120_0==Identifier||LA120_0==IntegerLiteral||LA120_0==STMT_ASM||(LA120_0 >=108  && LA120_0<=109)||LA120_0==STMT_CONTINUE||(LA120_0 >=114  && LA120_0<=115)||(LA120_0 >=119  && LA120_0<=120)||(LA120_0 >=122  && LA120_0<=123)||(LA120_0 >=126  && LA120_0<=134)||LA120_0==StringLiteral||LA120_0==157||LA120_0==168||LA120_0==170||LA120_0==172||(LA120_0 >=174  && LA120_0<=175)||LA120_0==178||LA120_0==181||LA120_0==195||LA120_0==203||(LA120_0 >=210  && LA120_0<=211)||(LA120_0 >=214  && LA120_0<=219)||(LA120_0 >=222  && LA120_0<=227)||LA120_0==229||LA120_0==232||(LA120_0 >=234  && LA120_0<=237)||(LA120_0 >=243  && LA120_0<=249)||(LA120_0 >=267  && LA120_0<=269)||(LA120_0 >=271  && LA120_0<=275)||(LA120_0 >=277  && LA120_0<=283)||LA120_0==289) ) {
                alt120=1;
            }
            else if ( (LA120_0==284) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1025:5: nonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_nonEmptyStatement_in_scopeStatement8807);
                    nonEmptyStatement642=nonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyStatement642.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1026:5: blockStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_blockStatement_in_scopeStatement8813);
                    blockStatement643=blockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement643.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","scopeStatement"," ",115);
        }
        return retval;
    }
    // $ANTLR end "scopeStatement"


    public static class caseStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "caseStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1029:1: caseStatement : STMT_CASE ^ argumentList ':' ! scopeStatementList ;
    public final dparserParser.caseStatement_return caseStatement()  {
        debug(trace_rules) writeln("Entering rule:","caseStatement"," ",116);
        dparserParser.caseStatement_return retval = new dparserParser.caseStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_CASE644=null;
        Token char_literal646=null;
        dparserParser.argumentList_return argumentList645 =null;

        dparserParser.scopeStatementList_return scopeStatementList647 =null;


        Object STMT_CASE644_tree=null;
        Object char_literal646_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1030:3: ( STMT_CASE ^ argumentList ':' ! scopeStatementList )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1030:5: STMT_CASE ^ argumentList ':' ! scopeStatementList
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_CASE644=cast(Token)match(input,STMT_CASE,FOLLOW_STMT_CASE_in_caseStatement8828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_CASE644_tree = 
            cast(Object)adaptor.create(STMT_CASE644)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_CASE644_tree, root_0);
            }

            pushFollow(FOLLOW_argumentList_in_caseStatement8831);
            argumentList645=argumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argumentList645.getTree());

            char_literal646=cast(Token)match(input,185,FOLLOW_185_in_caseStatement8833); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatementList_in_caseStatement8836);
            scopeStatementList647=scopeStatementList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatementList647.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","caseStatement"," ",116);
        }
        return retval;
    }
    // $ANTLR end "caseStatement"


    public static class defaultStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1033:1: defaultStatement : STMT_DEFAULT ^ ':' ! scopeStatementList ;
    public final dparserParser.defaultStatement_return defaultStatement()  {
        debug(trace_rules) writeln("Entering rule:","defaultStatement"," ",117);
        dparserParser.defaultStatement_return retval = new dparserParser.defaultStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_DEFAULT648=null;
        Token char_literal649=null;
        dparserParser.scopeStatementList_return scopeStatementList650 =null;


        Object STMT_DEFAULT648_tree=null;
        Object char_literal649_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1034:3: ( STMT_DEFAULT ^ ':' ! scopeStatementList )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1034:5: STMT_DEFAULT ^ ':' ! scopeStatementList
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_DEFAULT648=cast(Token)match(input,STMT_DEFAULT,FOLLOW_STMT_DEFAULT_in_defaultStatement8851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_DEFAULT648_tree = 
            cast(Object)adaptor.create(STMT_DEFAULT648)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_DEFAULT648_tree, root_0);
            }

            char_literal649=cast(Token)match(input,185,FOLLOW_185_in_defaultStatement8854); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatementList_in_defaultStatement8857);
            scopeStatementList650=scopeStatementList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatementList650.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","defaultStatement"," ",117);
        }
        return retval;
    }
    // $ANTLR end "defaultStatement"


    public static class labeledStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "labeledStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1037:1: labeledStatement : ( Identifier ':' )=> ( Identifier ':' noScopeStatement -> ^( STMT_LABELED Identifier noScopeStatement ) ) ;
    public final dparserParser.labeledStatement_return labeledStatement()  {
        debug(trace_rules) writeln("Entering rule:","labeledStatement"," ",118);
        dparserParser.labeledStatement_return retval = new dparserParser.labeledStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token Identifier651=null;
        Token char_literal652=null;
        dparserParser.noScopeStatement_return noScopeStatement653 =null;


        Object Identifier651_tree=null;
        Object char_literal652_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_noScopeStatement=new RewriteRuleSubtreeStream(adaptor,"rule noScopeStatement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1038:3: ( ( Identifier ':' )=> ( Identifier ':' noScopeStatement -> ^( STMT_LABELED Identifier noScopeStatement ) ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1038:5: ( Identifier ':' )=> ( Identifier ':' noScopeStatement -> ^( STMT_LABELED Identifier noScopeStatement ) )
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1039:7: ( Identifier ':' noScopeStatement -> ^( STMT_LABELED Identifier noScopeStatement ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1039:8: Identifier ':' noScopeStatement
            {
            Identifier651=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_labeledStatement8886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(cast(Object)Identifier651);


            char_literal652=cast(Token)match(input,185,FOLLOW_185_in_labeledStatement8888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(cast(Object)char_literal652);


            pushFollow(FOLLOW_noScopeStatement_in_labeledStatement8890);
            noScopeStatement653=noScopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_noScopeStatement.add(cast(Object)noScopeStatement653.getTree());

            // AST REWRITE
            // elements: Identifier, noScopeStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1039:40: -> ^( STMT_LABELED Identifier noScopeStatement )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1039:43: ^( STMT_LABELED Identifier noScopeStatement )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_LABELED, "STMT_LABELED")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, stream_noScopeStatement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","labeledStatement"," ",118);
        }
        return retval;
    }
    // $ANTLR end "labeledStatement"


    public static class expressionStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1042:1: expressionStatement : expression ';' -> ^( STMT_EXPRESSION expression ) ;
    public final dparserParser.expressionStatement_return expressionStatement()  {
        debug(trace_rules) writeln("Entering rule:","expressionStatement"," ",119);
        dparserParser.expressionStatement_return retval = new dparserParser.expressionStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal655=null;
        dparserParser.expression_return expression654 =null;


        Object char_literal655_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1043:3: ( expression ';' -> ^( STMT_EXPRESSION expression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1043:5: expression ';'
            {
            pushFollow(FOLLOW_expression_in_expressionStatement8916);
            expression654=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression654.getTree());

            char_literal655=cast(Token)match(input,186,FOLLOW_186_in_expressionStatement8918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal655);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1043:20: -> ^( STMT_EXPRESSION expression )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1043:23: ^( STMT_EXPRESSION expression )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_EXPRESSION, "STMT_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expressionStatement"," ",119);
        }
        return retval;
    }
    // $ANTLR end "expressionStatement"


    public static class declarationStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarationStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1046:1: declarationStatement : declaration ;
    public final dparserParser.declarationStatement_return declarationStatement()  {
        debug(trace_rules) writeln("Entering rule:","declarationStatement"," ",120);
        dparserParser.declarationStatement_return retval = new dparserParser.declarationStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.declaration_return declaration656 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1047:3: ( declaration )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1047:5: declaration
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_declaration_in_declarationStatement8941);
            declaration656=declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration656.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","declarationStatement"," ",120);
        }
        return retval;
    }
    // $ANTLR end "declarationStatement"


    public static class ifStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1050:1: ifStatement : STMT_IF '(' ifCondition ')' scopeStatement ( ( 'else' )=> ( 'else' scopeStatement ) )? -> ^( STMT_IF ifCondition scopeStatement ( scopeStatement )? ) ;
    public final dparserParser.ifStatement_return ifStatement()  {
        debug(trace_rules) writeln("Entering rule:","ifStatement"," ",121);
        dparserParser.ifStatement_return retval = new dparserParser.ifStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_IF657=null;
        Token char_literal658=null;
        Token char_literal660=null;
        Token string_literal662=null;
        dparserParser.ifCondition_return ifCondition659 =null;

        dparserParser.scopeStatement_return scopeStatement661 =null;

        dparserParser.scopeStatement_return scopeStatement663 =null;


        Object STMT_IF657_tree=null;
        Object char_literal658_tree=null;
        Object char_literal660_tree=null;
        Object string_literal662_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_STMT_IF=new RewriteRuleTokenStream(adaptor,"token STMT_IF");
        RewriteRuleTokenStream stream_230=new RewriteRuleTokenStream(adaptor,"token 230");
        RewriteRuleSubtreeStream stream_ifCondition=new RewriteRuleSubtreeStream(adaptor,"rule ifCondition");
        RewriteRuleSubtreeStream stream_scopeStatement=new RewriteRuleSubtreeStream(adaptor,"rule scopeStatement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1051:3: ( STMT_IF '(' ifCondition ')' scopeStatement ( ( 'else' )=> ( 'else' scopeStatement ) )? -> ^( STMT_IF ifCondition scopeStatement ( scopeStatement )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1051:5: STMT_IF '(' ifCondition ')' scopeStatement ( ( 'else' )=> ( 'else' scopeStatement ) )?
            {
            STMT_IF657=cast(Token)match(input,STMT_IF,FOLLOW_STMT_IF_in_ifStatement8956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STMT_IF.add(cast(Object)STMT_IF657);


            char_literal658=cast(Token)match(input,170,FOLLOW_170_in_ifStatement8958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal658);


            pushFollow(FOLLOW_ifCondition_in_ifStatement8960);
            ifCondition659=ifCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ifCondition.add(cast(Object)ifCondition659.getTree());

            char_literal660=cast(Token)match(input,171,FOLLOW_171_in_ifStatement8962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal660);


            pushFollow(FOLLOW_scopeStatement_in_ifStatement8964);
            scopeStatement661=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_scopeStatement.add(cast(Object)scopeStatement661.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:5: ( ( 'else' )=> ( 'else' scopeStatement ) )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==230) ) {
                int LA121_1 = input.LA(2);

                if ( (synpred27_dparser()) ) {
                    alt121=1;
                }
            }
            switch (alt121) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:7: ( 'else' )=> ( 'else' scopeStatement )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:18: ( 'else' scopeStatement )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:19: 'else' scopeStatement
                   {
                   string_literal662=cast(Token)match(input,230,FOLLOW_230_in_ifStatement8978); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_230.add(cast(Object)string_literal662);


                   pushFollow(FOLLOW_scopeStatement_in_ifStatement8980);
                   scopeStatement663=scopeStatement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_scopeStatement.add(cast(Object)scopeStatement663.getTree());

                   }


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: ifCondition, scopeStatement, STMT_IF, scopeStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1053:5: -> ^( STMT_IF ifCondition scopeStatement ( scopeStatement )? )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1053:8: ^( STMT_IF ifCondition scopeStatement ( scopeStatement )? )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                stream_STMT_IF.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_ifCondition.nextTree());

                adaptor.addChild(root_1, stream_scopeStatement.nextTree());

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1053:45: ( scopeStatement )?
                if ( stream_scopeStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_scopeStatement.nextTree());

                }
                stream_scopeStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","ifStatement"," ",121);
        }
        return retval;
    }
    // $ANTLR end "ifStatement"


    public static class ifCondition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifCondition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1056:1: ifCondition options {greedy=true; } : ( expression | 'auto' ! defSymbol ! '=' ! expression | type ! defSymbol ! '=' expression );
    public final dparserParser.ifCondition_return ifCondition()  {
        debug(trace_rules) writeln("Entering rule:","ifCondition"," ",122);
        dparserParser.ifCondition_return retval = new dparserParser.ifCondition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal665=null;
        Token char_literal667=null;
        Token char_literal671=null;
        dparserParser.expression_return expression664 =null;

        dparserParser.defSymbol_return defSymbol666 =null;

        dparserParser.expression_return expression668 =null;

        dparserParser.type_return type669 =null;

        dparserParser.defSymbol_return defSymbol670 =null;

        dparserParser.expression_return expression672 =null;


        Object string_literal665_tree=null;
        Object char_literal667_tree=null;
        Object char_literal671_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1057:27: ( expression | 'auto' ! defSymbol ! '=' ! expression | type ! defSymbol ! '=' expression )
            int alt122=3;
            switch ( input.LA(1) ) {
            case CharacterLiteral:
            case EXP_ASSERT:
            case EXP_CAST:
            case EXP_DELETE:
            case EXP_DOLLAR:
            case EXP_IS:
            case EXP_LITERAL_FILE:
            case EXP_LITERAL_LINE:
            case EXP_LITERAL_NULL:
            case EXP_MIXIN:
            case EXP_NEW:
            case EXP_SUPER:
            case EXP_THIS:
            case EXP_TRAITS:
            case EXP_TYPEID:
            case EXP_TYPEOF:
            case FloatLiteral:
            case IntegerLiteral:
            case StringLiteral:
            case 157:
            case 168:
            case 170:
            case 172:
            case 174:
            case 175:
            case 178:
            case 195:
            case 203:
            case 226:
            case 237:
            case 246:
            case 268:
            case 271:
            case 289:
                {
                alt122=1;
                }
                break;
            case 181:
                {
                alt122=1;
                }
                break;
            case Identifier:
                {
                alt122=1;
                }
                break;
            case 214:
                {
                alt122=2;
                }
                break;
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 223:
            case 224:
            case 229:
            case 235:
            case 243:
            case 244:
            case 248:
            case 249:
            case 267:
            case 272:
            case 274:
            case 277:
            case 278:
            case 279:
            case 280:
            case 282:
            case 283:
                {
                alt122=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }

            switch (alt122) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1057:29: expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_ifCondition9024);
                    expression664=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression664.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1059:5: 'auto' ! defSymbol ! '=' ! expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal665=cast(Token)match(input,214,FOLLOW_214_in_ifCondition9033); if (state.failed) return retval;

                    pushFollow(FOLLOW_defSymbol_in_ifCondition9036);
                    defSymbol666=defSymbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    char_literal667=cast(Token)match(input,193,FOLLOW_193_in_ifCondition9039); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_ifCondition9042);
                    expression668=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression668.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1060:5: type ! defSymbol ! '=' expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_type_in_ifCondition9048);
                    type669=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_defSymbol_in_ifCondition9051);
                    defSymbol670=defSymbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    char_literal671=cast(Token)match(input,193,FOLLOW_193_in_ifCondition9054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal671_tree = 
                    cast(Object)adaptor.create(char_literal671)
                    ;
                    adaptor.addChild(root_0, char_literal671_tree);
                    }

                    pushFollow(FOLLOW_expression_in_ifCondition9056);
                    expression672=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression672.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","ifCondition"," ",122);
        }
        return retval;
    }
    // $ANTLR end "ifCondition"


    public static class whileStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whileStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1063:1: whileStatement : STMT_WHILE ^ '(' ! expression ')' ! scopeStatement ;
    public final dparserParser.whileStatement_return whileStatement()  {
        debug(trace_rules) writeln("Entering rule:","whileStatement"," ",123);
        dparserParser.whileStatement_return retval = new dparserParser.whileStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_WHILE673=null;
        Token char_literal674=null;
        Token char_literal676=null;
        dparserParser.expression_return expression675 =null;

        dparserParser.scopeStatement_return scopeStatement677 =null;


        Object STMT_WHILE673_tree=null;
        Object char_literal674_tree=null;
        Object char_literal676_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1064:3: ( STMT_WHILE ^ '(' ! expression ')' ! scopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1064:5: STMT_WHILE ^ '(' ! expression ')' ! scopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_WHILE673=cast(Token)match(input,STMT_WHILE,FOLLOW_STMT_WHILE_in_whileStatement9072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_WHILE673_tree = 
            cast(Object)adaptor.create(STMT_WHILE673)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_WHILE673_tree, root_0);
            }

            char_literal674=cast(Token)match(input,170,FOLLOW_170_in_whileStatement9075); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_whileStatement9078);
            expression675=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression675.getTree());

            char_literal676=cast(Token)match(input,171,FOLLOW_171_in_whileStatement9080); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatement_in_whileStatement9083);
            scopeStatement677=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement677.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","whileStatement"," ",123);
        }
        return retval;
    }
    // $ANTLR end "whileStatement"


    public static class doStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "doStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1067:1: doStatement : STMT_DO ^ scopeStatement 'while' ! '(' ! expression ')' ! ';' !;
    public final dparserParser.doStatement_return doStatement()  {
        debug(trace_rules) writeln("Entering rule:","doStatement"," ",124);
        dparserParser.doStatement_return retval = new dparserParser.doStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_DO678=null;
        Token string_literal680=null;
        Token char_literal681=null;
        Token char_literal683=null;
        Token char_literal684=null;
        dparserParser.scopeStatement_return scopeStatement679 =null;

        dparserParser.expression_return expression682 =null;


        Object STMT_DO678_tree=null;
        Object string_literal680_tree=null;
        Object char_literal681_tree=null;
        Object char_literal683_tree=null;
        Object char_literal684_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1068:3: ( STMT_DO ^ scopeStatement 'while' ! '(' ! expression ')' ! ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1068:5: STMT_DO ^ scopeStatement 'while' ! '(' ! expression ')' ! ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_DO678=cast(Token)match(input,STMT_DO,FOLLOW_STMT_DO_in_doStatement9098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_DO678_tree = 
            cast(Object)adaptor.create(STMT_DO678)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_DO678_tree, root_0);
            }

            pushFollow(FOLLOW_scopeStatement_in_doStatement9101);
            scopeStatement679=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement679.getTree());

            string_literal680=cast(Token)match(input,STMT_WHILE,FOLLOW_STMT_WHILE_in_doStatement9103); if (state.failed) return retval;

            char_literal681=cast(Token)match(input,170,FOLLOW_170_in_doStatement9106); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_doStatement9109);
            expression682=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression682.getTree());

            char_literal683=cast(Token)match(input,171,FOLLOW_171_in_doStatement9111); if (state.failed) return retval;

            char_literal684=cast(Token)match(input,186,FOLLOW_186_in_doStatement9114); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","doStatement"," ",124);
        }
        return retval;
    }
    // $ANTLR end "doStatement"


    public static class forStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1073:1: forStatement : STMT_FOR ^ '(' ! initialize forExp ';' ! forExp ')' ! scopeStatement ;
    public final dparserParser.forStatement_return forStatement()  {
        debug(trace_rules) writeln("Entering rule:","forStatement"," ",125);
        dparserParser.forStatement_return retval = new dparserParser.forStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_FOR685=null;
        Token char_literal686=null;
        Token char_literal689=null;
        Token char_literal691=null;
        dparserParser.initialize_return initialize687 =null;

        dparserParser.forExp_return forExp688 =null;

        dparserParser.forExp_return forExp690 =null;

        dparserParser.scopeStatement_return scopeStatement692 =null;


        Object STMT_FOR685_tree=null;
        Object char_literal686_tree=null;
        Object char_literal689_tree=null;
        Object char_literal691_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1074:3: ( STMT_FOR ^ '(' ! initialize forExp ';' ! forExp ')' ! scopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1074:5: STMT_FOR ^ '(' ! initialize forExp ';' ! forExp ')' ! scopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_FOR685=cast(Token)match(input,STMT_FOR,FOLLOW_STMT_FOR_in_forStatement9134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_FOR685_tree = 
            cast(Object)adaptor.create(STMT_FOR685)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_FOR685_tree, root_0);
            }

            char_literal686=cast(Token)match(input,170,FOLLOW_170_in_forStatement9137); if (state.failed) return retval;

            pushFollow(FOLLOW_initialize_in_forStatement9140);
            initialize687=initialize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, initialize687.getTree());

            pushFollow(FOLLOW_forExp_in_forStatement9142);
            forExp688=forExp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forExp688.getTree());

            char_literal689=cast(Token)match(input,186,FOLLOW_186_in_forStatement9144); if (state.failed) return retval;

            pushFollow(FOLLOW_forExp_in_forStatement9147);
            forExp690=forExp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forExp690.getTree());

            char_literal691=cast(Token)match(input,171,FOLLOW_171_in_forStatement9149); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatement_in_forStatement9152);
            scopeStatement692=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement692.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","forStatement"," ",125);
        }
        return retval;
    }
    // $ANTLR end "forStatement"


    public static class initialize_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initialize"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1077:1: initialize : ( ';' -> ^( NULL ) | noScopeNonEmptyStatement );
    public final dparserParser.initialize_return initialize()  {
        debug(trace_rules) writeln("Entering rule:","initialize"," ",126);
        dparserParser.initialize_return retval = new dparserParser.initialize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal693=null;
        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement694 =null;


        Object char_literal693_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1078:3: ( ';' -> ^( NULL ) | noScopeNonEmptyStatement )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==186) ) {
                alt123=1;
            }
            else if ( (LA123_0==CharacterLiteral||LA123_0==ENUM_DECLARATION||LA123_0==EXP_ASSERT||LA123_0==EXP_CAST||(LA123_0 >=34  && LA123_0<=35)||LA123_0==EXP_IS||LA123_0==EXP_LITERAL_FILE||(LA123_0 >=44  && LA123_0<=45)||(LA123_0 >=48  && LA123_0<=49)||(LA123_0 >=52  && LA123_0<=56)||LA123_0==FloatLiteral||LA123_0==Identifier||LA123_0==IntegerLiteral||LA123_0==STMT_ASM||(LA123_0 >=108  && LA123_0<=109)||LA123_0==STMT_CONTINUE||(LA123_0 >=114  && LA123_0<=115)||(LA123_0 >=119  && LA123_0<=120)||(LA123_0 >=122  && LA123_0<=123)||(LA123_0 >=126  && LA123_0<=134)||LA123_0==StringLiteral||LA123_0==157||LA123_0==168||LA123_0==170||LA123_0==172||(LA123_0 >=174  && LA123_0<=175)||LA123_0==178||LA123_0==181||LA123_0==195||LA123_0==203||(LA123_0 >=210  && LA123_0<=211)||(LA123_0 >=214  && LA123_0<=219)||(LA123_0 >=222  && LA123_0<=227)||LA123_0==229||LA123_0==232||(LA123_0 >=234  && LA123_0<=237)||(LA123_0 >=243  && LA123_0<=249)||(LA123_0 >=267  && LA123_0<=269)||(LA123_0 >=271  && LA123_0<=275)||(LA123_0 >=277  && LA123_0<=284)||LA123_0==289) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1078:5: ';'
                    {
                    char_literal693=cast(Token)match(input,186,FOLLOW_186_in_initialize9167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal693);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1078:9: -> ^( NULL )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1078:12: ^( NULL )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(NULL, "NULL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1079:5: noScopeNonEmptyStatement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_noScopeNonEmptyStatement_in_initialize9179);
                    noScopeNonEmptyStatement694=noScopeNonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noScopeNonEmptyStatement694.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","initialize"," ",126);
        }
        return retval;
    }
    // $ANTLR end "initialize"


    public static class forExp_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forExp"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1082:1: forExp : ( expression | -> ^( NULL ) );
    public final dparserParser.forExp_return forExp()  {
        debug(trace_rules) writeln("Entering rule:","forExp"," ",127);
        dparserParser.forExp_return retval = new dparserParser.forExp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.expression_return expression695 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1083:3: ( expression | -> ^( NULL ) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==CharacterLiteral||LA124_0==EXP_ASSERT||LA124_0==EXP_CAST||(LA124_0 >=34  && LA124_0<=35)||LA124_0==EXP_IS||LA124_0==EXP_LITERAL_FILE||(LA124_0 >=44  && LA124_0<=45)||(LA124_0 >=48  && LA124_0<=49)||(LA124_0 >=52  && LA124_0<=56)||LA124_0==FloatLiteral||LA124_0==Identifier||LA124_0==IntegerLiteral||LA124_0==StringLiteral||LA124_0==157||LA124_0==168||LA124_0==170||LA124_0==172||(LA124_0 >=174  && LA124_0<=175)||LA124_0==178||LA124_0==181||LA124_0==195||LA124_0==203||LA124_0==226||LA124_0==237||LA124_0==246||LA124_0==268||LA124_0==271||LA124_0==289) ) {
                alt124=1;
            }
            else if ( (LA124_0==171||LA124_0==186) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1083:5: expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_forExp9194);
                    expression695=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression695.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1084:5: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1084:5: -> ^( NULL )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1084:8: ^( NULL )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(NULL, "NULL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","forExp"," ",127);
        }
        return retval;
    }
    // $ANTLR end "forExp"


    public static class foreachStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreachStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1087:1: foreachStatement : ( ( 'foreach' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement ) ) | ( 'foreach_reverse' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement ) ) | 'foreach' '(' parameterList ';' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH[\"fwd\"] parameterList expression noScopeNonEmptyStatement ) | 'foreach_reverse' '(' parameterList ';' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH[\"rev\"] parameterList expression noScopeNonEmptyStatement ) );
    public final dparserParser.foreachStatement_return foreachStatement()  {
        debug(trace_rules) writeln("Entering rule:","foreachStatement"," ",128);
        dparserParser.foreachStatement_return retval = new dparserParser.foreachStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal696=null;
        Token char_literal697=null;
        Token char_literal699=null;
        Token string_literal701=null;
        Token char_literal703=null;
        Token string_literal705=null;
        Token char_literal706=null;
        Token char_literal708=null;
        Token string_literal710=null;
        Token char_literal712=null;
        Token string_literal714=null;
        Token char_literal715=null;
        Token char_literal717=null;
        Token char_literal719=null;
        Token string_literal721=null;
        Token char_literal722=null;
        Token char_literal724=null;
        Token char_literal726=null;
        dparserParser.parameter_return parameter698 =null;

        dparserParser.expression_return expression700 =null;

        dparserParser.expression_return expression702 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement704 =null;

        dparserParser.parameter_return parameter707 =null;

        dparserParser.expression_return expression709 =null;

        dparserParser.expression_return expression711 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement713 =null;

        dparserParser.parameterList_return parameterList716 =null;

        dparserParser.expression_return expression718 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement720 =null;

        dparserParser.parameterList_return parameterList723 =null;

        dparserParser.expression_return expression725 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement727 =null;


        Object string_literal696_tree=null;
        Object char_literal697_tree=null;
        Object char_literal699_tree=null;
        Object string_literal701_tree=null;
        Object char_literal703_tree=null;
        Object string_literal705_tree=null;
        Object char_literal706_tree=null;
        Object char_literal708_tree=null;
        Object string_literal710_tree=null;
        Object char_literal712_tree=null;
        Object string_literal714_tree=null;
        Object char_literal715_tree=null;
        Object char_literal717_tree=null;
        Object char_literal719_tree=null;
        Object string_literal721_tree=null;
        Object char_literal722_tree=null;
        Object char_literal724_tree=null;
        Object char_literal726_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_Range=new RewriteRuleTokenStream(adaptor,"token Range");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_236=new RewriteRuleTokenStream(adaptor,"token 236");
        RewriteRuleTokenStream stream_STMT_FOREACH=new RewriteRuleTokenStream(adaptor,"token STMT_FOREACH");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        RewriteRuleSubtreeStream stream_parameterList=new RewriteRuleSubtreeStream(adaptor,"rule parameterList");
        RewriteRuleSubtreeStream stream_noScopeNonEmptyStatement=new RewriteRuleSubtreeStream(adaptor,"rule noScopeNonEmptyStatement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1088:3: ( ( 'foreach' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement ) ) | ( 'foreach_reverse' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement ) ) | 'foreach' '(' parameterList ';' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH[\"fwd\"] parameterList expression noScopeNonEmptyStatement ) | 'foreach_reverse' '(' parameterList ';' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH[\"rev\"] parameterList expression noScopeNonEmptyStatement ) )
            int alt125=4;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==STMT_FOREACH) ) {
                int LA125_1 = input.LA(2);

                if ( (synpred28_dparser()) ) {
                    alt125=1;
                }
                else if ( (synpred29_dparser()) ) {
                    alt125=2;
                }
                else if ( (true) ) {
                    alt125=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA125_0==236) ) {
                alt125=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1088:5: ( 'foreach' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement ) )
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1089:7: ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement ) )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1089:9: 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement
                    {
                    string_literal696=cast(Token)match(input,STMT_FOREACH,FOLLOW_STMT_FOREACH_in_foreachStatement9242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STMT_FOREACH.add(cast(Object)string_literal696);


                    char_literal697=cast(Token)match(input,170,FOLLOW_170_in_foreachStatement9244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal697);


                    pushFollow(FOLLOW_parameter_in_foreachStatement9246);
                    parameter698=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(cast(Object)parameter698.getTree());

                    char_literal699=cast(Token)match(input,186,FOLLOW_186_in_foreachStatement9248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal699);


                    pushFollow(FOLLOW_expression_in_foreachStatement9250);
                    expression700=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression700.getTree());

                    string_literal701=cast(Token)match(input,Range,FOLLOW_Range_in_foreachStatement9252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Range.add(cast(Object)string_literal701);


                    pushFollow(FOLLOW_expression_in_foreachStatement9254);
                    expression702=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression702.getTree());

                    char_literal703=cast(Token)match(input,171,FOLLOW_171_in_foreachStatement9256); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal703);


                    pushFollow(FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9258);
                    noScopeNonEmptyStatement704=noScopeNonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement704.getTree());

                    // AST REWRITE
                    // elements: expression, parameter, noScopeNonEmptyStatement, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1090:9: -> ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1090:12: ^( STMT_FOREACH_RANGE[\"fwd\"] parameter expression expression noScopeNonEmptyStatement )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_FOREACH_RANGE, "fwd")
                        , root_1);

                        adaptor.addChild(root_1, stream_parameter.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_noScopeNonEmptyStatement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1091:5: ( 'foreach_reverse' '(' parameter ';' expression '..' )=> ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement ) )
                    {
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1092:7: ( 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement -> ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement ) )
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1092:9: 'foreach' '(' parameter ';' expression '..' expression ')' noScopeNonEmptyStatement
                    {
                    string_literal705=cast(Token)match(input,STMT_FOREACH,FOLLOW_STMT_FOREACH_in_foreachStatement9312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STMT_FOREACH.add(cast(Object)string_literal705);


                    char_literal706=cast(Token)match(input,170,FOLLOW_170_in_foreachStatement9314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal706);


                    pushFollow(FOLLOW_parameter_in_foreachStatement9316);
                    parameter707=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(cast(Object)parameter707.getTree());

                    char_literal708=cast(Token)match(input,186,FOLLOW_186_in_foreachStatement9318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal708);


                    pushFollow(FOLLOW_expression_in_foreachStatement9320);
                    expression709=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression709.getTree());

                    string_literal710=cast(Token)match(input,Range,FOLLOW_Range_in_foreachStatement9322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Range.add(cast(Object)string_literal710);


                    pushFollow(FOLLOW_expression_in_foreachStatement9324);
                    expression711=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression711.getTree());

                    char_literal712=cast(Token)match(input,171,FOLLOW_171_in_foreachStatement9326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal712);


                    pushFollow(FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9328);
                    noScopeNonEmptyStatement713=noScopeNonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement713.getTree());

                    // AST REWRITE
                    // elements: parameter, expression, noScopeNonEmptyStatement, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1093:9: -> ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1093:12: ^( STMT_FOREACH_RANGE[\"rev\"] parameter expression expression noScopeNonEmptyStatement )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_FOREACH_RANGE, "rev")
                        , root_1);

                        adaptor.addChild(root_1, stream_parameter.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_noScopeNonEmptyStatement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1094:5: 'foreach' '(' parameterList ';' expression ')' noScopeNonEmptyStatement
                    {
                    string_literal714=cast(Token)match(input,STMT_FOREACH,FOLLOW_STMT_FOREACH_in_foreachStatement9359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STMT_FOREACH.add(cast(Object)string_literal714);


                    char_literal715=cast(Token)match(input,170,FOLLOW_170_in_foreachStatement9361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal715);


                    pushFollow(FOLLOW_parameterList_in_foreachStatement9363);
                    parameterList716=parameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterList.add(cast(Object)parameterList716.getTree());

                    char_literal717=cast(Token)match(input,186,FOLLOW_186_in_foreachStatement9365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal717);


                    pushFollow(FOLLOW_expression_in_foreachStatement9367);
                    expression718=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression718.getTree());

                    char_literal719=cast(Token)match(input,171,FOLLOW_171_in_foreachStatement9369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal719);


                    pushFollow(FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9371);
                    noScopeNonEmptyStatement720=noScopeNonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement720.getTree());

                    // AST REWRITE
                    // elements: expression, parameterList, noScopeNonEmptyStatement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1095:7: -> ^( STMT_FOREACH[\"fwd\"] parameterList expression noScopeNonEmptyStatement )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1095:10: ^( STMT_FOREACH[\"fwd\"] parameterList expression noScopeNonEmptyStatement )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_FOREACH, "fwd")
                        , root_1);

                        adaptor.addChild(root_1, stream_parameterList.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_noScopeNonEmptyStatement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1096:5: 'foreach_reverse' '(' parameterList ';' expression ')' noScopeNonEmptyStatement
                    {
                    string_literal721=cast(Token)match(input,236,FOLLOW_236_in_foreachStatement9396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_236.add(cast(Object)string_literal721);


                    char_literal722=cast(Token)match(input,170,FOLLOW_170_in_foreachStatement9398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal722);


                    pushFollow(FOLLOW_parameterList_in_foreachStatement9400);
                    parameterList723=parameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterList.add(cast(Object)parameterList723.getTree());

                    char_literal724=cast(Token)match(input,186,FOLLOW_186_in_foreachStatement9402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal724);


                    pushFollow(FOLLOW_expression_in_foreachStatement9404);
                    expression725=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression725.getTree());

                    char_literal726=cast(Token)match(input,171,FOLLOW_171_in_foreachStatement9406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal726);


                    pushFollow(FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9408);
                    noScopeNonEmptyStatement727=noScopeNonEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement727.getTree());

                    // AST REWRITE
                    // elements: noScopeNonEmptyStatement, expression, parameterList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

                    root_0 = cast(Object)adaptor.nil();
                    // 1097:7: -> ^( STMT_FOREACH[\"rev\"] parameterList expression noScopeNonEmptyStatement )
                    {
                        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1097:10: ^( STMT_FOREACH[\"rev\"] parameterList expression noScopeNonEmptyStatement )
                        {
                        Object root_1 = cast(Object)adaptor.nil();
                        root_1 = cast(Object)adaptor.becomeRoot(
                        cast(Object)adaptor.create(STMT_FOREACH, "rev")
                        , root_1);

                        adaptor.addChild(root_1, stream_parameterList.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_noScopeNonEmptyStatement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","foreachStatement"," ",128);
        }
        return retval;
    }
    // $ANTLR end "foreachStatement"


    public static class switchStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1102:1: switchStatement : STMT_SWITCH ^ '(' ! expression ')' ! scopeStatement ;
    public final dparserParser.switchStatement_return switchStatement()  {
        debug(trace_rules) writeln("Entering rule:","switchStatement"," ",129);
        dparserParser.switchStatement_return retval = new dparserParser.switchStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_SWITCH728=null;
        Token char_literal729=null;
        Token char_literal731=null;
        dparserParser.expression_return expression730 =null;

        dparserParser.scopeStatement_return scopeStatement732 =null;


        Object STMT_SWITCH728_tree=null;
        Object char_literal729_tree=null;
        Object char_literal731_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1103:3: ( STMT_SWITCH ^ '(' ! expression ')' ! scopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1103:5: STMT_SWITCH ^ '(' ! expression ')' ! scopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_SWITCH728=cast(Token)match(input,STMT_SWITCH,FOLLOW_STMT_SWITCH_in_switchStatement9444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_SWITCH728_tree = 
            cast(Object)adaptor.create(STMT_SWITCH728)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_SWITCH728_tree, root_0);
            }

            char_literal729=cast(Token)match(input,170,FOLLOW_170_in_switchStatement9447); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_switchStatement9450);
            expression730=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression730.getTree());

            char_literal731=cast(Token)match(input,171,FOLLOW_171_in_switchStatement9452); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatement_in_switchStatement9455);
            scopeStatement732=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement732.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","switchStatement"," ",129);
        }
        return retval;
    }
    // $ANTLR end "switchStatement"


    public static class finalSwitchStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finalSwitchStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1106:1: finalSwitchStatement : 'final' 'switch' '(' expression ')' scopeStatement -> ^( STMT_FINALSWITCH expression scopeStatement ) ;
    public final dparserParser.finalSwitchStatement_return finalSwitchStatement()  {
        debug(trace_rules) writeln("Entering rule:","finalSwitchStatement"," ",130);
        dparserParser.finalSwitchStatement_return retval = new dparserParser.finalSwitchStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal733=null;
        Token string_literal734=null;
        Token char_literal735=null;
        Token char_literal737=null;
        dparserParser.expression_return expression736 =null;

        dparserParser.scopeStatement_return scopeStatement738 =null;


        Object string_literal733_tree=null;
        Object string_literal734_tree=null;
        Object char_literal735_tree=null;
        Object char_literal737_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_STMT_SWITCH=new RewriteRuleTokenStream(adaptor,"token STMT_SWITCH");
        RewriteRuleTokenStream stream_234=new RewriteRuleTokenStream(adaptor,"token 234");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_scopeStatement=new RewriteRuleSubtreeStream(adaptor,"rule scopeStatement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1107:3: ( 'final' 'switch' '(' expression ')' scopeStatement -> ^( STMT_FINALSWITCH expression scopeStatement ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1107:5: 'final' 'switch' '(' expression ')' scopeStatement
            {
            string_literal733=cast(Token)match(input,234,FOLLOW_234_in_finalSwitchStatement9470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_234.add(cast(Object)string_literal733);


            string_literal734=cast(Token)match(input,STMT_SWITCH,FOLLOW_STMT_SWITCH_in_finalSwitchStatement9472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STMT_SWITCH.add(cast(Object)string_literal734);


            char_literal735=cast(Token)match(input,170,FOLLOW_170_in_finalSwitchStatement9474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(cast(Object)char_literal735);


            pushFollow(FOLLOW_expression_in_finalSwitchStatement9476);
            expression736=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(cast(Object)expression736.getTree());

            char_literal737=cast(Token)match(input,171,FOLLOW_171_in_finalSwitchStatement9478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(cast(Object)char_literal737);


            pushFollow(FOLLOW_scopeStatement_in_finalSwitchStatement9480);
            scopeStatement738=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_scopeStatement.add(cast(Object)scopeStatement738.getTree());

            // AST REWRITE
            // elements: expression, scopeStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1108:5: -> ^( STMT_FINALSWITCH expression scopeStatement )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1108:8: ^( STMT_FINALSWITCH expression scopeStatement )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_FINALSWITCH, "STMT_FINALSWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_1, stream_scopeStatement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","finalSwitchStatement"," ",130);
        }
        return retval;
    }
    // $ANTLR end "finalSwitchStatement"


    public static class continueStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continueStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1111:1: continueStatement : STMT_CONTINUE ^ ( Identifier )? ';' !;
    public final dparserParser.continueStatement_return continueStatement()  {
        debug(trace_rules) writeln("Entering rule:","continueStatement"," ",131);
        dparserParser.continueStatement_return retval = new dparserParser.continueStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_CONTINUE739=null;
        Token Identifier740=null;
        Token char_literal741=null;

        Object STMT_CONTINUE739_tree=null;
        Object Identifier740_tree=null;
        Object char_literal741_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1112:3: ( STMT_CONTINUE ^ ( Identifier )? ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1112:5: STMT_CONTINUE ^ ( Identifier )? ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_CONTINUE739=cast(Token)match(input,STMT_CONTINUE,FOLLOW_STMT_CONTINUE_in_continueStatement9510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_CONTINUE739_tree = 
            cast(Object)adaptor.create(STMT_CONTINUE739)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_CONTINUE739_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1112:20: ( Identifier )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==Identifier) ) {
                alt126=1;
            }
            switch (alt126) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1112:20: Identifier
                   {
                   Identifier740=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_continueStatement9513); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   Identifier740_tree = 
                   cast(Object)adaptor.create(Identifier740)
                   ;
                   adaptor.addChild(root_0, Identifier740_tree);
                   }

                   }
                   break;

                default:
            }


            char_literal741=cast(Token)match(input,186,FOLLOW_186_in_continueStatement9516); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","continueStatement"," ",131);
        }
        return retval;
    }
    // $ANTLR end "continueStatement"


    public static class breakStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "breakStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1115:1: breakStatement : STMT_BREAK ^ ( Identifier )? ';' !;
    public final dparserParser.breakStatement_return breakStatement()  {
        debug(trace_rules) writeln("Entering rule:","breakStatement"," ",132);
        dparserParser.breakStatement_return retval = new dparserParser.breakStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_BREAK742=null;
        Token Identifier743=null;
        Token char_literal744=null;

        Object STMT_BREAK742_tree=null;
        Object Identifier743_tree=null;
        Object char_literal744_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1116:3: ( STMT_BREAK ^ ( Identifier )? ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1116:5: STMT_BREAK ^ ( Identifier )? ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_BREAK742=cast(Token)match(input,STMT_BREAK,FOLLOW_STMT_BREAK_in_breakStatement9532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_BREAK742_tree = 
            cast(Object)adaptor.create(STMT_BREAK742)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_BREAK742_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1116:17: ( Identifier )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Identifier) ) {
                alt127=1;
            }
            switch (alt127) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1116:17: Identifier
                   {
                   Identifier743=cast(Token)match(input,Identifier,FOLLOW_Identifier_in_breakStatement9535); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   Identifier743_tree = 
                   cast(Object)adaptor.create(Identifier743)
                   ;
                   adaptor.addChild(root_0, Identifier743_tree);
                   }

                   }
                   break;

                default:
            }


            char_literal744=cast(Token)match(input,186,FOLLOW_186_in_breakStatement9538); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","breakStatement"," ",132);
        }
        return retval;
    }
    // $ANTLR end "breakStatement"


    public static class returnStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "returnStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1119:1: returnStatement : STMT_RETURN ^ ( expression )? ';' !;
    public final dparserParser.returnStatement_return returnStatement()  {
        debug(trace_rules) writeln("Entering rule:","returnStatement"," ",133);
        dparserParser.returnStatement_return retval = new dparserParser.returnStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_RETURN745=null;
        Token char_literal747=null;
        dparserParser.expression_return expression746 =null;


        Object STMT_RETURN745_tree=null;
        Object char_literal747_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1120:3: ( STMT_RETURN ^ ( expression )? ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1120:5: STMT_RETURN ^ ( expression )? ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_RETURN745=cast(Token)match(input,STMT_RETURN,FOLLOW_STMT_RETURN_in_returnStatement9554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_RETURN745_tree = 
            cast(Object)adaptor.create(STMT_RETURN745)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_RETURN745_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1120:18: ( expression )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==CharacterLiteral||LA128_0==EXP_ASSERT||LA128_0==EXP_CAST||(LA128_0 >=34  && LA128_0<=35)||LA128_0==EXP_IS||LA128_0==EXP_LITERAL_FILE||(LA128_0 >=44  && LA128_0<=45)||(LA128_0 >=48  && LA128_0<=49)||(LA128_0 >=52  && LA128_0<=56)||LA128_0==FloatLiteral||LA128_0==Identifier||LA128_0==IntegerLiteral||LA128_0==StringLiteral||LA128_0==157||LA128_0==168||LA128_0==170||LA128_0==172||(LA128_0 >=174  && LA128_0<=175)||LA128_0==178||LA128_0==181||LA128_0==195||LA128_0==203||LA128_0==226||LA128_0==237||LA128_0==246||LA128_0==268||LA128_0==271||LA128_0==289) ) {
                alt128=1;
            }
            switch (alt128) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1120:18: expression
                   {
                   pushFollow(FOLLOW_expression_in_returnStatement9557);
                   expression746=expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, expression746.getTree());

                   }
                   break;

                default:
            }


            char_literal747=cast(Token)match(input,186,FOLLOW_186_in_returnStatement9560); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","returnStatement"," ",133);
        }
        return retval;
    }
    // $ANTLR end "returnStatement"


    public static class gotoStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gotoStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1123:1: gotoStatement : STMT_GOTO ^ ( symbol | 'default' | 'case' ( expression )? ) ';' !;
    public final dparserParser.gotoStatement_return gotoStatement()  {
        debug(trace_rules) writeln("Entering rule:","gotoStatement"," ",134);
        dparserParser.gotoStatement_return retval = new dparserParser.gotoStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_GOTO748=null;
        Token string_literal750=null;
        Token string_literal751=null;
        Token char_literal753=null;
        dparserParser.symbol_return symbol749 =null;

        dparserParser.expression_return expression752 =null;


        Object STMT_GOTO748_tree=null;
        Object string_literal750_tree=null;
        Object string_literal751_tree=null;
        Object char_literal753_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1124:3: ( STMT_GOTO ^ ( symbol | 'default' | 'case' ( expression )? ) ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1124:5: STMT_GOTO ^ ( symbol | 'default' | 'case' ( expression )? ) ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_GOTO748=cast(Token)match(input,STMT_GOTO,FOLLOW_STMT_GOTO_in_gotoStatement9576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_GOTO748_tree = 
            cast(Object)adaptor.create(STMT_GOTO748)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_GOTO748_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1125:5: ( symbol | 'default' | 'case' ( expression )? )
            int alt130=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                alt130=1;
                }
                break;
            case STMT_DEFAULT:
                {
                alt130=2;
                }
                break;
            case STMT_CASE:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }

            switch (alt130) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1125:7: symbol
                   {
                   pushFollow(FOLLOW_symbol_in_gotoStatement9585);
                   symbol749=symbol();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, symbol749.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1126:7: 'default'
                   {
                   string_literal750=cast(Token)match(input,STMT_DEFAULT,FOLLOW_STMT_DEFAULT_in_gotoStatement9593); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal750_tree = 
                   cast(Object)adaptor.create(string_literal750)
                   ;
                   adaptor.addChild(root_0, string_literal750_tree);
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1127:7: 'case' ( expression )?
                   {
                   string_literal751=cast(Token)match(input,STMT_CASE,FOLLOW_STMT_CASE_in_gotoStatement9601); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal751_tree = 
                   cast(Object)adaptor.create(string_literal751)
                   ;
                   adaptor.addChild(root_0, string_literal751_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1127:14: ( expression )?
                   int alt129=2;
                   int LA129_0 = input.LA(1);

                   if ( (LA129_0==CharacterLiteral||LA129_0==EXP_ASSERT||LA129_0==EXP_CAST||(LA129_0 >=34  && LA129_0<=35)||LA129_0==EXP_IS||LA129_0==EXP_LITERAL_FILE||(LA129_0 >=44  && LA129_0<=45)||(LA129_0 >=48  && LA129_0<=49)||(LA129_0 >=52  && LA129_0<=56)||LA129_0==FloatLiteral||LA129_0==Identifier||LA129_0==IntegerLiteral||LA129_0==StringLiteral||LA129_0==157||LA129_0==168||LA129_0==170||LA129_0==172||(LA129_0 >=174  && LA129_0<=175)||LA129_0==178||LA129_0==181||LA129_0==195||LA129_0==203||LA129_0==226||LA129_0==237||LA129_0==246||LA129_0==268||LA129_0==271||LA129_0==289) ) {
                       alt129=1;
                   }
                   switch (alt129) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1127:14: expression
                          {
                          pushFollow(FOLLOW_expression_in_gotoStatement9603);
                          expression752=expression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, expression752.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            char_literal753=cast(Token)match(input,186,FOLLOW_186_in_gotoStatement9612); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","gotoStatement"," ",134);
        }
        return retval;
    }
    // $ANTLR end "gotoStatement"


    public static class withStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1131:1: withStatement : STMT_WITH ^ '(' ! ( ( Identifier '!' )=> ( templateInstance ) | expression ) ')' ! scopeStatement ;
    public final dparserParser.withStatement_return withStatement()  {
        debug(trace_rules) writeln("Entering rule:","withStatement"," ",135);
        dparserParser.withStatement_return retval = new dparserParser.withStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_WITH754=null;
        Token char_literal755=null;
        Token char_literal758=null;
        dparserParser.templateInstance_return templateInstance756 =null;

        dparserParser.expression_return expression757 =null;

        dparserParser.scopeStatement_return scopeStatement759 =null;


        Object STMT_WITH754_tree=null;
        Object char_literal755_tree=null;
        Object char_literal758_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1132:3: ( STMT_WITH ^ '(' ! ( ( Identifier '!' )=> ( templateInstance ) | expression ) ')' ! scopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1132:5: STMT_WITH ^ '(' ! ( ( Identifier '!' )=> ( templateInstance ) | expression ) ')' ! scopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_WITH754=cast(Token)match(input,STMT_WITH,FOLLOW_STMT_WITH_in_withStatement9628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_WITH754_tree = 
            cast(Object)adaptor.create(STMT_WITH754)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_WITH754_tree, root_0);
            }

            char_literal755=cast(Token)match(input,170,FOLLOW_170_in_withStatement9631); if (state.failed) return retval;

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:5: ( ( Identifier '!' )=> ( templateInstance ) | expression )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==Identifier) ) {
                int LA131_1 = input.LA(2);

                if ( (synpred30_dparser()) ) {
                    alt131=1;
                }
                else if ( (true) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA131_0==CharacterLiteral||LA131_0==EXP_ASSERT||LA131_0==EXP_CAST||(LA131_0 >=34  && LA131_0<=35)||LA131_0==EXP_IS||LA131_0==EXP_LITERAL_FILE||(LA131_0 >=44  && LA131_0<=45)||(LA131_0 >=48  && LA131_0<=49)||(LA131_0 >=52  && LA131_0<=56)||LA131_0==FloatLiteral||LA131_0==IntegerLiteral||LA131_0==StringLiteral||LA131_0==157||LA131_0==168||LA131_0==170||LA131_0==172||(LA131_0 >=174  && LA131_0<=175)||LA131_0==178||LA131_0==181||LA131_0==195||LA131_0==203||LA131_0==226||LA131_0==237||LA131_0==246||LA131_0==268||LA131_0==271||LA131_0==289) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:7: ( Identifier '!' )=> ( templateInstance )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:26: ( templateInstance )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:27: templateInstance
                   {
                   pushFollow(FOLLOW_templateInstance_in_withStatement9648);
                   templateInstance756=templateInstance();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, templateInstance756.getTree());

                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1134:7: expression
                   {
                   pushFollow(FOLLOW_expression_in_withStatement9657);
                   expression757=expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, expression757.getTree());

                   }
                   break;

                default:
            }


            char_literal758=cast(Token)match(input,171,FOLLOW_171_in_withStatement9665); if (state.failed) return retval;

            pushFollow(FOLLOW_scopeStatement_in_withStatement9668);
            scopeStatement759=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement759.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","withStatement"," ",135);
        }
        return retval;
    }
    // $ANTLR end "withStatement"


    public static class synchronizedStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronizedStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1138:1: synchronizedStatement : STMT_SYNCHRONIZED ^ ( options {greedy=true; } : '(' ! expression ')' !)? scopeStatement ;
    public final dparserParser.synchronizedStatement_return synchronizedStatement()  {
        debug(trace_rules) writeln("Entering rule:","synchronizedStatement"," ",136);
        dparserParser.synchronizedStatement_return retval = new dparserParser.synchronizedStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_SYNCHRONIZED760=null;
        Token char_literal761=null;
        Token char_literal763=null;
        dparserParser.expression_return expression762 =null;

        dparserParser.scopeStatement_return scopeStatement764 =null;


        Object STMT_SYNCHRONIZED760_tree=null;
        Object char_literal761_tree=null;
        Object char_literal763_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1139:3: ( STMT_SYNCHRONIZED ^ ( options {greedy=true; } : '(' ! expression ')' !)? scopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1139:5: STMT_SYNCHRONIZED ^ ( options {greedy=true; } : '(' ! expression ')' !)? scopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_SYNCHRONIZED760=cast(Token)match(input,STMT_SYNCHRONIZED,FOLLOW_STMT_SYNCHRONIZED_in_synchronizedStatement9683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_SYNCHRONIZED760_tree = 
            cast(Object)adaptor.create(STMT_SYNCHRONIZED760)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_SYNCHRONIZED760_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1140:5: ( options {greedy=true; } : '(' ! expression ')' !)?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1140:33: '(' ! expression ')' !
                   {
                   char_literal761=cast(Token)match(input,170,FOLLOW_170_in_synchronizedStatement9702); if (state.failed) return retval;

                   pushFollow(FOLLOW_expression_in_synchronizedStatement9705);
                   expression762=expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, expression762.getTree());

                   char_literal763=cast(Token)match(input,171,FOLLOW_171_in_synchronizedStatement9707); if (state.failed) return retval;

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_scopeStatement_in_synchronizedStatement9717);
            scopeStatement764=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement764.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","synchronizedStatement"," ",136);
        }
        return retval;
    }
    // $ANTLR end "synchronizedStatement"


    public static class tryStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tryStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1146:1: tryStatement : STMT_TRY ^ scopeStatement catches ( options {greedy=true; } : finallyStatement )? ;
    public final dparserParser.tryStatement_return tryStatement()  {
        debug(trace_rules) writeln("Entering rule:","tryStatement"," ",137);
        dparserParser.tryStatement_return retval = new dparserParser.tryStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_TRY765=null;
        dparserParser.scopeStatement_return scopeStatement766 =null;

        dparserParser.catches_return catches767 =null;

        dparserParser.finallyStatement_return finallyStatement768 =null;


        Object STMT_TRY765_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1147:3: ( STMT_TRY ^ scopeStatement catches ( options {greedy=true; } : finallyStatement )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1147:5: STMT_TRY ^ scopeStatement catches ( options {greedy=true; } : finallyStatement )?
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_TRY765=cast(Token)match(input,STMT_TRY,FOLLOW_STMT_TRY_in_tryStatement9734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_TRY765_tree = 
            cast(Object)adaptor.create(STMT_TRY765)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_TRY765_tree, root_0);
            }

            pushFollow(FOLLOW_scopeStatement_in_tryStatement9737);
            scopeStatement766=scopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, scopeStatement766.getTree());

            pushFollow(FOLLOW_catches_in_tryStatement9743);
            catches767=catches();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catches767.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1148:13: ( options {greedy=true; } : finallyStatement )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==STMT_FINALLY) ) {
                alt133=1;
            }
            switch (alt133) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1148:41: finallyStatement
                   {
                   pushFollow(FOLLOW_finallyStatement_in_tryStatement9757);
                   finallyStatement768=finallyStatement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, finallyStatement768.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","tryStatement"," ",137);
        }
        return retval;
    }
    // $ANTLR end "tryStatement"


    public static class catches_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catches"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1151:1: catches : ( ( STMT_CATCH '(' )=> ( normalCatch ) )* ( options {greedy=true; } : lastCatch )? ;
    public final dparserParser.catches_return catches()  {
        debug(trace_rules) writeln("Entering rule:","catches"," ",138);
        dparserParser.catches_return retval = new dparserParser.catches_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dparserParser.normalCatch_return normalCatch769 =null;

        dparserParser.lastCatch_return lastCatch770 =null;



        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:3: ( ( ( STMT_CATCH '(' )=> ( normalCatch ) )* ( options {greedy=true; } : lastCatch )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:5: ( ( STMT_CATCH '(' )=> ( normalCatch ) )* ( options {greedy=true; } : lastCatch )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:5: ( ( STMT_CATCH '(' )=> ( normalCatch ) )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==STMT_CATCH) ) {
                    int LA134_1 = input.LA(2);

                    if ( (synpred31_dparser()) ) {
                        alt134=1;
                    }


                }


                switch (alt134) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:7: ( STMT_CATCH '(' )=> ( normalCatch )
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:26: ( normalCatch )
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:27: normalCatch
            	    {
            	    pushFollow(FOLLOW_normalCatch_in_catches9784);
            	    normalCatch769=normalCatch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalCatch769.getTree());

            	    }


            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:42: ( options {greedy=true; } : lastCatch )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==STMT_CATCH) ) {
                alt135=1;
            }
            switch (alt135) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:70: lastCatch
                   {
                   pushFollow(FOLLOW_lastCatch_in_catches9801);
                   lastCatch770=lastCatch();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, lastCatch770.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","catches"," ",138);
        }
        return retval;
    }
    // $ANTLR end "catches"


    public static class lastCatch_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lastCatch"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1155:1: lastCatch : STMT_CATCH ^ noScopeNonEmptyStatement ;
    public final dparserParser.lastCatch_return lastCatch()  {
        debug(trace_rules) writeln("Entering rule:","lastCatch"," ",139);
        dparserParser.lastCatch_return retval = new dparserParser.lastCatch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_CATCH771=null;
        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement772 =null;


        Object STMT_CATCH771_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1156:3: ( STMT_CATCH ^ noScopeNonEmptyStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1156:5: STMT_CATCH ^ noScopeNonEmptyStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_CATCH771=cast(Token)match(input,STMT_CATCH,FOLLOW_STMT_CATCH_in_lastCatch9818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_CATCH771_tree = 
            cast(Object)adaptor.create(STMT_CATCH771)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_CATCH771_tree, root_0);
            }

            pushFollow(FOLLOW_noScopeNonEmptyStatement_in_lastCatch9821);
            noScopeNonEmptyStatement772=noScopeNonEmptyStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noScopeNonEmptyStatement772.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lastCatch"," ",139);
        }
        return retval;
    }
    // $ANTLR end "lastCatch"


    public static class normalCatch_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "normalCatch"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1159:1: normalCatch : STMT_CATCH ^ '(' ! parameter ')' ! noScopeNonEmptyStatement ;
    public final dparserParser.normalCatch_return normalCatch()  {
        debug(trace_rules) writeln("Entering rule:","normalCatch"," ",140);
        dparserParser.normalCatch_return retval = new dparserParser.normalCatch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_CATCH773=null;
        Token char_literal774=null;
        Token char_literal776=null;
        dparserParser.parameter_return parameter775 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement777 =null;


        Object STMT_CATCH773_tree=null;
        Object char_literal774_tree=null;
        Object char_literal776_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1160:3: ( STMT_CATCH ^ '(' ! parameter ')' ! noScopeNonEmptyStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1160:5: STMT_CATCH ^ '(' ! parameter ')' ! noScopeNonEmptyStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_CATCH773=cast(Token)match(input,STMT_CATCH,FOLLOW_STMT_CATCH_in_normalCatch9836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_CATCH773_tree = 
            cast(Object)adaptor.create(STMT_CATCH773)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_CATCH773_tree, root_0);
            }

            char_literal774=cast(Token)match(input,170,FOLLOW_170_in_normalCatch9839); if (state.failed) return retval;

            pushFollow(FOLLOW_parameter_in_normalCatch9842);
            parameter775=parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter775.getTree());

            char_literal776=cast(Token)match(input,171,FOLLOW_171_in_normalCatch9844); if (state.failed) return retval;

            pushFollow(FOLLOW_noScopeNonEmptyStatement_in_normalCatch9847);
            noScopeNonEmptyStatement777=noScopeNonEmptyStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noScopeNonEmptyStatement777.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","normalCatch"," ",140);
        }
        return retval;
    }
    // $ANTLR end "normalCatch"


    public static class finallyStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finallyStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1163:1: finallyStatement : STMT_FINALLY ^ noScopeNonEmptyStatement ;
    public final dparserParser.finallyStatement_return finallyStatement()  {
        debug(trace_rules) writeln("Entering rule:","finallyStatement"," ",141);
        dparserParser.finallyStatement_return retval = new dparserParser.finallyStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_FINALLY778=null;
        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement779 =null;


        Object STMT_FINALLY778_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1164:3: ( STMT_FINALLY ^ noScopeNonEmptyStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1164:5: STMT_FINALLY ^ noScopeNonEmptyStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_FINALLY778=cast(Token)match(input,STMT_FINALLY,FOLLOW_STMT_FINALLY_in_finallyStatement9862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_FINALLY778_tree = 
            cast(Object)adaptor.create(STMT_FINALLY778)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_FINALLY778_tree, root_0);
            }

            pushFollow(FOLLOW_noScopeNonEmptyStatement_in_finallyStatement9865);
            noScopeNonEmptyStatement779=noScopeNonEmptyStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noScopeNonEmptyStatement779.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","finallyStatement"," ",141);
        }
        return retval;
    }
    // $ANTLR end "finallyStatement"


    public static class throwStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throwStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1169:1: throwStatement : STMT_THROW ^ expression ';' !;
    public final dparserParser.throwStatement_return throwStatement()  {
        debug(trace_rules) writeln("Entering rule:","throwStatement"," ",142);
        dparserParser.throwStatement_return retval = new dparserParser.throwStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_THROW780=null;
        Token char_literal782=null;
        dparserParser.expression_return expression781 =null;


        Object STMT_THROW780_tree=null;
        Object char_literal782_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1170:3: ( STMT_THROW ^ expression ';' !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1170:5: STMT_THROW ^ expression ';' !
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_THROW780=cast(Token)match(input,STMT_THROW,FOLLOW_STMT_THROW_in_throwStatement9882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_THROW780_tree = 
            cast(Object)adaptor.create(STMT_THROW780)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_THROW780_tree, root_0);
            }

            pushFollow(FOLLOW_expression_in_throwStatement9885);
            expression781=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression781.getTree());

            char_literal782=cast(Token)match(input,186,FOLLOW_186_in_throwStatement9887); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","throwStatement"," ",142);
        }
        return retval;
    }
    // $ANTLR end "throwStatement"


    public static class scopeGuardStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scopeGuardStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1173:1: scopeGuardStatement : STMT_SCOPE ^ '(' ! ( 'exit' | 'success' | 'failure' ) ')' ! nonEmptyOrScopeBlockStatement ;
    public final dparserParser.scopeGuardStatement_return scopeGuardStatement()  {
        debug(trace_rules) writeln("Entering rule:","scopeGuardStatement"," ",143);
        dparserParser.scopeGuardStatement_return retval = new dparserParser.scopeGuardStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_SCOPE783=null;
        Token char_literal784=null;
        Token set785=null;
        Token char_literal786=null;
        dparserParser.nonEmptyOrScopeBlockStatement_return nonEmptyOrScopeBlockStatement787 =null;


        Object STMT_SCOPE783_tree=null;
        Object char_literal784_tree=null;
        Object set785_tree=null;
        Object char_literal786_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1174:3: ( STMT_SCOPE ^ '(' ! ( 'exit' | 'success' | 'failure' ) ')' ! nonEmptyOrScopeBlockStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1174:5: STMT_SCOPE ^ '(' ! ( 'exit' | 'success' | 'failure' ) ')' ! nonEmptyOrScopeBlockStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_SCOPE783=cast(Token)match(input,STMT_SCOPE,FOLLOW_STMT_SCOPE_in_scopeGuardStatement9903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_SCOPE783_tree = 
            cast(Object)adaptor.create(STMT_SCOPE783)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_SCOPE783_tree, root_0);
            }

            char_literal784=cast(Token)match(input,170,FOLLOW_170_in_scopeGuardStatement9906); if (state.failed) return retval;

            set785=cast(Token)input.LT(1);

            if ( input.LA(1)==231||input.LA(1)==233||input.LA(1)==276 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set785)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal786=cast(Token)match(input,171,FOLLOW_171_in_scopeGuardStatement9931); if (state.failed) return retval;

            pushFollow(FOLLOW_nonEmptyOrScopeBlockStatement_in_scopeGuardStatement9934);
            nonEmptyOrScopeBlockStatement787=nonEmptyOrScopeBlockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonEmptyOrScopeBlockStatement787.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","scopeGuardStatement"," ",143);
        }
        return retval;
    }
    // $ANTLR end "scopeGuardStatement"


    public static class asmStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "asmStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1179:1: asmStatement : STMT_ASM ^ '{' '}' ;
    public final dparserParser.asmStatement_return asmStatement()  {
        debug(trace_rules) writeln("Entering rule:","asmStatement"," ",144);
        dparserParser.asmStatement_return retval = new dparserParser.asmStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_ASM788=null;
        Token char_literal789=null;
        Token char_literal790=null;

        Object STMT_ASM788_tree=null;
        Object char_literal789_tree=null;
        Object char_literal790_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1180:3: ( STMT_ASM ^ '{' '}' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1180:5: STMT_ASM ^ '{' '}'
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_ASM788=cast(Token)match(input,STMT_ASM,FOLLOW_STMT_ASM_in_asmStatement9949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_ASM788_tree = 
            cast(Object)adaptor.create(STMT_ASM788)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_ASM788_tree, root_0);
            }

            char_literal789=cast(Token)match(input,284,FOLLOW_284_in_asmStatement9956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal789_tree = 
            cast(Object)adaptor.create(char_literal789)
            ;
            adaptor.addChild(root_0, char_literal789_tree);
            }

            char_literal790=cast(Token)match(input,288,FOLLOW_288_in_asmStatement9960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal790_tree = 
            cast(Object)adaptor.create(char_literal790)
            ;
            adaptor.addChild(root_0, char_literal790_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","asmStatement"," ",144);
        }
        return retval;
    }
    // $ANTLR end "asmStatement"


    public static class pragmaStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragmaStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1184:1: pragmaStatement : STMT_PRAGMA ^ '(' ! symbol ( ',' ! argumentList )? ')' ! noScopeStatement ;
    public final dparserParser.pragmaStatement_return pragmaStatement()  {
        debug(trace_rules) writeln("Entering rule:","pragmaStatement"," ",145);
        dparserParser.pragmaStatement_return retval = new dparserParser.pragmaStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STMT_PRAGMA791=null;
        Token char_literal792=null;
        Token char_literal794=null;
        Token char_literal796=null;
        dparserParser.symbol_return symbol793 =null;

        dparserParser.argumentList_return argumentList795 =null;

        dparserParser.noScopeStatement_return noScopeStatement797 =null;


        Object STMT_PRAGMA791_tree=null;
        Object char_literal792_tree=null;
        Object char_literal794_tree=null;
        Object char_literal796_tree=null;

        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1185:3: ( STMT_PRAGMA ^ '(' ! symbol ( ',' ! argumentList )? ')' ! noScopeStatement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1185:5: STMT_PRAGMA ^ '(' ! symbol ( ',' ! argumentList )? ')' ! noScopeStatement
            {
            root_0 = cast(Object)adaptor.nil();


            STMT_PRAGMA791=cast(Token)match(input,STMT_PRAGMA,FOLLOW_STMT_PRAGMA_in_pragmaStatement9975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STMT_PRAGMA791_tree = 
            cast(Object)adaptor.create(STMT_PRAGMA791)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(STMT_PRAGMA791_tree, root_0);
            }

            char_literal792=cast(Token)match(input,170,FOLLOW_170_in_pragmaStatement9978); if (state.failed) return retval;

            pushFollow(FOLLOW_symbol_in_pragmaStatement9981);
            symbol793=symbol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, symbol793.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1185:30: ( ',' ! argumentList )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==177) ) {
                alt136=1;
            }
            switch (alt136) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1185:31: ',' ! argumentList
                   {
                   char_literal794=cast(Token)match(input,177,FOLLOW_177_in_pragmaStatement9984); if (state.failed) return retval;

                   pushFollow(FOLLOW_argumentList_in_pragmaStatement9987);
                   argumentList795=argumentList();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, argumentList795.getTree());

                   }
                   break;

                default:
            }


            char_literal796=cast(Token)match(input,171,FOLLOW_171_in_pragmaStatement9991); if (state.failed) return retval;

            pushFollow(FOLLOW_noScopeStatement_in_pragmaStatement9998);
            noScopeStatement797=noScopeStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noScopeStatement797.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","pragmaStatement"," ",145);
        }
        return retval;
    }
    // $ANTLR end "pragmaStatement"


    public static class mixinStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mixinStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1189:1: mixinStatement : mixinExpression ';' -> ^( STMT_MIXIN mixinExpression ) ;
    public final dparserParser.mixinStatement_return mixinStatement()  {
        debug(trace_rules) writeln("Entering rule:","mixinStatement"," ",146);
        dparserParser.mixinStatement_return retval = new dparserParser.mixinStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal799=null;
        dparserParser.mixinExpression_return mixinExpression798 =null;


        Object char_literal799_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_mixinExpression=new RewriteRuleSubtreeStream(adaptor,"rule mixinExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1190:3: ( mixinExpression ';' -> ^( STMT_MIXIN mixinExpression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1190:5: mixinExpression ';'
            {
            pushFollow(FOLLOW_mixinExpression_in_mixinStatement10013);
            mixinExpression798=mixinExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_mixinExpression.add(cast(Object)mixinExpression798.getTree());

            char_literal799=cast(Token)match(input,186,FOLLOW_186_in_mixinStatement10015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(cast(Object)char_literal799);


            // AST REWRITE
            // elements: mixinExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1190:25: -> ^( STMT_MIXIN mixinExpression )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1190:28: ^( STMT_MIXIN mixinExpression )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_MIXIN, "STMT_MIXIN")
                , root_1);

                adaptor.addChild(root_1, stream_mixinExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","mixinStatement"," ",146);
        }
        return retval;
    }
    // $ANTLR end "mixinStatement"


    public static class conditionalStatement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalStatement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1193:1: conditionalStatement : condition noScopeNonEmptyStatement ( ( 'else' )=> ( 'else' noScopeNonEmptyStatement ) )? -> ^( STMT_CONDITIONAL condition ( noScopeNonEmptyStatement )+ ) ;
    public final dparserParser.conditionalStatement_return conditionalStatement()  {
        debug(trace_rules) writeln("Entering rule:","conditionalStatement"," ",147);
        dparserParser.conditionalStatement_return retval = new dparserParser.conditionalStatement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal802=null;
        dparserParser.condition_return condition800 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement801 =null;

        dparserParser.noScopeNonEmptyStatement_return noScopeNonEmptyStatement803 =null;


        Object string_literal802_tree=null;
        RewriteRuleTokenStream stream_230=new RewriteRuleTokenStream(adaptor,"token 230");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_noScopeNonEmptyStatement=new RewriteRuleSubtreeStream(adaptor,"rule noScopeNonEmptyStatement");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1194:3: ( condition noScopeNonEmptyStatement ( ( 'else' )=> ( 'else' noScopeNonEmptyStatement ) )? -> ^( STMT_CONDITIONAL condition ( noScopeNonEmptyStatement )+ ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1194:5: condition noScopeNonEmptyStatement ( ( 'else' )=> ( 'else' noScopeNonEmptyStatement ) )?
            {
            pushFollow(FOLLOW_condition_in_conditionalStatement10039);
            condition800=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(cast(Object)condition800.getTree());

            pushFollow(FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10041);
            noScopeNonEmptyStatement801=noScopeNonEmptyStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement801.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:5: ( ( 'else' )=> ( 'else' noScopeNonEmptyStatement ) )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==230) ) {
                int LA137_1 = input.LA(2);

                if ( (synpred32_dparser()) ) {
                    alt137=1;
                }
            }
            switch (alt137) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:7: ( 'else' )=> ( 'else' noScopeNonEmptyStatement )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:18: ( 'else' noScopeNonEmptyStatement )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:19: 'else' noScopeNonEmptyStatement
                   {
                   string_literal802=cast(Token)match(input,230,FOLLOW_230_in_conditionalStatement10055); if (state.failed) return retval; 
                   if ( state.backtracking==0 ) stream_230.add(cast(Object)string_literal802);


                   pushFollow(FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10057);
                   noScopeNonEmptyStatement803=noScopeNonEmptyStatement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_noScopeNonEmptyStatement.add(cast(Object)noScopeNonEmptyStatement803.getTree());

                   }


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: noScopeNonEmptyStatement, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1196:7: -> ^( STMT_CONDITIONAL condition ( noScopeNonEmptyStatement )+ )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1196:10: ^( STMT_CONDITIONAL condition ( noScopeNonEmptyStatement )+ )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(STMT_CONDITIONAL, "STMT_CONDITIONAL")
                , root_1);

                adaptor.addChild(root_1, stream_condition.nextTree());

                if ( !(stream_noScopeNonEmptyStatement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_noScopeNonEmptyStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_noScopeNonEmptyStatement.nextTree());

                }
                stream_noScopeNonEmptyStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","conditionalStatement"," ",147);
        }
        return retval;
    }
    // $ANTLR end "conditionalStatement"


    public static class argumentList_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argumentList"
    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1199:1: argumentList : ( assignExpression ( ',' assignExpression )* )? -> ^( ARG_LIST ( assignExpression )* ) ;
    public final dparserParser.argumentList_return argumentList()  {
        debug(trace_rules) writeln("Entering rule:","argumentList"," ",148);
        dparserParser.argumentList_return retval = new dparserParser.argumentList_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal805=null;
        dparserParser.assignExpression_return assignExpression804 =null;

        dparserParser.assignExpression_return assignExpression806 =null;


        Object char_literal805_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_assignExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignExpression");
        try {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:3: ( ( assignExpression ( ',' assignExpression )* )? -> ^( ARG_LIST ( assignExpression )* ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:5: ( assignExpression ( ',' assignExpression )* )?
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:5: ( assignExpression ( ',' assignExpression )* )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==CharacterLiteral||LA139_0==EXP_ASSERT||LA139_0==EXP_CAST||(LA139_0 >=34  && LA139_0<=35)||LA139_0==EXP_IS||LA139_0==EXP_LITERAL_FILE||(LA139_0 >=44  && LA139_0<=45)||(LA139_0 >=48  && LA139_0<=49)||(LA139_0 >=52  && LA139_0<=56)||LA139_0==FloatLiteral||LA139_0==Identifier||LA139_0==IntegerLiteral||LA139_0==StringLiteral||LA139_0==157||LA139_0==168||LA139_0==170||LA139_0==172||(LA139_0 >=174  && LA139_0<=175)||LA139_0==178||LA139_0==181||LA139_0==195||LA139_0==203||LA139_0==226||LA139_0==237||LA139_0==246||LA139_0==268||LA139_0==271||LA139_0==289) ) {
                alt139=1;
            }
            switch (alt139) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:6: assignExpression ( ',' assignExpression )*
                   {
                   pushFollow(FOLLOW_assignExpression_in_argumentList10094);
                   assignExpression804=assignExpression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression804.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:23: ( ',' assignExpression )*
                   loop138:
                   do {
                       int alt138=2;
                       int LA138_0 = input.LA(1);

                       if ( (LA138_0==177) ) {
                           alt138=1;
                       }


                       switch (alt138) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1200:24: ',' assignExpression
                   	    {
                   	    char_literal805=cast(Token)match(input,177,FOLLOW_177_in_argumentList10097); if (state.failed) return retval; 
                   	    if ( state.backtracking==0 ) stream_177.add(cast(Object)char_literal805);


                   	    pushFollow(FOLLOW_assignExpression_in_argumentList10099);
                   	    assignExpression806=assignExpression();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) stream_assignExpression.add(cast(Object)assignExpression806.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop138;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            // AST REWRITE
            // elements: assignExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!is null?retval.tree:null);

            root_0 = cast(Object)adaptor.nil();
            // 1201:7: -> ^( ARG_LIST ( assignExpression )* )
            {
                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1201:10: ^( ARG_LIST ( assignExpression )* )
                {
                Object root_1 = cast(Object)adaptor.nil();
                root_1 = cast(Object)adaptor.becomeRoot(
                cast(Object)adaptor.create(ARG_LIST, "ARG_LIST")
                , root_1);

                // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1201:21: ( assignExpression )*
                while ( stream_assignExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_assignExpression.nextTree());

                }
                stream_assignExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","argumentList"," ",148);
        }
        return retval;
    }
    // $ANTLR end "argumentList"

    // $ANTLR start synpred1_dparser
    public final void synpred1_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:5: ( 'static' 'import' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:266:6: 'static' 'import'
        {
        match(input,275,FOLLOW_275_in_synpred1_dparser2220); if (state.failed) return ;

        match(input,246,FOLLOW_246_in_synpred1_dparser2222); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_dparser

    // $ANTLR start synpred2_dparser
    public final void synpred2_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:5: ( type )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:403:6: type
        {
        pushFollow(FOLLOW_type_in_synpred2_dparser3250);
        type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_dparser

    // $ANTLR start synpred3_dparser
    public final void synpred3_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:7: ( Identifier '!' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:410:8: Identifier '!'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred3_dparser3286); if (state.failed) return ;

        match(input,157,FOLLOW_157_in_synpred3_dparser3288); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_dparser

    // $ANTLR start synpred4_dparser
    public final void synpred4_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:10: ( Identifier '!' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:413:11: Identifier '!'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred4_dparser3346); if (state.failed) return ;

        match(input,157,FOLLOW_157_in_synpred4_dparser3348); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_dparser

    // $ANTLR start synpred5_dparser
    public final void synpred5_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:5: ( Identifier '=' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:473:6: Identifier '='
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred5_dparser3846); if (state.failed) return ;

        match(input,193,FOLLOW_193_in_synpred5_dparser3848); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_dparser

    // $ANTLR start synpred6_dparser
    public final void synpred6_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:584:7: ( 'else' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:584:8: 'else'
        {
        match(input,230,FOLLOW_230_in_synpred6_dparser4540); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_dparser

    // $ANTLR start synpred7_dparser
    public final void synpred7_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:12: ( Identifier '=>' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:638:13: Identifier '=>'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred7_dparser4969); if (state.failed) return ;

        match(input,195,FOLLOW_195_in_synpred7_dparser4971); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_dparser

    // $ANTLR start synpred8_dparser
    public final void synpred8_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:639:12: ( type )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:639:13: type
        {
        pushFollow(FOLLOW_type_in_synpred8_dparser4991);
        type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_dparser

    // $ANTLR start synpred9_dparser
    public final void synpred9_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:12: ( Identifier '=>' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:644:13: Identifier '=>'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred9_dparser5050); if (state.failed) return ;

        match(input,195,FOLLOW_195_in_synpred9_dparser5052); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_dparser

    // $ANTLR start synpred10_dparser
    public final void synpred10_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:645:12: ( type )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:645:13: type
        {
        pushFollow(FOLLOW_type_in_synpred10_dparser5072);
        type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_dparser

    // $ANTLR start synpred11_dparser
    public final void synpred11_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:844:6: ( '[' assignExpression '..' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:844:8: '[' assignExpression '..'
        {
        match(input,204,FOLLOW_204_in_synpred11_dparser7289); if (state.failed) return ;

        pushFollow(FOLLOW_assignExpression_in_synpred11_dparser7291);
        assignExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,Range,FOLLOW_Range_in_synpred11_dparser7293); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_dparser

    // $ANTLR start synpred12_dparser
    public final void synpred12_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:6: ( '[' assignExpression ',' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:846:8: '[' assignExpression ','
        {
        match(input,204,FOLLOW_204_in_synpred12_dparser7339); if (state.failed) return ;

        pushFollow(FOLLOW_assignExpression_in_synpred12_dparser7341);
        assignExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,177,FOLLOW_177_in_synpred12_dparser7343); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_dparser

    // $ANTLR start synpred13_dparser
    public final void synpred13_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:5: ( '.' Identifier '.' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:864:6: '.' Identifier '.'
        {
        match(input,181,FOLLOW_181_in_synpred13_dparser7551); if (state.failed) return ;

        match(input,Identifier,FOLLOW_Identifier_in_synpred13_dparser7553); if (state.failed) return ;

        match(input,181,FOLLOW_181_in_synpred13_dparser7555); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_dparser

    // $ANTLR start synpred14_dparser
    public final void synpred14_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:5: ( '.' Identifier '!' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:865:6: '.' Identifier '!'
        {
        match(input,181,FOLLOW_181_in_synpred14_dparser7578); if (state.failed) return ;

        match(input,Identifier,FOLLOW_Identifier_in_synpred14_dparser7580); if (state.failed) return ;

        match(input,157,FOLLOW_157_in_synpred14_dparser7582); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_dparser

    // $ANTLR start synpred15_dparser
    public final void synpred15_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:867:5: ( Identifier '.' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:867:6: Identifier '.'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred15_dparser7625); if (state.failed) return ;

        match(input,181,FOLLOW_181_in_synpred15_dparser7627); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_dparser

    // $ANTLR start synpred16_dparser
    public final void synpred16_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:868:5: ( Identifier '!' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:868:6: Identifier '!'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred16_dparser7640); if (state.failed) return ;

        match(input,157,FOLLOW_157_in_synpred16_dparser7642); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_dparser

    // $ANTLR start synpred17_dparser
    public final void synpred17_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:869:5: ( Identifier '=>' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:869:6: Identifier '=>'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred17_dparser7655); if (state.failed) return ;

        match(input,195,FOLLOW_195_in_synpred17_dparser7657); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_dparser

    // $ANTLR start synpred18_dparser
    public final void synpred18_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:874:5: ( parameters '=>' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:874:6: parameters '=>'
        {
        pushFollow(FOLLOW_parameters_in_synpred18_dparser7702);
        parameters();

        state._fsp--;
        if (state.failed) return ;

        match(input,195,FOLLOW_195_in_synpred18_dparser7704); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_dparser

    // $ANTLR start synpred19_dparser
    public final void synpred19_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:5: ( Identifier ':' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:978:6: Identifier ':'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred19_dparser8497); if (state.failed) return ;

        match(input,185,FOLLOW_185_in_synpred19_dparser8499); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_dparser

    // $ANTLR start synpred20_dparser
    public final void synpred20_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:979:5: ( 'final' 'switch' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:979:6: 'final' 'switch'
        {
        match(input,234,FOLLOW_234_in_synpred20_dparser8512); if (state.failed) return ;

        match(input,STMT_SWITCH,FOLLOW_STMT_SWITCH_in_synpred20_dparser8514); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_dparser

    // $ANTLR start synpred21_dparser
    public final void synpred21_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:980:5: ( 'static' 'if' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:980:6: 'static' 'if'
        {
        match(input,275,FOLLOW_275_in_synpred21_dparser8527); if (state.failed) return ;

        match(input,STMT_IF,FOLLOW_STMT_IF_in_synpred21_dparser8529); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_dparser

    // $ANTLR start synpred22_dparser
    public final void synpred22_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:981:5: ( 'static' 'assert' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:981:6: 'static' 'assert'
        {
        match(input,275,FOLLOW_275_in_synpred22_dparser8542); if (state.failed) return ;

        match(input,EXP_ASSERT,FOLLOW_EXP_ASSERT_in_synpred22_dparser8544); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_dparser

    // $ANTLR start synpred23_dparser
    public final void synpred23_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:982:5: ( declarationStatement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:982:6: declarationStatement
        {
        pushFollow(FOLLOW_declarationStatement_in_synpred23_dparser8557);
        declarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_dparser

    // $ANTLR start synpred24_dparser
    public final void synpred24_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:983:5: ( 'mixin' '(' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:983:6: 'mixin' '('
        {
        match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_synpred24_dparser8570); if (state.failed) return ;

        match(input,170,FOLLOW_170_in_synpred24_dparser8572); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_dparser

    // $ANTLR start synpred25_dparser
    public final void synpred25_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:984:5: ( 'mixin' Identifier )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:984:6: 'mixin' Identifier
        {
        match(input,EXP_MIXIN,FOLLOW_EXP_MIXIN_in_synpred25_dparser8585); if (state.failed) return ;

        match(input,Identifier,FOLLOW_Identifier_in_synpred25_dparser8587); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_dparser

    // $ANTLR start synpred27_dparser
    public final void synpred27_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:7: ( 'else' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1052:8: 'else'
        {
        match(input,230,FOLLOW_230_in_synpred27_dparser8973); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_dparser

    // $ANTLR start synpred28_dparser
    public final void synpred28_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1088:5: ( 'foreach' '(' parameter ';' expression '..' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1088:6: 'foreach' '(' parameter ';' expression '..'
        {
        match(input,STMT_FOREACH,FOLLOW_STMT_FOREACH_in_synpred28_dparser9220); if (state.failed) return ;

        match(input,170,FOLLOW_170_in_synpred28_dparser9222); if (state.failed) return ;

        pushFollow(FOLLOW_parameter_in_synpred28_dparser9224);
        parameter();

        state._fsp--;
        if (state.failed) return ;

        match(input,186,FOLLOW_186_in_synpred28_dparser9226); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred28_dparser9228);
        expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,Range,FOLLOW_Range_in_synpred28_dparser9230); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_dparser

    // $ANTLR start synpred29_dparser
    public final void synpred29_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1091:5: ( 'foreach_reverse' '(' parameter ';' expression '..' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1091:6: 'foreach_reverse' '(' parameter ';' expression '..'
        {
        match(input,236,FOLLOW_236_in_synpred29_dparser9290); if (state.failed) return ;

        match(input,170,FOLLOW_170_in_synpred29_dparser9292); if (state.failed) return ;

        pushFollow(FOLLOW_parameter_in_synpred29_dparser9294);
        parameter();

        state._fsp--;
        if (state.failed) return ;

        match(input,186,FOLLOW_186_in_synpred29_dparser9296); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred29_dparser9298);
        expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,Range,FOLLOW_Range_in_synpred29_dparser9300); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_dparser

    // $ANTLR start synpred30_dparser
    public final void synpred30_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:7: ( Identifier '!' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1133:8: Identifier '!'
        {
        match(input,Identifier,FOLLOW_Identifier_in_synpred30_dparser9641); if (state.failed) return ;

        match(input,157,FOLLOW_157_in_synpred30_dparser9643); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_dparser

    // $ANTLR start synpred31_dparser
    public final void synpred31_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:7: ( STMT_CATCH '(' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1152:8: STMT_CATCH '('
        {
        match(input,STMT_CATCH,FOLLOW_STMT_CATCH_in_synpred31_dparser9777); if (state.failed) return ;

        match(input,170,FOLLOW_170_in_synpred31_dparser9779); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_dparser

    // $ANTLR start synpred32_dparser
    public final void synpred32_dparser_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:7: ( 'else' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\dparser\\\\dparser.g:1195:8: 'else'
        {
        match(input,230,FOLLOW_230_in_synpred32_dparser10050); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_dparser

    // Delegated rules

    public final bool synpred23_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred20_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred32_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred3_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred17_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred25_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred11_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred27_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred28_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred4_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred13_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred2_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred15_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred24_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred5_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred10_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred30_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred6_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred12_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred29_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred16_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred14_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred8_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred18_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred19_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred7_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred21_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred1_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred22_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred31_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred9_dparser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_dparser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }



     protected DFA5 dfa5;
     protected DFA28 dfa28;
     protected DFA35 dfa35;
     protected DFA87 dfa87;
     protected DFA117 dfa117;
     protected DFA118 dfa118;
     protected DFA132 dfa132;

    protected void createDFAs()
  {
    dfa5 = new DFA5(this);
    dfa28 = new DFA28(this);
    dfa35 = new DFA35(this);
    dfa87 = new DFA87(this);
    dfa117 = new DFA117(this);
    dfa118 = new DFA118(this);
    dfa132 = new DFA132(this);
  } 



    const static short DFA5_eot[52] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA5_eof[52] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA5_min[52] = [
    	12,28,76,28,-1,-1,-1,-1,-1,-1,170,170,-1,140,-1,-1,177,76,-1,-1,-1,
    	     -1,76,76,76,0,76,177,177,177,-1,-1,177,76,0,0,76,76,0,76,0,177,
    	     177,177,177,0,76,0,0,0,177,0
    ];
    const static int DFA5_max[52] = [
    	291,283,76,284,-1,-1,-1,-1,-1,-1,193,193,-1,170,-1,-1,193,284,-1,-1,
    	     -1,-1,76,76,76,0,76,186,186,193,-1,-1,186,76,0,0,76,76,0,76,0,
    	     186,186,186,186,0,76,0,0,0,186,0
    ];
    const static short DFA5_accept[52] = [
    	-1,-1,-1,-1,4,5,6,7,8,9,-1,-1,13,-1,10,12,-1,-1,3,11,15,14,-1,-1,-1,
    	     -1,-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1
    ];
    const static short DFA5_special[52] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,3,4,-1,-1,5,-1,6,-1,-1,-1,-1,7,
    	     -1,8,9,1,-1,0
    ];

    /*const static short DFA5_transition[][]=[
     [
    	32
    ],
     [
    	44
    ],
     [
    	24, -1, -1, -1, 23, -1, -1, -1, 26, 25, -1, -1, -1, -1, -1, -1, 22
    ],
     [
    	27
    ],
     [
    	42
    ],
     [
    	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 13, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 7, -1, 
    		-1, -1, -1, -1, 6, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 7, 7, 
    		7, 7, -1, -1, 7, 7, 7, 11, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, -1, 
    		-1, -1, -1, -1, -1, -1, 7, 7, 7, 2, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 7, 
    		7, 1, -1, 7, 7, 7, 7, 10, 7, 7, -1, -1, -1, -1, -1, -1, -1, 8
    ],
     [
    	21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 
    		7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, 
    		-1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 
    		7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7, 18
    ],
     [
    	24, -1, -1, -1, 23, -1, -1, -1, 26, 35
    ],
     [
    	24, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ],
     [
    	24, -1, -1, -1, 33, -1, -1, -1, 26, 45
    ],
     [
    	24, -1, -1, -1, 37, -1, -1, -1, 39, 48
    ],
     [
    	24, -1, -1, -1, 46, -1, -1, -1, 39, 51
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 7, -1, -1, -1, 18, 18, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 18
    ],
     [
    	-1
    ],
     [
    	28
    ],
     [
    	41
    ],
     [
    	43
    ],
     [
    	50
    ],
     [
    	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 19
    ],
     [
    	24, -1, -1, -1, 33, -1, -1, -1, 26, 34
    ],
     [
    	16
    ],
     [
    	29
    ],
     [
    	24, -1, -1, -1, 37, -1, -1, -1, 39, 38, -1, -1, -1, -1, -1, -1, 36
    ],
     [
    	24, -1, -1, -1, -1, -1, -1, -1, -1, 40
    ],
     [
    	24, -1, -1, -1, 46, -1, -1, -1, 39, 47
    ],
     [
    	7, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 7, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 
    		7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, 
    		-1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 2, 7, 7, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 
    		7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7
    ],

    []];*/

    const static short dparserParserdfa5_transition0[] = [
    	32
    ];
    const static short dparserParserdfa5_transition1[] = [
    	44
    ];
    const static short dparserParserdfa5_transition2[] = [
    	24, -1, -1, -1, 23, -1, -1, -1, 26, 25, -1, -1, -1, -1, -1, -1, 22
    ];
    const static short dparserParserdfa5_transition3[] = [
    	27
    ];
    const static short dparserParserdfa5_transition4[] = [
    	42
    ];
    const static short dparserParserdfa5_transition5[] = [
    	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 13, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 7, -1, 
    		-1, -1, -1, -1, 6, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 7, 7, 
    		7, 7, -1, -1, 7, 7, 7, 11, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, -1, 
    		-1, -1, -1, -1, -1, -1, 7, 7, 7, 2, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 7, 
    		7, 1, -1, 7, 7, 7, 7, 10, 7, 7, -1, -1, -1, -1, -1, -1, -1, 8
    ];
    const static short dparserParserdfa5_transition6[] = [
    	21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20
    ];
    const static short dparserParserdfa5_transition7[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 
    		7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, 
    		-1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 
    		7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7, 18
    ];
    const static short dparserParserdfa5_transition8[] = [
    	24, -1, -1, -1, 23, -1, -1, -1, 26, 35
    ];
    const static short dparserParserdfa5_transition9[] = [
    	24, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ];
    const static short dparserParserdfa5_transition10[] = [
    	24, -1, -1, -1, 33, -1, -1, -1, 26, 45
    ];
    const static short dparserParserdfa5_transition11[] = [
    	24, -1, -1, -1, 37, -1, -1, -1, 39, 48
    ];
    const static short dparserParserdfa5_transition12[] = [
    	24, -1, -1, -1, 46, -1, -1, -1, 39, 51
    ];
    const static short dparserParserdfa5_transition13[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 7, -1, -1, -1, 18, 18, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 18
    ];
    const static short dparserParserdfa5_transition14[] = [
    	-1
    ];
    const static short dparserParserdfa5_transition15[] = [
    	28
    ];
    const static short dparserParserdfa5_transition16[] = [
    	41
    ];
    const static short dparserParserdfa5_transition17[] = [
    	43
    ];
    const static short dparserParserdfa5_transition18[] = [
    	50
    ];
    const static short dparserParserdfa5_transition19[] = [
    	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 19
    ];
    const static short dparserParserdfa5_transition20[] = [
    	24, -1, -1, -1, 33, -1, -1, -1, 26, 34
    ];
    const static short dparserParserdfa5_transition21[] = [
    	16
    ];
    const static short dparserParserdfa5_transition22[] = [
    	29
    ];
    const static short dparserParserdfa5_transition23[] = [
    	24, -1, -1, -1, 37, -1, -1, -1, 39, 38, -1, -1, -1, -1, -1, -1, 36
    ];
    const static short dparserParserdfa5_transition24[] = [
    	24, -1, -1, -1, -1, -1, -1, -1, -1, 40
    ];
    const static short dparserParserdfa5_transition25[] = [
    	24, -1, -1, -1, 46, -1, -1, -1, 39, 47
    ];
    const static short dparserParserdfa5_transition26[] = [
    	7, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 7, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 7, 7, 
    		7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, 7, -1, 7, -1, -1, 7, -1, 7, 7, 
    		-1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 2, 7, 7, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, 7, 7, 
    		7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7
    ];

    const static short DFA5_transition[][] = [
    	dparserParserdfa5_transition5,
    	dparserParserdfa5_transition26,
    	dparserParserdfa5_transition21,
    	dparserParserdfa5_transition7,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa5_transition19,
    	dparserParserdfa5_transition19,
    	null, /* fixme? */
    	dparserParserdfa5_transition6,
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa5_transition2,
    	dparserParserdfa5_transition13,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa5_transition3,
    	dparserParserdfa5_transition15,
    	dparserParserdfa5_transition22,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition0,
    	dparserParserdfa5_transition20,
    	dparserParserdfa5_transition8,
    	dparserParserdfa5_transition23,
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa5_transition24,
    	dparserParserdfa5_transition16,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition4,
    	dparserParserdfa5_transition17,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition1,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition10,
    	dparserParserdfa5_transition25,
    	dparserParserdfa5_transition11,
    	dparserParserdfa5_transition9,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition18,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition14,
    	dparserParserdfa5_transition12,
    	dparserParserdfa5_transition14,
    ];







    /*static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;
    */
    /*static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }*/

    class DFA5 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = cast(short[])DFA5_eot;
            this.eof = cast(short[])DFA5_eof;
            this.min = cast(int[])DFA5_min;
            this.max = cast(int[])DFA5_max;
            this.accept = cast(short[])DFA5_accept;
            this.special = cast(short[])DFA5_special;
            this.transition = cast(short[][])DFA5_transition;
        }
        public string getDescription() {
            return "265:1: declDef : ( ( 'static' 'import' )=> ( importDeclaration ) | importDeclaration | enumDeclaration | classDeclaration | interfaceDeclaration | aggregateDeclaration | declaration | ctorDeclaration | unittestDeclaration | conditionalDeclaration | dvSpecification | staticAssert | templateDeclaration | templateMixinDeclaration | mixinDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_51);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_49);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_25);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_34);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_35);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_38);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_40);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_45);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_47);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_dparser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index5_48);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA28_eot[134] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static short DFA28_eof[134] = [
    	3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static int DFA28_min[134] = [
    	12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static int DFA28_max[134] = [
    	291,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA28_accept[134] = [
    	-1,1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1
    ];
    const static short DFA28_special[134] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA28_transition[][]=[
     [
    	3, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    		3, -1, 3, -1, 3, 3, -1, 3, -1, -1, 3, -1, -1, -1, 3, 3, -1, -1, 3, 
    		3, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 3, 3, -1, 3, -1, -1, -1, 3, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 
    		-1, -1, -1, 3, -1, 3, 3, 3, -1, 3, -1, 3, 3, -1, 3, -1, 3, 3, -1, 
    		3, 3, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 3, -1, 3, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, 3, 3, 
    		3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    		-1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    		2, 3, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, 3, 
    		3, 3, 3, -1, 3, 3, -1, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 3, 3, 
    		3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 
    		3, 3, 3, 3, 3, 3, 3, 3, 3
    ],

    []];*/

    const static short dparserParserdfa28_transition0[] = [
    	3, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    		3, -1, 3, -1, 3, 3, -1, 3, -1, -1, 3, -1, -1, -1, 3, 3, -1, -1, 3, 
    		3, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 3, 3, -1, 3, -1, -1, -1, 3, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 
    		-1, -1, -1, 3, -1, 3, 3, 3, -1, 3, -1, 3, 3, -1, 3, -1, 3, 3, -1, 
    		3, 3, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 3, -1, 3, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, 3, 3, 
    		3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    		-1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    		2, 3, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, 3, 
    		3, 3, 3, -1, 3, 3, -1, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 3, 3, 
    		3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 
    		3, 3, 3, 3, 3, 3, 3, 3, 3
    ];

    const static short DFA28_transition[][] = [
    	dparserParserdfa28_transition0,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;
    */
    /*static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }*/

    class DFA28 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = cast(short[])DFA28_eot;
            this.eof = cast(short[])DFA28_eof;
            this.min = cast(int[])DFA28_min;
            this.max = cast(int[])DFA28_max;
            this.accept = cast(short[])DFA28_accept;
            this.special = cast(short[])DFA28_special;
            this.transition = cast(short[][])DFA28_transition;
        }
        public string getDescription() {
            return "423:4: ( options {greedy=true; } : '*' -> ^( TYPE_POINTER $type) | '[' ( -> ^( TYPE_DYN_ARRAY $type) | assignExpression ( -> ^( TYPE_STATIC_ARRAY assignExpression $type) | '..' assignExpression -> ^( REF_TYPE_SLICE assignExpression assignExpression $type) ) ) ']' )?";
        }
    }


    const static short DFA35_eot[10] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA35_eof[10] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA35_min[10] = [
    	76,177,76,76,-1,-1,177,177,76,177
    ];
    const static int DFA35_max[10] = [
    	76,193,76,76,-1,-1,186,186,76,186
    ];
    const static short DFA35_accept[10] = [
    	-1,-1,-1,-1,1,2,-1,-1,-1,-1
    ];
    const static short DFA35_special[10] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA35_transition[][]=[
     [
    	4, -1, -1, -1, 3, -1, -1, -1, 5, 4
    ],
     [
    	4, -1, -1, -1, 8, -1, -1, -1, 5, 4
    ],
     [
    	6
    ],
     [
    	4, -1, -1, -1, 3, -1, -1, -1, 5, 4, -1, -1, -1, -1, -1, -1, 2
    ],
     [
    	1
    ],
     [
    	9
    ],
     [
    	7
    ],

    []];*/

    const static short dparserParserdfa35_transition0[] = [
    	4, -1, -1, -1, 3, -1, -1, -1, 5, 4
    ];
    const static short dparserParserdfa35_transition1[] = [
    	4, -1, -1, -1, 8, -1, -1, -1, 5, 4
    ];
    const static short dparserParserdfa35_transition2[] = [
    	6
    ];
    const static short dparserParserdfa35_transition3[] = [
    	4, -1, -1, -1, 3, -1, -1, -1, 5, 4, -1, -1, -1, -1, -1, -1, 2
    ];
    const static short dparserParserdfa35_transition4[] = [
    	1
    ];
    const static short dparserParserdfa35_transition5[] = [
    	9
    ];
    const static short dparserParserdfa35_transition6[] = [
    	7
    ];

    const static short DFA35_transition[][] = [
    	dparserParserdfa35_transition4,
    	dparserParserdfa35_transition3,
    	dparserParserdfa35_transition2,
    	dparserParserdfa35_transition6,
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa35_transition1,
    	dparserParserdfa35_transition0,
    	dparserParserdfa35_transition5,
    	dparserParserdfa35_transition1,
    ];







    /*static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;
    */
    /*static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }*/

    class DFA35 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = cast(short[])DFA35_eot;
            this.eof = cast(short[])DFA35_eof;
            this.min = cast(int[])DFA35_min;
            this.max = cast(int[])DFA35_max;
            this.accept = cast(short[])DFA35_accept;
            this.special = cast(short[])DFA35_special;
            this.transition = cast(short[][])DFA35_transition;
        }
        public string getDescription() {
            return "467:1: importFragment : ( importEntry -> importEntry | importEntry ':' Identifier -> ^( IMPORT_BINDING importEntry Identifier ) );";
        }
    }


    const static short DFA87_eot[134] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static short DFA87_eof[134] = [
    	2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static int DFA87_min[134] = [
    	12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static int DFA87_max[134] = [
    	291,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA87_accept[134] = [
    	-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];
    const static short DFA87_special[134] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA87_transition[][]=[
     [
    	2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
    		2, -1, 2, -1, 2, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, -1, 2, 
    		2, -1, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, 2, -1, 2, 2, 2, -1, 2, -1, 2, 2, -1, 2, -1, 2, 2, -1, 
    		2, 2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    		-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 
    		2, 2, 2, -1, 2, 2, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, 2, 2, 
    		2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, 2
    ],

    []];*/

    const static short dparserParserdfa87_transition0[] = [
    	2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
    		2, -1, 2, -1, 2, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, -1, 2, 
    		2, -1, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, 2, -1, 2, 2, 2, -1, 2, -1, 2, 2, -1, 2, -1, 2, 2, -1, 
    		2, 2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    		-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 
    		2, 2, 2, -1, 2, 2, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, 2, 2, 
    		2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 
    		2, 2, 2, 2, 2, 2, 2, 2, 2
    ];

    const static short DFA87_transition[][] = [
    	dparserParserdfa87_transition0,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;
    */
    /*static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }*/

    class DFA87 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = cast(short[])DFA87_eot;
            this.eof = cast(short[])DFA87_eof;
            this.min = cast(int[])DFA87_min;
            this.max = cast(int[])DFA87_max;
            this.accept = cast(short[])DFA87_accept;
            this.special = cast(short[])DFA87_special;
            this.transition = cast(short[][])DFA87_transition;
        }
        public string getDescription() {
            return "805:21: ( options {greedy=true; } : '(' ! argumentList ')' !)?";
        }
    }


    const static short DFA117_eot[82] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA117_eof[82] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA117_min[82] = [
    	15,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,
    	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1
    ];
    const static int DFA117_max[82] = [
    	289,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,
    	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1
    ];
    const static short DFA117_accept[82] = [
    	-1,-1,-1,-1,-1,-1,5,5,5,5,5,5,5,5,5,-1,5,-1,5,-1,-1,5,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,9,10,11,12,13,-1,14,16,17,18,19,20,22,24,
    	     25,26,1,6,8,2,15,3,27,4,23,21,7
    ];
    const static short DFA117_special[82] = [
    	0,1,2,3,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,7,-1,8,9,-1,10,11,12,13,
    	     14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,
    	     35,36,37,38,39,40,41,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA117_transition[][]=[
     [
    	25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 36, -1, 
    		54, -1, 53, 33, -1, 43, -1, -1, 34, -1, -1, -1, 35, 29, -1, -1, 37, 
    		52, -1, -1, 28, 27, 44, 39, 38, -1, -1, -1, -1, 24, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 23, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 69, -1, 63, -1, -1, -1, 62, -1, -1, 57, -1, 
    		-1, -1, 58, 59, -1, 65, 55, -1, -1, 70, 64, 19, 61, 20, 68, 67, 56, 
    		66, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		45, -1, 30, -1, 47, -1, 48, 46, -1, -1, 49, -1, -1, 22, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, 
    		-1, 31, -1, -1, -1, -1, -1, -1, 18, 6, -1, -1, 7, 21, 21, 21, 21, 
    		21, -1, -1, 8, 21, 21, 4, 41, 9, -1, 21, -1, -1, 11, -1, 2, 21, 59, 
    		40, -1, -1, -1, -1, -1, 21, 21, 12, 42, 13, 21, 21, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 15, 16, -1, 
    		17, 21, 14, 21, 5, -1, 21, 21, 21, 21, 3, 21, 21, -1, -1, -1, -1, 
    		-1, 51
    ],
     [
    	-1
    ],

    []];*/

    const static short dparserParserdfa117_transition0[] = [
    	25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 36, -1, 
    		54, -1, 53, 33, -1, 43, -1, -1, 34, -1, -1, -1, 35, 29, -1, -1, 37, 
    		52, -1, -1, 28, 27, 44, 39, 38, -1, -1, -1, -1, 24, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 23, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 69, -1, 63, -1, -1, -1, 62, -1, -1, 57, -1, 
    		-1, -1, 58, 59, -1, 65, 55, -1, -1, 70, 64, 19, 61, 20, 68, 67, 56, 
    		66, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		45, -1, 30, -1, 47, -1, 48, 46, -1, -1, 49, -1, -1, 22, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, 
    		-1, 31, -1, -1, -1, -1, -1, -1, 18, 6, -1, -1, 7, 21, 21, 21, 21, 
    		21, -1, -1, 8, 21, 21, 4, 41, 9, -1, 21, -1, -1, 11, -1, 2, 21, 59, 
    		40, -1, -1, -1, -1, -1, 21, 21, 12, 42, 13, 21, 21, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 15, 16, -1, 
    		17, 21, 14, 21, 5, -1, 21, 21, 21, 21, 3, 21, 21, -1, -1, -1, -1, 
    		-1, 51
    ];
    const static short dparserParserdfa117_transition1[] = [
    	-1
    ];

    const static short DFA117_transition[][] = [
    	dparserParserdfa117_transition0,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	dparserParserdfa117_transition1,
    	null, /* fixme? */
    	dparserParserdfa117_transition1,
    	null, /* fixme? */
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	null, /* fixme? */
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	dparserParserdfa117_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;
    */
    /*static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }*/

    class DFA117 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = cast(short[])DFA117_eot;
            this.eof = cast(short[])DFA117_eof;
            this.min = cast(int[])DFA117_min;
            this.max = cast(int[])DFA117_max;
            this.accept = cast(short[])DFA117_accept;
            this.special = cast(short[])DFA117_special;
            this.transition = cast(short[][])DFA117_transition;
        }
        public string getDescription() {
            return "977:1: nonEmptyStatementNoCaseNoDefault : ( ( Identifier ':' )=> ( labeledStatement ) | ( 'final' 'switch' )=> ( finalSwitchStatement ) | ( 'static' 'if' )=> ( conditionalStatement ) | ( 'static' 'assert' )=> ( staticAssert ) | ( declarationStatement )=> ( declarationStatement ) | ( 'mixin' '(' )=> ( expressionStatement ) | ( 'mixin' Identifier )=> ( templateMixin ) | expressionStatement | ifStatement | whileStatement | doStatement | forStatement | foreachStatement | switchStatement | finalSwitchStatement | continueStatement | breakStatement | returnStatement | gotoStatement | withStatement | synchronizedStatement | tryStatement | scopeGuardStatement | throwStatement | asmStatement | pragmaStatement | conditionalStatement );";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_0 = input.LA(1);

                         
                        int index117_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_0==Identifier) ) {s = 1;}

                        else if ( (LA117_0==234) ) {s = 2;}

                        else if ( (LA117_0==281) ) {s = 3;}

                        else if ( (LA117_0==225) ) {s = 4;}

                        else if ( (LA117_0==275) ) {s = 5;}

                        else if ( (LA117_0==211) && (synpred23_dparser())) {s = 6;}

                        else if ( (LA117_0==214) && (synpred23_dparser())) {s = 7;}

                        else if ( (LA117_0==222) && (synpred23_dparser())) {s = 8;}

                        else if ( (LA117_0==227) && (synpred23_dparser())) {s = 9;}

                        else if ( (LA117_0==ENUM_DECLARATION) && (synpred23_dparser())) {s = 10;}

                        else if ( (LA117_0==232) && (synpred23_dparser())) {s = 11;}

                        else if ( (LA117_0==245) && (synpred23_dparser())) {s = 12;}

                        else if ( (LA117_0==247) && (synpred23_dparser())) {s = 13;}

                        else if ( (LA117_0==273) && (synpred23_dparser())) {s = 14;}

                        else if ( (LA117_0==268) ) {s = 15;}

                        else if ( (LA117_0==269) && (synpred23_dparser())) {s = 16;}

                        else if ( (LA117_0==271) ) {s = 17;}

                        else if ( (LA117_0==210) && (synpred23_dparser())) {s = 18;}

                        else if ( (LA117_0==STMT_SCOPE) ) {s = 19;}

                        else if ( (LA117_0==STMT_SYNCHRONIZED) ) {s = 20;}

                        else if ( ((LA117_0 >=215  && LA117_0<=219)||(LA117_0 >=223  && LA117_0<=224)||LA117_0==229||LA117_0==235||(LA117_0 >=243  && LA117_0<=244)||(LA117_0 >=248  && LA117_0<=249)||LA117_0==267||LA117_0==272||LA117_0==274||(LA117_0 >=277  && LA117_0<=280)||(LA117_0 >=282  && LA117_0<=283)) && (synpred23_dparser())) {s = 21;}

                        else if ( (LA117_0==181) ) {s = 22;}

                        else if ( (LA117_0==IntegerLiteral) ) {s = 23;}

                        else if ( (LA117_0==FloatLiteral) ) {s = 24;}

                        else if ( (LA117_0==CharacterLiteral) ) {s = 25;}

                        else if ( (LA117_0==StringLiteral) ) {s = 26;}

                        else if ( (LA117_0==EXP_THIS) ) {s = 27;}

                        else if ( (LA117_0==EXP_SUPER) ) {s = 28;}

                        else if ( (LA117_0==EXP_LITERAL_NULL) ) {s = 29;}

                        else if ( (LA117_0==170) ) {s = 30;}

                        else if ( (LA117_0==203) ) {s = 31;}

                        else if ( (LA117_0==195) ) {s = 32;}

                        else if ( (LA117_0==EXP_DOLLAR) ) {s = 33;}

                        else if ( (LA117_0==EXP_LITERAL_FILE) ) {s = 34;}

                        else if ( (LA117_0==EXP_LITERAL_LINE) ) {s = 35;}

                        else if ( (LA117_0==EXP_ASSERT) ) {s = 36;}

                        else if ( (LA117_0==EXP_MIXIN) ) {s = 37;}

                        else if ( (LA117_0==EXP_TYPEOF) ) {s = 38;}

                        else if ( (LA117_0==EXP_TYPEID) ) {s = 39;}

                        else if ( (LA117_0==237) ) {s = 40;}

                        else if ( (LA117_0==226) ) {s = 41;}

                        else if ( (LA117_0==246) ) {s = 42;}

                        else if ( (LA117_0==EXP_IS) ) {s = 43;}

                        else if ( (LA117_0==EXP_TRAITS) ) {s = 44;}

                        else if ( (LA117_0==168) ) {s = 45;}

                        else if ( (LA117_0==175) ) {s = 46;}

                        else if ( (LA117_0==172) ) {s = 47;}

                        else if ( (LA117_0==174) ) {s = 48;}

                        else if ( (LA117_0==178) ) {s = 49;}

                        else if ( (LA117_0==157) ) {s = 50;}

                        else if ( (LA117_0==289) ) {s = 51;}

                        else if ( (LA117_0==EXP_NEW) ) {s = 52;}

                        else if ( (LA117_0==EXP_DELETE) ) {s = 53;}

                        else if ( (LA117_0==EXP_CAST) ) {s = 54;}

                        else if ( (LA117_0==STMT_IF) ) {s = 55;}

                        else if ( (LA117_0==STMT_WHILE) ) {s = 56;}

                        else if ( (LA117_0==STMT_DO) ) {s = 57;}

                        else if ( (LA117_0==STMT_FOR) ) {s = 58;}

                        else if ( (LA117_0==STMT_FOREACH||LA117_0==236) ) {s = 59;}

                        else if ( (LA117_0==STMT_SWITCH) ) {s = 61;}

                        else if ( (LA117_0==STMT_CONTINUE) ) {s = 62;}

                        else if ( (LA117_0==STMT_BREAK) ) {s = 63;}

                        else if ( (LA117_0==STMT_RETURN) ) {s = 64;}

                        else if ( (LA117_0==STMT_GOTO) ) {s = 65;}

                        else if ( (LA117_0==STMT_WITH) ) {s = 66;}

                        else if ( (LA117_0==STMT_TRY) ) {s = 67;}

                        else if ( (LA117_0==STMT_THROW) ) {s = 68;}

                        else if ( (LA117_0==STMT_ASM) ) {s = 69;}

                        else if ( (LA117_0==STMT_PRAGMA) ) {s = 70;}

                         
                        input.seek(index117_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_dparser()) ) {s = 71;}

                        else if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred20_dparser()) ) {s = 74;}

                        else if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index117_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_3 = input.LA(1);

                         
                        int index117_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred21_dparser()) ) {s = 76;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index117_3);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred21_dparser()) ) {s = 76;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index117_4);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred21_dparser()) ) {s = 76;}

                        else if ( (synpred22_dparser()) ) {s = 78;}

                        else if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index117_5);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_15);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_17);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_19 = input.LA(1);

                         
                        int index117_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index117_19);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_20 = input.LA(1);

                         
                        int index117_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index117_20);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_22 = input.LA(1);

                         
                        int index117_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_dparser()) ) {s = 21;}

                        else if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_22);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_23 = input.LA(1);

                         
                        int index117_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_23);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_24 = input.LA(1);

                         
                        int index117_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_24);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_25 = input.LA(1);

                         
                        int index117_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_25);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_26 = input.LA(1);

                         
                        int index117_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_26);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_27 = input.LA(1);

                         
                        int index117_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_27);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_28 = input.LA(1);

                         
                        int index117_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_28);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA117_29 = input.LA(1);

                         
                        int index117_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_29);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA117_30 = input.LA(1);

                         
                        int index117_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_30);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA117_31 = input.LA(1);

                         
                        int index117_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_31);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA117_32 = input.LA(1);

                         
                        int index117_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_32);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA117_33 = input.LA(1);

                         
                        int index117_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_33);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA117_34 = input.LA(1);

                         
                        int index117_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_34);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA117_35 = input.LA(1);

                         
                        int index117_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_35);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA117_36 = input.LA(1);

                         
                        int index117_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_36);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA117_37 = input.LA(1);

                         
                        int index117_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (synpred25_dparser()) ) {s = 81;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_37);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA117_38 = input.LA(1);

                         
                        int index117_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_38);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA117_39 = input.LA(1);

                         
                        int index117_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_39);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA117_40 = input.LA(1);

                         
                        int index117_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_40);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA117_41 = input.LA(1);

                         
                        int index117_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_41);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA117_42 = input.LA(1);

                         
                        int index117_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_42);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA117_43 = input.LA(1);

                         
                        int index117_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_43);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA117_44 = input.LA(1);

                         
                        int index117_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_44);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA117_45 = input.LA(1);

                         
                        int index117_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_45);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA117_46 = input.LA(1);

                         
                        int index117_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_46);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA117_47 = input.LA(1);

                         
                        int index117_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_47);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA117_48 = input.LA(1);

                         
                        int index117_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_48);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA117_49 = input.LA(1);

                         
                        int index117_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_49);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA117_50 = input.LA(1);

                         
                        int index117_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_50);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA117_51 = input.LA(1);

                         
                        int index117_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_51);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA117_52 = input.LA(1);

                         
                        int index117_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_52);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA117_53 = input.LA(1);

                         
                        int index117_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_53);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA117_54 = input.LA(1);

                         
                        int index117_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred24_dparser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index117_54);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA118_eot[79] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA118_eof[79] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA118_min[79] = [
    	15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA118_max[79] = [
    	289,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA118_accept[79] = [
    	-1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    	     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    	     1,1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1
    ];
    const static short DFA118_special[79] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA118_transition[][]=[
     [
    	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, 38, -1, 
    		56, -1, 55, 35, -1, 45, -1, -1, 36, -1, -1, -1, 37, 31, -1, -1, 39, 
    		54, -1, -1, 30, 29, 46, 41, 40, -1, -1, -1, -1, 26, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 25, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 71, -1, 65, 1, 1, -1, 64, -1, 1, 59, -1, 1, 
    		-1, 60, 61, -1, 67, 57, -1, -1, 72, 66, 21, 63, 22, 70, 69, 58, 68, 
    		-1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 
    		-1, 32, -1, 49, -1, 50, 48, -1, -1, 51, -1, -1, 24, -1, -1, -1, -1, 
    		2, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 
    		33, -1, -1, -1, -1, -1, -1, 20, 8, -1, -1, 9, 23, 23, 23, 23, 23, 
    		-1, -1, 10, 23, 23, 6, 43, 11, -1, 23, 1, -1, 13, -1, 4, 23, 62, 42, 
    		-1, -1, -1, -1, -1, 23, 23, 14, 44, 15, 23, 23, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 17, 18, -1, 19, 
    		23, 16, 23, 7, -1, 23, 23, 23, 23, 5, 23, 23, 75, -1, -1, -1, 1, 53
    ],

    []];*/

    const static short dparserParserdfa118_transition0[] = [
    	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, 38, -1, 
    		56, -1, 55, 35, -1, 45, -1, -1, 36, -1, -1, -1, 37, 31, -1, -1, 39, 
    		54, -1, -1, 30, 29, 46, 41, 40, -1, -1, -1, -1, 26, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 25, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 71, -1, 65, 1, 1, -1, 64, -1, 1, 59, -1, 1, 
    		-1, 60, 61, -1, 67, 57, -1, -1, 72, 66, 21, 63, 22, 70, 69, 58, 68, 
    		-1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 
    		-1, 32, -1, 49, -1, 50, 48, -1, -1, 51, -1, -1, 24, -1, -1, -1, -1, 
    		2, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 
    		33, -1, -1, -1, -1, -1, -1, 20, 8, -1, -1, 9, 23, 23, 23, 23, 23, 
    		-1, -1, 10, 23, 23, 6, 43, 11, -1, 23, 1, -1, 13, -1, 4, 23, 62, 42, 
    		-1, -1, -1, -1, -1, 23, 23, 14, 44, 15, 23, 23, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 17, 18, -1, 19, 
    		23, 16, 23, 7, -1, 23, 23, 23, 23, 5, 23, 23, 75, -1, -1, -1, 1, 53
    ];

    const static short DFA118_transition[][] = [
    	dparserParserdfa118_transition0,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;
    */
    /*static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }*/

    class DFA118 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = cast(short[])DFA118_eot;
            this.eof = cast(short[])DFA118_eof;
            this.min = cast(int[])DFA118_min;
            this.max = cast(int[])DFA118_max;
            this.accept = cast(short[])DFA118_accept;
            this.special = cast(short[])DFA118_special;
            this.transition = cast(short[][])DFA118_transition;
        }
        public string getDescription() {
            return "()* loopback of 1015:5: ( options {greedy=true; } : statementNoCaseNoDefault )*";
        }
    }


    const static short DFA132_eot[74] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA132_eof[74] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA132_min[74] = [
    	15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA132_max[74] = [
    	289,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA132_accept[74] = [
    	-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA132_special[74] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA132_transition[][]=[
     [
    	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 2, 
    		-1, 2, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, 
    		2, 2, 2, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 2, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, -1, -1, 2, 2, -1, 2, 
    		2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 2, -1, -1, 
    		2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
    		-1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 2, 2, 2, -1, 2, -1, -1, 2, 
    		-1, 2, 2, 2, 2, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, 
    		2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2
    ],

    []];*/

    const static short dparserParserdfa132_transition0[] = [
    	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 2, 
    		-1, 2, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, 
    		2, 2, 2, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 2, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, -1, -1, 2, 2, -1, 2, 
    		2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 2, -1, -1, 
    		2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
    		-1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 2, 2, 2, -1, 2, -1, -1, 2, 
    		-1, 2, 2, 2, 2, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, 
    		2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2
    ];

    const static short DFA132_transition[][] = [
    	dparserParserdfa132_transition0,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;
    */
    /*static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }*/

    class DFA132 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = cast(short[])DFA132_eot;
            this.eof = cast(short[])DFA132_eof;
            this.min = cast(int[])DFA132_min;
            this.max = cast(int[])DFA132_max;
            this.accept = cast(short[])DFA132_accept;
            this.special = cast(short[])DFA132_special;
            this.transition = cast(short[][])DFA132_transition;
        }
        public string getDescription() {
            return "1140:5: ( options {greedy=true; } : '(' ! expression ')' !)?";
        }
    }
 

    public static BitSet FOLLOW_moduleDeclaration_in_prog2103 ;

    //public static final BitSet FOLLOW_moduleDeclaration_in_prog2103 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000080FEFB800L});


    static this()
    {
    //FOLLOW_moduleDeclaration_in_prog2103 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000080FEFB800L]);

    }public static BitSet FOLLOW_declDef_in_prog2106 ;

    //public static final BitSet FOLLOW_declDef_in_prog2106 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000080FEFB800L});


    static this()
    {
    //FOLLOW_declDef_in_prog2106 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000080FEFB800L]);

    }public static BitSet FOLLOW_EOF_in_prog2109 ;

    //public static final BitSet FOLLOW_EOF_in_prog2109 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EOF_in_prog2109 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_MODULE_DECLARATION_in_moduleDeclaration2142 ;

    //public static final BitSet FOLLOW_MODULE_DECLARATION_in_moduleDeclaration2142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_MODULE_DECLARATION_in_moduleDeclaration2142 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_moduleFullyQualifiedName_in_moduleDeclaration2145 ;

    //public static final BitSet FOLLOW_moduleFullyQualifiedName_in_moduleDeclaration2145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_moduleFullyQualifiedName_in_moduleDeclaration2145 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_moduleDeclaration2147 ;

    //public static final BitSet FOLLOW_186_in_moduleDeclaration2147 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_moduleDeclaration2147 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_moduleFullyQualifiedName2163 ;

    //public static final BitSet FOLLOW_Identifier_in_moduleFullyQualifiedName2163 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_moduleFullyQualifiedName2163 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declDef_in_declarationBlock2187 ;

    //public static final BitSet FOLLOW_declDef_in_declarationBlock2187 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declDef_in_declarationBlock2187 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_declarationBlock2191 ;

    //public static final BitSet FOLLOW_284_in_declarationBlock2191 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_284_in_declarationBlock2191 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_declDef_in_declarationBlock2193 ;

    //public static final BitSet FOLLOW_declDef_in_declarationBlock2193 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_declDef_in_declarationBlock2193 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_288_in_declarationBlock2196 ;

    //public static final BitSet FOLLOW_288_in_declarationBlock2196 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_declarationBlock2196 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_importDeclaration_in_declDef2227 ;

    //public static final BitSet FOLLOW_importDeclaration_in_declDef2227 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_importDeclaration_in_declDef2227 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_importDeclaration_in_declDef2234 ;

    //public static final BitSet FOLLOW_importDeclaration_in_declDef2234 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_importDeclaration_in_declDef2234 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_enumDeclaration_in_declDef2240 ;

    //public static final BitSet FOLLOW_enumDeclaration_in_declDef2240 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_enumDeclaration_in_declDef2240 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_classDeclaration_in_declDef2246 ;

    //public static final BitSet FOLLOW_classDeclaration_in_declDef2246 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classDeclaration_in_declDef2246 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_interfaceDeclaration_in_declDef2252 ;

    //public static final BitSet FOLLOW_interfaceDeclaration_in_declDef2252 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_interfaceDeclaration_in_declDef2252 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_aggregateDeclaration_in_declDef2258 ;

    //public static final BitSet FOLLOW_aggregateDeclaration_in_declDef2258 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_aggregateDeclaration_in_declDef2258 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declaration_in_declDef2264 ;

    //public static final BitSet FOLLOW_declaration_in_declDef2264 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declaration_in_declDef2264 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ctorDeclaration_in_declDef2270 ;

    //public static final BitSet FOLLOW_ctorDeclaration_in_declDef2270 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ctorDeclaration_in_declDef2270 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_unittestDeclaration_in_declDef2276 ;

    //public static final BitSet FOLLOW_unittestDeclaration_in_declDef2276 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unittestDeclaration_in_declDef2276 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_conditionalDeclaration_in_declDef2282 ;

    //public static final BitSet FOLLOW_conditionalDeclaration_in_declDef2282 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalDeclaration_in_declDef2282 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_dvSpecification_in_declDef2288 ;

    //public static final BitSet FOLLOW_dvSpecification_in_declDef2288 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_dvSpecification_in_declDef2288 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_staticAssert_in_declDef2294 ;

    //public static final BitSet FOLLOW_staticAssert_in_declDef2294 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_staticAssert_in_declDef2294 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateDeclaration_in_declDef2300 ;

    //public static final BitSet FOLLOW_templateDeclaration_in_declDef2300 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateDeclaration_in_declDef2300 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateMixinDeclaration_in_declDef2306 ;

    //public static final BitSet FOLLOW_templateMixinDeclaration_in_declDef2306 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateMixinDeclaration_in_declDef2306 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_mixinDeclaration_in_declDef2312 ;

    //public static final BitSet FOLLOW_mixinDeclaration_in_declDef2312 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_mixinDeclaration_in_declDef2312 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_storageClass_in_declaration2327 ;

    //public static final BitSet FOLLOW_storageClass_in_declaration2327 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_storageClass_in_declaration2327 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_decl_in_declaration2333 ;

    //public static final BitSet FOLLOW_decl_in_declaration2333 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_decl_in_declaration2333 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_211_in_sc2355 ;

    //public static final BitSet FOLLOW_211_in_sc2355 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_211_in_sc2355 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_214_in_sc2359 ;

    //public static final BitSet FOLLOW_214_in_sc2359 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_214_in_sc2359 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_222_in_sc2363 ;

    //public static final BitSet FOLLOW_222_in_sc2363 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_222_in_sc2363 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_227_in_sc2368 ;

    //public static final BitSet FOLLOW_227_in_sc2368 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_227_in_sc2368 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ENUM_DECLARATION_in_sc2372 ;

    //public static final BitSet FOLLOW_ENUM_DECLARATION_in_sc2372 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ENUM_DECLARATION_in_sc2372 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_232_in_sc2376 ;

    //public static final BitSet FOLLOW_232_in_sc2376 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_232_in_sc2376 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_234_in_sc2380 ;

    //public static final BitSet FOLLOW_234_in_sc2380 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_234_in_sc2380 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_245_in_sc2386 ;

    //public static final BitSet FOLLOW_245_in_sc2386 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_245_in_sc2386 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_247_in_sc2390 ;

    //public static final BitSet FOLLOW_247_in_sc2390 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_247_in_sc2390 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_273_in_sc2394 ;

    //public static final BitSet FOLLOW_273_in_sc2394 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_273_in_sc2394 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_268_in_sc2398 ;

    //public static final BitSet FOLLOW_268_in_sc2398 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_268_in_sc2398 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_269_in_sc2402 ;

    //public static final BitSet FOLLOW_269_in_sc2402 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_269_in_sc2402 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_271_in_sc2406 ;

    //public static final BitSet FOLLOW_271_in_sc2406 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_271_in_sc2406 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_210_in_sc2412 ;

    //public static final BitSet FOLLOW_210_in_sc2412 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_210_in_sc2412 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SCOPE_in_sc2416 ;

    //public static final BitSet FOLLOW_STMT_SCOPE_in_sc2416 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STMT_SCOPE_in_sc2416 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_sc2420 ;

    //public static final BitSet FOLLOW_275_in_sc2420 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_275_in_sc2420 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SYNCHRONIZED_in_sc2424 ;

    //public static final BitSet FOLLOW_STMT_SYNCHRONIZED_in_sc2424 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STMT_SYNCHRONIZED_in_sc2424 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sc_in_storageClass2445 ;

    //public static final BitSet FOLLOW_sc_in_storageClass2445 = new BitSet(new long[]{0x0000000010000000L,0x0000000000001000L,0x0020000000000005L,0x03B80D29CFCC0000L,0x000000000DEFB800L});


    static this()
    {
    //FOLLOW_sc_in_storageClass2445 = new BitSet([0x0000000010000000L,0x0000000000001000L,0x0020000000000005L,0x03B80D29CFCC0000L,0x000000000DEFB800L]);

    }public static BitSet FOLLOW_decl_in_storageClass2454 ;

    //public static final BitSet FOLLOW_decl_in_storageClass2454 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_decl_in_storageClass2454 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_autoVariable_in_storageClass2458 ;

    //public static final BitSet FOLLOW_autoVariable_in_storageClass2458 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_autoVariable_in_storageClass2458 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_storageClass_in_storageClass2462 ;

    //public static final BitSet FOLLOW_storageClass_in_storageClass2462 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_storageClass_in_storageClass2462 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_defSymbol_in_autoVariable2479 ;

    //public static final BitSet FOLLOW_defSymbol_in_autoVariable2479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_autoVariable2479 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_initializer_in_autoVariable2481 ;

    //public static final BitSet FOLLOW_initializer_in_autoVariable2481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_initializer_in_autoVariable2481 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_autoVariable2483 ;

    //public static final BitSet FOLLOW_186_in_autoVariable2483 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_autoVariable2483 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_decl2508 ;

    //public static final BitSet FOLLOW_type_in_decl2508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_decl2508 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_decl2510 ;

    //public static final BitSet FOLLOW_defSymbol_in_decl2510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400040000000000L,0x0000000000001002L});


    static this()
    {
    //FOLLOW_defSymbol_in_decl2510 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400040000000000L,0x0000000000001002L]);

    }public static BitSet FOLLOW_204_in_decl2518 ;

    //public static final BitSet FOLLOW_204_in_decl2518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_204_in_decl2518 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_205_in_decl2520 ;

    //public static final BitSet FOLLOW_205_in_decl2520 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_205_in_decl2520 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_initializer_in_decl2522 ;

    //public static final BitSet FOLLOW_initializer_in_decl2522 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_initializer_in_decl2522 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_204_in_decl2549 ;

    //public static final BitSet FOLLOW_204_in_decl2549 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_decl2549 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_decl2551 ;

    //public static final BitSet FOLLOW_assignExpression_in_decl2551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_assignExpression_in_decl2551 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_205_in_decl2553 ;

    //public static final BitSet FOLLOW_205_in_decl2553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_205_in_decl2553 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_initializer_in_decl2555 ;

    //public static final BitSet FOLLOW_initializer_in_decl2555 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_initializer_in_decl2555 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_initializer_in_decl2583 ;

    //public static final BitSet FOLLOW_initializer_in_decl2583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_initializer_in_decl2583 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_decl2586 ;

    //public static final BitSet FOLLOW_186_in_decl2586 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_decl2586 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_parameters_in_decl2607 ;

    //public static final BitSet FOLLOW_parameters_in_decl2607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x00A0000040000800L,0x0000000010029000L});


    static this()
    {
    //FOLLOW_parameters_in_decl2607 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x00A0000040000800L,0x0000000010029000L]);

    }public static BitSet FOLLOW_memberFunctionAttribute_in_decl2609 ;

    //public static final BitSet FOLLOW_memberFunctionAttribute_in_decl2609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x00A0000040000800L,0x0000000010029000L});


    static this()
    {
    //FOLLOW_memberFunctionAttribute_in_decl2609 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x00A0000040000800L,0x0000000010029000L]);

    }public static BitSet FOLLOW_functionBody_in_decl2613 ;

    //public static final BitSet FOLLOW_functionBody_in_decl2613 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_decl2613 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_186_in_decl2617 ;

    //public static final BitSet FOLLOW_186_in_decl2617 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_decl2617 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_222_in_memberFunctionAttribute2655 ;

    //public static final BitSet FOLLOW_222_in_memberFunctionAttribute2655 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_222_in_memberFunctionAttribute2655 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_245_in_memberFunctionAttribute2659 ;

    //public static final BitSet FOLLOW_245_in_memberFunctionAttribute2659 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_245_in_memberFunctionAttribute2659 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_247_in_memberFunctionAttribute2663 ;

    //public static final BitSet FOLLOW_247_in_memberFunctionAttribute2663 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_247_in_memberFunctionAttribute2663 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_273_in_memberFunctionAttribute2667 ;

    //public static final BitSet FOLLOW_273_in_memberFunctionAttribute2667 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_273_in_memberFunctionAttribute2667 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_functionAttribute_in_memberFunctionAttribute2673 ;

    //public static final BitSet FOLLOW_functionAttribute_in_memberFunctionAttribute2673 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionAttribute_in_memberFunctionAttribute2673 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_268_in_functionAttribute2688 ;

    //public static final BitSet FOLLOW_268_in_functionAttribute2688 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_268_in_functionAttribute2688 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_271_in_functionAttribute2692 ;

    //public static final BitSet FOLLOW_271_in_functionAttribute2692 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_271_in_functionAttribute2692 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_property_in_functionAttribute2698 ;

    //public static final BitSet FOLLOW_property_in_functionAttribute2698 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_property_in_functionAttribute2698 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_defSymbol2713 ;

    //public static final BitSet FOLLOW_Identifier_in_defSymbol2713 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_defSymbol2713 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_symbol2735 ;

    //public static final BitSet FOLLOW_Identifier_in_symbol2735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_symbol2735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_initializer2757 ;

    //public static final BitSet FOLLOW_193_in_initializer2757 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000204009000L});


    static this()
    {
    //FOLLOW_193_in_initializer2757 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000204009000L]);

    }public static BitSet FOLLOW_voidInitializer_in_initializer2766 ;

    //public static final BitSet FOLLOW_voidInitializer_in_initializer2766 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_voidInitializer_in_initializer2766 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonVoidInitializer_in_initializer2774 ;

    //public static final BitSet FOLLOW_nonVoidInitializer_in_initializer2774 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonVoidInitializer_in_initializer2774 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_282_in_voidInitializer2795 ;

    //public static final BitSet FOLLOW_282_in_voidInitializer2795 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_282_in_voidInitializer2795 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assignExpression_in_nonVoidInitializer2816 ;

    //public static final BitSet FOLLOW_assignExpression_in_nonVoidInitializer2816 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_nonVoidInitializer2816 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_basicTypeX_in_basicType2839 ;

    //public static final BitSet FOLLOW_basicTypeX_in_basicType2839 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_basicTypeX_in_basicType2839 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_basicType2853 ;

    //public static final BitSet FOLLOW_181_in_basicType2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_basicType2853 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_identifierList_in_basicType2855 ;

    //public static final BitSet FOLLOW_identifierList_in_basicType2855 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifierList_in_basicType2855 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifierList_in_basicType2869 ;

    //public static final BitSet FOLLOW_identifierList_in_basicType2869 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifierList_in_basicType2869 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_reference2992 ;

    //public static final BitSet FOLLOW_Identifier_in_reference2992 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_reference2992 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_refIdentifier3015 ;

    //public static final BitSet FOLLOW_Identifier_in_refIdentifier3015 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_refIdentifier3015 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_templateInstance3038 ;

    //public static final BitSet FOLLOW_refIdentifier_in_templateInstance3038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_refIdentifier_in_templateInstance3038 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_templateInstance3040 ;

    //public static final BitSet FOLLOW_157_in_templateInstance3040 = new BitSet(new long[]{0x2000310000008400L,0x0000000000011000L,0x0000000000000400L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_157_in_templateInstance3040 = new BitSet([0x2000310000008400L,0x0000000000011000L,0x0000000000000400L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_templateSingleArgument_in_templateInstance3042 ;

    //public static final BitSet FOLLOW_templateSingleArgument_in_templateInstance3042 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateSingleArgument_in_templateInstance3042 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_templateInstance3064 ;

    //public static final BitSet FOLLOW_refIdentifier_in_templateInstance3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_refIdentifier_in_templateInstance3064 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_templateInstance3066 ;

    //public static final BitSet FOLLOW_157_in_templateInstance3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_157_in_templateInstance3066 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_templateInstance3068 ;

    //public static final BitSet FOLLOW_170_in_templateInstance3068 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_170_in_templateInstance3068 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_templateArgumentList_in_templateInstance3070 ;

    //public static final BitSet FOLLOW_templateArgumentList_in_templateInstance3070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_templateArgumentList_in_templateInstance3070 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_templateInstance3072 ;

    //public static final BitSet FOLLOW_171_in_templateInstance3072 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_templateInstance3072 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_basicTypeX_in_templateSingleArgument3103 ;

    //public static final BitSet FOLLOW_basicTypeX_in_templateSingleArgument3103 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_basicTypeX_in_templateSingleArgument3103 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_templateSingleArgument3117 ;

    //public static final BitSet FOLLOW_refIdentifier_in_templateSingleArgument3117 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_templateSingleArgument3117 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_CharacterLiteral_in_templateSingleArgument3123 ;

    //public static final BitSet FOLLOW_CharacterLiteral_in_templateSingleArgument3123 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CharacterLiteral_in_templateSingleArgument3123 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_StringLiteral_in_templateSingleArgument3136 ;

    //public static final BitSet FOLLOW_StringLiteral_in_templateSingleArgument3136 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_StringLiteral_in_templateSingleArgument3136 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_IntegerLiteral_in_templateSingleArgument3149 ;

    //public static final BitSet FOLLOW_IntegerLiteral_in_templateSingleArgument3149 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_IntegerLiteral_in_templateSingleArgument3149 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_FloatLiteral_in_templateSingleArgument3162 ;

    //public static final BitSet FOLLOW_FloatLiteral_in_templateSingleArgument3162 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_FloatLiteral_in_templateSingleArgument3162 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_BooleanLiteral_in_templateSingleArgument3175 ;

    //public static final BitSet FOLLOW_BooleanLiteral_in_templateSingleArgument3175 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_BooleanLiteral_in_templateSingleArgument3175 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_NULL_in_templateSingleArgument3188 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_NULL_in_templateSingleArgument3188 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_NULL_in_templateSingleArgument3188 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_FILE_in_templateSingleArgument3194 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_FILE_in_templateSingleArgument3194 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_FILE_in_templateSingleArgument3194 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_LINE_in_templateSingleArgument3200 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_LINE_in_templateSingleArgument3200 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_LINE_in_templateSingleArgument3200 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateArgument_in_templateArgumentList3215 ;

    //public static final BitSet FOLLOW_templateArgument_in_templateArgumentList3215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_templateArgument_in_templateArgumentList3215 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_templateArgumentList3218 ;

    //public static final BitSet FOLLOW_177_in_templateArgumentList3218 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_177_in_templateArgumentList3218 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_templateArgument_in_templateArgumentList3220 ;

    //public static final BitSet FOLLOW_templateArgument_in_templateArgumentList3220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_templateArgument_in_templateArgumentList3220 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_type_in_templateArgument3255 ;

    //public static final BitSet FOLLOW_type_in_templateArgument3255 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_templateArgument3255 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assignExpression_in_templateArgument3262 ;

    //public static final BitSet FOLLOW_assignExpression_in_templateArgument3262 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_templateArgument3262 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateInstance_in_identifierList3293 ;

    //public static final BitSet FOLLOW_templateInstance_in_identifierList3293 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateInstance_in_identifierList3293 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_identifierList3307 ;

    //public static final BitSet FOLLOW_refIdentifier_in_identifierList3307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_refIdentifier_in_identifierList3307 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_181_in_identifierList3334 ;

    //public static final BitSet FOLLOW_181_in_identifierList3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_identifierList3334 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_templateInstance_in_identifierList3353 ;

    //public static final BitSet FOLLOW_templateInstance_in_identifierList3353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_templateInstance_in_identifierList3353 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_refIdentifier_in_identifierList3375 ;

    //public static final BitSet FOLLOW_refIdentifier_in_identifierList3375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_refIdentifier_in_identifierList3375 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_basicType_in_type3422 ;

    //public static final BitSet FOLLOW_basicType_in_type3422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_basicType_in_type3422 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_172_in_type3452 ;

    //public static final BitSet FOLLOW_172_in_type3452 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_172_in_type3452 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_204_in_type3468 ;

    //public static final BitSet FOLLOW_204_in_type3468 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400002808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_type3468 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400002808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_type3494 ;

    //public static final BitSet FOLLOW_assignExpression_in_type3494 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_assignExpression_in_type3494 = new BitSet([0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_Range_in_type3535 ;

    //public static final BitSet FOLLOW_Range_in_type3535 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_Range_in_type3535 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_type3537 ;

    //public static final BitSet FOLLOW_assignExpression_in_type3537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_assignExpression_in_type3537 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_205_in_type3584 ;

    //public static final BitSet FOLLOW_205_in_type3584 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_205_in_type3584 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_203_in_property3605 ;

    //public static final BitSet FOLLOW_203_in_property3605 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_203_in_property3605 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_PropertyIdentifier_in_property3607 ;

    //public static final BitSet FOLLOW_PropertyIdentifier_in_property3607 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_PropertyIdentifier_in_property3607 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_170_in_parameters3626 ;

    //public static final BitSet FOLLOW_170_in_parameters3626 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020080000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_parameters3626 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020080000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameterList_in_parameters3629 ;

    //public static final BitSet FOLLOW_parameterList_in_parameters3629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_parameterList_in_parameters3629 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_parameters3631 ;

    //public static final BitSet FOLLOW_171_in_parameters3631 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_parameters3631 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_parameter_in_parameterList3651 ;

    //public static final BitSet FOLLOW_parameter_in_parameterList3651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_parameterList3651 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_parameterList3654 ;

    //public static final BitSet FOLLOW_177_in_parameterList3654 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_177_in_parameterList3654 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_parameterList3656 ;

    //public static final BitSet FOLLOW_parameter_in_parameterList3656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_parameterList3656 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_ParameterAttribute_in_parameter3685 ;

    //public static final BitSet FOLLOW_ParameterAttribute_in_parameter3685 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_ParameterAttribute_in_parameter3685 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_parameter3688 ;

    //public static final BitSet FOLLOW_type_in_parameter3688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_parameter3688 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_parameter3690 ;

    //public static final BitSet FOLLOW_defSymbol_in_parameter3690 = new BitSet(new long[]{0x21F1312840008002L,0x0000000000011000L,0x0020040000000400L,0x0040200400000808L,0x0000000000009000L});


    static this()
    {
    //FOLLOW_defSymbol_in_parameter3690 = new BitSet([0x21F1312840008002L,0x0000000000011000L,0x0020040000000400L,0x0040200400000808L,0x0000000000009000L]);

    }public static BitSet FOLLOW_defaultInitializerExpression_in_parameter3692 ;

    //public static final BitSet FOLLOW_defaultInitializerExpression_in_parameter3692 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_defaultInitializerExpression_in_parameter3692 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_blockStatement_in_functionBody3730 ;

    //public static final BitSet FOLLOW_blockStatement_in_functionBody3730 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_functionBody3730 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_primaryExpression_in_defaultInitializerExpression3745 ;

    //public static final BitSet FOLLOW_primaryExpression_in_defaultInitializerExpression3745 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_primaryExpression_in_defaultInitializerExpression3745 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_importDeclaration3764 ;

    //public static final BitSet FOLLOW_275_in_importDeclaration3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_275_in_importDeclaration3764 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_246_in_importDeclaration3767 ;

    //public static final BitSet FOLLOW_246_in_importDeclaration3767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_246_in_importDeclaration3767 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_importFragment_in_importDeclaration3769 ;

    //public static final BitSet FOLLOW_importFragment_in_importDeclaration3769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0402000000000000L});


    static this()
    {
    //FOLLOW_importFragment_in_importDeclaration3769 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0402000000000000L]);

    }public static BitSet FOLLOW_177_in_importDeclaration3772 ;

    //public static final BitSet FOLLOW_177_in_importDeclaration3772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_177_in_importDeclaration3772 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_importFragment_in_importDeclaration3774 ;

    //public static final BitSet FOLLOW_importFragment_in_importDeclaration3774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0402000000000000L});


    static this()
    {
    //FOLLOW_importFragment_in_importDeclaration3774 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0402000000000000L]);

    }public static BitSet FOLLOW_186_in_importDeclaration3778 ;

    //public static final BitSet FOLLOW_186_in_importDeclaration3778 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_importDeclaration3778 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_importEntry_in_importFragment3806 ;

    //public static final BitSet FOLLOW_importEntry_in_importFragment3806 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_importEntry_in_importFragment3806 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_importEntry_in_importFragment3816 ;

    //public static final BitSet FOLLOW_importEntry_in_importFragment3816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_importEntry_in_importFragment3816 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_importFragment3818 ;

    //public static final BitSet FOLLOW_185_in_importFragment3818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_185_in_importFragment3818 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_importFragment3820 ;

    //public static final BitSet FOLLOW_Identifier_in_importFragment3820 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_importFragment3820 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_importEntry3853 ;

    //public static final BitSet FOLLOW_Identifier_in_importEntry3853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_importEntry3853 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_importEntry3855 ;

    //public static final BitSet FOLLOW_193_in_importEntry3855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_193_in_importEntry3855 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_refModule_in_importEntry3857 ;

    //public static final BitSet FOLLOW_refModule_in_importEntry3857 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refModule_in_importEntry3857 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refModule_in_importEntry3878 ;

    //public static final BitSet FOLLOW_refModule_in_importEntry3878 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refModule_in_importEntry3878 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_refModule3901 ;

    //public static final BitSet FOLLOW_Identifier_in_refModule3901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_refModule3901 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_181_in_refModule3904 ;

    //public static final BitSet FOLLOW_181_in_refModule3904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_refModule3904 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_refModule3906 ;

    //public static final BitSet FOLLOW_Identifier_in_refModule3906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_refModule3906 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_ENUM_DECLARATION_in_enumDeclaration3937 ;

    //public static final BitSet FOLLOW_ENUM_DECLARATION_in_enumDeclaration3937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0600000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_ENUM_DECLARATION_in_enumDeclaration3937 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0600000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_defSymbol_in_enumDeclaration3940 ;

    //public static final BitSet FOLLOW_defSymbol_in_enumDeclaration3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0600000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_enumDeclaration3940 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0600000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_185_in_enumDeclaration3945 ;

    //public static final BitSet FOLLOW_185_in_enumDeclaration3945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_185_in_enumDeclaration3945 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_enumDeclaration3948 ;

    //public static final BitSet FOLLOW_type_in_enumDeclaration3948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_type_in_enumDeclaration3948 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_enumBody_in_enumDeclaration3952 ;

    //public static final BitSet FOLLOW_enumBody_in_enumDeclaration3952 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_enumBody_in_enumDeclaration3952 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_enumBody3976 ;

    //public static final BitSet FOLLOW_284_in_enumBody3976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_284_in_enumBody3976 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_enumMembers_in_enumBody3979 ;

    //public static final BitSet FOLLOW_enumMembers_in_enumBody3979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});


    static this()
    {
    //FOLLOW_enumMembers_in_enumBody3979 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L]);

    }public static BitSet FOLLOW_288_in_enumBody3981 ;

    //public static final BitSet FOLLOW_288_in_enumBody3981 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_enumBody3981 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_186_in_enumBody3990 ;

    //public static final BitSet FOLLOW_186_in_enumBody3990 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_enumBody3990 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_enumMember_in_enumMembers4014 ;

    //public static final BitSet FOLLOW_enumMember_in_enumMembers4014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_enumMember_in_enumMembers4014 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_enumMembers4018 ;

    //public static final BitSet FOLLOW_177_in_enumMembers4018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_177_in_enumMembers4018 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_enumMember_in_enumMembers4021 ;

    //public static final BitSet FOLLOW_enumMember_in_enumMembers4021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_enumMember_in_enumMembers4021 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_defSymbol_in_enumMember4046 ;

    //public static final BitSet FOLLOW_defSymbol_in_enumMember4046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_enumMember4046 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_enumMember4049 ;

    //public static final BitSet FOLLOW_193_in_enumMember4049 = new BitSet(new long[]{0x21F1312840008000L,0x0000000000011000L,0x0020040000000400L,0x0040200400000808L,0x0000000000009000L});


    static this()
    {
    //FOLLOW_193_in_enumMember4049 = new BitSet([0x21F1312840008000L,0x0000000000011000L,0x0020040000000400L,0x0040200400000808L,0x0000000000009000L]);

    }public static BitSet FOLLOW_primaryExpression_in_enumMember4051 ;

    //public static final BitSet FOLLOW_primaryExpression_in_enumMember4051 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_primaryExpression_in_enumMember4051 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_CLASS_DECLARATION_in_classDeclaration4087 ;

    //public static final BitSet FOLLOW_CLASS_DECLARATION_in_classDeclaration4087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_CLASS_DECLARATION_in_classDeclaration4087 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_classDeclaration4090 ;

    //public static final BitSet FOLLOW_defSymbol_in_classDeclaration4090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_classDeclaration4090 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_baseClassList_in_classDeclaration4092 ;

    //public static final BitSet FOLLOW_baseClassList_in_classDeclaration4092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_baseClassList_in_classDeclaration4092 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_classBody_in_classDeclaration4095 ;

    //public static final BitSet FOLLOW_classBody_in_classDeclaration4095 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classBody_in_classDeclaration4095 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_185_in_baseClassList4110 ;

    //public static final BitSet FOLLOW_185_in_baseClassList4110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_185_in_baseClassList4110 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_identifierList_in_baseClassList4112 ;

    //public static final BitSet FOLLOW_identifierList_in_baseClassList4112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_identifierList_in_baseClassList4112 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_baseClassList4115 ;

    //public static final BitSet FOLLOW_177_in_baseClassList4115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_177_in_baseClassList4115 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_identifierList_in_baseClassList4117 ;

    //public static final BitSet FOLLOW_identifierList_in_baseClassList4117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_identifierList_in_baseClassList4117 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_284_in_classBody4146 ;

    //public static final BitSet FOLLOW_284_in_classBody4146 = new BitSet(new long[]{0x0023000410001000L,0x0000000000001600L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_284_in_classBody4146 = new BitSet([0x0023000410001000L,0x0000000000001600L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_classMember_in_classBody4149 ;

    //public static final BitSet FOLLOW_classMember_in_classBody4149 = new BitSet(new long[]{0x0023000410001000L,0x0000000000001600L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_classMember_in_classBody4149 = new BitSet([0x0023000410001000L,0x0000000000001600L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_288_in_classBody4152 ;

    //public static final BitSet FOLLOW_288_in_classBody4152 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_classBody4152 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declDef_in_classMember4168 ;

    //public static final BitSet FOLLOW_declDef_in_classMember4168 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declDef_in_classMember4168 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_classAllocator_in_classMember4174 ;

    //public static final BitSet FOLLOW_classAllocator_in_classMember4174 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classAllocator_in_classMember4174 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_classDeallocator_in_classMember4180 ;

    //public static final BitSet FOLLOW_classDeallocator_in_classMember4180 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classDeallocator_in_classMember4180 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_invariant__in_classMember4186 ;

    //public static final BitSet FOLLOW_invariant__in_classMember4186 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_invariant__in_classMember4186 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_NEW_in_classAllocator4201 ;

    //public static final BitSet FOLLOW_EXP_NEW_in_classAllocator4201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_NEW_in_classAllocator4201 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_parameters_in_classAllocator4203 ;

    //public static final BitSet FOLLOW_parameters_in_classAllocator4203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_parameters_in_classAllocator4203 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_functionBody_in_classAllocator4205 ;

    //public static final BitSet FOLLOW_functionBody_in_classAllocator4205 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_classAllocator4205 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_DELETE_in_classDeallocator4231 ;

    //public static final BitSet FOLLOW_EXP_DELETE_in_classDeallocator4231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_DELETE_in_classDeallocator4231 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_parameters_in_classDeallocator4233 ;

    //public static final BitSet FOLLOW_parameters_in_classDeallocator4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_parameters_in_classDeallocator4233 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_functionBody_in_classDeallocator4235 ;

    //public static final BitSet FOLLOW_functionBody_in_classDeallocator4235 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_classDeallocator4235 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_INVARIANT_in_invariant_4261 ;

    //public static final BitSet FOLLOW_INVARIANT_in_invariant_4261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_INVARIANT_in_invariant_4261 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_invariant_4264 ;

    //public static final BitSet FOLLOW_170_in_invariant_4264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_170_in_invariant_4264 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_invariant_4267 ;

    //public static final BitSet FOLLOW_171_in_invariant_4267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_171_in_invariant_4267 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_blockStatement_in_invariant_4270 ;

    //public static final BitSet FOLLOW_blockStatement_in_invariant_4270 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_invariant_4270 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_INTERFACE_DECLARATION_in_interfaceDeclaration4289 ;

    //public static final BitSet FOLLOW_INTERFACE_DECLARATION_in_interfaceDeclaration4289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_INTERFACE_DECLARATION_in_interfaceDeclaration4289 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_interfaceDeclaration4292 ;

    //public static final BitSet FOLLOW_defSymbol_in_interfaceDeclaration4292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_interfaceDeclaration4292 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_baseClassList_in_interfaceDeclaration4294 ;

    //public static final BitSet FOLLOW_baseClassList_in_interfaceDeclaration4294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_baseClassList_in_interfaceDeclaration4294 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_interfaceBody_in_interfaceDeclaration4297 ;

    //public static final BitSet FOLLOW_interfaceBody_in_interfaceDeclaration4297 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_interfaceBody_in_interfaceDeclaration4297 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_interfaceBody4312 ;

    //public static final BitSet FOLLOW_284_in_interfaceBody4312 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_284_in_interfaceBody4312 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_declDef_in_interfaceBody4315 ;

    //public static final BitSet FOLLOW_declDef_in_interfaceBody4315 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_declDef_in_interfaceBody4315 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_288_in_interfaceBody4318 ;

    //public static final BitSet FOLLOW_288_in_interfaceBody4318 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_interfaceBody4318 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STRUCT_DECLARATION_in_aggregateDeclaration4340 ;

    //public static final BitSet FOLLOW_STRUCT_DECLARATION_in_aggregateDeclaration4340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_STRUCT_DECLARATION_in_aggregateDeclaration4340 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_UNION_DECLARATION_in_aggregateDeclaration4345 ;

    //public static final BitSet FOLLOW_UNION_DECLARATION_in_aggregateDeclaration4345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_UNION_DECLARATION_in_aggregateDeclaration4345 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_aggregateDeclaration4349 ;

    //public static final BitSet FOLLOW_defSymbol_in_aggregateDeclaration4349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_aggregateDeclaration4349 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_186_in_aggregateDeclaration4352 ;

    //public static final BitSet FOLLOW_186_in_aggregateDeclaration4352 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_aggregateDeclaration4352 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_structBody_in_aggregateDeclaration4357 ;

    //public static final BitSet FOLLOW_structBody_in_aggregateDeclaration4357 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_structBody_in_aggregateDeclaration4357 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_structBody4376 ;

    //public static final BitSet FOLLOW_284_in_structBody4376 = new BitSet(new long[]{0x0023000410001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_284_in_structBody4376 = new BitSet([0x0023000410001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_structMember_in_structBody4379 ;

    //public static final BitSet FOLLOW_structMember_in_structBody4379 = new BitSet(new long[]{0x0023000410001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_structMember_in_structBody4379 = new BitSet([0x0023000410001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_288_in_structBody4382 ;

    //public static final BitSet FOLLOW_288_in_structBody4382 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_structBody4382 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declDef_in_structMember4396 ;

    //public static final BitSet FOLLOW_declDef_in_structMember4396 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declDef_in_structMember4396 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_classAllocator_in_structMember4402 ;

    //public static final BitSet FOLLOW_classAllocator_in_structMember4402 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classAllocator_in_structMember4402 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_classDeallocator_in_structMember4408 ;

    //public static final BitSet FOLLOW_classDeallocator_in_structMember4408 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_classDeallocator_in_structMember4408 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_THIS_in_ctorDeclaration4424 ;

    //public static final BitSet FOLLOW_EXP_THIS_in_ctorDeclaration4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_THIS_in_ctorDeclaration4424 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_parameters_in_ctorDeclaration4426 ;

    //public static final BitSet FOLLOW_parameters_in_ctorDeclaration4426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_parameters_in_ctorDeclaration4426 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_functionBody_in_ctorDeclaration4428 ;

    //public static final BitSet FOLLOW_functionBody_in_ctorDeclaration4428 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_ctorDeclaration4428 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_291_in_ctorDeclaration4445 ;

    //public static final BitSet FOLLOW_291_in_ctorDeclaration4445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_291_in_ctorDeclaration4445 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_ctorDeclaration4447 ;

    //public static final BitSet FOLLOW_170_in_ctorDeclaration4447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_170_in_ctorDeclaration4447 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_ctorDeclaration4449 ;

    //public static final BitSet FOLLOW_171_in_ctorDeclaration4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_171_in_ctorDeclaration4449 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_functionBody_in_ctorDeclaration4451 ;

    //public static final BitSet FOLLOW_functionBody_in_ctorDeclaration4451 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_ctorDeclaration4451 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_UNITTEST_DECLARATION_in_unittestDeclaration4478 ;

    //public static final BitSet FOLLOW_UNITTEST_DECLARATION_in_unittestDeclaration4478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_UNITTEST_DECLARATION_in_unittestDeclaration4478 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_blockStatement_in_unittestDeclaration4482 ;

    //public static final BitSet FOLLOW_blockStatement_in_unittestDeclaration4482 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_unittestDeclaration4482 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_mixinDeclaration4497 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_mixinDeclaration4497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_mixinDeclaration4497 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_mixinDeclaration4499 ;

    //public static final BitSet FOLLOW_170_in_mixinDeclaration4499 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_mixinDeclaration4499 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_mixinDeclaration4501 ;

    //public static final BitSet FOLLOW_assignExpression_in_mixinDeclaration4501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_mixinDeclaration4501 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_mixinDeclaration4503 ;

    //public static final BitSet FOLLOW_171_in_mixinDeclaration4503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_171_in_mixinDeclaration4503 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_mixinDeclaration4505 ;

    //public static final BitSet FOLLOW_186_in_mixinDeclaration4505 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_mixinDeclaration4505 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_in_conditionalDeclaration4529 ;

    //public static final BitSet FOLLOW_condition_in_conditionalDeclaration4529 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000081FEFB800L});


    static this()
    {
    //FOLLOW_condition_in_conditionalDeclaration4529 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000081FEFB800L]);

    }public static BitSet FOLLOW_declarationBlock_in_conditionalDeclaration4531 ;

    //public static final BitSet FOLLOW_declarationBlock_in_conditionalDeclaration4531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_declarationBlock_in_conditionalDeclaration4531 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_230_in_conditionalDeclaration4544 ;

    //public static final BitSet FOLLOW_230_in_conditionalDeclaration4544 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000081FEFB800L});


    static this()
    {
    //FOLLOW_230_in_conditionalDeclaration4544 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000081FEFB800L]);

    }public static BitSet FOLLOW_declarationBlock_in_conditionalDeclaration4546 ;

    //public static final BitSet FOLLOW_declarationBlock_in_conditionalDeclaration4546 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declarationBlock_in_conditionalDeclaration4546 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_281_in_condition4580 ;

    //public static final BitSet FOLLOW_281_in_condition4580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_281_in_condition4580 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_condition4582 ;

    //public static final BitSet FOLLOW_170_in_condition4582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_170_in_condition4582 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_symbol_in_condition4584 ;

    //public static final BitSet FOLLOW_symbol_in_condition4584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_symbol_in_condition4584 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_condition4586 ;

    //public static final BitSet FOLLOW_171_in_condition4586 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_condition4586 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_225_in_condition4601 ;

    //public static final BitSet FOLLOW_225_in_condition4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_225_in_condition4601 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_condition4603 ;

    //public static final BitSet FOLLOW_170_in_condition4603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_170_in_condition4603 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_symbol_in_condition4605 ;

    //public static final BitSet FOLLOW_symbol_in_condition4605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_symbol_in_condition4605 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_condition4607 ;

    //public static final BitSet FOLLOW_171_in_condition4607 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_condition4607 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_condition4622 ;

    //public static final BitSet FOLLOW_275_in_condition4622 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});


    static this()
    {
    //FOLLOW_275_in_condition4622 = new BitSet([0x0000000000000000L,0x0800000000000000L]);

    }public static BitSet FOLLOW_STMT_IF_in_condition4624 ;

    //public static final BitSet FOLLOW_STMT_IF_in_condition4624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_IF_in_condition4624 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_condition4626 ;

    //public static final BitSet FOLLOW_170_in_condition4626 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_condition4626 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_condition4628 ;

    //public static final BitSet FOLLOW_assignExpression_in_condition4628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_condition4628 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_condition4630 ;

    //public static final BitSet FOLLOW_171_in_condition4630 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_condition4630 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_281_in_dvSpecification4653 ;

    //public static final BitSet FOLLOW_281_in_dvSpecification4653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_281_in_dvSpecification4653 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_225_in_dvSpecification4657 ;

    //public static final BitSet FOLLOW_225_in_dvSpecification4657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_225_in_dvSpecification4657 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_dvSpecification4660 ;

    //public static final BitSet FOLLOW_193_in_dvSpecification4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_193_in_dvSpecification4660 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_symbol_in_dvSpecification4662 ;

    //public static final BitSet FOLLOW_symbol_in_dvSpecification4662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_symbol_in_dvSpecification4662 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_dvSpecification4664 ;

    //public static final BitSet FOLLOW_186_in_dvSpecification4664 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_dvSpecification4664 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_staticAssert4688 ;

    //public static final BitSet FOLLOW_275_in_staticAssert4688 = new BitSet(new long[]{0x0000000040000000L});


    static this()
    {
    //FOLLOW_275_in_staticAssert4688 = new BitSet([0x0000000040000000L]);

    }public static BitSet FOLLOW_EXP_ASSERT_in_staticAssert4690 ;

    //public static final BitSet FOLLOW_EXP_ASSERT_in_staticAssert4690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_ASSERT_in_staticAssert4690 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_staticAssert4692 ;

    //public static final BitSet FOLLOW_170_in_staticAssert4692 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_staticAssert4692 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_staticAssert4694 ;

    //public static final BitSet FOLLOW_assignExpression_in_staticAssert4694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_staticAssert4694 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002080000000000L]);

    }public static BitSet FOLLOW_177_in_staticAssert4697 ;

    //public static final BitSet FOLLOW_177_in_staticAssert4697 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_staticAssert4697 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_staticAssert4699 ;

    //public static final BitSet FOLLOW_assignExpression_in_staticAssert4699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_staticAssert4699 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_staticAssert4703 ;

    //public static final BitSet FOLLOW_171_in_staticAssert4703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_171_in_staticAssert4703 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_staticAssert4705 ;

    //public static final BitSet FOLLOW_186_in_staticAssert4705 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_staticAssert4705 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_TEMPLATE_DECLARATION_in_templateDeclaration4734 ;

    //public static final BitSet FOLLOW_TEMPLATE_DECLARATION_in_templateDeclaration4734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_TEMPLATE_DECLARATION_in_templateDeclaration4734 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_templateDeclaration4741 ;

    //public static final BitSet FOLLOW_defSymbol_in_templateDeclaration4741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_templateDeclaration4741 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_templateDeclaration4743 ;

    //public static final BitSet FOLLOW_170_in_templateDeclaration4743 = new BitSet(new long[]{0x0020000000000000L,0x0000000000001000L,0x0020080000000000L,0x031808218F900000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_templateDeclaration4743 = new BitSet([0x0020000000000000L,0x0000000000001000L,0x0020080000000000L,0x031808218F900000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_templateParameterList_in_templateDeclaration4746 ;

    //public static final BitSet FOLLOW_templateParameterList_in_templateDeclaration4746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_templateParameterList_in_templateDeclaration4746 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_templateDeclaration4748 ;

    //public static final BitSet FOLLOW_171_in_templateDeclaration4748 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_171_in_templateDeclaration4748 = new BitSet([0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_constraint_in_templateDeclaration4755 ;

    //public static final BitSet FOLLOW_constraint_in_templateDeclaration4755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_constraint_in_templateDeclaration4755 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_templateDeclarationBlock_in_templateDeclaration4762 ;

    //public static final BitSet FOLLOW_templateDeclarationBlock_in_templateDeclaration4762 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateDeclarationBlock_in_templateDeclaration4762 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateParameter_in_templateParameterList4780 ;

    //public static final BitSet FOLLOW_templateParameter_in_templateParameterList4780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_templateParameter_in_templateParameterList4780 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_templateParameterList4783 ;

    //public static final BitSet FOLLOW_177_in_templateParameterList4783 = new BitSet(new long[]{0x0020000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F900000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_177_in_templateParameterList4783 = new BitSet([0x0020000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F900000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_templateParameter_in_templateParameterList4785 ;

    //public static final BitSet FOLLOW_templateParameter_in_templateParameterList4785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_templateParameter_in_templateParameterList4785 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_templateTypeParameter_in_templateParameter4814 ;

    //public static final BitSet FOLLOW_templateTypeParameter_in_templateParameter4814 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateTypeParameter_in_templateParameter4814 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateValueParameter_in_templateParameter4820 ;

    //public static final BitSet FOLLOW_templateValueParameter_in_templateParameter4820 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateValueParameter_in_templateParameter4820 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateAliasParameter_in_templateParameter4826 ;

    //public static final BitSet FOLLOW_templateAliasParameter_in_templateParameter4826 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateAliasParameter_in_templateParameter4826 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateTupleParameter_in_templateParameter4832 ;

    //public static final BitSet FOLLOW_templateTupleParameter_in_templateParameter4832 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateTupleParameter_in_templateParameter4832 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateThisParameter_in_templateParameter4838 ;

    //public static final BitSet FOLLOW_templateThisParameter_in_templateParameter4838 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateThisParameter_in_templateParameter4838 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_defSymbol_in_templateTypeParameter4853 ;

    //public static final BitSet FOLLOW_defSymbol_in_templateTypeParameter4853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_templateTypeParameter4853 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_185_in_templateTypeParameter4856 ;

    //public static final BitSet FOLLOW_185_in_templateTypeParameter4856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_185_in_templateTypeParameter4856 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_templateTypeParameter4858 ;

    //public static final BitSet FOLLOW_type_in_templateTypeParameter4858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_templateTypeParameter4858 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_templateTypeParameter4863 ;

    //public static final BitSet FOLLOW_193_in_templateTypeParameter4863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_193_in_templateTypeParameter4863 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_templateTypeParameter4865 ;

    //public static final BitSet FOLLOW_type_in_templateTypeParameter4865 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_templateTypeParameter4865 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_templateValueParameter4893 ;

    //public static final BitSet FOLLOW_type_in_templateValueParameter4893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_templateValueParameter4893 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_templateValueParameter4895 ;

    //public static final BitSet FOLLOW_defSymbol_in_templateValueParameter4895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_templateValueParameter4895 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_185_in_templateValueParameter4902 ;

    //public static final BitSet FOLLOW_185_in_templateValueParameter4902 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_185_in_templateValueParameter4902 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_conditionalExpression_in_templateValueParameter4904 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_templateValueParameter4904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_templateValueParameter4904 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_templateValueParameter4913 ;

    //public static final BitSet FOLLOW_193_in_templateValueParameter4913 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_193_in_templateValueParameter4913 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_templateValueParameter4915 ;

    //public static final BitSet FOLLOW_assignExpression_in_templateValueParameter4915 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_templateValueParameter4915 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_212_in_templateAliasParameter4952 ;

    //public static final BitSet FOLLOW_212_in_templateAliasParameter4952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_212_in_templateAliasParameter4952 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_templateAliasParameter4954 ;

    //public static final BitSet FOLLOW_type_in_templateAliasParameter4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_templateAliasParameter4954 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_templateAliasParameter4957 ;

    //public static final BitSet FOLLOW_defSymbol_in_templateAliasParameter4957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_templateAliasParameter4957 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_185_in_templateAliasParameter4964 ;

    //public static final BitSet FOLLOW_185_in_templateAliasParameter4964 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_185_in_templateAliasParameter4964 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_lambdaExpression_in_templateAliasParameter4976 ;

    //public static final BitSet FOLLOW_lambdaExpression_in_templateAliasParameter4976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_lambdaExpression_in_templateAliasParameter4976 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_templateAliasParameter4996 ;

    //public static final BitSet FOLLOW_type_in_templateAliasParameter4996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_templateAliasParameter4996 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_conditionalExpression_in_templateAliasParameter5010 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_templateAliasParameter5010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_templateAliasParameter5010 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_templateAliasParameter5045 ;

    //public static final BitSet FOLLOW_193_in_templateAliasParameter5045 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_193_in_templateAliasParameter5045 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_lambdaExpression_in_templateAliasParameter5057 ;

    //public static final BitSet FOLLOW_lambdaExpression_in_templateAliasParameter5057 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lambdaExpression_in_templateAliasParameter5057 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_templateAliasParameter5077 ;

    //public static final BitSet FOLLOW_type_in_templateAliasParameter5077 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_templateAliasParameter5077 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_conditionalExpression_in_templateAliasParameter5091 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_templateAliasParameter5091 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_templateAliasParameter5091 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_defSymbol_in_templateTupleParameter5136 ;

    //public static final BitSet FOLLOW_defSymbol_in_templateTupleParameter5136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_defSymbol_in_templateTupleParameter5136 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_templateTupleParameter5138 ;

    //public static final BitSet FOLLOW_182_in_templateTupleParameter5138 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_182_in_templateTupleParameter5138 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_THIS_in_templateThisParameter5161 ;

    //public static final BitSet FOLLOW_EXP_THIS_in_templateThisParameter5161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_EXP_THIS_in_templateThisParameter5161 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_templateTypeParameter_in_templateThisParameter5163 ;

    //public static final BitSet FOLLOW_templateTypeParameter_in_templateThisParameter5163 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateTypeParameter_in_templateThisParameter5163 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_IF_in_constraint5186 ;

    //public static final BitSet FOLLOW_STMT_IF_in_constraint5186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_IF_in_constraint5186 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_constraint5189 ;

    //public static final BitSet FOLLOW_170_in_constraint5189 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_constraint5189 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_constraint5192 ;

    //public static final BitSet FOLLOW_expression_in_constraint5192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_constraint5192 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_constraint5194 ;

    //public static final BitSet FOLLOW_171_in_constraint5194 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_constraint5194 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_templateDeclarationBlock5211 ;

    //public static final BitSet FOLLOW_284_in_templateDeclarationBlock5211 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_284_in_templateDeclarationBlock5211 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_declDef_in_templateDeclarationBlock5213 ;

    //public static final BitSet FOLLOW_declDef_in_templateDeclarationBlock5213 = new BitSet(new long[]{0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L});


    static this()
    {
    //FOLLOW_declDef_in_templateDeclarationBlock5213 = new BitSet([0x0021000010001000L,0x0000000000001200L,0x002000000C001105L,0x03F80D2BCFCC0000L,0x000000090FEFB800L]);

    }public static BitSet FOLLOW_288_in_templateDeclarationBlock5216 ;

    //public static final BitSet FOLLOW_288_in_templateDeclarationBlock5216 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_templateDeclarationBlock5216 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_templateMixinDeclaration5240 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_templateMixinDeclaration5240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_templateMixinDeclaration5240 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_templateDeclaration_in_templateMixinDeclaration5242 ;

    //public static final BitSet FOLLOW_templateDeclaration_in_templateMixinDeclaration5242 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateDeclaration_in_templateMixinDeclaration5242 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_templateMixin5265 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_templateMixin5265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_templateMixin5265 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_templateMixin5267 ;

    //public static final BitSet FOLLOW_type_in_templateMixin5267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_templateMixin5267 = new BitSet([0x0000000000000002L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_templateMixin5280 ;

    //public static final BitSet FOLLOW_Identifier_in_templateMixin5280 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_templateMixin5280 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_284_in_blockStatement5306 ;

    //public static final BitSet FOLLOW_284_in_blockStatement5306 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000031FEFB800L});


    static this()
    {
    //FOLLOW_284_in_blockStatement5306 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000031FEFB800L]);

    }public static BitSet FOLLOW_statement_in_blockStatement5308 ;

    //public static final BitSet FOLLOW_statement_in_blockStatement5308 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000031FEFB800L});


    static this()
    {
    //FOLLOW_statement_in_blockStatement5308 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000031FEFB800L]);

    }public static BitSet FOLLOW_288_in_blockStatement5311 ;

    //public static final BitSet FOLLOW_288_in_blockStatement5311 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_blockStatement5311 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_commaExpression_in_expression5337 ;

    //public static final BitSet FOLLOW_commaExpression_in_expression5337 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_commaExpression_in_expression5337 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assignExpression_in_commaExpression5353 ;

    //public static final BitSet FOLLOW_assignExpression_in_commaExpression5353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_commaExpression5353 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_commaExpression5365 ;

    //public static final BitSet FOLLOW_177_in_commaExpression5365 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_commaExpression5365 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_commaExpression5367 ;

    //public static final BitSet FOLLOW_assignExpression_in_commaExpression5367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_commaExpression5367 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_conditionalExpression_in_assignExpression5397 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_assignExpression5397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2111224000000000L,0x0000000000028282L,0x0000000440000000L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_assignExpression5397 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x2111224000000000L,0x0000000000028282L,0x0000000440000000L]);

    }public static BitSet FOLLOW_193_in_assignExpression5429 ;

    //public static final BitSet FOLLOW_193_in_assignExpression5429 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_193_in_assignExpression5429 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5431 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5431 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5431 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_176_in_assignExpression5452 ;

    //public static final BitSet FOLLOW_176_in_assignExpression5452 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_176_in_assignExpression5452 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5454 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5454 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5454 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_180_in_assignExpression5475 ;

    //public static final BitSet FOLLOW_180_in_assignExpression5475 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_180_in_assignExpression5475 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5477 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5477 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5477 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_173_in_assignExpression5498 ;

    //public static final BitSet FOLLOW_173_in_assignExpression5498 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_173_in_assignExpression5498 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5500 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5500 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5500 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_184_in_assignExpression5521 ;

    //public static final BitSet FOLLOW_184_in_assignExpression5521 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_184_in_assignExpression5521 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5523 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5523 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5523 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_166_in_assignExpression5544 ;

    //public static final BitSet FOLLOW_166_in_assignExpression5544 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_166_in_assignExpression5544 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5546 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5546 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5546 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_169_in_assignExpression5567 ;

    //public static final BitSet FOLLOW_169_in_assignExpression5567 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_169_in_assignExpression5567 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5569 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5569 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5569 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_286_in_assignExpression5590 ;

    //public static final BitSet FOLLOW_286_in_assignExpression5590 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_286_in_assignExpression5590 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5592 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5592 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5592 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_207_in_assignExpression5613 ;

    //public static final BitSet FOLLOW_207_in_assignExpression5613 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_207_in_assignExpression5613 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5615 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5615 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5615 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_290_in_assignExpression5636 ;

    //public static final BitSet FOLLOW_290_in_assignExpression5636 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_290_in_assignExpression5636 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5638 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5638 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5638 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_189_in_assignExpression5659 ;

    //public static final BitSet FOLLOW_189_in_assignExpression5659 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_189_in_assignExpression5659 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5661 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5661 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5661 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_199_in_assignExpression5682 ;

    //public static final BitSet FOLLOW_199_in_assignExpression5682 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_199_in_assignExpression5682 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5684 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5684 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5684 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_201_in_assignExpression5705 ;

    //public static final BitSet FOLLOW_201_in_assignExpression5705 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_201_in_assignExpression5705 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5707 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5707 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5707 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_209_in_assignExpression5728 ;

    //public static final BitSet FOLLOW_209_in_assignExpression5728 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_209_in_assignExpression5728 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assignExpression5730 ;

    //public static final BitSet FOLLOW_assignExpression_in_assignExpression5730 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_assignExpression5730 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ororExpression_in_conditionalExpression5763 ;

    //public static final BitSet FOLLOW_ororExpression_in_conditionalExpression5763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});


    static this()
    {
    //FOLLOW_ororExpression_in_conditionalExpression5763 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L]);

    }public static BitSet FOLLOW_202_in_conditionalExpression5787 ;

    //public static final BitSet FOLLOW_202_in_conditionalExpression5787 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_202_in_conditionalExpression5787 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_conditionalExpression_in_conditionalExpression5789 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression5789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_conditionalExpression5789 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_conditionalExpression5792 ;

    //public static final BitSet FOLLOW_185_in_conditionalExpression5792 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_185_in_conditionalExpression5792 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_conditionalExpression_in_conditionalExpression5794 ;

    //public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression5794 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalExpression_in_conditionalExpression5794 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_andandExpression_in_ororExpression5835 ;

    //public static final BitSet FOLLOW_andandExpression_in_ororExpression5835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});


    static this()
    {
    //FOLLOW_andandExpression_in_ororExpression5835 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L]);

    }public static BitSet FOLLOW_287_in_ororExpression5858 ;

    //public static final BitSet FOLLOW_287_in_ororExpression5858 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_287_in_ororExpression5858 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_ororExpression_in_ororExpression5860 ;

    //public static final BitSet FOLLOW_ororExpression_in_ororExpression5860 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ororExpression_in_ororExpression5860 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_orCmpExpression_in_andandExpression5890 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_andandExpression5890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_andandExpression5890 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000008000000000L]);

    }public static BitSet FOLLOW_167_in_andandExpression5913 ;

    //public static final BitSet FOLLOW_167_in_andandExpression5913 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_167_in_andandExpression5913 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_andandExpression_in_andandExpression5915 ;

    //public static final BitSet FOLLOW_andandExpression_in_andandExpression5915 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_andandExpression_in_andandExpression5915 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_xorExpression_in_orCmpExpression5945 ;

    //public static final BitSet FOLLOW_xorExpression_in_orCmpExpression5945 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0xC800001FC0000000L,0x0000000000000035L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_xorExpression_in_orCmpExpression5945 = new BitSet([0x0000002000000002L,0x0000000000000000L,0xC800001FC0000000L,0x0000000000000035L,0x0000000020000000L]);

    }public static BitSet FOLLOW_285_in_orCmpExpression5973 ;

    //public static final BitSet FOLLOW_285_in_orCmpExpression5973 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_285_in_orCmpExpression5973 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression5975 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression5975 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression5975 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_194_in_orCmpExpression5994 ;

    //public static final BitSet FOLLOW_194_in_orCmpExpression5994 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_194_in_orCmpExpression5994 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression5996 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression5996 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression5996 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_161_in_orCmpExpression6015 ;

    //public static final BitSet FOLLOW_161_in_orCmpExpression6015 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_161_in_orCmpExpression6015 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6017 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6017 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6017 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_IS_in_orCmpExpression6036 ;

    //public static final BitSet FOLLOW_EXP_IS_in_orCmpExpression6036 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_EXP_IS_in_orCmpExpression6036 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6038 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6038 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6038 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_164_in_orCmpExpression6057 ;

    //public static final BitSet FOLLOW_164_in_orCmpExpression6057 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_164_in_orCmpExpression6057 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6059 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6059 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6059 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_187_in_orCmpExpression6078 ;

    //public static final BitSet FOLLOW_187_in_orCmpExpression6078 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_187_in_orCmpExpression6078 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6080 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6080 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6080 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_190_in_orCmpExpression6099 ;

    //public static final BitSet FOLLOW_190_in_orCmpExpression6099 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_190_in_orCmpExpression6099 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6101 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6101 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6101 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_196_in_orCmpExpression6120 ;

    //public static final BitSet FOLLOW_196_in_orCmpExpression6120 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_196_in_orCmpExpression6120 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6122 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6122 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6122 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_197_in_orCmpExpression6141 ;

    //public static final BitSet FOLLOW_197_in_orCmpExpression6141 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_197_in_orCmpExpression6141 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6143 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6143 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6143 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_160_in_orCmpExpression6162 ;

    //public static final BitSet FOLLOW_160_in_orCmpExpression6162 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_160_in_orCmpExpression6162 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6164 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6164 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6164 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_191_in_orCmpExpression6183 ;

    //public static final BitSet FOLLOW_191_in_orCmpExpression6183 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_191_in_orCmpExpression6183 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6185 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6185 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6185 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_192_in_orCmpExpression6204 ;

    //public static final BitSet FOLLOW_192_in_orCmpExpression6204 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_192_in_orCmpExpression6204 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6206 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6206 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6206 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_162_in_orCmpExpression6225 ;

    //public static final BitSet FOLLOW_162_in_orCmpExpression6225 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_162_in_orCmpExpression6225 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6227 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6227 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6227 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_163_in_orCmpExpression6246 ;

    //public static final BitSet FOLLOW_163_in_orCmpExpression6246 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_163_in_orCmpExpression6246 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6248 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6248 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6248 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_158_in_orCmpExpression6267 ;

    //public static final BitSet FOLLOW_158_in_orCmpExpression6267 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_158_in_orCmpExpression6267 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6269 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6269 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6269 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_159_in_orCmpExpression6288 ;

    //public static final BitSet FOLLOW_159_in_orCmpExpression6288 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_159_in_orCmpExpression6288 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_orCmpExpression_in_orCmpExpression6290 ;

    //public static final BitSet FOLLOW_orCmpExpression_in_orCmpExpression6290 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_orCmpExpression_in_orCmpExpression6290 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_andExpression_in_xorExpression6324 ;

    //public static final BitSet FOLLOW_andExpression_in_xorExpression6324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_andExpression_in_xorExpression6324 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L]);

    }public static BitSet FOLLOW_206_in_xorExpression6347 ;

    //public static final BitSet FOLLOW_206_in_xorExpression6347 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_206_in_xorExpression6347 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_xorExpression_in_xorExpression6349 ;

    //public static final BitSet FOLLOW_xorExpression_in_xorExpression6349 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_xorExpression_in_xorExpression6349 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_shiftExpression_in_andExpression6379 ;

    //public static final BitSet FOLLOW_shiftExpression_in_andExpression6379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});


    static this()
    {
    //FOLLOW_shiftExpression_in_andExpression6379 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000010000000000L]);

    }public static BitSet FOLLOW_168_in_andExpression6402 ;

    //public static final BitSet FOLLOW_168_in_andExpression6402 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_168_in_andExpression6402 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_andExpression_in_andExpression6404 ;

    //public static final BitSet FOLLOW_andExpression_in_andExpression6404 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_andExpression_in_andExpression6404 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_addExpression_in_shiftExpression6432 ;

    //public static final BitSet FOLLOW_addExpression_in_shiftExpression6432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000000000000L,0x0000000000000140L});


    static this()
    {
    //FOLLOW_addExpression_in_shiftExpression6432 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x1000000000000000L,0x0000000000000140L]);

    }public static BitSet FOLLOW_188_in_shiftExpression6460 ;

    //public static final BitSet FOLLOW_188_in_shiftExpression6460 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_188_in_shiftExpression6460 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_shiftExpression_in_shiftExpression6462 ;

    //public static final BitSet FOLLOW_shiftExpression_in_shiftExpression6462 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_shiftExpression_in_shiftExpression6462 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_198_in_shiftExpression6481 ;

    //public static final BitSet FOLLOW_198_in_shiftExpression6481 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_198_in_shiftExpression6481 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_shiftExpression_in_shiftExpression6483 ;

    //public static final BitSet FOLLOW_shiftExpression_in_shiftExpression6483 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_shiftExpression_in_shiftExpression6483 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_200_in_shiftExpression6502 ;

    //public static final BitSet FOLLOW_200_in_shiftExpression6502 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_200_in_shiftExpression6502 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_shiftExpression_in_shiftExpression6504 ;

    //public static final BitSet FOLLOW_shiftExpression_in_shiftExpression6504 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_shiftExpression_in_shiftExpression6504 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_mulExpression_in_addExpression6536 ;

    //public static final BitSet FOLLOW_mulExpression_in_addExpression6536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004400000000000L,0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_mulExpression_in_addExpression6536 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0004400000000000L,0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_174_in_addExpression6564 ;

    //public static final BitSet FOLLOW_174_in_addExpression6564 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_174_in_addExpression6564 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_addExpression_in_addExpression6566 ;

    //public static final BitSet FOLLOW_addExpression_in_addExpression6566 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_addExpression_in_addExpression6566 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_178_in_addExpression6585 ;

    //public static final BitSet FOLLOW_178_in_addExpression6585 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_178_in_addExpression6585 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_addExpression_in_addExpression6587 ;

    //public static final BitSet FOLLOW_addExpression_in_addExpression6587 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_addExpression_in_addExpression6587 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_289_in_addExpression6606 ;

    //public static final BitSet FOLLOW_289_in_addExpression6606 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_289_in_addExpression6606 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_addExpression_in_addExpression6608 ;

    //public static final BitSet FOLLOW_addExpression_in_addExpression6608 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_addExpression_in_addExpression6608 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_unaryExpression_in_mulExpression6642 ;

    //public static final BitSet FOLLOW_unaryExpression_in_mulExpression6642 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080102000000000L});


    static this()
    {
    //FOLLOW_unaryExpression_in_mulExpression6642 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0080102000000000L]);

    }public static BitSet FOLLOW_172_in_mulExpression6670 ;

    //public static final BitSet FOLLOW_172_in_mulExpression6670 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_172_in_mulExpression6670 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_mulExpression_in_mulExpression6672 ;

    //public static final BitSet FOLLOW_mulExpression_in_mulExpression6672 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_mulExpression_in_mulExpression6672 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_183_in_mulExpression6691 ;

    //public static final BitSet FOLLOW_183_in_mulExpression6691 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_183_in_mulExpression6691 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_mulExpression_in_mulExpression6693 ;

    //public static final BitSet FOLLOW_mulExpression_in_mulExpression6693 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_mulExpression_in_mulExpression6693 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_165_in_mulExpression6712 ;

    //public static final BitSet FOLLOW_165_in_mulExpression6712 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_165_in_mulExpression6712 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_mulExpression_in_mulExpression6714 ;

    //public static final BitSet FOLLOW_mulExpression_in_mulExpression6714 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_mulExpression_in_mulExpression6714 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_powExpression_in_unaryExpression6749 ;

    //public static final BitSet FOLLOW_powExpression_in_unaryExpression6749 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_powExpression_in_unaryExpression6749 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_168_in_unaryExpression6761 ;

    //public static final BitSet FOLLOW_168_in_unaryExpression6761 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_168_in_unaryExpression6761 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6763 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6763 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6763 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_175_in_unaryExpression6780 ;

    //public static final BitSet FOLLOW_175_in_unaryExpression6780 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_175_in_unaryExpression6780 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6782 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6782 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6782 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_172_in_unaryExpression6799 ;

    //public static final BitSet FOLLOW_172_in_unaryExpression6799 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_172_in_unaryExpression6799 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6801 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6801 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6801 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_174_in_unaryExpression6818 ;

    //public static final BitSet FOLLOW_174_in_unaryExpression6818 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_174_in_unaryExpression6818 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6820 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6820 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6820 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_178_in_unaryExpression6837 ;

    //public static final BitSet FOLLOW_178_in_unaryExpression6837 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_178_in_unaryExpression6837 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6839 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6839 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6839 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_157_in_unaryExpression6856 ;

    //public static final BitSet FOLLOW_157_in_unaryExpression6856 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_157_in_unaryExpression6856 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6858 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6858 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6858 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_289_in_unaryExpression6875 ;

    //public static final BitSet FOLLOW_289_in_unaryExpression6875 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_289_in_unaryExpression6875 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_unaryExpression6877 ;

    //public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6877 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_unaryExpression6877 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_newExpression_in_unaryExpression6899 ;

    //public static final BitSet FOLLOW_newExpression_in_unaryExpression6899 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_newExpression_in_unaryExpression6899 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_deleteExpression_in_unaryExpression6911 ;

    //public static final BitSet FOLLOW_deleteExpression_in_unaryExpression6911 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_deleteExpression_in_unaryExpression6911 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_castExpression_in_unaryExpression6923 ;

    //public static final BitSet FOLLOW_castExpression_in_unaryExpression6923 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_castExpression_in_unaryExpression6923 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_NEW_in_newExpression6950 ;

    //public static final BitSet FOLLOW_EXP_NEW_in_newExpression6950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_EXP_NEW_in_newExpression6950 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_allocArgs_in_newExpression6957 ;

    //public static final BitSet FOLLOW_allocArgs_in_newExpression6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_allocArgs_in_newExpression6957 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_newExpression6960 ;

    //public static final BitSet FOLLOW_type_in_newExpression6960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_type_in_newExpression6960 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_newExpression6974 ;

    //public static final BitSet FOLLOW_170_in_newExpression6974 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_newExpression6974 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_newExpression6977 ;

    //public static final BitSet FOLLOW_argumentList_in_newExpression6977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_argumentList_in_newExpression6977 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_newExpression6979 ;

    //public static final BitSet FOLLOW_171_in_newExpression6979 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_newExpression6979 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_170_in_allocArgs6996 ;

    //public static final BitSet FOLLOW_170_in_allocArgs6996 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_allocArgs6996 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_allocArgs6999 ;

    //public static final BitSet FOLLOW_argumentList_in_allocArgs6999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_argumentList_in_allocArgs6999 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_allocArgs7001 ;

    //public static final BitSet FOLLOW_171_in_allocArgs7001 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_allocArgs7001 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_DELETE_in_deleteExpression7017 ;

    //public static final BitSet FOLLOW_EXP_DELETE_in_deleteExpression7017 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_EXP_DELETE_in_deleteExpression7017 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_deleteExpression7020 ;

    //public static final BitSet FOLLOW_unaryExpression_in_deleteExpression7020 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_deleteExpression7020 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_CAST_in_castExpression7035 ;

    //public static final BitSet FOLLOW_EXP_CAST_in_castExpression7035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_CAST_in_castExpression7035 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_castExpression7042 ;

    //public static final BitSet FOLLOW_170_in_castExpression7042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020080000000000L,0x03B80821CF800000L,0x000000000DE70800L});


    static this()
    {
    //FOLLOW_170_in_castExpression7042 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020080000000000L,0x03B80821CF800000L,0x000000000DE70800L]);

    }public static BitSet FOLLOW_type_in_castExpression7046 ;

    //public static final BitSet FOLLOW_type_in_castExpression7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_type_in_castExpression7046 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_castQual_in_castExpression7050 ;

    //public static final BitSet FOLLOW_castQual_in_castExpression7050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_castQual_in_castExpression7050 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_castExpression7054 ;

    //public static final BitSet FOLLOW_171_in_castExpression7054 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_171_in_castExpression7054 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_castExpression7057 ;

    //public static final BitSet FOLLOW_unaryExpression_in_castExpression7057 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_castExpression7057 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_castQualifier_in_castQual7072 ;

    //public static final BitSet FOLLOW_castQualifier_in_castQual7072 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_castQualifier_in_castQual7072 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_222_in_castQualifier7095 ;

    //public static final BitSet FOLLOW_222_in_castQualifier7095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_222_in_castQualifier7095 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_273_in_castQualifier7097 ;

    //public static final BitSet FOLLOW_273_in_castQualifier7097 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_273_in_castQualifier7097 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_273_in_castQualifier7104 ;

    //public static final BitSet FOLLOW_273_in_castQualifier7104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000040000000L});


    static this()
    {
    //FOLLOW_273_in_castQualifier7104 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000040000000L]);

    }public static BitSet FOLLOW_247_in_castQualifier7120 ;

    //public static final BitSet FOLLOW_247_in_castQualifier7120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_247_in_castQualifier7120 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_273_in_castQualifier7122 ;

    //public static final BitSet FOLLOW_273_in_castQualifier7122 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_273_in_castQualifier7122 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_245_in_castQualifier7129 ;

    //public static final BitSet FOLLOW_245_in_castQualifier7129 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_245_in_castQualifier7129 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_postFixExpression_in_powExpression7145 ;

    //public static final BitSet FOLLOW_postFixExpression_in_powExpression7145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_postFixExpression_in_powExpression7145 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_208_in_powExpression7168 ;

    //public static final BitSet FOLLOW_208_in_powExpression7168 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_208_in_powExpression7168 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_unaryExpression_in_powExpression7170 ;

    //public static final BitSet FOLLOW_unaryExpression_in_powExpression7170 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_unaryExpression_in_powExpression7170 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_primaryExpression_in_postFixExpression7200 ;

    //public static final BitSet FOLLOW_primaryExpression_in_postFixExpression7200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_primaryExpression_in_postFixExpression7200 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_175_in_postFixExpression7231 ;

    //public static final BitSet FOLLOW_175_in_postFixExpression7231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_175_in_postFixExpression7231 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_179_in_postFixExpression7248 ;

    //public static final BitSet FOLLOW_179_in_postFixExpression7248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_179_in_postFixExpression7248 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_170_in_postFixExpression7265 ;

    //public static final BitSet FOLLOW_170_in_postFixExpression7265 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_postFixExpression7265 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_postFixExpression7267 ;

    //public static final BitSet FOLLOW_argumentList_in_postFixExpression7267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_argumentList_in_postFixExpression7267 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_postFixExpression7269 ;

    //public static final BitSet FOLLOW_171_in_postFixExpression7269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_171_in_postFixExpression7269 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_204_in_postFixExpression7299 ;

    //public static final BitSet FOLLOW_204_in_postFixExpression7299 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_postFixExpression7299 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_postFixExpression7301 ;

    //public static final BitSet FOLLOW_assignExpression_in_postFixExpression7301 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_postFixExpression7301 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_postFixExpression7303 ;

    //public static final BitSet FOLLOW_Range_in_postFixExpression7303 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_Range_in_postFixExpression7303 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_postFixExpression7305 ;

    //public static final BitSet FOLLOW_assignExpression_in_postFixExpression7305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_assignExpression_in_postFixExpression7305 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_205_in_postFixExpression7307 ;

    //public static final BitSet FOLLOW_205_in_postFixExpression7307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_205_in_postFixExpression7307 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_204_in_postFixExpression7349 ;

    //public static final BitSet FOLLOW_204_in_postFixExpression7349 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400002808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_postFixExpression7349 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400002808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_postFixExpression7351 ;

    //public static final BitSet FOLLOW_argumentList_in_postFixExpression7351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_argumentList_in_postFixExpression7351 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_205_in_postFixExpression7353 ;

    //public static final BitSet FOLLOW_205_in_postFixExpression7353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_205_in_postFixExpression7353 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_181_in_postFixExpression7369 ;

    //public static final BitSet FOLLOW_181_in_postFixExpression7369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_postFixExpression7369 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_postFixExpression7371 ;

    //public static final BitSet FOLLOW_Identifier_in_postFixExpression7371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_Identifier_in_postFixExpression7371 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_157_in_postFixExpression7406 ;

    //public static final BitSet FOLLOW_157_in_postFixExpression7406 = new BitSet(new long[]{0x2000310000008400L,0x0000000000011000L,0x0000040000000400L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_157_in_postFixExpression7406 = new BitSet([0x2000310000008400L,0x0000000000011000L,0x0000040000000400L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_templateSingleArgument_in_postFixExpression7410 ;

    //public static final BitSet FOLLOW_templateSingleArgument_in_postFixExpression7410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_templateSingleArgument_in_postFixExpression7410 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_170_in_postFixExpression7435 ;

    //public static final BitSet FOLLOW_170_in_postFixExpression7435 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_170_in_postFixExpression7435 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258F800808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_templateArgumentList_in_postFixExpression7437 ;

    //public static final BitSet FOLLOW_templateArgumentList_in_postFixExpression7437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_templateArgumentList_in_postFixExpression7437 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_postFixExpression7439 ;

    //public static final BitSet FOLLOW_171_in_postFixExpression7439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_171_in_postFixExpression7439 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0028840020000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_IntegerLiteral_in_primaryExpression7480 ;

    //public static final BitSet FOLLOW_IntegerLiteral_in_primaryExpression7480 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_IntegerLiteral_in_primaryExpression7480 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_FloatLiteral_in_primaryExpression7493 ;

    //public static final BitSet FOLLOW_FloatLiteral_in_primaryExpression7493 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_FloatLiteral_in_primaryExpression7493 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_CharacterLiteral_in_primaryExpression7506 ;

    //public static final BitSet FOLLOW_CharacterLiteral_in_primaryExpression7506 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CharacterLiteral_in_primaryExpression7506 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_StringLiteral_in_primaryExpression7519 ;

    //public static final BitSet FOLLOW_StringLiteral_in_primaryExpression7519 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_StringLiteral_in_primaryExpression7519 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_THIS_in_primaryExpression7532 ;

    //public static final BitSet FOLLOW_EXP_THIS_in_primaryExpression7532 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_THIS_in_primaryExpression7532 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_SUPER_in_primaryExpression7538 ;

    //public static final BitSet FOLLOW_EXP_SUPER_in_primaryExpression7538 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_SUPER_in_primaryExpression7538 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_NULL_in_primaryExpression7544 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_NULL_in_primaryExpression7544 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_NULL_in_primaryExpression7544 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_primaryExpression7560 ;

    //public static final BitSet FOLLOW_181_in_primaryExpression7560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_primaryExpression7560 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7562 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7562 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7562 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_primaryExpression7587 ;

    //public static final BitSet FOLLOW_181_in_primaryExpression7587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_primaryExpression7587 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7589 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7589 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7589 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_primaryExpression7604 ;

    //public static final BitSet FOLLOW_181_in_primaryExpression7604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_primaryExpression7604 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7606 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7606 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7606 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7632 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7632 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7632 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7647 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7647 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7647 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_lambdaExpression_in_primaryExpression7662 ;

    //public static final BitSet FOLLOW_lambdaExpression_in_primaryExpression7662 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lambdaExpression_in_primaryExpression7662 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_refIdentifier_in_primaryExpression7669 ;

    //public static final BitSet FOLLOW_refIdentifier_in_primaryExpression7669 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_refIdentifier_in_primaryExpression7669 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_DOLLAR_in_primaryExpression7683 ;

    //public static final BitSet FOLLOW_EXP_DOLLAR_in_primaryExpression7683 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_DOLLAR_in_primaryExpression7683 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_FILE_in_primaryExpression7689 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_FILE_in_primaryExpression7689 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_FILE_in_primaryExpression7689 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_LITERAL_LINE_in_primaryExpression7695 ;

    //public static final BitSet FOLLOW_EXP_LITERAL_LINE_in_primaryExpression7695 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_LITERAL_LINE_in_primaryExpression7695 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_lambdaExpression_in_primaryExpression7709 ;

    //public static final BitSet FOLLOW_lambdaExpression_in_primaryExpression7709 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lambdaExpression_in_primaryExpression7709 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_170_in_primaryExpression7716 ;

    //public static final BitSet FOLLOW_170_in_primaryExpression7716 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_primaryExpression7716 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_primaryExpression7719 ;

    //public static final BitSet FOLLOW_assignExpression_in_primaryExpression7719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_primaryExpression7719 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_primaryExpression7721 ;

    //public static final BitSet FOLLOW_171_in_primaryExpression7721 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_primaryExpression7721 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assertExpression_in_primaryExpression7728 ;

    //public static final BitSet FOLLOW_assertExpression_in_primaryExpression7728 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assertExpression_in_primaryExpression7728 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_mixinExpression_in_primaryExpression7734 ;

    //public static final BitSet FOLLOW_mixinExpression_in_primaryExpression7734 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_mixinExpression_in_primaryExpression7734 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_typeOfExpression_in_primaryExpression7740 ;

    //public static final BitSet FOLLOW_typeOfExpression_in_primaryExpression7740 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_typeOfExpression_in_primaryExpression7740 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_typeIdExpression_in_primaryExpression7746 ;

    //public static final BitSet FOLLOW_typeIdExpression_in_primaryExpression7746 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_typeIdExpression_in_primaryExpression7746 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_functionLiteral_in_primaryExpression7752 ;

    //public static final BitSet FOLLOW_functionLiteral_in_primaryExpression7752 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionLiteral_in_primaryExpression7752 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_importExpression_in_primaryExpression7758 ;

    //public static final BitSet FOLLOW_importExpression_in_primaryExpression7758 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_importExpression_in_primaryExpression7758 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_isExpression_in_primaryExpression7764 ;

    //public static final BitSet FOLLOW_isExpression_in_primaryExpression7764 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_isExpression_in_primaryExpression7764 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_traitsExpression_in_primaryExpression7770 ;

    //public static final BitSet FOLLOW_traitsExpression_in_primaryExpression7770 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_traitsExpression_in_primaryExpression7770 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_ASSERT_in_assertExpression7785 ;

    //public static final BitSet FOLLOW_EXP_ASSERT_in_assertExpression7785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_ASSERT_in_assertExpression7785 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_assertExpression7788 ;

    //public static final BitSet FOLLOW_170_in_assertExpression7788 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_assertExpression7788 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assertExpression7791 ;

    //public static final BitSet FOLLOW_assignExpression_in_assertExpression7791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_assertExpression7791 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002080000000000L]);

    }public static BitSet FOLLOW_177_in_assertExpression7794 ;

    //public static final BitSet FOLLOW_177_in_assertExpression7794 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_assertExpression7794 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_assertExpression7796 ;

    //public static final BitSet FOLLOW_assignExpression_in_assertExpression7796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_assertExpression7796 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_assertExpression7800 ;

    //public static final BitSet FOLLOW_171_in_assertExpression7800 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_assertExpression7800 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_mixinExpression7816 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_mixinExpression7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_mixinExpression7816 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_mixinExpression7819 ;

    //public static final BitSet FOLLOW_170_in_mixinExpression7819 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_mixinExpression7819 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_mixinExpression7822 ;

    //public static final BitSet FOLLOW_assignExpression_in_mixinExpression7822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_mixinExpression7822 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_mixinExpression7824 ;

    //public static final BitSet FOLLOW_171_in_mixinExpression7824 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_mixinExpression7824 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_TYPEOF_in_typeOfExpression7840 ;

    //public static final BitSet FOLLOW_EXP_TYPEOF_in_typeOfExpression7840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_TYPEOF_in_typeOfExpression7840 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_typeOfExpression7842 ;

    //public static final BitSet FOLLOW_170_in_typeOfExpression7842 = new BitSet(new long[]{0x21F3312D40008000L,0x8000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_typeOfExpression7842 = new BitSet([0x21F3312D40008000L,0x8000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_STMT_RETURN_in_typeOfExpression7847 ;

    //public static final BitSet FOLLOW_STMT_RETURN_in_typeOfExpression7847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_STMT_RETURN_in_typeOfExpression7847 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_expression_in_typeOfExpression7851 ;

    //public static final BitSet FOLLOW_expression_in_typeOfExpression7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_typeOfExpression7851 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_typeOfExpression7854 ;

    //public static final BitSet FOLLOW_171_in_typeOfExpression7854 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_typeOfExpression7854 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_TYPEID_in_typeIdExpression7870 ;

    //public static final BitSet FOLLOW_EXP_TYPEID_in_typeIdExpression7870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_TYPEID_in_typeIdExpression7870 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_typeIdExpression7873 ;

    //public static final BitSet FOLLOW_170_in_typeIdExpression7873 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_typeIdExpression7873 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_typeIdExpression7876 ;

    //public static final BitSet FOLLOW_expression_in_typeIdExpression7876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_typeIdExpression7876 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_typeIdExpression7878 ;

    //public static final BitSet FOLLOW_171_in_typeIdExpression7878 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_typeIdExpression7878 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_lambdaExpression7892 ;

    //public static final BitSet FOLLOW_Identifier_in_lambdaExpression7892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});


    static this()
    {
    //FOLLOW_Identifier_in_lambdaExpression7892 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L]);

    }public static BitSet FOLLOW_195_in_lambdaExpression7894 ;

    //public static final BitSet FOLLOW_195_in_lambdaExpression7894 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_195_in_lambdaExpression7894 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_lambdaExpression7896 ;

    //public static final BitSet FOLLOW_assignExpression_in_lambdaExpression7896 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_lambdaExpression7896 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_parameters_in_lambdaExpression7918 ;

    //public static final BitSet FOLLOW_parameters_in_lambdaExpression7918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000808L,0x0000000000009000L});


    static this()
    {
    //FOLLOW_parameters_in_lambdaExpression7918 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000808L,0x0000000000009000L]);

    }public static BitSet FOLLOW_functionAttribute_in_lambdaExpression7921 ;

    //public static final BitSet FOLLOW_functionAttribute_in_lambdaExpression7921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000808L,0x0000000000009000L});


    static this()
    {
    //FOLLOW_functionAttribute_in_lambdaExpression7921 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000808L,0x0000000000009000L]);

    }public static BitSet FOLLOW_195_in_lambdaExpression7924 ;

    //public static final BitSet FOLLOW_195_in_lambdaExpression7924 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_195_in_lambdaExpression7924 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_lambdaExpression7926 ;

    //public static final BitSet FOLLOW_assignExpression_in_lambdaExpression7926 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignExpression_in_lambdaExpression7926 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_237_in_functionLiteral7966 ;

    //public static final BitSet FOLLOW_237_in_functionLiteral7966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000001DE50800L});


    static this()
    {
    //FOLLOW_237_in_functionLiteral7966 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000001DE50800L]);

    }public static BitSet FOLLOW_226_in_functionLiteral7970 ;

    //public static final BitSet FOLLOW_226_in_functionLiteral7970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000001DE50800L});


    static this()
    {
    //FOLLOW_226_in_functionLiteral7970 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020040000000000L,0x031808218F800000L,0x000000001DE50800L]);

    }public static BitSet FOLLOW_type_in_functionLiteral7973 ;

    //public static final BitSet FOLLOW_type_in_functionLiteral7973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_type_in_functionLiteral7973 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_parameters_in_functionLiteral7977 ;

    //public static final BitSet FOLLOW_parameters_in_functionLiteral7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000010009000L});


    static this()
    {
    //FOLLOW_parameters_in_functionLiteral7977 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000010009000L]);

    }public static BitSet FOLLOW_functionAttribute_in_functionLiteral7979 ;

    //public static final BitSet FOLLOW_functionAttribute_in_functionLiteral7979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000010009000L});


    static this()
    {
    //FOLLOW_functionAttribute_in_functionLiteral7979 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000010009000L]);

    }public static BitSet FOLLOW_functionBody_in_functionLiteral7984 ;

    //public static final BitSet FOLLOW_functionBody_in_functionLiteral7984 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_functionBody_in_functionLiteral7984 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_246_in_importExpression8018 ;

    //public static final BitSet FOLLOW_246_in_importExpression8018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_246_in_importExpression8018 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_importExpression8020 ;

    //public static final BitSet FOLLOW_170_in_importExpression8020 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_importExpression8020 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_importExpression8022 ;

    //public static final BitSet FOLLOW_assignExpression_in_importExpression8022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_importExpression8022 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_importExpression8024 ;

    //public static final BitSet FOLLOW_171_in_importExpression8024 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_importExpression8024 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_IS_in_isExpression8047 ;

    //public static final BitSet FOLLOW_EXP_IS_in_isExpression8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_IS_in_isExpression8047 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_isExpression8050 ;

    //public static final BitSet FOLLOW_170_in_isExpression8050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_isExpression8050 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_isExpression8053 ;

    //public static final BitSet FOLLOW_type_in_isExpression8053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0200000000000000L,0x0000000000000004L});


    static this()
    {
    //FOLLOW_type_in_isExpression8053 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0200000000000000L,0x0000000000000004L]);

    }public static BitSet FOLLOW_Identifier_in_isExpression8056 ;

    //public static final BitSet FOLLOW_Identifier_in_isExpression8056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000004L});


    static this()
    {
    //FOLLOW_Identifier_in_isExpression8056 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000004L]);

    }public static BitSet FOLLOW_185_in_isExpression8066 ;

    //public static final BitSet FOLLOW_185_in_isExpression8066 = new BitSet(new long[]{0x0010000010001000L,0x8000000000001200L,0x0020000004000100L,0x03B82825CF800000L,0x000000000DE70800L});


    static this()
    {
    //FOLLOW_185_in_isExpression8066 = new BitSet([0x0010000010001000L,0x8000000000001200L,0x0020000004000100L,0x03B82825CF800000L,0x000000000DE70800L]);

    }public static BitSet FOLLOW_typeSpecialization_in_isExpression8069 ;

    //public static final BitSet FOLLOW_typeSpecialization_in_isExpression8069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080000000000L});


    static this()
    {
    //FOLLOW_typeSpecialization_in_isExpression8069 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002080000000000L]);

    }public static BitSet FOLLOW_194_in_isExpression8074 ;

    //public static final BitSet FOLLOW_194_in_isExpression8074 = new BitSet(new long[]{0x0010000010001000L,0x8000000000001200L,0x0020000004000100L,0x03B82825CF800000L,0x000000000DE70800L});


    static this()
    {
    //FOLLOW_194_in_isExpression8074 = new BitSet([0x0010000010001000L,0x8000000000001200L,0x0020000004000100L,0x03B82825CF800000L,0x000000000DE70800L]);

    }public static BitSet FOLLOW_typeSpecialization_in_isExpression8077 ;

    //public static final BitSet FOLLOW_typeSpecialization_in_isExpression8077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080000000000L});


    static this()
    {
    //FOLLOW_typeSpecialization_in_isExpression8077 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002080000000000L]);

    }public static BitSet FOLLOW_177_in_isExpression8085 ;

    //public static final BitSet FOLLOW_177_in_isExpression8085 = new BitSet(new long[]{0x0020000000000000L,0x0000000000001000L,0x0020080000000000L,0x031808218F900000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_177_in_isExpression8085 = new BitSet([0x0020000000000000L,0x0000000000001000L,0x0020080000000000L,0x031808218F900000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_templateParameterList_in_isExpression8087 ;

    //public static final BitSet FOLLOW_templateParameterList_in_isExpression8087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_templateParameterList_in_isExpression8087 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_isExpression8091 ;

    //public static final BitSet FOLLOW_171_in_isExpression8091 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_isExpression8091 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_typeSpecialization8107 ;

    //public static final BitSet FOLLOW_type_in_typeSpecialization8107 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_typeSpecialization8107 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STRUCT_DECLARATION_in_typeSpecialization8113 ;

    //public static final BitSet FOLLOW_STRUCT_DECLARATION_in_typeSpecialization8113 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STRUCT_DECLARATION_in_typeSpecialization8113 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_UNION_DECLARATION_in_typeSpecialization8117 ;

    //public static final BitSet FOLLOW_UNION_DECLARATION_in_typeSpecialization8117 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_UNION_DECLARATION_in_typeSpecialization8117 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_CLASS_DECLARATION_in_typeSpecialization8121 ;

    //public static final BitSet FOLLOW_CLASS_DECLARATION_in_typeSpecialization8121 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CLASS_DECLARATION_in_typeSpecialization8121 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_INTERFACE_DECLARATION_in_typeSpecialization8127 ;

    //public static final BitSet FOLLOW_INTERFACE_DECLARATION_in_typeSpecialization8127 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_INTERFACE_DECLARATION_in_typeSpecialization8127 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ENUM_DECLARATION_in_typeSpecialization8131 ;

    //public static final BitSet FOLLOW_ENUM_DECLARATION_in_typeSpecialization8131 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ENUM_DECLARATION_in_typeSpecialization8131 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_237_in_typeSpecialization8135 ;

    //public static final BitSet FOLLOW_237_in_typeSpecialization8135 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_237_in_typeSpecialization8135 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_226_in_typeSpecialization8141 ;

    //public static final BitSet FOLLOW_226_in_typeSpecialization8141 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_226_in_typeSpecialization8141 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_SUPER_in_typeSpecialization8145 ;

    //public static final BitSet FOLLOW_EXP_SUPER_in_typeSpecialization8145 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_SUPER_in_typeSpecialization8145 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_222_in_typeSpecialization8149 ;

    //public static final BitSet FOLLOW_222_in_typeSpecialization8149 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_222_in_typeSpecialization8149 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_245_in_typeSpecialization8155 ;

    //public static final BitSet FOLLOW_245_in_typeSpecialization8155 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_245_in_typeSpecialization8155 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_247_in_typeSpecialization8159 ;

    //public static final BitSet FOLLOW_247_in_typeSpecialization8159 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_247_in_typeSpecialization8159 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_273_in_typeSpecialization8163 ;

    //public static final BitSet FOLLOW_273_in_typeSpecialization8163 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_273_in_typeSpecialization8163 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_RETURN_in_typeSpecialization8169 ;

    //public static final BitSet FOLLOW_STMT_RETURN_in_typeSpecialization8169 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STMT_RETURN_in_typeSpecialization8169 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_TRAITS_in_traitsExpression8184 ;

    //public static final BitSet FOLLOW_EXP_TRAITS_in_traitsExpression8184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_TRAITS_in_traitsExpression8184 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_traitsExpression8186 ;

    //public static final BitSet FOLLOW_170_in_traitsExpression8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF407C01030200000L,0x00000000000047FFL});


    static this()
    {
    //FOLLOW_170_in_traitsExpression8186 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF407C01030200000L,0x00000000000047FFL]);

    }public static BitSet FOLLOW_250_in_traitsExpression8195 ;

    //public static final BitSet FOLLOW_250_in_traitsExpression8195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_250_in_traitsExpression8195 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_252_in_traitsExpression8199 ;

    //public static final BitSet FOLLOW_252_in_traitsExpression8199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_252_in_traitsExpression8199 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_253_in_traitsExpression8203 ;

    //public static final BitSet FOLLOW_253_in_traitsExpression8203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_253_in_traitsExpression8203 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_254_in_traitsExpression8207 ;

    //public static final BitSet FOLLOW_254_in_traitsExpression8207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_254_in_traitsExpression8207 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_256_in_traitsExpression8216 ;

    //public static final BitSet FOLLOW_256_in_traitsExpression8216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_256_in_traitsExpression8216 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_257_in_traitsExpression8220 ;

    //public static final BitSet FOLLOW_257_in_traitsExpression8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_257_in_traitsExpression8220 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_262_in_traitsExpression8224 ;

    //public static final BitSet FOLLOW_262_in_traitsExpression8224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_262_in_traitsExpression8224 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_263_in_traitsExpression8228 ;

    //public static final BitSet FOLLOW_263_in_traitsExpression8228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_263_in_traitsExpression8228 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_265_in_traitsExpression8232 ;

    //public static final BitSet FOLLOW_265_in_traitsExpression8232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_265_in_traitsExpression8232 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_266_in_traitsExpression8241 ;

    //public static final BitSet FOLLOW_266_in_traitsExpression8241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});


    static this()
    {
    //FOLLOW_266_in_traitsExpression8241 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L]);

    }public static BitSet FOLLOW_251_in_traitsExpression8243 ;

    //public static final BitSet FOLLOW_251_in_traitsExpression8243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_251_in_traitsExpression8243 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_255_in_traitsExpression8247 ;

    //public static final BitSet FOLLOW_255_in_traitsExpression8247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_255_in_traitsExpression8247 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_264_in_traitsExpression8251 ;

    //public static final BitSet FOLLOW_264_in_traitsExpression8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_264_in_traitsExpression8251 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_260_in_traitsExpression8259 ;

    //public static final BitSet FOLLOW_260_in_traitsExpression8259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_260_in_traitsExpression8259 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_259_in_traitsExpression8263 ;

    //public static final BitSet FOLLOW_259_in_traitsExpression8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_259_in_traitsExpression8263 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_258_in_traitsExpression8267 ;

    //public static final BitSet FOLLOW_258_in_traitsExpression8267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_258_in_traitsExpression8267 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_241_in_traitsExpression8271 ;

    //public static final BitSet FOLLOW_241_in_traitsExpression8271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_241_in_traitsExpression8271 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_242_in_traitsExpression8275 ;

    //public static final BitSet FOLLOW_242_in_traitsExpression8275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_242_in_traitsExpression8275 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_238_in_traitsExpression8279 ;

    //public static final BitSet FOLLOW_238_in_traitsExpression8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_238_in_traitsExpression8279 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_239_in_traitsExpression8287 ;

    //public static final BitSet FOLLOW_239_in_traitsExpression8287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_239_in_traitsExpression8287 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_240_in_traitsExpression8290 ;

    //public static final BitSet FOLLOW_240_in_traitsExpression8290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_240_in_traitsExpression8290 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_270_in_traitsExpression8294 ;

    //public static final BitSet FOLLOW_270_in_traitsExpression8294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_270_in_traitsExpression8294 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_220_in_traitsExpression8298 ;

    //public static final BitSet FOLLOW_220_in_traitsExpression8298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_220_in_traitsExpression8298 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_213_in_traitsExpression8302 ;

    //public static final BitSet FOLLOW_213_in_traitsExpression8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_213_in_traitsExpression8302 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_228_in_traitsExpression8310 ;

    //public static final BitSet FOLLOW_228_in_traitsExpression8310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_228_in_traitsExpression8310 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_261_in_traitsExpression8314 ;

    //public static final BitSet FOLLOW_261_in_traitsExpression8314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_261_in_traitsExpression8314 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_221_in_traitsExpression8318 ;

    //public static final BitSet FOLLOW_221_in_traitsExpression8318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_221_in_traitsExpression8318 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_177_in_traitsExpression8332 ;

    //public static final BitSet FOLLOW_177_in_traitsExpression8332 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_traitsExpression8332 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_traitsExpression8336 ;

    //public static final BitSet FOLLOW_assignExpression_in_traitsExpression8336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022080000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_assignExpression_in_traitsExpression8336 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022080000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_type_in_traitsExpression8340 ;

    //public static final BitSet FOLLOW_type_in_traitsExpression8340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0022080000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_type_in_traitsExpression8340 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0022080000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_171_in_traitsExpression8349 ;

    //public static final BitSet FOLLOW_171_in_traitsExpression8349 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_171_in_traitsExpression8349 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_186_in_statement8367 ;

    //public static final BitSet FOLLOW_186_in_statement8367 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_statement8367 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatement_in_statement8374 ;

    //public static final BitSet FOLLOW_nonEmptyStatement_in_statement8374 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatement_in_statement8374 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_scopeBlockStatement_in_statement8380 ;

    //public static final BitSet FOLLOW_scopeBlockStatement_in_statement8380 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeBlockStatement_in_statement8380 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatement_in_noScopeNonEmptyStatement8395 ;

    //public static final BitSet FOLLOW_nonEmptyStatement_in_noScopeNonEmptyStatement8395 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatement_in_noScopeNonEmptyStatement8395 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_blockStatement_in_noScopeNonEmptyStatement8401 ;

    //public static final BitSet FOLLOW_blockStatement_in_noScopeNonEmptyStatement8401 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_noScopeNonEmptyStatement8401 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_186_in_noScopeStatement8414 ;

    //public static final BitSet FOLLOW_186_in_noScopeStatement8414 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_noScopeStatement8414 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatement_in_noScopeStatement8421 ;

    //public static final BitSet FOLLOW_nonEmptyStatement_in_noScopeStatement8421 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatement_in_noScopeStatement8421 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_blockStatement_in_noScopeStatement8427 ;

    //public static final BitSet FOLLOW_blockStatement_in_noScopeStatement8427 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_noScopeStatement8427 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatement_in_nonEmptyOrScopeBlockStatement8442 ;

    //public static final BitSet FOLLOW_nonEmptyStatement_in_nonEmptyOrScopeBlockStatement8442 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatement_in_nonEmptyOrScopeBlockStatement8442 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_scopeBlockStatement_in_nonEmptyOrScopeBlockStatement8448 ;

    //public static final BitSet FOLLOW_scopeBlockStatement_in_nonEmptyOrScopeBlockStatement8448 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeBlockStatement_in_nonEmptyOrScopeBlockStatement8448 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatementNoCaseNoDefault_in_nonEmptyStatement8463 ;

    //public static final BitSet FOLLOW_nonEmptyStatementNoCaseNoDefault_in_nonEmptyStatement8463 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatementNoCaseNoDefault_in_nonEmptyStatement8463 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_caseStatement_in_nonEmptyStatement8469 ;

    //public static final BitSet FOLLOW_caseStatement_in_nonEmptyStatement8469 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_caseStatement_in_nonEmptyStatement8469 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_defaultStatement_in_nonEmptyStatement8481 ;

    //public static final BitSet FOLLOW_defaultStatement_in_nonEmptyStatement8481 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_defaultStatement_in_nonEmptyStatement8481 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_labeledStatement_in_nonEmptyStatementNoCaseNoDefault8504 ;

    //public static final BitSet FOLLOW_labeledStatement_in_nonEmptyStatementNoCaseNoDefault8504 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_labeledStatement_in_nonEmptyStatementNoCaseNoDefault8504 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8519 ;

    //public static final BitSet FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8519 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8519 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8534 ;

    //public static final BitSet FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8534 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8534 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_staticAssert_in_nonEmptyStatementNoCaseNoDefault8549 ;

    //public static final BitSet FOLLOW_staticAssert_in_nonEmptyStatementNoCaseNoDefault8549 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_staticAssert_in_nonEmptyStatementNoCaseNoDefault8549 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declarationStatement_in_nonEmptyStatementNoCaseNoDefault8562 ;

    //public static final BitSet FOLLOW_declarationStatement_in_nonEmptyStatementNoCaseNoDefault8562 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declarationStatement_in_nonEmptyStatementNoCaseNoDefault8562 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8577 ;

    //public static final BitSet FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8577 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8577 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_templateMixin_in_nonEmptyStatementNoCaseNoDefault8592 ;

    //public static final BitSet FOLLOW_templateMixin_in_nonEmptyStatementNoCaseNoDefault8592 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_templateMixin_in_nonEmptyStatementNoCaseNoDefault8592 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8599 ;

    //public static final BitSet FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8599 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expressionStatement_in_nonEmptyStatementNoCaseNoDefault8599 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ifStatement_in_nonEmptyStatementNoCaseNoDefault8605 ;

    //public static final BitSet FOLLOW_ifStatement_in_nonEmptyStatementNoCaseNoDefault8605 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ifStatement_in_nonEmptyStatementNoCaseNoDefault8605 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_whileStatement_in_nonEmptyStatementNoCaseNoDefault8611 ;

    //public static final BitSet FOLLOW_whileStatement_in_nonEmptyStatementNoCaseNoDefault8611 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_whileStatement_in_nonEmptyStatementNoCaseNoDefault8611 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_doStatement_in_nonEmptyStatementNoCaseNoDefault8617 ;

    //public static final BitSet FOLLOW_doStatement_in_nonEmptyStatementNoCaseNoDefault8617 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_doStatement_in_nonEmptyStatementNoCaseNoDefault8617 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_forStatement_in_nonEmptyStatementNoCaseNoDefault8623 ;

    //public static final BitSet FOLLOW_forStatement_in_nonEmptyStatementNoCaseNoDefault8623 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_forStatement_in_nonEmptyStatementNoCaseNoDefault8623 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_foreachStatement_in_nonEmptyStatementNoCaseNoDefault8629 ;

    //public static final BitSet FOLLOW_foreachStatement_in_nonEmptyStatementNoCaseNoDefault8629 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_foreachStatement_in_nonEmptyStatementNoCaseNoDefault8629 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_switchStatement_in_nonEmptyStatementNoCaseNoDefault8635 ;

    //public static final BitSet FOLLOW_switchStatement_in_nonEmptyStatementNoCaseNoDefault8635 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_switchStatement_in_nonEmptyStatementNoCaseNoDefault8635 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8641 ;

    //public static final BitSet FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8641 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_finalSwitchStatement_in_nonEmptyStatementNoCaseNoDefault8641 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_continueStatement_in_nonEmptyStatementNoCaseNoDefault8647 ;

    //public static final BitSet FOLLOW_continueStatement_in_nonEmptyStatementNoCaseNoDefault8647 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_continueStatement_in_nonEmptyStatementNoCaseNoDefault8647 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_breakStatement_in_nonEmptyStatementNoCaseNoDefault8653 ;

    //public static final BitSet FOLLOW_breakStatement_in_nonEmptyStatementNoCaseNoDefault8653 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_breakStatement_in_nonEmptyStatementNoCaseNoDefault8653 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_returnStatement_in_nonEmptyStatementNoCaseNoDefault8659 ;

    //public static final BitSet FOLLOW_returnStatement_in_nonEmptyStatementNoCaseNoDefault8659 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_returnStatement_in_nonEmptyStatementNoCaseNoDefault8659 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_gotoStatement_in_nonEmptyStatementNoCaseNoDefault8665 ;

    //public static final BitSet FOLLOW_gotoStatement_in_nonEmptyStatementNoCaseNoDefault8665 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_gotoStatement_in_nonEmptyStatementNoCaseNoDefault8665 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_withStatement_in_nonEmptyStatementNoCaseNoDefault8671 ;

    //public static final BitSet FOLLOW_withStatement_in_nonEmptyStatementNoCaseNoDefault8671 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_withStatement_in_nonEmptyStatementNoCaseNoDefault8671 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_synchronizedStatement_in_nonEmptyStatementNoCaseNoDefault8677 ;

    //public static final BitSet FOLLOW_synchronizedStatement_in_nonEmptyStatementNoCaseNoDefault8677 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_synchronizedStatement_in_nonEmptyStatementNoCaseNoDefault8677 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_tryStatement_in_nonEmptyStatementNoCaseNoDefault8683 ;

    //public static final BitSet FOLLOW_tryStatement_in_nonEmptyStatementNoCaseNoDefault8683 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_tryStatement_in_nonEmptyStatementNoCaseNoDefault8683 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_scopeGuardStatement_in_nonEmptyStatementNoCaseNoDefault8689 ;

    //public static final BitSet FOLLOW_scopeGuardStatement_in_nonEmptyStatementNoCaseNoDefault8689 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeGuardStatement_in_nonEmptyStatementNoCaseNoDefault8689 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_throwStatement_in_nonEmptyStatementNoCaseNoDefault8695 ;

    //public static final BitSet FOLLOW_throwStatement_in_nonEmptyStatementNoCaseNoDefault8695 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_throwStatement_in_nonEmptyStatementNoCaseNoDefault8695 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_asmStatement_in_nonEmptyStatementNoCaseNoDefault8701 ;

    //public static final BitSet FOLLOW_asmStatement_in_nonEmptyStatementNoCaseNoDefault8701 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_asmStatement_in_nonEmptyStatementNoCaseNoDefault8701 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_pragmaStatement_in_nonEmptyStatementNoCaseNoDefault8707 ;

    //public static final BitSet FOLLOW_pragmaStatement_in_nonEmptyStatementNoCaseNoDefault8707 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_pragmaStatement_in_nonEmptyStatementNoCaseNoDefault8707 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8722 ;

    //public static final BitSet FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8722 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_conditionalStatement_in_nonEmptyStatementNoCaseNoDefault8722 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_blockStatement_in_scopeBlockStatement8737 ;

    //public static final BitSet FOLLOW_blockStatement_in_scopeBlockStatement8737 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_scopeBlockStatement8737 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_statementNoCaseNoDefault_in_scopeStatementList8762 ;

    //public static final BitSet FOLLOW_statementNoCaseNoDefault_in_scopeStatementList8762 = new BitSet(new long[]{0x21F3312D50008002L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_statementNoCaseNoDefault_in_scopeStatementList8762 = new BitSet([0x21F3312D50008002L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_186_in_statementNoCaseNoDefault8779 ;

    //public static final BitSet FOLLOW_186_in_statementNoCaseNoDefault8779 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_statementNoCaseNoDefault8779 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatementNoCaseNoDefault_in_statementNoCaseNoDefault8786 ;

    //public static final BitSet FOLLOW_nonEmptyStatementNoCaseNoDefault_in_statementNoCaseNoDefault8786 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatementNoCaseNoDefault_in_statementNoCaseNoDefault8786 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_scopeBlockStatement_in_statementNoCaseNoDefault8792 ;

    //public static final BitSet FOLLOW_scopeBlockStatement_in_statementNoCaseNoDefault8792 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeBlockStatement_in_statementNoCaseNoDefault8792 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nonEmptyStatement_in_scopeStatement8807 ;

    //public static final BitSet FOLLOW_nonEmptyStatement_in_scopeStatement8807 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyStatement_in_scopeStatement8807 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_blockStatement_in_scopeStatement8813 ;

    //public static final BitSet FOLLOW_blockStatement_in_scopeStatement8813 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_blockStatement_in_scopeStatement8813 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_CASE_in_caseStatement8828 ;

    //public static final BitSet FOLLOW_STMT_CASE_in_caseStatement8828 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0224D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_STMT_CASE_in_caseStatement8828 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0224D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_caseStatement8831 ;

    //public static final BitSet FOLLOW_argumentList_in_caseStatement8831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_argumentList_in_caseStatement8831 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_caseStatement8833 ;

    //public static final BitSet FOLLOW_185_in_caseStatement8833 = new BitSet(new long[]{0x21F3312D50008000L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_185_in_caseStatement8833 = new BitSet([0x21F3312D50008000L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatementList_in_caseStatement8836 ;

    //public static final BitSet FOLLOW_scopeStatementList_in_caseStatement8836 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatementList_in_caseStatement8836 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_DEFAULT_in_defaultStatement8851 ;

    //public static final BitSet FOLLOW_STMT_DEFAULT_in_defaultStatement8851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_STMT_DEFAULT_in_defaultStatement8851 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_defaultStatement8854 ;

    //public static final BitSet FOLLOW_185_in_defaultStatement8854 = new BitSet(new long[]{0x21F3312D50008000L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_185_in_defaultStatement8854 = new BitSet([0x21F3312D50008000L,0xCD89140000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatementList_in_defaultStatement8857 ;

    //public static final BitSet FOLLOW_scopeStatementList_in_defaultStatement8857 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatementList_in_defaultStatement8857 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_labeledStatement8886 ;

    //public static final BitSet FOLLOW_Identifier_in_labeledStatement8886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_labeledStatement8886 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_labeledStatement8888 ;

    //public static final BitSet FOLLOW_185_in_labeledStatement8888 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_185_in_labeledStatement8888 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeStatement_in_labeledStatement8890 ;

    //public static final BitSet FOLLOW_noScopeStatement_in_labeledStatement8890 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeStatement_in_labeledStatement8890 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expression_in_expressionStatement8916 ;

    //public static final BitSet FOLLOW_expression_in_expressionStatement8916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_expression_in_expressionStatement8916 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_expressionStatement8918 ;

    //public static final BitSet FOLLOW_186_in_expressionStatement8918 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_expressionStatement8918 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declaration_in_declarationStatement8941 ;

    //public static final BitSet FOLLOW_declaration_in_declarationStatement8941 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declaration_in_declarationStatement8941 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_IF_in_ifStatement8956 ;

    //public static final BitSet FOLLOW_STMT_IF_in_ifStatement8956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_IF_in_ifStatement8956 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_ifStatement8958 ;

    //public static final BitSet FOLLOW_170_in_ifStatement8958 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258FC00808L,0x000000020DE59800L});


    static this()
    {
    //FOLLOW_170_in_ifStatement8958 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x035828258FC00808L,0x000000020DE59800L]);

    }public static BitSet FOLLOW_ifCondition_in_ifStatement8960 ;

    //public static final BitSet FOLLOW_ifCondition_in_ifStatement8960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_ifCondition_in_ifStatement8960 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_ifStatement8962 ;

    //public static final BitSet FOLLOW_171_in_ifStatement8962 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_ifStatement8962 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_ifStatement8964 ;

    //public static final BitSet FOLLOW_scopeStatement_in_ifStatement8964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_scopeStatement_in_ifStatement8964 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_230_in_ifStatement8978 ;

    //public static final BitSet FOLLOW_230_in_ifStatement8978 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_230_in_ifStatement8978 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_ifStatement8980 ;

    //public static final BitSet FOLLOW_scopeStatement_in_ifStatement8980 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_ifStatement8980 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expression_in_ifCondition9024 ;

    //public static final BitSet FOLLOW_expression_in_ifCondition9024 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_in_ifCondition9024 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_214_in_ifCondition9033 ;

    //public static final BitSet FOLLOW_214_in_ifCondition9033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_214_in_ifCondition9033 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_ifCondition9036 ;

    //public static final BitSet FOLLOW_defSymbol_in_ifCondition9036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_ifCondition9036 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_ifCondition9039 ;

    //public static final BitSet FOLLOW_193_in_ifCondition9039 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_193_in_ifCondition9039 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_ifCondition9042 ;

    //public static final BitSet FOLLOW_expression_in_ifCondition9042 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_in_ifCondition9042 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_ifCondition9048 ;

    //public static final BitSet FOLLOW_type_in_ifCondition9048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_type_in_ifCondition9048 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_defSymbol_in_ifCondition9051 ;

    //public static final BitSet FOLLOW_defSymbol_in_ifCondition9051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_defSymbol_in_ifCondition9051 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_ifCondition9054 ;

    //public static final BitSet FOLLOW_193_in_ifCondition9054 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_193_in_ifCondition9054 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_ifCondition9056 ;

    //public static final BitSet FOLLOW_expression_in_ifCondition9056 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_in_ifCondition9056 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_WHILE_in_whileStatement9072 ;

    //public static final BitSet FOLLOW_STMT_WHILE_in_whileStatement9072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_WHILE_in_whileStatement9072 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_whileStatement9075 ;

    //public static final BitSet FOLLOW_170_in_whileStatement9075 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_whileStatement9075 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_whileStatement9078 ;

    //public static final BitSet FOLLOW_expression_in_whileStatement9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_whileStatement9078 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_whileStatement9080 ;

    //public static final BitSet FOLLOW_171_in_whileStatement9080 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_whileStatement9080 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_whileStatement9083 ;

    //public static final BitSet FOLLOW_scopeStatement_in_whileStatement9083 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_whileStatement9083 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_DO_in_doStatement9098 ;

    //public static final BitSet FOLLOW_STMT_DO_in_doStatement9098 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_STMT_DO_in_doStatement9098 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_doStatement9101 ;

    //public static final BitSet FOLLOW_scopeStatement_in_doStatement9101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});


    static this()
    {
    //FOLLOW_scopeStatement_in_doStatement9101 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000020L]);

    }public static BitSet FOLLOW_STMT_WHILE_in_doStatement9103 ;

    //public static final BitSet FOLLOW_STMT_WHILE_in_doStatement9103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_WHILE_in_doStatement9103 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_doStatement9106 ;

    //public static final BitSet FOLLOW_170_in_doStatement9106 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_doStatement9106 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_doStatement9109 ;

    //public static final BitSet FOLLOW_expression_in_doStatement9109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_doStatement9109 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_doStatement9111 ;

    //public static final BitSet FOLLOW_171_in_doStatement9111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_171_in_doStatement9111 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_doStatement9114 ;

    //public static final BitSet FOLLOW_186_in_doStatement9114 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_doStatement9114 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FOR_in_forStatement9134 ;

    //public static final BitSet FOLLOW_STMT_FOR_in_forStatement9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_FOR_in_forStatement9134 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_forStatement9137 ;

    //public static final BitSet FOLLOW_170_in_forStatement9137 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_170_in_forStatement9137 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_initialize_in_forStatement9140 ;

    //public static final BitSet FOLLOW_initialize_in_forStatement9140 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_initialize_in_forStatement9140 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_forExp_in_forStatement9142 ;

    //public static final BitSet FOLLOW_forExp_in_forStatement9142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_forExp_in_forStatement9142 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_forStatement9144 ;

    //public static final BitSet FOLLOW_186_in_forStatement9144 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_forStatement9144 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_forExp_in_forStatement9147 ;

    //public static final BitSet FOLLOW_forExp_in_forStatement9147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_forExp_in_forStatement9147 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_forStatement9149 ;

    //public static final BitSet FOLLOW_171_in_forStatement9149 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_forStatement9149 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_forStatement9152 ;

    //public static final BitSet FOLLOW_scopeStatement_in_forStatement9152 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_forStatement9152 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_186_in_initialize9167 ;

    //public static final BitSet FOLLOW_186_in_initialize9167 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_initialize9167 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_initialize9179 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_initialize9179 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_initialize9179 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expression_in_forExp9194 ;

    //public static final BitSet FOLLOW_expression_in_forExp9194 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_in_forExp9194 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9242 ;

    //public static final BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_FOREACH_in_foreachStatement9242 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_foreachStatement9244 ;

    //public static final BitSet FOLLOW_170_in_foreachStatement9244 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_foreachStatement9244 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_foreachStatement9246 ;

    //public static final BitSet FOLLOW_parameter_in_foreachStatement9246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_foreachStatement9246 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_foreachStatement9248 ;

    //public static final BitSet FOLLOW_186_in_foreachStatement9248 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_foreachStatement9248 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9250 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9250 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9250 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_foreachStatement9252 ;

    //public static final BitSet FOLLOW_Range_in_foreachStatement9252 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_Range_in_foreachStatement9252 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9254 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9254 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_foreachStatement9256 ;

    //public static final BitSet FOLLOW_171_in_foreachStatement9256 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_foreachStatement9256 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9258 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9258 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9258 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9312 ;

    //public static final BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_FOREACH_in_foreachStatement9312 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_foreachStatement9314 ;

    //public static final BitSet FOLLOW_170_in_foreachStatement9314 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_foreachStatement9314 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_foreachStatement9316 ;

    //public static final BitSet FOLLOW_parameter_in_foreachStatement9316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_foreachStatement9316 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_foreachStatement9318 ;

    //public static final BitSet FOLLOW_186_in_foreachStatement9318 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_foreachStatement9318 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9320 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9320 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9320 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_foreachStatement9322 ;

    //public static final BitSet FOLLOW_Range_in_foreachStatement9322 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_Range_in_foreachStatement9322 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9324 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9324 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_foreachStatement9326 ;

    //public static final BitSet FOLLOW_171_in_foreachStatement9326 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_foreachStatement9326 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9328 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9328 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9328 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9359 ;

    //public static final BitSet FOLLOW_STMT_FOREACH_in_foreachStatement9359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_FOREACH_in_foreachStatement9359 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_foreachStatement9361 ;

    //public static final BitSet FOLLOW_170_in_foreachStatement9361 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0420000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_foreachStatement9361 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0420000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameterList_in_foreachStatement9363 ;

    //public static final BitSet FOLLOW_parameterList_in_foreachStatement9363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameterList_in_foreachStatement9363 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_foreachStatement9365 ;

    //public static final BitSet FOLLOW_186_in_foreachStatement9365 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_foreachStatement9365 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9367 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9367 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_foreachStatement9369 ;

    //public static final BitSet FOLLOW_171_in_foreachStatement9369 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_foreachStatement9369 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9371 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9371 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9371 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_236_in_foreachStatement9396 ;

    //public static final BitSet FOLLOW_236_in_foreachStatement9396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_236_in_foreachStatement9396 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_foreachStatement9398 ;

    //public static final BitSet FOLLOW_170_in_foreachStatement9398 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0420000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_foreachStatement9398 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0420000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameterList_in_foreachStatement9400 ;

    //public static final BitSet FOLLOW_parameterList_in_foreachStatement9400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameterList_in_foreachStatement9400 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_foreachStatement9402 ;

    //public static final BitSet FOLLOW_186_in_foreachStatement9402 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_foreachStatement9402 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_foreachStatement9404 ;

    //public static final BitSet FOLLOW_expression_in_foreachStatement9404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_foreachStatement9404 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_foreachStatement9406 ;

    //public static final BitSet FOLLOW_171_in_foreachStatement9406 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_foreachStatement9406 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9408 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9408 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_foreachStatement9408 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SWITCH_in_switchStatement9444 ;

    //public static final BitSet FOLLOW_STMT_SWITCH_in_switchStatement9444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_SWITCH_in_switchStatement9444 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_switchStatement9447 ;

    //public static final BitSet FOLLOW_170_in_switchStatement9447 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_switchStatement9447 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_switchStatement9450 ;

    //public static final BitSet FOLLOW_expression_in_switchStatement9450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_switchStatement9450 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_switchStatement9452 ;

    //public static final BitSet FOLLOW_171_in_switchStatement9452 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_switchStatement9452 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_switchStatement9455 ;

    //public static final BitSet FOLLOW_scopeStatement_in_switchStatement9455 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_switchStatement9455 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_234_in_finalSwitchStatement9470 ;

    //public static final BitSet FOLLOW_234_in_finalSwitchStatement9470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_234_in_finalSwitchStatement9470 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SWITCH_in_finalSwitchStatement9472 ;

    //public static final BitSet FOLLOW_STMT_SWITCH_in_finalSwitchStatement9472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_SWITCH_in_finalSwitchStatement9472 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_finalSwitchStatement9474 ;

    //public static final BitSet FOLLOW_170_in_finalSwitchStatement9474 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_finalSwitchStatement9474 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_finalSwitchStatement9476 ;

    //public static final BitSet FOLLOW_expression_in_finalSwitchStatement9476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_finalSwitchStatement9476 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_finalSwitchStatement9478 ;

    //public static final BitSet FOLLOW_171_in_finalSwitchStatement9478 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_finalSwitchStatement9478 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_finalSwitchStatement9480 ;

    //public static final BitSet FOLLOW_scopeStatement_in_finalSwitchStatement9480 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_finalSwitchStatement9480 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_CONTINUE_in_continueStatement9510 ;

    //public static final BitSet FOLLOW_STMT_CONTINUE_in_continueStatement9510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_STMT_CONTINUE_in_continueStatement9510 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_Identifier_in_continueStatement9513 ;

    //public static final BitSet FOLLOW_Identifier_in_continueStatement9513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_continueStatement9513 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_continueStatement9516 ;

    //public static final BitSet FOLLOW_186_in_continueStatement9516 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_continueStatement9516 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_BREAK_in_breakStatement9532 ;

    //public static final BitSet FOLLOW_STMT_BREAK_in_breakStatement9532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_STMT_BREAK_in_breakStatement9532 = new BitSet([0x0000000000000000L,0x0000000000001000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_Identifier_in_breakStatement9535 ;

    //public static final BitSet FOLLOW_Identifier_in_breakStatement9535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_breakStatement9535 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_breakStatement9538 ;

    //public static final BitSet FOLLOW_186_in_breakStatement9538 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_breakStatement9538 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_RETURN_in_returnStatement9554 ;

    //public static final BitSet FOLLOW_STMT_RETURN_in_returnStatement9554 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_STMT_RETURN_in_returnStatement9554 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_returnStatement9557 ;

    //public static final BitSet FOLLOW_expression_in_returnStatement9557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_expression_in_returnStatement9557 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_returnStatement9560 ;

    //public static final BitSet FOLLOW_186_in_returnStatement9560 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_returnStatement9560 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_GOTO_in_gotoStatement9576 ;

    //public static final BitSet FOLLOW_STMT_GOTO_in_gotoStatement9576 = new BitSet(new long[]{0x0000000000000000L,0x0004200000001000L});


    static this()
    {
    //FOLLOW_STMT_GOTO_in_gotoStatement9576 = new BitSet([0x0000000000000000L,0x0004200000001000L]);

    }public static BitSet FOLLOW_symbol_in_gotoStatement9585 ;

    //public static final BitSet FOLLOW_symbol_in_gotoStatement9585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_symbol_in_gotoStatement9585 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_STMT_DEFAULT_in_gotoStatement9593 ;

    //public static final BitSet FOLLOW_STMT_DEFAULT_in_gotoStatement9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_STMT_DEFAULT_in_gotoStatement9593 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_STMT_CASE_in_gotoStatement9601 ;

    //public static final BitSet FOLLOW_STMT_CASE_in_gotoStatement9601 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_STMT_CASE_in_gotoStatement9601 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0424D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_gotoStatement9603 ;

    //public static final BitSet FOLLOW_expression_in_gotoStatement9603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_expression_in_gotoStatement9603 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_gotoStatement9612 ;

    //public static final BitSet FOLLOW_186_in_gotoStatement9612 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_gotoStatement9612 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_WITH_in_withStatement9628 ;

    //public static final BitSet FOLLOW_STMT_WITH_in_withStatement9628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_WITH_in_withStatement9628 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_withStatement9631 ;

    //public static final BitSet FOLLOW_170_in_withStatement9631 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_withStatement9631 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_templateInstance_in_withStatement9648 ;

    //public static final BitSet FOLLOW_templateInstance_in_withStatement9648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_templateInstance_in_withStatement9648 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_expression_in_withStatement9657 ;

    //public static final BitSet FOLLOW_expression_in_withStatement9657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_withStatement9657 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_withStatement9665 ;

    //public static final BitSet FOLLOW_171_in_withStatement9665 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_withStatement9665 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_withStatement9668 ;

    //public static final BitSet FOLLOW_scopeStatement_in_withStatement9668 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_withStatement9668 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SYNCHRONIZED_in_synchronizedStatement9683 ;

    //public static final BitSet FOLLOW_STMT_SYNCHRONIZED_in_synchronizedStatement9683 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_STMT_SYNCHRONIZED_in_synchronizedStatement9683 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_170_in_synchronizedStatement9702 ;

    //public static final BitSet FOLLOW_170_in_synchronizedStatement9702 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_170_in_synchronizedStatement9702 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_synchronizedStatement9705 ;

    //public static final BitSet FOLLOW_expression_in_synchronizedStatement9705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_expression_in_synchronizedStatement9705 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_synchronizedStatement9707 ;

    //public static final BitSet FOLLOW_171_in_synchronizedStatement9707 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_synchronizedStatement9707 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_synchronizedStatement9717 ;

    //public static final BitSet FOLLOW_scopeStatement_in_synchronizedStatement9717 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_scopeStatement_in_synchronizedStatement9717 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_TRY_in_tryStatement9734 ;

    //public static final BitSet FOLLOW_STMT_TRY_in_tryStatement9734 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_STMT_TRY_in_tryStatement9734 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_scopeStatement_in_tryStatement9737 ;

    //public static final BitSet FOLLOW_scopeStatement_in_tryStatement9737 = new BitSet(new long[]{0x0000000000000000L,0x0020400000000000L});


    static this()
    {
    //FOLLOW_scopeStatement_in_tryStatement9737 = new BitSet([0x0000000000000000L,0x0020400000000000L]);

    }public static BitSet FOLLOW_catches_in_tryStatement9743 ;

    //public static final BitSet FOLLOW_catches_in_tryStatement9743 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_catches_in_tryStatement9743 = new BitSet([0x0000000000000002L,0x0020000000000000L]);

    }public static BitSet FOLLOW_finallyStatement_in_tryStatement9757 ;

    //public static final BitSet FOLLOW_finallyStatement_in_tryStatement9757 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_finallyStatement_in_tryStatement9757 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_normalCatch_in_catches9784 ;

    //public static final BitSet FOLLOW_normalCatch_in_catches9784 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});


    static this()
    {
    //FOLLOW_normalCatch_in_catches9784 = new BitSet([0x0000000000000002L,0x0000400000000000L]);

    }public static BitSet FOLLOW_lastCatch_in_catches9801 ;

    //public static final BitSet FOLLOW_lastCatch_in_catches9801 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lastCatch_in_catches9801 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_CATCH_in_lastCatch9818 ;

    //public static final BitSet FOLLOW_STMT_CATCH_in_lastCatch9818 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_STMT_CATCH_in_lastCatch9818 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_lastCatch9821 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_lastCatch9821 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_lastCatch9821 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_CATCH_in_normalCatch9836 ;

    //public static final BitSet FOLLOW_STMT_CATCH_in_normalCatch9836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_CATCH_in_normalCatch9836 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_normalCatch9839 ;

    //public static final BitSet FOLLOW_170_in_normalCatch9839 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_normalCatch9839 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_normalCatch9842 ;

    //public static final BitSet FOLLOW_parameter_in_normalCatch9842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_parameter_in_normalCatch9842 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_normalCatch9844 ;

    //public static final BitSet FOLLOW_171_in_normalCatch9844 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_normalCatch9844 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_normalCatch9847 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_normalCatch9847 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_normalCatch9847 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FINALLY_in_finallyStatement9862 ;

    //public static final BitSet FOLLOW_STMT_FINALLY_in_finallyStatement9862 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_STMT_FINALLY_in_finallyStatement9862 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_finallyStatement9865 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_finallyStatement9865 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_finallyStatement9865 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_THROW_in_throwStatement9882 ;

    //public static final BitSet FOLLOW_STMT_THROW_in_throwStatement9882 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_STMT_THROW_in_throwStatement9882 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_throwStatement9885 ;

    //public static final BitSet FOLLOW_expression_in_throwStatement9885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_expression_in_throwStatement9885 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_throwStatement9887 ;

    //public static final BitSet FOLLOW_186_in_throwStatement9887 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_throwStatement9887 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SCOPE_in_scopeGuardStatement9903 ;

    //public static final BitSet FOLLOW_STMT_SCOPE_in_scopeGuardStatement9903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_SCOPE_in_scopeGuardStatement9903 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_scopeGuardStatement9906 ;

    //public static final BitSet FOLLOW_170_in_scopeGuardStatement9906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L,0x0000000000100000L});


    static this()
    {
    //FOLLOW_170_in_scopeGuardStatement9906 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L,0x0000000000100000L]);

    }public static BitSet FOLLOW_set_in_scopeGuardStatement9913 ;

    //public static final BitSet FOLLOW_set_in_scopeGuardStatement9913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_set_in_scopeGuardStatement9913 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_scopeGuardStatement9931 ;

    //public static final BitSet FOLLOW_171_in_scopeGuardStatement9931 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_scopeGuardStatement9931 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_nonEmptyOrScopeBlockStatement_in_scopeGuardStatement9934 ;

    //public static final BitSet FOLLOW_nonEmptyOrScopeBlockStatement_in_scopeGuardStatement9934 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nonEmptyOrScopeBlockStatement_in_scopeGuardStatement9934 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_ASM_in_asmStatement9949 ;

    //public static final BitSet FOLLOW_STMT_ASM_in_asmStatement9949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});


    static this()
    {
    //FOLLOW_STMT_ASM_in_asmStatement9949 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L]);

    }public static BitSet FOLLOW_284_in_asmStatement9956 ;

    //public static final BitSet FOLLOW_284_in_asmStatement9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});


    static this()
    {
    //FOLLOW_284_in_asmStatement9956 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L]);

    }public static BitSet FOLLOW_288_in_asmStatement9960 ;

    //public static final BitSet FOLLOW_288_in_asmStatement9960 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_288_in_asmStatement9960 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_PRAGMA_in_pragmaStatement9975 ;

    //public static final BitSet FOLLOW_STMT_PRAGMA_in_pragmaStatement9975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_PRAGMA_in_pragmaStatement9975 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_pragmaStatement9978 ;

    //public static final BitSet FOLLOW_170_in_pragmaStatement9978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_170_in_pragmaStatement9978 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_symbol_in_pragmaStatement9981 ;

    //public static final BitSet FOLLOW_symbol_in_pragmaStatement9981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080000000000L});


    static this()
    {
    //FOLLOW_symbol_in_pragmaStatement9981 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002080000000000L]);

    }public static BitSet FOLLOW_177_in_pragmaStatement9984 ;

    //public static final BitSet FOLLOW_177_in_pragmaStatement9984 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_pragmaStatement9984 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024DD0020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_argumentList_in_pragmaStatement9987 ;

    //public static final BitSet FOLLOW_argumentList_in_pragmaStatement9987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_argumentList_in_pragmaStatement9987 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_pragmaStatement9991 ;

    //public static final BitSet FOLLOW_171_in_pragmaStatement9991 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_171_in_pragmaStatement9991 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0424D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeStatement_in_pragmaStatement9998 ;

    //public static final BitSet FOLLOW_noScopeStatement_in_pragmaStatement9998 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeStatement_in_pragmaStatement9998 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_mixinExpression_in_mixinStatement10013 ;

    //public static final BitSet FOLLOW_mixinExpression_in_mixinStatement10013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_mixinExpression_in_mixinStatement10013 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_mixinStatement10015 ;

    //public static final BitSet FOLLOW_186_in_mixinStatement10015 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_186_in_mixinStatement10015 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_in_conditionalStatement10039 ;

    //public static final BitSet FOLLOW_condition_in_conditionalStatement10039 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_condition_in_conditionalStatement10039 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10041 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10041 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_230_in_conditionalStatement10055 ;

    //public static final BitSet FOLLOW_230_in_conditionalStatement10055 = new BitSet(new long[]{0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L});


    static this()
    {
    //FOLLOW_230_in_conditionalStatement10055 = new BitSet([0x21F3312D50008000L,0xCD8D340000011000L,0x0024D5002000047FL,0x03F83D2FCFCC0808L,0x000000021FEFB800L]);

    }public static BitSet FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10057 ;

    //public static final BitSet FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10057 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_noScopeNonEmptyStatement_in_conditionalStatement10057 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assignExpression_in_argumentList10094 ;

    //public static final BitSet FOLLOW_assignExpression_in_argumentList10094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_argumentList10094 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_argumentList10097 ;

    //public static final BitSet FOLLOW_177_in_argumentList10097 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_177_in_argumentList10097 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_argumentList10099 ;

    //public static final BitSet FOLLOW_assignExpression_in_argumentList10099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_argumentList10099 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_275_in_synpred1_dparser2220 ;

    //public static final BitSet FOLLOW_275_in_synpred1_dparser2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_275_in_synpred1_dparser2220 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_246_in_synpred1_dparser2222 ;

    //public static final BitSet FOLLOW_246_in_synpred1_dparser2222 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_246_in_synpred1_dparser2222 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_synpred2_dparser3250 ;

    //public static final BitSet FOLLOW_type_in_synpred2_dparser3250 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_synpred2_dparser3250 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred3_dparser3286 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred3_dparser3286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred3_dparser3286 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_synpred3_dparser3288 ;

    //public static final BitSet FOLLOW_157_in_synpred3_dparser3288 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_synpred3_dparser3288 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred4_dparser3346 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred4_dparser3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred4_dparser3346 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_synpred4_dparser3348 ;

    //public static final BitSet FOLLOW_157_in_synpred4_dparser3348 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_synpred4_dparser3348 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred5_dparser3846 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred5_dparser3846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred5_dparser3846 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_193_in_synpred5_dparser3848 ;

    //public static final BitSet FOLLOW_193_in_synpred5_dparser3848 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_193_in_synpred5_dparser3848 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_230_in_synpred6_dparser4540 ;

    //public static final BitSet FOLLOW_230_in_synpred6_dparser4540 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_230_in_synpred6_dparser4540 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred7_dparser4969 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred7_dparser4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred7_dparser4969 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L]);

    }public static BitSet FOLLOW_195_in_synpred7_dparser4971 ;

    //public static final BitSet FOLLOW_195_in_synpred7_dparser4971 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_195_in_synpred7_dparser4971 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_synpred8_dparser4991 ;

    //public static final BitSet FOLLOW_type_in_synpred8_dparser4991 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_synpred8_dparser4991 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred9_dparser5050 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred9_dparser5050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred9_dparser5050 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L]);

    }public static BitSet FOLLOW_195_in_synpred9_dparser5052 ;

    //public static final BitSet FOLLOW_195_in_synpred9_dparser5052 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_195_in_synpred9_dparser5052 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_in_synpred10_dparser5072 ;

    //public static final BitSet FOLLOW_type_in_synpred10_dparser5072 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_in_synpred10_dparser5072 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_204_in_synpred11_dparser7289 ;

    //public static final BitSet FOLLOW_204_in_synpred11_dparser7289 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_synpred11_dparser7289 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_synpred11_dparser7291 ;

    //public static final BitSet FOLLOW_assignExpression_in_synpred11_dparser7291 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_synpred11_dparser7291 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_synpred11_dparser7293 ;

    //public static final BitSet FOLLOW_Range_in_synpred11_dparser7293 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Range_in_synpred11_dparser7293 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_204_in_synpred12_dparser7339 ;

    //public static final BitSet FOLLOW_204_in_synpred12_dparser7339 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_204_in_synpred12_dparser7339 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_assignExpression_in_synpred12_dparser7341 ;

    //public static final BitSet FOLLOW_assignExpression_in_synpred12_dparser7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_assignExpression_in_synpred12_dparser7341 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_synpred12_dparser7343 ;

    //public static final BitSet FOLLOW_177_in_synpred12_dparser7343 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_177_in_synpred12_dparser7343 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_synpred13_dparser7551 ;

    //public static final BitSet FOLLOW_181_in_synpred13_dparser7551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_synpred13_dparser7551 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_synpred13_dparser7553 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred13_dparser7553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred13_dparser7553 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_181_in_synpred13_dparser7555 ;

    //public static final BitSet FOLLOW_181_in_synpred13_dparser7555 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_181_in_synpred13_dparser7555 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_synpred14_dparser7578 ;

    //public static final BitSet FOLLOW_181_in_synpred14_dparser7578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_181_in_synpred14_dparser7578 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_synpred14_dparser7580 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred14_dparser7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred14_dparser7580 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_synpred14_dparser7582 ;

    //public static final BitSet FOLLOW_157_in_synpred14_dparser7582 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_synpred14_dparser7582 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred15_dparser7625 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred15_dparser7625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred15_dparser7625 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0020000000000000L]);

    }public static BitSet FOLLOW_181_in_synpred15_dparser7627 ;

    //public static final BitSet FOLLOW_181_in_synpred15_dparser7627 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_181_in_synpred15_dparser7627 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred16_dparser7640 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred16_dparser7640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred16_dparser7640 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_synpred16_dparser7642 ;

    //public static final BitSet FOLLOW_157_in_synpred16_dparser7642 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_synpred16_dparser7642 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred17_dparser7655 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred17_dparser7655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred17_dparser7655 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L]);

    }public static BitSet FOLLOW_195_in_synpred17_dparser7657 ;

    //public static final BitSet FOLLOW_195_in_synpred17_dparser7657 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_195_in_synpred17_dparser7657 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_parameters_in_synpred18_dparser7702 ;

    //public static final BitSet FOLLOW_parameters_in_synpred18_dparser7702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});


    static this()
    {
    //FOLLOW_parameters_in_synpred18_dparser7702 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L]);

    }public static BitSet FOLLOW_195_in_synpred18_dparser7704 ;

    //public static final BitSet FOLLOW_195_in_synpred18_dparser7704 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_195_in_synpred18_dparser7704 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred19_dparser8497 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred19_dparser8497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred19_dparser8497 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_synpred19_dparser8499 ;

    //public static final BitSet FOLLOW_185_in_synpred19_dparser8499 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_185_in_synpred19_dparser8499 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_234_in_synpred20_dparser8512 ;

    //public static final BitSet FOLLOW_234_in_synpred20_dparser8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});


    static this()
    {
    //FOLLOW_234_in_synpred20_dparser8512 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_SWITCH_in_synpred20_dparser8514 ;

    //public static final BitSet FOLLOW_STMT_SWITCH_in_synpred20_dparser8514 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STMT_SWITCH_in_synpred20_dparser8514 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_synpred21_dparser8527 ;

    //public static final BitSet FOLLOW_275_in_synpred21_dparser8527 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});


    static this()
    {
    //FOLLOW_275_in_synpred21_dparser8527 = new BitSet([0x0000000000000000L,0x0800000000000000L]);

    }public static BitSet FOLLOW_STMT_IF_in_synpred21_dparser8529 ;

    //public static final BitSet FOLLOW_STMT_IF_in_synpred21_dparser8529 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_STMT_IF_in_synpred21_dparser8529 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_275_in_synpred22_dparser8542 ;

    //public static final BitSet FOLLOW_275_in_synpred22_dparser8542 = new BitSet(new long[]{0x0000000040000000L});


    static this()
    {
    //FOLLOW_275_in_synpred22_dparser8542 = new BitSet([0x0000000040000000L]);

    }public static BitSet FOLLOW_EXP_ASSERT_in_synpred22_dparser8544 ;

    //public static final BitSet FOLLOW_EXP_ASSERT_in_synpred22_dparser8544 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EXP_ASSERT_in_synpred22_dparser8544 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_declarationStatement_in_synpred23_dparser8557 ;

    //public static final BitSet FOLLOW_declarationStatement_in_synpred23_dparser8557 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_declarationStatement_in_synpred23_dparser8557 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_synpred24_dparser8570 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_synpred24_dparser8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_synpred24_dparser8570 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_synpred24_dparser8572 ;

    //public static final BitSet FOLLOW_170_in_synpred24_dparser8572 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_170_in_synpred24_dparser8572 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXP_MIXIN_in_synpred25_dparser8585 ;

    //public static final BitSet FOLLOW_EXP_MIXIN_in_synpred25_dparser8585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_EXP_MIXIN_in_synpred25_dparser8585 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_Identifier_in_synpred25_dparser8587 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred25_dparser8587 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred25_dparser8587 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_230_in_synpred27_dparser8973 ;

    //public static final BitSet FOLLOW_230_in_synpred27_dparser8973 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_230_in_synpred27_dparser8973 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_FOREACH_in_synpred28_dparser9220 ;

    //public static final BitSet FOLLOW_STMT_FOREACH_in_synpred28_dparser9220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_FOREACH_in_synpred28_dparser9220 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_synpred28_dparser9222 ;

    //public static final BitSet FOLLOW_170_in_synpred28_dparser9222 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_synpred28_dparser9222 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_synpred28_dparser9224 ;

    //public static final BitSet FOLLOW_parameter_in_synpred28_dparser9224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_synpred28_dparser9224 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_synpred28_dparser9226 ;

    //public static final BitSet FOLLOW_186_in_synpred28_dparser9226 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_synpred28_dparser9226 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_synpred28_dparser9228 ;

    //public static final BitSet FOLLOW_expression_in_synpred28_dparser9228 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_expression_in_synpred28_dparser9228 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_synpred28_dparser9230 ;

    //public static final BitSet FOLLOW_Range_in_synpred28_dparser9230 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Range_in_synpred28_dparser9230 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_236_in_synpred29_dparser9290 ;

    //public static final BitSet FOLLOW_236_in_synpred29_dparser9290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_236_in_synpred29_dparser9290 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_synpred29_dparser9292 ;

    //public static final BitSet FOLLOW_170_in_synpred29_dparser9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L});


    static this()
    {
    //FOLLOW_170_in_synpred29_dparser9292 = new BitSet([0x0000000000000000L,0x0000000100001000L,0x0020000000000000L,0x031808218F800000L,0x000000000DE50800L]);

    }public static BitSet FOLLOW_parameter_in_synpred29_dparser9294 ;

    //public static final BitSet FOLLOW_parameter_in_synpred29_dparser9294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});


    static this()
    {
    //FOLLOW_parameter_in_synpred29_dparser9294 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0400000000000000L]);

    }public static BitSet FOLLOW_186_in_synpred29_dparser9296 ;

    //public static final BitSet FOLLOW_186_in_synpred29_dparser9296 = new BitSet(new long[]{0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L});


    static this()
    {
    //FOLLOW_186_in_synpred29_dparser9296 = new BitSet([0x21F3312D40008000L,0x0000000000011000L,0x0024D50020000400L,0x0040200400000808L,0x0000000200009000L]);

    }public static BitSet FOLLOW_expression_in_synpred29_dparser9298 ;

    //public static final BitSet FOLLOW_expression_in_synpred29_dparser9298 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_expression_in_synpred29_dparser9298 = new BitSet([0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_Range_in_synpred29_dparser9300 ;

    //public static final BitSet FOLLOW_Range_in_synpred29_dparser9300 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_Range_in_synpred29_dparser9300 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_Identifier_in_synpred30_dparser9641 ;

    //public static final BitSet FOLLOW_Identifier_in_synpred30_dparser9641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_Identifier_in_synpred30_dparser9641 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_157_in_synpred30_dparser9643 ;

    //public static final BitSet FOLLOW_157_in_synpred30_dparser9643 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_synpred30_dparser9643 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_STMT_CATCH_in_synpred31_dparser9777 ;

    //public static final BitSet FOLLOW_STMT_CATCH_in_synpred31_dparser9777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_STMT_CATCH_in_synpred31_dparser9777 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_synpred31_dparser9779 ;

    //public static final BitSet FOLLOW_170_in_synpred31_dparser9779 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_170_in_synpred31_dparser9779 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_230_in_synpred32_dparser10050 ;

    //public static final BitSet FOLLOW_230_in_synpred32_dparser10050 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_230_in_synpred32_dparser10050 = new BitSet([0x0000000000000002L]);

    }
}