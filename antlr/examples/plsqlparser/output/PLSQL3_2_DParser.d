// $ANTLR 3.4 D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g 2012-11-30 21:30:28


module PLSQL3_2_DParser;



import antlr.runtime.ANTLRFileStream;
import std.ascii;

//import antlr.runtime;

import antlr.runtime.Parser;
import antlr.runtime.TokenStream;
import antlr.runtime.BitSet;
import antlr.runtime.BaseRecognizer;
import antlr.runtime.RecognitionException;
import antlr.runtime.MismatchedSetException;
import antlr.runtime.tree.RewriteRuleTokenStream;
import antlr.runtime.tree.RewriteRuleSubtreeStream;
import antlr.runtime.DFA;
import antlr.runtime.CommonToken;
import antlr.runtime.EarlyExitException;
import antlr.runtime.FailedPredicateException;
import antlr.runtime.tree.RewriteEarlyExitException;

import std.string;
import std.stdio;


import antlr.runtime.CharStream;
import antlr.runtime.Lexer;
import antlr.runtime.RecognizerSharedState;
import antlr.runtime.NoViableAltException;
import antlr.runtime.IntStream;
debug(trace_consume) {
//import std.stdio;

}
//import java.util.Map;
//import java.util.HashMap;

//import org.antlr.runtime.tree.*;
//for AST
private import antlr.runtime.tree.TreeAdaptor;
private import antlr.runtime.ParserRuleReturnScope;
private import antlr.runtime.tree.CommonTreeAdaptor;
private import antlr.runtime.tree.TreeAdaptor;
private import antlr.runtime.Token;

/*******************************************************************************

DESCRIPTION:
		Oracle PL/SQL Grammar for ANTLR v3, target language C#
AUTHOR:
		Andrey Kharitonkin (thikone@gmail.com)
DATE:
		02-Jan-2008
BASED ON:
		PLSQLGrammar.g for ANTLR v2
		Qazi Firdous Ahmed (qazif_ahmed@infosys.com) 
		Krupa Benhur (krupa_bg@infosys.com)
		Manojaba Banerjee (manojaba_banerjee@infosys.com)
		Infosys Technologies Ltd., Bangalore, India
		Sept 18, 2002
		This grammar is for PL/SQL.
COMMENT:
		The grammar has been mostly re-written for ANTLR v3,
		using Oracle 10g Release 2 documentation and ANTLR book.
		New SQL and PL/SQL expression rules, SQL statments
		SELECT, INSERT, UPDATE, DELETE are fully supported.
		Generated parser can parse most of valid PL/SQL and 
		it was tested with over 10 Mb of test source code.
		Let me know if something cannot be parsed by this grammar.
KNOWN ISSUES:
		At the moment only supports CREATE PACKAGE and PACKAGE BODY.
		Symbol table and gate predicates needed to distinguish
			between function call and variable usage.

It was fun learning ANTLR3 and creating this grammar, hope you enjoy it as well!

*******************************************************************************/
public class PLSQL3_2_DParser : Parser {
    public static const string[] tokenNames = [
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARROW", "ASSIGN", "ASTERISK", "AT_SIGN", "BULK_ROWCOUNT_ATTR", "CHARSET_ATTR", "COLON", "COMMA", "DIVIDE", "DOT", "DOUBLEDOT", "DOUBLEQUOTED_STRING", "DOUBLEVERTBAR", "EQ", "EXPONENT", "FOUND_ATTR", "GEQ", "GTH", "ID", "ISOPEN_ATTR", "LBRACK", "LEQ", "LLABEL", "LPAREN", "LTH", "MINUS", "ML_COMMENT", "N", "NOTFOUND_ATTR", "NOT_EQ", "NUMBER", "PERCENTAGE", "PLUS", "POINT", "QSTRING", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", "QS_OTHER_CH", "QS_PAREN", "QUOTE", "QUOTED_STRING", "Qoperator", "RBRACK", "RLABEL", "ROWCOUNT_ATTR", "ROWTYPE_ATTR", "RPAREN", "SEMI", "SINGLE_QUOTE", "SL_COMMENT", "TYPE_ATTR", "VERTBAR", "WS", "'ACC'", "'ACCEPT'", "'ALL'", "'AND'", "'ANY'", "'AS'", "'ASC'", "'AT'", "'BEGIN'", "'BETWEEN'", "'BFILE'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BOOLEAN'", "'BY'", "'CASE'", "'CHAR'", "'CHARACTER'", "'CLOB'", "'COMMENT'", "'COMMIT'", "'CONNECT'", "'CONSTANT'", "'CREATE'", "'DATE'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DEF'", "'DEFAULT'", "'DELETE'", "'DESC'", "'DISTINCT'", "'DOUBLE'", "'ELSE'", "'ELSIF'", "'END'", "'EXCEPTION'", "'EXCLUSIVE'", "'EXISTS'", "'FALSE'", "'FETCH'", "'FLOAT'", "'FOR'", "'FORMAT'", "'FROM'", "'FUNCTION'", "'GOTO'", "'GROUP'", "'HAVING'", "'HIDE'", "'IF'", "'IN'", "'INDEX'", "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTO'", "'IS'", "'LIKE'", "'LOCK'", "'LONG'", "'LOOP'", "'MINUS'", "'MLSLABEL'", "'MODE'", "'NATIONAL'", "'NATURAL'", "'NCHAR'", "'NCLOB'", "'NOPR'", "'NOPROMPT'", "'NOT'", "'NOWAIT'", "'NULL'", "'NUM'", "'NUMBER'", "'NUMERIC'", "'NVARCHAR'", "'NVARCHAR2'", "'OF'", "'ON'", "'OR'", "'ORDER'", "'OUT'", "'PACKAGE'", "'PLS_INTEGER'", "'POSITIVE'", "'PRAGMA'", "'PRIOR'", "'PROCEDURE'", "'PROMPT'", "'RAISE'", "'RAW'", "'REAL'", "'RECORD'", "'RETURN'", "'RETURNING'", "'ROLLBACK'", "'ROW'", "'ROWID'", "'ROWS'", "'SAVEPOINT'", "'SELECT'", "'SET'", "'SHARE'", "'SMALLINT'", "'SQL'", "'START'", "'TABLE'", "'THEN'", "'TO'", "'TRUE'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'UROWID'", "'VALUES'", "'VARCHAR'", "'VARCHAR2'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'"
    ];

    public static const int EOF=-1;
    public static const int T__59=59;
    public static const int T__60=60;
    public static const int T__61=61;
    public static const int T__62=62;
    public static const int T__63=63;
    public static const int T__64=64;
    public static const int T__65=65;
    public static const int T__66=66;
    public static const int T__67=67;
    public static const int T__68=68;
    public static const int T__69=69;
    public static const int T__70=70;
    public static const int T__71=71;
    public static const int T__72=72;
    public static const int T__73=73;
    public static const int T__74=74;
    public static const int T__75=75;
    public static const int T__76=76;
    public static const int T__77=77;
    public static const int T__78=78;
    public static const int T__79=79;
    public static const int T__80=80;
    public static const int T__81=81;
    public static const int T__82=82;
    public static const int T__83=83;
    public static const int T__84=84;
    public static const int T__85=85;
    public static const int T__86=86;
    public static const int T__87=87;
    public static const int T__88=88;
    public static const int T__89=89;
    public static const int T__90=90;
    public static const int T__91=91;
    public static const int T__92=92;
    public static const int T__93=93;
    public static const int T__94=94;
    public static const int T__95=95;
    public static const int T__96=96;
    public static const int T__97=97;
    public static const int T__98=98;
    public static const int T__99=99;
    public static const int T__100=100;
    public static const int T__101=101;
    public static const int T__102=102;
    public static const int T__103=103;
    public static const int T__104=104;
    public static const int T__105=105;
    public static const int T__106=106;
    public static const int T__107=107;
    public static const int T__108=108;
    public static const int T__109=109;
    public static const int T__110=110;
    public static const int T__111=111;
    public static const int T__112=112;
    public static const int T__113=113;
    public static const int T__114=114;
    public static const int T__115=115;
    public static const int T__116=116;
    public static const int T__117=117;
    public static const int T__118=118;
    public static const int T__119=119;
    public static const int T__120=120;
    public static const int T__121=121;
    public static const int T__122=122;
    public static const int T__123=123;
    public static const int T__124=124;
    public static const int T__125=125;
    public static const int T__126=126;
    public static const int T__127=127;
    public static const int T__128=128;
    public static const int T__129=129;
    public static const int T__130=130;
    public static const int T__131=131;
    public static const int T__132=132;
    public static const int T__133=133;
    public static const int T__134=134;
    public static const int T__135=135;
    public static const int T__136=136;
    public static const int T__137=137;
    public static const int T__138=138;
    public static const int T__139=139;
    public static const int T__140=140;
    public static const int T__141=141;
    public static const int T__142=142;
    public static const int T__143=143;
    public static const int T__144=144;
    public static const int T__145=145;
    public static const int T__146=146;
    public static const int T__147=147;
    public static const int T__148=148;
    public static const int T__149=149;
    public static const int T__150=150;
    public static const int T__151=151;
    public static const int T__152=152;
    public static const int T__153=153;
    public static const int T__154=154;
    public static const int T__155=155;
    public static const int T__156=156;
    public static const int T__157=157;
    public static const int T__158=158;
    public static const int T__159=159;
    public static const int T__160=160;
    public static const int T__161=161;
    public static const int T__162=162;
    public static const int T__163=163;
    public static const int T__164=164;
    public static const int T__165=165;
    public static const int T__166=166;
    public static const int T__167=167;
    public static const int T__168=168;
    public static const int T__169=169;
    public static const int T__170=170;
    public static const int T__171=171;
    public static const int T__172=172;
    public static const int T__173=173;
    public static const int T__174=174;
    public static const int T__175=175;
    public static const int T__176=176;
    public static const int T__177=177;
    public static const int T__178=178;
    public static const int T__179=179;
    public static const int T__180=180;
    public static const int T__181=181;
    public static const int T__182=182;
    public static const int T__183=183;
    public static const int T__184=184;
    public static const int T__185=185;
    public static const int ARROW=4;
    public static const int ASSIGN=5;
    public static const int ASTERISK=6;
    public static const int AT_SIGN=7;
    public static const int BULK_ROWCOUNT_ATTR=8;
    public static const int CHARSET_ATTR=9;
    public static const int COLON=10;
    public static const int COMMA=11;
    public static const int DIVIDE=12;
    public static const int DOT=13;
    public static const int DOUBLEDOT=14;
    public static const int DOUBLEQUOTED_STRING=15;
    public static const int DOUBLEVERTBAR=16;
    public static const int EQ=17;
    public static const int EXPONENT=18;
    public static const int FOUND_ATTR=19;
    public static const int GEQ=20;
    public static const int GTH=21;
    public static const int ID=22;
    public static const int ISOPEN_ATTR=23;
    public static const int LBRACK=24;
    public static const int LEQ=25;
    public static const int LLABEL=26;
    public static const int LPAREN=27;
    public static const int LTH=28;
    public static const int MINUS=29;
    public static const int ML_COMMENT=30;
    public static const int N=31;
    public static const int NOTFOUND_ATTR=32;
    public static const int NOT_EQ=33;
    public static const int NUMBER=34;
    public static const int PERCENTAGE=35;
    public static const int PLUS=36;
    public static const int POINT=37;
    public static const int QSTRING=38;
    public static const int QS_ANGLE=39;
    public static const int QS_BRACE=40;
    public static const int QS_BRACK=41;
    public static const int QS_OTHER=42;
    public static const int QS_OTHER_CH=43;
    public static const int QS_PAREN=44;
    public static const int QUOTE=45;
    public static const int QUOTED_STRING=46;
    public static const int Qoperator=47;
    public static const int RBRACK=48;
    public static const int RLABEL=49;
    public static const int ROWCOUNT_ATTR=50;
    public static const int ROWTYPE_ATTR=51;
    public static const int RPAREN=52;
    public static const int SEMI=53;
    public static const int SINGLE_QUOTE=54;
    public static const int SL_COMMENT=55;
    public static const int TYPE_ATTR=56;
    public static const int VERTBAR=57;
    public static const int WS=58;

    // delegates
   /* public Parser[] getDelegates() {
        return new Parser[] {};
    }*/

    // delegators


    public this(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public this(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        //this.state.ruleMemo = new HashMap[974+1];
         
        createDFAs();
        adaptor = new CommonTreeAdaptor();



         
    }

protected TreeAdaptor adaptor;

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public string[] getTokenNames() { return cast(string[])PLSQL3_2_DParser.tokenNames; }
    public string getGrammarFileName() { return "D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g"; }


    int is_sql = false;
    int is_sqlplus = false;
    static public class ANTLRNoCaseFileStream  : ANTLRFileStream {
        public this(string fileName) {
            super(fileName, null);
        }

        public this(string fileName, string encoding)
         {
            super(fileName, encoding);
        }

        public int LA(int i) {
            if ( i==0 ) {
                return 0; // undefined
            }
            if ( i<0 ) {
                i++; // e.g., translate LA(-1) to use offset 0
            }

            if ( (p+i-1) >= n ) {

                return CharStream.EOF;
            }
            return toUpper(data[p+i-1]);
        }
    }




    public static class start_rule_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "start_rule"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:404:1: start_rule : ( ( create_package ( DIVIDE )? ) | ( plsql_block SEMI ( DIVIDE )? ) | sql_plus )* EOF ;
    public final PLSQL3_2_DParser.start_rule_return start_rule()  {
        debug(trace_rules) writeln("Entering rule:","start_rule"," ",1);
        PLSQL3_2_DParser.start_rule_return retval = new PLSQL3_2_DParser.start_rule_return();
        retval.start = input.LT(1);

        int start_rule_StartIndex = input.index();

        Object root_0 = null;

        Token DIVIDE2=null;
        Token SEMI4=null;
        Token DIVIDE5=null;
        Token EOF7=null;
        PLSQL3_2_DParser.create_package_return create_package1 =null;

        PLSQL3_2_DParser.plsql_block_return plsql_block3 =null;

        PLSQL3_2_DParser.sql_plus_return sql_plus6 =null;


        Object DIVIDE2_tree=null;
        Object SEMI4_tree=null;
        Object DIVIDE5_tree=null;
        Object EOF7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:2: ( ( ( create_package ( DIVIDE )? ) | ( plsql_block SEMI ( DIVIDE )? ) | sql_plus )* EOF )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:6: ( ( create_package ( DIVIDE )? ) | ( plsql_block SEMI ( DIVIDE )? ) | sql_plus )* EOF
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:6: ( ( create_package ( DIVIDE )? ) | ( plsql_block SEMI ( DIVIDE )? ) | sql_plus )*
            loop3:
            do {
                int alt3=4;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    switch ( input.LA(2) ) {
                    case 144:
                        {
                        int LA3_5 = input.LA(3);

                        if ( (LA3_5==ID) ) {
                            int LA3_7 = input.LA(4);

                            if ( (LA3_7==147) ) {
                                alt3=1;
                            }
                            else if ( (LA3_7==107||LA3_7==152) ) {
                                alt3=2;
                            }


                        }


                        }
                        break;
                    case 147:
                        {
                        alt3=1;
                        }
                        break;
                    case 107:
                    case 152:
                        {
                        alt3=2;
                        }
                        break;

                    default:
                    }

                    }
                    break;
                case DOUBLEQUOTED_STRING:
                case ID:
                case LLABEL:
                case 67:
                case 88:
                case 107:
                case 150:
                case 152:
                    {
                    alt3=2;
                    }
                    break;
                case 59:
                case 60:
                    {
                    alt3=3;
                    }
                    break;

                default:
                }

                switch (alt3) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:8: ( create_package ( DIVIDE )? )
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:8: ( create_package ( DIVIDE )? )
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:9: create_package ( DIVIDE )?
            	    {
            	    pushFollow(FOLLOW_create_package_in_start_rule96);
            	    create_package1=create_package();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_package1.getTree());

            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:24: ( DIVIDE )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==DIVIDE) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:405:24: DIVIDE
            	           {
            	           DIVIDE2=cast(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_start_rule98); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           DIVIDE2_tree = 
            	           cast(Object)adaptor.create(DIVIDE2)
            	           ;
            	           adaptor.addChild(root_0, DIVIDE2_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:406:11: ( plsql_block SEMI ( DIVIDE )? )
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:406:11: ( plsql_block SEMI ( DIVIDE )? )
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:406:12: plsql_block SEMI ( DIVIDE )?
            	    {
            	    pushFollow(FOLLOW_plsql_block_in_start_rule113);
            	    plsql_block3=plsql_block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_block3.getTree());

            	    SEMI4=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_start_rule115); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMI4_tree = 
            	    cast(Object)adaptor.create(SEMI4)
            	    ;
            	    adaptor.addChild(root_0, SEMI4_tree);
            	    }

            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:406:29: ( DIVIDE )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==DIVIDE) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:406:29: DIVIDE
            	           {
            	           DIVIDE5=cast(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_start_rule117); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           DIVIDE5_tree = 
            	           cast(Object)adaptor.create(DIVIDE5)
            	           ;
            	           adaptor.addChild(root_0, DIVIDE5_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:407:18: sql_plus
            	    {
            	    pushFollow(FOLLOW_sql_plus_in_start_rule139);
            	    sql_plus6=sql_plus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_plus6.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            EOF7=cast(Token)match(input,EOF,FOLLOW_EOF_in_start_rule155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF7_tree = 
            cast(Object)adaptor.create(EOF7)
            ;
            adaptor.addChild(root_0, EOF7_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","start_rule"," ",1);
            if ( state.backtracking>0 ) { memoize(input, 1, start_rule_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "start_rule"


    public static class sql_plus_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_plus"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:411:1: sql_plus : ( 'ACC' | 'ACCEPT' ) variable ( 'NUM' | 'NUMBER' | 'CHAR' | 'DATE' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' )? ( ( 'FOR' | 'FORMAT' ) format )? ( ( 'DEF' | 'DEFAULT' ) defaultvalue )? ( 'PROMPT' text | ( 'NOPR' | 'NOPROMPT' ) )? ( 'HIDE' )? ;
    public final PLSQL3_2_DParser.sql_plus_return sql_plus()  {
        debug(trace_rules) writeln("Entering rule:","sql_plus"," ",2);
        PLSQL3_2_DParser.sql_plus_return retval = new PLSQL3_2_DParser.sql_plus_return();
        retval.start = input.LT(1);

        int sql_plus_StartIndex = input.index();

        Object root_0 = null;

        Token set8=null;
        Token set10=null;
        Token set11=null;
        Token set13=null;
        Token string_literal15=null;
        Token set17=null;
        Token string_literal18=null;
        PLSQL3_2_DParser.variable_return variable9 =null;

        PLSQL3_2_DParser.format_return format12 =null;

        PLSQL3_2_DParser.defaultvalue_return defaultvalue14 =null;

        PLSQL3_2_DParser.text_return text16 =null;


        Object set8_tree=null;
        Object set10_tree=null;
        Object set11_tree=null;
        Object set13_tree=null;
        Object string_literal15_tree=null;
        Object set17_tree=null;
        Object string_literal18_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:411:9: ( ( 'ACC' | 'ACCEPT' ) variable ( 'NUM' | 'NUMBER' | 'CHAR' | 'DATE' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' )? ( ( 'FOR' | 'FORMAT' ) format )? ( ( 'DEF' | 'DEFAULT' ) defaultvalue )? ( 'PROMPT' text | ( 'NOPR' | 'NOPROMPT' ) )? ( 'HIDE' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:411:11: ( 'ACC' | 'ACCEPT' ) variable ( 'NUM' | 'NUMBER' | 'CHAR' | 'DATE' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' )? ( ( 'FOR' | 'FORMAT' ) format )? ( ( 'DEF' | 'DEFAULT' ) defaultvalue )? ( 'PROMPT' text | ( 'NOPR' | 'NOPROMPT' ) )? ( 'HIDE' )?
            {
            root_0 = cast(Object)adaptor.nil();


            set8=cast(Token)input.LT(1);

            if ( (input.LA(1) >=59 && input.LA(1)<=60) ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set8)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_variable_in_sql_plus172);
            variable9=variable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable9.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:411:38: ( 'NUM' | 'NUMBER' | 'CHAR' | 'DATE' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( ((LA4_0 >=70  && LA4_0<=71)||LA4_0==77||LA4_0==85||(LA4_0 >=137  && LA4_0<=138)) ) {
                alt4=1;
            }
            switch (alt4) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                   {
                   set10=cast(Token)input.LT(1);

                   if ( (input.LA(1) >=70 && input.LA(1)<=71)||input.LA(1)==77||input.LA(1)==85||(input.LA(1) >=137 && input.LA(1)<=138) ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set10)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:17: ( ( 'FOR' | 'FORMAT' ) format )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( ((LA5_0 >=104  && LA5_0<=105)) ) {
                alt5=1;
            }
            switch (alt5) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:18: ( 'FOR' | 'FORMAT' ) format
                   {
                   set11=cast(Token)input.LT(1);

                   if ( (input.LA(1) >=104 && input.LA(1)<=105) ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set11)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   pushFollow(FOLLOW_format_in_sql_plus221);
                   format12=format();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, format12.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:44: ( ( 'DEF' | 'DEFAULT' ) defaultvalue )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( ((LA6_0 >=89  && LA6_0<=90)) ) {
                alt6=1;
            }
            switch (alt6) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:45: ( 'DEF' | 'DEFAULT' ) defaultvalue
                   {
                   set13=cast(Token)input.LT(1);

                   if ( (input.LA(1) >=89 && input.LA(1)<=90) ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set13)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   pushFollow(FOLLOW_defaultvalue_in_sql_plus232);
                   defaultvalue14=defaultvalue();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultvalue14.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:78: ( 'PROMPT' text | ( 'NOPR' | 'NOPROMPT' ) )?
            int alt7=3;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==153) ) {
                alt7=1;
            }
            else if ( ((LA7_0 >=132  && LA7_0<=133)) ) {
                alt7=2;
            }
            switch (alt7) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:79: 'PROMPT' text
                   {
                   string_literal15=cast(Token)match(input,153,FOLLOW_153_in_sql_plus237); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal15_tree = 
                   cast(Object)adaptor.create(string_literal15)
                   ;
                   adaptor.addChild(root_0, string_literal15_tree);
                   }

                   pushFollow(FOLLOW_text_in_sql_plus239);
                   text16=text();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, text16.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:93: ( 'NOPR' | 'NOPROMPT' )
                   {
                   set17=cast(Token)input.LT(1);

                   if ( (input.LA(1) >=132 && input.LA(1)<=133) ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set17)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:115: ( 'HIDE' )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==111) ) {
                alt8=1;
            }
            switch (alt8) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:412:115: 'HIDE'
                   {
                   string_literal18=cast(Token)match(input,111,FOLLOW_111_in_sql_plus249); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal18_tree = 
                   cast(Object)adaptor.create(string_literal18)
                   ;
                   adaptor.addChild(root_0, string_literal18_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_plus"," ",2);
            if ( state.backtracking>0 ) { memoize(input, 2, sql_plus_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_plus"


    public static class variable_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:416:1: variable : identifier ;
    public final PLSQL3_2_DParser.variable_return variable()  {
        debug(trace_rules) writeln("Entering rule:","variable"," ",3);
        PLSQL3_2_DParser.variable_return retval = new PLSQL3_2_DParser.variable_return();
        retval.start = input.LT(1);

        int variable_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier19 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:416:9: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:416:11: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_variable259);
            identifier19=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier19.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","variable"," ",3);
            if ( state.backtracking>0 ) { memoize(input, 3, variable_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable"


    public static class format_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "format"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:417:1: format : QUOTED_STRING ;
    public final PLSQL3_2_DParser.format_return format()  {
        debug(trace_rules) writeln("Entering rule:","format"," ",4);
        PLSQL3_2_DParser.format_return retval = new PLSQL3_2_DParser.format_return();
        retval.start = input.LT(1);

        int format_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING20=null;

        Object QUOTED_STRING20_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:417:8: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:417:10: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING20=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_format266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING20_tree = 
            cast(Object)adaptor.create(QUOTED_STRING20)
            ;
            adaptor.addChild(root_0, QUOTED_STRING20_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","format"," ",4);
            if ( state.backtracking>0 ) { memoize(input, 4, format_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "format"


    public static class defaultvalue_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultvalue"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:418:1: defaultvalue : QUOTED_STRING ;
    public final PLSQL3_2_DParser.defaultvalue_return defaultvalue()  {
        debug(trace_rules) writeln("Entering rule:","defaultvalue"," ",5);
        PLSQL3_2_DParser.defaultvalue_return retval = new PLSQL3_2_DParser.defaultvalue_return();
        retval.start = input.LT(1);

        int defaultvalue_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING21=null;

        Object QUOTED_STRING21_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:418:14: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:418:16: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING21=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_defaultvalue273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING21_tree = 
            cast(Object)adaptor.create(QUOTED_STRING21)
            ;
            adaptor.addChild(root_0, QUOTED_STRING21_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","defaultvalue"," ",5);
            if ( state.backtracking>0 ) { memoize(input, 5, defaultvalue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "defaultvalue"


    public static class text_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "text"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:419:1: text : QUOTED_STRING ;
    public final PLSQL3_2_DParser.text_return text()  {
        debug(trace_rules) writeln("Entering rule:","text"," ",6);
        PLSQL3_2_DParser.text_return retval = new PLSQL3_2_DParser.text_return();
        retval.start = input.LT(1);

        int text_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING22=null;

        Object QUOTED_STRING22_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:419:7: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:419:9: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING22=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_text281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING22_tree = 
            cast(Object)adaptor.create(QUOTED_STRING22)
            ;
            adaptor.addChild(root_0, QUOTED_STRING22_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","text"," ",6);
            if ( state.backtracking>0 ) { memoize(input, 6, text_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "text"


    public static class create_package_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_package"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:426:1: create_package : 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) ;
    public final PLSQL3_2_DParser.create_package_return create_package()  {
        debug(trace_rules) writeln("Entering rule:","create_package"," ",7);
        PLSQL3_2_DParser.create_package_return retval = new PLSQL3_2_DParser.create_package_return();
        retval.start = input.LT(1);

        int create_package_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal23=null;
        Token string_literal24=null;
        PLSQL3_2_DParser.keyREPLACE_return keyREPLACE25 =null;

        PLSQL3_2_DParser.package_spec_return package_spec26 =null;

        PLSQL3_2_DParser.package_body_return package_body27 =null;


        Object string_literal23_tree=null;
        Object string_literal24_tree=null;

         is_sqlplus = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:427:2: ( 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:427:4: 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body )
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal23=cast(Token)match(input,84,FOLLOW_84_in_create_package301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal23_tree = 
            cast(Object)adaptor.create(string_literal23)
            ;
            adaptor.addChild(root_0, string_literal23_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:427:13: ( 'OR' keyREPLACE )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==144) ) {
                alt9=1;
            }
            switch (alt9) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:427:15: 'OR' keyREPLACE
                   {
                   string_literal24=cast(Token)match(input,144,FOLLOW_144_in_create_package305); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal24_tree = 
                   cast(Object)adaptor.create(string_literal24)
                   ;
                   adaptor.addChild(root_0, string_literal24_tree);
                   }

                   pushFollow(FOLLOW_keyREPLACE_in_create_package307);
                   keyREPLACE25=keyREPLACE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE25.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:428:3: ( package_spec | package_body )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==147) ) {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==ID) ) {
                    int LA10_2 = input.LA(3);

                    if ( (LA10_2==DOT||LA10_2==64||LA10_2==120) ) {
                        alt10=1;
                    }
                    else if ( (LA10_2==DOUBLEQUOTED_STRING||LA10_2==ID||LA10_2==162) ) {
                        alt10=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 10, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA10_1==DOUBLEQUOTED_STRING||LA10_1==162) ) {
                    alt10=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:428:5: package_spec
                   {
                   pushFollow(FOLLOW_package_spec_in_create_package316);
                   package_spec26=package_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec26.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:428:20: package_body
                   {
                   pushFollow(FOLLOW_package_body_in_create_package320);
                   package_body27=package_body();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body27.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","create_package"," ",7);
            if ( state.backtracking>0 ) { memoize(input, 7, create_package_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "create_package"


    public static class package_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:431:1: package_spec : keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI ;
    public final PLSQL3_2_DParser.package_spec_return package_spec()  {
        debug(trace_rules) writeln("Entering rule:","package_spec"," ",8);
        PLSQL3_2_DParser.package_spec_return retval = new PLSQL3_2_DParser.package_spec_return();
        retval.start = input.LT(1);

        int package_spec_StartIndex = input.index();

        Object root_0 = null;

        Token set30=null;
        Token string_literal32=null;
        Token SEMI34=null;
        PLSQL3_2_DParser.keyPACKAGE_return keyPACKAGE28 =null;

        PLSQL3_2_DParser.package_name_return package_name29 =null;

        PLSQL3_2_DParser.package_obj_spec_return package_obj_spec31 =null;

        PLSQL3_2_DParser.package_name_return package_name33 =null;


        Object set30_tree=null;
        Object string_literal32_tree=null;
        Object SEMI34_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:432:2: ( keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:432:4: keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyPACKAGE_in_package_spec334);
            keyPACKAGE28=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE28.getTree());

            pushFollow(FOLLOW_package_name_in_package_spec336);
            package_name29=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name29.getTree());

            set30=cast(Token)input.LT(1);

            if ( input.LA(1)==64||input.LA(1)==120 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set30)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:433:3: ( package_obj_spec )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==DOUBLEQUOTED_STRING||LA11_0==ID||LA11_0==107||LA11_0==150||LA11_0==152) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:433:5: package_obj_spec
            	    {
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec353);
            	    package_obj_spec31=package_obj_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_spec31.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            string_literal32=cast(Token)match(input,97,FOLLOW_97_in_package_spec360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal32_tree = 
            cast(Object)adaptor.create(string_literal32)
            ;
            adaptor.addChild(root_0, string_literal32_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:434:9: ( package_name )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==DOUBLEQUOTED_STRING||LA12_0==ID||LA12_0==162) ) {
                alt12=1;
            }
            switch (alt12) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:434:10: package_name
                   {
                   pushFollow(FOLLOW_package_name_in_package_spec363);
                   package_name33=package_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name33.getTree());

                   }
                   break;

                default:
            }


            SEMI34=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_package_spec367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI34_tree = 
            cast(Object)adaptor.create(SEMI34)
            ;
            adaptor.addChild(root_0, SEMI34_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","package_spec"," ",8);
            if ( state.backtracking>0 ) { memoize(input, 8, package_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_spec"


    public static class package_body_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_body"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:437:1: package_body : keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI ;
    public final PLSQL3_2_DParser.package_body_return package_body()  {
        debug(trace_rules) writeln("Entering rule:","package_body"," ",9);
        PLSQL3_2_DParser.package_body_return retval = new PLSQL3_2_DParser.package_body_return();
        retval.start = input.LT(1);

        int package_body_StartIndex = input.index();

        Object root_0 = null;

        Token set38=null;
        Token string_literal40=null;
        Token string_literal42=null;
        Token SEMI44=null;
        PLSQL3_2_DParser.keyPACKAGE_return keyPACKAGE35 =null;

        PLSQL3_2_DParser.keyBODY_return keyBODY36 =null;

        PLSQL3_2_DParser.package_name_return package_name37 =null;

        PLSQL3_2_DParser.package_obj_body_return package_obj_body39 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements41 =null;

        PLSQL3_2_DParser.package_name_return package_name43 =null;


        Object set38_tree=null;
        Object string_literal40_tree=null;
        Object string_literal42_tree=null;
        Object SEMI44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:438:2: ( keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:438:4: keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyPACKAGE_in_package_body379);
            keyPACKAGE35=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE35.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:438:15: ( keyBODY )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:438:17: keyBODY
            {
            pushFollow(FOLLOW_keyBODY_in_package_body383);
            keyBODY36=keyBODY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBODY36.getTree());

            }


            pushFollow(FOLLOW_package_name_in_package_body387);
            package_name37=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name37.getTree());

            set38=cast(Token)input.LT(1);

            if ( input.LA(1)==64||input.LA(1)==120 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set38)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:439:3: ( package_obj_body )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==DOUBLEQUOTED_STRING||LA13_0==ID||LA13_0==84||LA13_0==107||LA13_0==150||LA13_0==152) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:439:5: package_obj_body
            	    {
            	    pushFollow(FOLLOW_package_obj_body_in_package_body403);
            	    package_obj_body39=package_obj_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_body39.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:440:3: ( 'BEGIN' seq_of_statements )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==67) ) {
                alt14=1;
            }
            switch (alt14) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:440:5: 'BEGIN' seq_of_statements
                   {
                   string_literal40=cast(Token)match(input,67,FOLLOW_67_in_package_body412); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal40_tree = 
                   cast(Object)adaptor.create(string_literal40)
                   ;
                   adaptor.addChild(root_0, string_literal40_tree);
                   }

                   pushFollow(FOLLOW_seq_of_statements_in_package_body414);
                   seq_of_statements41=seq_of_statements();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements41.getTree());

                   }
                   break;

                default:
            }


            string_literal42=cast(Token)match(input,97,FOLLOW_97_in_package_body423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal42_tree = 
            cast(Object)adaptor.create(string_literal42)
            ;
            adaptor.addChild(root_0, string_literal42_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:441:9: ( package_name )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==DOUBLEQUOTED_STRING||LA15_0==ID||LA15_0==162) ) {
                alt15=1;
            }
            switch (alt15) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:441:11: package_name
                   {
                   pushFollow(FOLLOW_package_name_in_package_body427);
                   package_name43=package_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name43.getTree());

                   }
                   break;

                default:
            }


            SEMI44=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_package_body432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI44_tree = 
            cast(Object)adaptor.create(SEMI44)
            ;
            adaptor.addChild(root_0, SEMI44_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","package_body"," ",9);
            if ( state.backtracking>0 ) { memoize(input, 9, package_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_body"


    public static class package_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:444:1: package_name : ( schema_name DOT )? identifier ;
    public final PLSQL3_2_DParser.package_name_return package_name()  {
        debug(trace_rules) writeln("Entering rule:","package_name"," ",10);
        PLSQL3_2_DParser.package_name_return retval = new PLSQL3_2_DParser.package_name_return();
        retval.start = input.LT(1);

        int package_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT46=null;
        PLSQL3_2_DParser.schema_name_return schema_name45 =null;

        PLSQL3_2_DParser.identifier_return identifier47 =null;


        Object DOT46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:445:2: ( ( schema_name DOT )? identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:445:4: ( schema_name DOT )? identifier
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:445:4: ( schema_name DOT )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==DOUBLEQUOTED_STRING||LA16_0==ID) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==DOT) ) {
                    alt16=1;
                }
            }
            else if ( (LA16_0==162) ) {
                alt16=1;
            }
            switch (alt16) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:445:6: schema_name DOT
                   {
                   pushFollow(FOLLOW_schema_name_in_package_name445);
                   schema_name45=schema_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name45.getTree());

                   DOT46=cast(Token)match(input,DOT,FOLLOW_DOT_in_package_name447); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT46_tree = 
                   cast(Object)adaptor.create(DOT46)
                   ;
                   adaptor.addChild(root_0, DOT46_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_identifier_in_package_name452);
            identifier47=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier47.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","package_name"," ",10);
            if ( state.backtracking>0 ) { memoize(input, 10, package_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_name"


    public static class package_obj_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:448:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );
    public final PLSQL3_2_DParser.package_obj_spec_return package_obj_spec()  {
        debug(trace_rules) writeln("Entering rule:","package_obj_spec"," ",11);
        PLSQL3_2_DParser.package_obj_spec_return retval = new PLSQL3_2_DParser.package_obj_spec_return();
        retval.start = input.LT(1);

        int package_obj_spec_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.variable_declaration_return variable_declaration48 =null;

        PLSQL3_2_DParser.type_declaration_return type_declaration49 =null;

        PLSQL3_2_DParser.subtype_declaration_return subtype_declaration50 =null;

        PLSQL3_2_DParser.record_declaration_return record_declaration51 =null;

        PLSQL3_2_DParser.plsql_table_declaration_return plsql_table_declaration52 =null;

        PLSQL3_2_DParser.varray_declaration_return varray_declaration53 =null;

        PLSQL3_2_DParser.cursor_declaration_return cursor_declaration54 =null;

        PLSQL3_2_DParser.cursor_spec_return cursor_spec55 =null;

        PLSQL3_2_DParser.procedure_spec_return procedure_spec56 =null;

        PLSQL3_2_DParser.function_spec_return function_spec57 =null;

        PLSQL3_2_DParser.exception_declaration_return exception_declaration58 =null;

        PLSQL3_2_DParser.pragma_declaration_return pragma_declaration59 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:449:2: ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration )
            int alt17=12;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:449:4: variable_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec464);
                    variable_declaration48=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration48.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:450:4: type_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_in_package_obj_spec470);
                    type_declaration49=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration49.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:451:4: subtype_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec475);
                    subtype_declaration50=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration50.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:452:4: record_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec481);
                    record_declaration51=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration51.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:453:4: plsql_table_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_spec487);
                    plsql_table_declaration52=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration52.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:454:4: varray_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_package_obj_spec493);
                    varray_declaration53=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration53.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:455:4: cursor_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec498);
                    cursor_declaration54=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration54.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:456:4: cursor_spec
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_spec_in_package_obj_spec504);
                    cursor_spec55=cursor_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_spec55.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:457:4: procedure_spec
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec510);
                    procedure_spec56=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec56.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:458:4: function_spec
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_spec_in_package_obj_spec516);
                    function_spec57=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec57.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:459:4: exception_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec522);
                    exception_declaration58=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration58.getTree());

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:460:4: pragma_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec528);
                    pragma_declaration59=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration59.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","package_obj_spec"," ",11);
            if ( state.backtracking>0 ) { memoize(input, 11, package_obj_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_obj_spec"


    public static class variable_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:463:1: variable_declaration : variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI ;
    public final PLSQL3_2_DParser.variable_declaration_return variable_declaration()  {
        debug(trace_rules) writeln("Entering rule:","variable_declaration"," ",12);
        PLSQL3_2_DParser.variable_declaration_return retval = new PLSQL3_2_DParser.variable_declaration_return();
        retval.start = input.LT(1);

        int variable_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal61=null;
        Token string_literal63=null;
        Token string_literal64=null;
        Token set65=null;
        Token SEMI67=null;
        PLSQL3_2_DParser.variable_name_return variable_name60 =null;

        PLSQL3_2_DParser.type_spec_return type_spec62 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression66 =null;


        Object string_literal61_tree=null;
        Object string_literal63_tree=null;
        Object string_literal64_tree=null;
        Object set65_tree=null;
        Object SEMI67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:464:2: ( variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:464:4: variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_variable_name_in_variable_declaration539);
            variable_name60=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name60.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:464:18: ( 'CONSTANT' )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==83) ) {
                alt18=1;
            }
            switch (alt18) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:464:19: 'CONSTANT'
                   {
                   string_literal61=cast(Token)match(input,83,FOLLOW_83_in_variable_declaration542); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal61_tree = 
                   cast(Object)adaptor.create(string_literal61)
                   ;
                   adaptor.addChild(root_0, string_literal61_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_type_spec_in_variable_declaration548);
            type_spec62=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec62.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:465:13: ( 'NOT' 'NULL' )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==134) ) {
                alt19=1;
            }
            switch (alt19) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:465:14: 'NOT' 'NULL'
                   {
                   string_literal63=cast(Token)match(input,134,FOLLOW_134_in_variable_declaration551); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal63_tree = 
                   cast(Object)adaptor.create(string_literal63)
                   ;
                   adaptor.addChild(root_0, string_literal63_tree);
                   }

                   string_literal64=cast(Token)match(input,136,FOLLOW_136_in_variable_declaration553); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal64_tree = 
                   cast(Object)adaptor.create(string_literal64)
                   ;
                   adaptor.addChild(root_0, string_literal64_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:466:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==ASSIGN||LA20_0==90) ) {
                alt20=1;
            }
            switch (alt20) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:466:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                   {
                   set65=cast(Token)input.LT(1);

                   if ( input.LA(1)==ASSIGN||input.LA(1)==90 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set65)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   pushFollow(FOLLOW_plsql_expression_in_variable_declaration572);
                   plsql_expression66=plsql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression66.getTree());

                   }
                   break;

                default:
            }


            SEMI67=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_variable_declaration576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI67_tree = 
            cast(Object)adaptor.create(SEMI67)
            ;
            adaptor.addChild(root_0, SEMI67_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","variable_declaration"," ",12);
            if ( state.backtracking>0 ) { memoize(input, 12, variable_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declaration"


    public static class type_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:469:1: type_declaration : keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI ;
    public final PLSQL3_2_DParser.type_declaration_return type_declaration()  {
        debug(trace_rules) writeln("Entering rule:","type_declaration"," ",13);
        PLSQL3_2_DParser.type_declaration_return retval = new PLSQL3_2_DParser.type_declaration_return();
        retval.start = input.LT(1);

        int type_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal70=null;
        Token string_literal73=null;
        Token string_literal74=null;
        Token LPAREN75=null;
        Token RPAREN77=null;
        Token SEMI78=null;
        PLSQL3_2_DParser.keyTYPE_return keyTYPE68 =null;

        PLSQL3_2_DParser.type_spec_return type_spec69 =null;

        PLSQL3_2_DParser.keyNEW_return keyNEW71 =null;

        PLSQL3_2_DParser.type_spec_return type_spec72 =null;

        PLSQL3_2_DParser.plsql_expressions_return plsql_expressions76 =null;


        Object string_literal70_tree=null;
        Object string_literal73_tree=null;
        Object string_literal74_tree=null;
        Object LPAREN75_tree=null;
        Object RPAREN77_tree=null;
        Object SEMI78_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:2: ( keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:4: keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_type_declaration589);
            keyTYPE68=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE68.getTree());

            pushFollow(FOLLOW_type_spec_in_type_declaration591);
            type_spec69=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec69.getTree());

            string_literal70=cast(Token)match(input,120,FOLLOW_120_in_type_declaration593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal70_tree = 
            cast(Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:27: ( keyNEW )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ID) ) {
                switch ( input.LA(2) ) {
                    case DOUBLEQUOTED_STRING:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 77:
                    case 78:
                    case 79:
                    case 85:
                    case 86:
                    case 87:
                    case 94:
                    case 103:
                    case 116:
                    case 117:
                    case 123:
                    case 126:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 148:
                    case 149:
                    case 155:
                    case 156:
                    case 162:
                    case 168:
                    case 178:
                    case 180:
                    case 181:
                        {
                        alt21=1;
                        }
                        break;
                    case ID:
                        {
                        int LA21_4 = input.LA(3);

                        if ( (LA21_4==DOT||LA21_4==ID||LA21_4==ROWTYPE_ATTR||LA21_4==SEMI||LA21_4==TYPE_ATTR||LA21_4==134||LA21_4==185) ) {
                            alt21=1;
                        }
                        else if ( (LA21_4==LPAREN) ) {
                            int LA21_6 = input.LA(4);

                            if ( (LA21_6==NUMBER) ) {
                                int LA21_8 = input.LA(5);

                                if ( (LA21_8==RPAREN) ) {
                                    int LA21_10 = input.LA(6);

                                    if ( (LA21_10==SEMI||LA21_10==134||LA21_10==185) ) {
                                        alt21=1;
                                    }
                                }
                            }
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA21_5 = input.LA(3);

                        if ( (LA21_5==NUMBER) ) {
                            int LA21_7 = input.LA(4);

                            if ( (LA21_7==RPAREN) ) {
                                int LA21_9 = input.LA(5);

                                if ( ((((toUpper(input.LT(1).getText)== "NEW")&&(toUpper(input.LT(1).getText)== "NEW"))&&synpred46_PLSQL3_2_D())) ) {
                                    alt21=1;
                                }
                            }
                            else if ( (LA21_7==ASTERISK||LA21_7==BULK_ROWCOUNT_ATTR||(LA21_7 >=11  && LA21_7<=12)||(LA21_7 >=16  && LA21_7<=21)||LA21_7==ISOPEN_ATTR||LA21_7==LEQ||(LA21_7 >=28  && LA21_7<=29)||(LA21_7 >=32  && LA21_7<=33)||LA21_7==PLUS||LA21_7==ROWCOUNT_ATTR||LA21_7==62||LA21_7==68||LA21_7==113||(LA21_7 >=120  && LA21_7<=121)||LA21_7==134||LA21_7==144) ) {
                                alt21=1;
                            }
                        }
                        else if ( (LA21_5==DOUBLEQUOTED_STRING||LA21_5==ID||LA21_5==LPAREN||LA21_5==MINUS||LA21_5==PLUS||LA21_5==QUOTED_STRING||LA21_5==76||LA21_5==93||LA21_5==101||LA21_5==134||LA21_5==136||LA21_5==162||LA21_5==165||LA21_5==169||LA21_5==174) ) {
                            alt21=1;
                        }
                        }
                        break;
                    default:
                }

            }
            switch (alt21) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:29: keyNEW
                   {
                   pushFollow(FOLLOW_keyNEW_in_type_declaration597);
                   keyNEW71=keyNEW();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW71.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:39: ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==DOUBLEQUOTED_STRING||LA23_0==ID||(LA23_0 >=69  && LA23_0<=74)||(LA23_0 >=77  && LA23_0<=79)||(LA23_0 >=85  && LA23_0<=87)||LA23_0==94||LA23_0==103||(LA23_0 >=116  && LA23_0<=117)||LA23_0==123||LA23_0==126||(LA23_0 >=128  && LA23_0<=131)||(LA23_0 >=138  && LA23_0<=141)||(LA23_0 >=148  && LA23_0<=149)||(LA23_0 >=155  && LA23_0<=156)||LA23_0==162||LA23_0==168||LA23_0==178||(LA23_0 >=180  && LA23_0<=181)) ) {
                alt23=1;
            }
            else if ( (LA23_0==LPAREN) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:41: type_spec ( 'NOT' 'NULL' )?
                   {
                   pushFollow(FOLLOW_type_spec_in_type_declaration604);
                   type_spec72=type_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec72.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:51: ( 'NOT' 'NULL' )?
                   int alt22=2;
                   int LA22_0 = input.LA(1);

                   if ( (LA22_0==134) ) {
                       alt22=1;
                   }
                   switch (alt22) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:53: 'NOT' 'NULL'
                          {
                          string_literal73=cast(Token)match(input,134,FOLLOW_134_in_type_declaration608); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal73_tree = 
                          cast(Object)adaptor.create(string_literal73)
                          ;
                          adaptor.addChild(root_0, string_literal73_tree);
                          }

                          string_literal74=cast(Token)match(input,136,FOLLOW_136_in_type_declaration610); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal74_tree = 
                          cast(Object)adaptor.create(string_literal74)
                          ;
                          adaptor.addChild(root_0, string_literal74_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:71: LPAREN plsql_expressions RPAREN
                   {
                   LPAREN75=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_declaration617); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN75_tree = 
                   cast(Object)adaptor.create(LPAREN75)
                   ;
                   adaptor.addChild(root_0, LPAREN75_tree);
                   }

                   pushFollow(FOLLOW_plsql_expressions_in_type_declaration619);
                   plsql_expressions76=plsql_expressions();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions76.getTree());

                   RPAREN77=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_declaration621); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN77_tree = 
                   cast(Object)adaptor.create(RPAREN77)
                   ;
                   adaptor.addChild(root_0, RPAREN77_tree);
                   }

                   }
                   break;

                default:
            }


            SEMI78=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_type_declaration625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI78_tree = 
            cast(Object)adaptor.create(SEMI78)
            ;
            adaptor.addChild(root_0, SEMI78_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_declaration"," ",13);
            if ( state.backtracking>0 ) { memoize(input, 13, type_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class subtype_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subtype_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:473:1: subtype_declaration : keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI ;
    public final PLSQL3_2_DParser.subtype_declaration_return subtype_declaration()  {
        debug(trace_rules) writeln("Entering rule:","subtype_declaration"," ",14);
        PLSQL3_2_DParser.subtype_declaration_return retval = new PLSQL3_2_DParser.subtype_declaration_return();
        retval.start = input.LT(1);

        int subtype_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal81=null;
        Token string_literal83=null;
        Token string_literal84=null;
        Token DOUBLEDOT87=null;
        Token SEMI89=null;
        PLSQL3_2_DParser.keySUBTYPE_return keySUBTYPE79 =null;

        PLSQL3_2_DParser.type_spec_return type_spec80 =null;

        PLSQL3_2_DParser.type_spec_return type_spec82 =null;

        PLSQL3_2_DParser.keyRANGE_return keyRANGE85 =null;

        PLSQL3_2_DParser.literal_return literal86 =null;

        PLSQL3_2_DParser.literal_return literal88 =null;


        Object string_literal81_tree=null;
        Object string_literal83_tree=null;
        Object string_literal84_tree=null;
        Object DOUBLEDOT87_tree=null;
        Object SEMI89_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:474:2: ( keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:474:4: keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keySUBTYPE_in_subtype_declaration638);
            keySUBTYPE79=keySUBTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBTYPE79.getTree());

            pushFollow(FOLLOW_type_spec_in_subtype_declaration640);
            type_spec80=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec80.getTree());

            string_literal81=cast(Token)match(input,120,FOLLOW_120_in_subtype_declaration642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal81_tree = 
            cast(Object)adaptor.create(string_literal81)
            ;
            adaptor.addChild(root_0, string_literal81_tree);
            }

            pushFollow(FOLLOW_type_spec_in_subtype_declaration644);
            type_spec82=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec82.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:474:40: ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )?
            int alt24=3;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==134) ) {
                alt24=1;
            }
            else if ( (LA24_0==ID) ) {
                alt24=2;
            }
            switch (alt24) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:474:42: 'NOT' 'NULL'
                   {
                   string_literal83=cast(Token)match(input,134,FOLLOW_134_in_subtype_declaration648); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal83_tree = 
                   cast(Object)adaptor.create(string_literal83)
                   ;
                   adaptor.addChild(root_0, string_literal83_tree);
                   }

                   string_literal84=cast(Token)match(input,136,FOLLOW_136_in_subtype_declaration650); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal84_tree = 
                   cast(Object)adaptor.create(string_literal84)
                   ;
                   adaptor.addChild(root_0, string_literal84_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:474:57: keyRANGE literal DOUBLEDOT literal
                   {
                   pushFollow(FOLLOW_keyRANGE_in_subtype_declaration654);
                   keyRANGE85=keyRANGE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRANGE85.getTree());

                   pushFollow(FOLLOW_literal_in_subtype_declaration656);
                   literal86=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal86.getTree());

                   DOUBLEDOT87=cast(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_subtype_declaration658); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOUBLEDOT87_tree = 
                   cast(Object)adaptor.create(DOUBLEDOT87)
                   ;
                   adaptor.addChild(root_0, DOUBLEDOT87_tree);
                   }

                   pushFollow(FOLLOW_literal_in_subtype_declaration660);
                   literal88=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal88.getTree());

                   }
                   break;

                default:
            }


            SEMI89=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_declaration665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI89_tree = 
            cast(Object)adaptor.create(SEMI89)
            ;
            adaptor.addChild(root_0, SEMI89_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","subtype_declaration"," ",14);
            if ( state.backtracking>0 ) { memoize(input, 14, subtype_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"


    public static class cursor_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:477:1: cursor_declaration : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI ;
    public final PLSQL3_2_DParser.cursor_declaration_return cursor_declaration()  {
        debug(trace_rules) writeln("Entering rule:","cursor_declaration"," ",15);
        PLSQL3_2_DParser.cursor_declaration_return retval = new PLSQL3_2_DParser.cursor_declaration_return();
        retval.start = input.LT(1);

        int cursor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN92=null;
        Token RPAREN94=null;
        Token string_literal95=null;
        Token SEMI97=null;
        PLSQL3_2_DParser.keyCURSOR_return keyCURSOR90 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name91 =null;

        PLSQL3_2_DParser.parameter_specs_return parameter_specs93 =null;

        PLSQL3_2_DParser.select_command_return select_command96 =null;


        Object LPAREN92_tree=null;
        Object RPAREN94_tree=null;
        Object string_literal95_tree=null;
        Object SEMI97_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:478:2: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:478:4: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_declaration678);
            keyCURSOR90=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR90.getTree());

            pushFollow(FOLLOW_cursor_name_in_cursor_declaration680);
            cursor_name91=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name91.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:479:3: ( LPAREN parameter_specs RPAREN )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LPAREN) ) {
                alt25=1;
            }
            switch (alt25) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:479:5: LPAREN parameter_specs RPAREN
                   {
                   LPAREN92=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_declaration686); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN92_tree = 
                   cast(Object)adaptor.create(LPAREN92)
                   ;
                   adaptor.addChild(root_0, LPAREN92_tree);
                   }

                   pushFollow(FOLLOW_parameter_specs_in_cursor_declaration688);
                   parameter_specs93=parameter_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs93.getTree());

                   RPAREN94=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_declaration690); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN94_tree = 
                   cast(Object)adaptor.create(RPAREN94)
                   ;
                   adaptor.addChild(root_0, RPAREN94_tree);
                   }

                   }
                   break;

                default:
            }


            string_literal95=cast(Token)match(input,120,FOLLOW_120_in_cursor_declaration697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal95_tree = 
            cast(Object)adaptor.create(string_literal95)
            ;
            adaptor.addChild(root_0, string_literal95_tree);
            }

            pushFollow(FOLLOW_select_command_in_cursor_declaration699);
            select_command96=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command96.getTree());

            SEMI97=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_cursor_declaration701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI97_tree = 
            cast(Object)adaptor.create(SEMI97)
            ;
            adaptor.addChild(root_0, SEMI97_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cursor_declaration"," ",15);
            if ( state.backtracking>0 ) { memoize(input, 15, cursor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_declaration"


    public static class package_obj_body_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_body"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:482:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );
    public final PLSQL3_2_DParser.package_obj_body_return package_obj_body()  {
        debug(trace_rules) writeln("Entering rule:","package_obj_body"," ",16);
        PLSQL3_2_DParser.package_obj_body_return retval = new PLSQL3_2_DParser.package_obj_body_return();
        retval.start = input.LT(1);

        int package_obj_body_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.variable_declaration_return variable_declaration98 =null;

        PLSQL3_2_DParser.subtype_declaration_return subtype_declaration99 =null;

        PLSQL3_2_DParser.cursor_declaration_return cursor_declaration100 =null;

        PLSQL3_2_DParser.exception_declaration_return exception_declaration101 =null;

        PLSQL3_2_DParser.record_declaration_return record_declaration102 =null;

        PLSQL3_2_DParser.plsql_table_declaration_return plsql_table_declaration103 =null;

        PLSQL3_2_DParser.varray_declaration_return varray_declaration104 =null;

        PLSQL3_2_DParser.procedure_body_return procedure_body105 =null;

        PLSQL3_2_DParser.function_body_return function_body106 =null;

        PLSQL3_2_DParser.pragma_declaration_return pragma_declaration107 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:483:2: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration )
            int alt26=10;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:483:4: variable_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body711);
                    variable_declaration98=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration98.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:484:4: subtype_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body717);
                    subtype_declaration99=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration99.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:485:4: cursor_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body723);
                    cursor_declaration100=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration100.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:486:4: exception_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body729);
                    exception_declaration101=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration101.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:487:4: record_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_body735);
                    record_declaration102=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration102.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:488:4: plsql_table_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_body741);
                    plsql_table_declaration103=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration103.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:489:4: varray_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_package_obj_body747);
                    varray_declaration104=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration104.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:490:4: procedure_body
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_body_in_package_obj_body752);
                    procedure_body105=procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body105.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:491:4: function_body
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_body_in_package_obj_body758);
                    function_body106=function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body106.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:492:4: pragma_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_body764);
                    pragma_declaration107=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration107.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","package_obj_body"," ",16);
            if ( state.backtracking>0 ) { memoize(input, 16, package_obj_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_obj_body"


    public static class seq_of_statements_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "seq_of_statements"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:495:1: seq_of_statements : statement SEMI ( statement SEMI )* ;
    public final PLSQL3_2_DParser.seq_of_statements_return seq_of_statements()  {
        debug(trace_rules) writeln("Entering rule:","seq_of_statements"," ",17);
        PLSQL3_2_DParser.seq_of_statements_return retval = new PLSQL3_2_DParser.seq_of_statements_return();
        retval.start = input.LT(1);

        int seq_of_statements_StartIndex = input.index();

        Object root_0 = null;

        Token SEMI109=null;
        Token SEMI111=null;
        PLSQL3_2_DParser.statement_return statement108 =null;

        PLSQL3_2_DParser.statement_return statement110 =null;


        Object SEMI109_tree=null;
        Object SEMI111_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:496:2: ( statement SEMI ( statement SEMI )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:496:4: statement SEMI ( statement SEMI )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_statement_in_seq_of_statements775);
            statement108=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement108.getTree());

            SEMI109=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI109_tree = 
            cast(Object)adaptor.create(SEMI109)
            ;
            adaptor.addChild(root_0, SEMI109_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:496:19: ( statement SEMI )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==COLON||LA27_0==DOUBLEQUOTED_STRING||LA27_0==ID||LA27_0==LLABEL||LA27_0==67||LA27_0==76||LA27_0==81||LA27_0==84||LA27_0==88||LA27_0==91||LA27_0==102||LA27_0==104||(LA27_0 >=107  && LA27_0<=108)||LA27_0==112||LA27_0==115||LA27_0==122||LA27_0==124||LA27_0==136||LA27_0==150||LA27_0==152||LA27_0==154||LA27_0==158||LA27_0==160||LA27_0==162||(LA27_0 >=164  && LA27_0<=166)||LA27_0==177||LA27_0==184) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:496:21: statement SEMI
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements781);
            	    statement110=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement110.getTree());

            	    SEMI111=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements783); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMI111_tree = 
            	    cast(Object)adaptor.create(SEMI111)
            	    ;
            	    adaptor.addChild(root_0, SEMI111_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","seq_of_statements"," ",17);
            if ( state.backtracking>0 ) { memoize(input, 17, seq_of_statements_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"


    public static class statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:499:1: statement : ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call );
    public final PLSQL3_2_DParser.statement_return statement()  {
        debug(trace_rules) writeln("Entering rule:","statement"," ",18);
        PLSQL3_2_DParser.statement_return retval = new PLSQL3_2_DParser.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.assignment_statement_return assignment_statement112 =null;

        PLSQL3_2_DParser.exit_statement_return exit_statement113 =null;

        PLSQL3_2_DParser.goto_statement_return goto_statement114 =null;

        PLSQL3_2_DParser.case_statement_return case_statement115 =null;

        PLSQL3_2_DParser.if_statement_return if_statement116 =null;

        PLSQL3_2_DParser.loop_statement_return loop_statement117 =null;

        PLSQL3_2_DParser.null_statement_return null_statement118 =null;

        PLSQL3_2_DParser.raise_statement_return raise_statement119 =null;

        PLSQL3_2_DParser.return_statement_return return_statement120 =null;

        PLSQL3_2_DParser.sql_statement_return sql_statement121 =null;

        PLSQL3_2_DParser.plsql_block_return plsql_block122 =null;

        PLSQL3_2_DParser.function_call_return function_call123 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:500:2: ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call )
            int alt28=12;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA28_1 = input.LA(2);

                if ( (synpred62_PLSQL3_2_D()) ) {
                    alt28=1;
                }
                else if ( (((synpred63_PLSQL3_2_D()&&synpred63_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "EXIT"))) ) {
                    alt28=2;
                }
                else if ( (synpred65_PLSQL3_2_D()) ) {
                    alt28=4;
                }
                else if ( (((((toUpper(input.LT(1).getText)== "OPEN")||(toUpper(input.LT(1).getText)== "CLOSE"))&&((toUpper(input.LT(1).getText)== "OPEN")||(toUpper(input.LT(1).getText)== "CLOSE")))&&synpred71_PLSQL3_2_D())) ) {
                    alt28=10;
                }
                else if ( (synpred72_PLSQL3_2_D()) ) {
                    alt28=11;
                }
                else if ( (true) ) {
                    alt28=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 1, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                alt28=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA28_3 = input.LA(2);

                if ( (synpred62_PLSQL3_2_D()) ) {
                    alt28=1;
                }
                else if ( (synpred65_PLSQL3_2_D()) ) {
                    alt28=4;
                }
                else if ( (synpred72_PLSQL3_2_D()) ) {
                    alt28=11;
                }
                else if ( (true) ) {
                    alt28=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 3, input);

                    throw nvae;

                }
                }
                break;
            case 108:
                {
                alt28=3;
                }
                break;
            case 76:
                {
                alt28=4;
                }
                break;
            case 112:
                {
                alt28=5;
                }
                break;
            case LLABEL:
                {
                int LA28_7 = input.LA(2);

                if ( (synpred67_PLSQL3_2_D()) ) {
                    alt28=6;
                }
                else if ( (synpred72_PLSQL3_2_D()) ) {
                    alt28=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 7, input);

                    throw nvae;

                }
                }
                break;
            case 104:
            case 124:
            case 184:
                {
                alt28=6;
                }
                break;
            case 136:
                {
                alt28=7;
                }
                break;
            case 154:
                {
                alt28=8;
                }
                break;
            case 158:
                {
                alt28=9;
                }
                break;
            case 81:
            case 91:
            case 102:
            case 115:
            case 122:
            case 160:
            case 164:
            case 165:
            case 166:
            case 177:
                {
                alt28=10;
                }
                break;
            case 67:
            case 84:
            case 88:
            case 107:
            case 150:
            case 152:
                {
                alt28=11;
                }
                break;
            case 162:
                {
                alt28=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }

            switch (alt28) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:500:4: assignment_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_assignment_statement_in_statement798);
                    assignment_statement112=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_statement112.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:501:4: exit_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_exit_statement_in_statement803);
                    exit_statement113=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement113.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:502:4: goto_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_statement_in_statement808);
                    goto_statement114=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement114.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:503:4: case_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_case_statement_in_statement813);
                    case_statement115=case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement115.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:504:4: if_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_if_statement_in_statement818);
                    if_statement116=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement116.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:505:4: loop_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_loop_statement_in_statement824);
                    loop_statement117=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement117.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:506:4: null_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_null_statement_in_statement830);
                    null_statement118=null_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_statement118.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:507:4: raise_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_raise_statement_in_statement835);
                    raise_statement119=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement119.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:508:4: return_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_return_statement_in_statement840);
                    return_statement120=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement120.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:509:4: sql_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_statement_in_statement845);
                    sql_statement121=sql_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statement121.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:510:4: plsql_block
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_block_in_statement850);
                    plsql_block122=plsql_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_block122.getTree());

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:512:4: function_call
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_call_in_statement856);
                    function_call123=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call123.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","statement"," ",18);
            if ( state.backtracking>0 ) { memoize(input, 18, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class plsql_block_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_block"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:515:1: plsql_block : ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) ;
    public final PLSQL3_2_DParser.plsql_block_return plsql_block()  {
        debug(trace_rules) writeln("Entering rule:","plsql_block"," ",19);
        PLSQL3_2_DParser.plsql_block_return retval = new PLSQL3_2_DParser.plsql_block_return();
        retval.start = input.LT(1);

        int plsql_block_StartIndex = input.index();

        Object root_0 = null;

        Token LLABEL124=null;
        Token RLABEL126=null;
        Token string_literal127=null;
        Token string_literal129=null;
        Token string_literal131=null;
        Token string_literal133=null;
        PLSQL3_2_DParser.label_name_return label_name125 =null;

        PLSQL3_2_DParser.declare_spec_return declare_spec128 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements130 =null;

        PLSQL3_2_DParser.exception_handler_return exception_handler132 =null;

        PLSQL3_2_DParser.label_name_return label_name134 =null;


        Object LLABEL124_tree=null;
        Object RLABEL126_tree=null;
        Object string_literal127_tree=null;
        Object string_literal129_tree=null;
        Object string_literal131_tree=null;
        Object string_literal133_tree=null;

         is_sqlplus = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:516:2: ( ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:516:4: ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? )
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:516:4: ( LLABEL label_name RLABEL )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==LLABEL) ) {
                alt29=1;
            }
            switch (alt29) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:516:6: LLABEL label_name RLABEL
                   {
                   LLABEL124=cast(Token)match(input,LLABEL,FOLLOW_LLABEL_in_plsql_block877); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LLABEL124_tree = 
                   cast(Object)adaptor.create(LLABEL124)
                   ;
                   adaptor.addChild(root_0, LLABEL124_tree);
                   }

                   pushFollow(FOLLOW_label_name_in_plsql_block879);
                   label_name125=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name125.getTree());

                   RLABEL126=cast(Token)match(input,RLABEL,FOLLOW_RLABEL_in_plsql_block881); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RLABEL126_tree = 
                   cast(Object)adaptor.create(RLABEL126)
                   ;
                   adaptor.addChild(root_0, RLABEL126_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:3: ( ( 'DECLARE' )? ( declare_spec )+ )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==DOUBLEQUOTED_STRING||LA32_0==ID||LA32_0==84||LA32_0==88||LA32_0==107||LA32_0==150||LA32_0==152) ) {
                alt32=1;
            }
            switch (alt32) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:5: ( 'DECLARE' )? ( declare_spec )+
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:5: ( 'DECLARE' )?
                   int alt30=2;
                   int LA30_0 = input.LA(1);

                   if ( (LA30_0==88) ) {
                       alt30=1;
                   }
                   switch (alt30) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:7: 'DECLARE'
                          {
                          string_literal127=cast(Token)match(input,88,FOLLOW_88_in_plsql_block892); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal127_tree = 
                          cast(Object)adaptor.create(string_literal127)
                          ;
                          adaptor.addChild(root_0, string_literal127_tree);
                          }

                          }
                          break;

                       default:
                   }


                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:20: ( declare_spec )+
                   int cnt31=0;
                   loop31:
                   do {
                       int alt31=2;
                       int LA31_0 = input.LA(1);

                       if ( (LA31_0==DOUBLEQUOTED_STRING||LA31_0==ID||LA31_0==84||LA31_0==107||LA31_0==150||LA31_0==152) ) {
                           alt31=1;
                       }


                       switch (alt31) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:517:21: declare_spec
                   	    {
                   	    pushFollow(FOLLOW_declare_spec_in_plsql_block898);
                   	    declare_spec128=declare_spec();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec128.getTree());

                   	    }
                   	    break;

                   	default :
                   	    if ( cnt31 >= 1 ) break loop31;
                   	    if (state.backtracking>0) {state.failed=true; return retval;}
                               EarlyExitException eee =
                                   new EarlyExitException(31, input);
                               throw eee;
                       }
                       cnt31++;
                   } while (true);


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:518:3: ( 'BEGIN' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:518:5: 'BEGIN'
            {
            string_literal129=cast(Token)match(input,67,FOLLOW_67_in_plsql_block910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal129_tree = 
            cast(Object)adaptor.create(string_literal129)
            ;
            adaptor.addChild(root_0, string_literal129_tree);
            }

            }


            pushFollow(FOLLOW_seq_of_statements_in_plsql_block916);
            seq_of_statements130=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements130.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:520:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==98) ) {
                alt34=1;
            }
            switch (alt34) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:520:5: 'EXCEPTION' ( exception_handler )+
                   {
                   string_literal131=cast(Token)match(input,98,FOLLOW_98_in_plsql_block922); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal131_tree = 
                   cast(Object)adaptor.create(string_literal131)
                   ;
                   adaptor.addChild(root_0, string_literal131_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:520:17: ( exception_handler )+
                   int cnt33=0;
                   loop33:
                   do {
                       int alt33=2;
                       int LA33_0 = input.LA(1);

                       if ( (LA33_0==182) ) {
                           alt33=1;
                       }


                       switch (alt33) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:520:19: exception_handler
                   	    {
                   	    pushFollow(FOLLOW_exception_handler_in_plsql_block926);
                   	    exception_handler132=exception_handler();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler132.getTree());

                   	    }
                   	    break;

                   	default :
                   	    if ( cnt33 >= 1 ) break loop33;
                   	    if (state.backtracking>0) {state.failed=true; return retval;}
                               EarlyExitException eee =
                                   new EarlyExitException(33, input);
                               throw eee;
                       }
                       cnt33++;
                   } while (true);


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:521:3: ( 'END' ( label_name )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:521:5: 'END' ( label_name )?
            {
            string_literal133=cast(Token)match(input,97,FOLLOW_97_in_plsql_block939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal133_tree = 
            cast(Object)adaptor.create(string_literal133)
            ;
            adaptor.addChild(root_0, string_literal133_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:521:11: ( label_name )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==DOUBLEQUOTED_STRING||LA35_0==ID) ) {
                alt35=1;
            }
            switch (alt35) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:521:13: label_name
                   {
                   pushFollow(FOLLOW_label_name_in_plsql_block943);
                   label_name134=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name134.getTree());

                   }
                   break;

                default:
            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_block"," ",19);
            if ( state.backtracking>0 ) { memoize(input, 19, plsql_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_block"


    public static class declare_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declare_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:524:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );
    public final PLSQL3_2_DParser.declare_spec_return declare_spec()  {
        debug(trace_rules) writeln("Entering rule:","declare_spec"," ",20);
        PLSQL3_2_DParser.declare_spec_return retval = new PLSQL3_2_DParser.declare_spec_return();
        retval.start = input.LT(1);

        int declare_spec_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.variable_declaration_return variable_declaration135 =null;

        PLSQL3_2_DParser.subtype_declaration_return subtype_declaration136 =null;

        PLSQL3_2_DParser.cursor_declaration_return cursor_declaration137 =null;

        PLSQL3_2_DParser.exception_declaration_return exception_declaration138 =null;

        PLSQL3_2_DParser.record_declaration_return record_declaration139 =null;

        PLSQL3_2_DParser.plsql_table_declaration_return plsql_table_declaration140 =null;

        PLSQL3_2_DParser.varray_declaration_return varray_declaration141 =null;

        PLSQL3_2_DParser.procedure_declaration_return procedure_declaration142 =null;

        PLSQL3_2_DParser.function_declaration_return function_declaration143 =null;

        PLSQL3_2_DParser.type_declaration_return type_declaration144 =null;

        PLSQL3_2_DParser.pragma_declaration_return pragma_declaration145 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:525:2: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration )
            int alt36=11;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:525:4: variable_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_declare_spec959);
                    variable_declaration135=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration135.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:526:4: subtype_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec965);
                    subtype_declaration136=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration136.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:527:4: cursor_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec971);
                    cursor_declaration137=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration137.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:528:4: exception_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_declare_spec977);
                    exception_declaration138=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration138.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:529:4: record_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_declare_spec983);
                    record_declaration139=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration139.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:530:4: plsql_table_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_declare_spec989);
                    plsql_table_declaration140=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration140.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:531:4: varray_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_declare_spec995);
                    varray_declaration141=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration141.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:532:4: procedure_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_declaration_in_declare_spec1000);
                    procedure_declaration142=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration142.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:533:4: function_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_declaration_in_declare_spec1006);
                    function_declaration143=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration143.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:534:4: type_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_in_declare_spec1011);
                    type_declaration144=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration144.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:535:4: pragma_declaration
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec1017);
                    pragma_declaration145=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration145.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","declare_spec"," ",20);
            if ( state.backtracking>0 ) { memoize(input, 20, declare_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "declare_spec"


    public static class pragma_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:538:1: pragma_declaration : keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI ;
    public final PLSQL3_2_DParser.pragma_declaration_return pragma_declaration()  {
        debug(trace_rules) writeln("Entering rule:","pragma_declaration"," ",21);
        PLSQL3_2_DParser.pragma_declaration_return retval = new PLSQL3_2_DParser.pragma_declaration_return();
        retval.start = input.LT(1);

        int pragma_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN148=null;
        Token string_literal149=null;
        Token COMMA151=null;
        Token RPAREN153=null;
        Token LPAREN155=null;
        Token COMMA157=null;
        Token RPAREN159=null;
        Token LPAREN163=null;
        Token RPAREN165=null;
        Token LPAREN167=null;
        Token RPAREN169=null;
        Token LPAREN171=null;
        Token RPAREN173=null;
        Token LPAREN175=null;
        Token RPAREN177=null;
        Token LPAREN179=null;
        Token RPAREN181=null;
        Token SEMI182=null;
        PLSQL3_2_DParser.keyPRAGMA_return keyPRAGMA146 =null;

        PLSQL3_2_DParser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES147 =null;

        PLSQL3_2_DParser.function_name_return function_name150 =null;

        PLSQL3_2_DParser.pragma_param_return pragma_param152 =null;

        PLSQL3_2_DParser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT154 =null;

        PLSQL3_2_DParser.exception_name_return exception_name156 =null;

        PLSQL3_2_DParser.literal_return literal158 =null;

        PLSQL3_2_DParser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION160 =null;

        PLSQL3_2_DParser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE161 =null;

        PLSQL3_2_DParser.keyBUILTIN_return keyBUILTIN162 =null;

        PLSQL3_2_DParser.pragma_params_return pragma_params164 =null;

        PLSQL3_2_DParser.keyFIPSFLAG_return keyFIPSFLAG166 =null;

        PLSQL3_2_DParser.pragma_params_return pragma_params168 =null;

        PLSQL3_2_DParser.keyINTERFACE_return keyINTERFACE170 =null;

        PLSQL3_2_DParser.pragma_params_return pragma_params172 =null;

        PLSQL3_2_DParser.keyNEW_NAMES_return keyNEW_NAMES174 =null;

        PLSQL3_2_DParser.pragma_params_return pragma_params176 =null;

        PLSQL3_2_DParser.keyTIMESTAMP_return keyTIMESTAMP178 =null;

        PLSQL3_2_DParser.pragma_params_return pragma_params180 =null;


        Object LPAREN148_tree=null;
        Object string_literal149_tree=null;
        Object COMMA151_tree=null;
        Object RPAREN153_tree=null;
        Object LPAREN155_tree=null;
        Object COMMA157_tree=null;
        Object RPAREN159_tree=null;
        Object LPAREN163_tree=null;
        Object RPAREN165_tree=null;
        Object LPAREN167_tree=null;
        Object RPAREN169_tree=null;
        Object LPAREN171_tree=null;
        Object RPAREN173_tree=null;
        Object LPAREN175_tree=null;
        Object RPAREN177_tree=null;
        Object LPAREN179_tree=null;
        Object RPAREN181_tree=null;
        Object SEMI182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:539:2: ( keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:539:4: keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyPRAGMA_in_pragma_declaration1028);
            keyPRAGMA146=keyPRAGMA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRAGMA146.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:3: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )
            int alt39=9;
            alt39 = dfa39.predict(input);
            switch (alt39) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:5: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
                   {
                   pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration1035);
                   keyRESTRICT_REFERENCES147=keyRESTRICT_REFERENCES();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRESTRICT_REFERENCES147.getTree());

                   LPAREN148=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1037); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN148_tree = 
                   cast(Object)adaptor.create(LPAREN148)
                   ;
                   adaptor.addChild(root_0, LPAREN148_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:35: ( 'DEFAULT' | function_name )
                   int alt37=2;
                   int LA37_0 = input.LA(1);

                   if ( (LA37_0==90) ) {
                       alt37=1;
                   }
                   else if ( (LA37_0==DOUBLEQUOTED_STRING||LA37_0==ID||LA37_0==QUOTED_STRING) ) {
                       alt37=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 37, 0, input);

                       throw nvae;

                   }
                   switch (alt37) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:37: 'DEFAULT'
                          {
                          string_literal149=cast(Token)match(input,90,FOLLOW_90_in_pragma_declaration1041); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal149_tree = 
                          cast(Object)adaptor.create(string_literal149)
                          ;
                          adaptor.addChild(root_0, string_literal149_tree);
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:49: function_name
                          {
                          pushFollow(FOLLOW_function_name_in_pragma_declaration1045);
                          function_name150=function_name();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name150.getTree());

                          }
                          break;

                       default:
                   }


                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:65: ( COMMA pragma_param )+
                   int cnt38=0;
                   loop38:
                   do {
                       int alt38=2;
                       int LA38_0 = input.LA(1);

                       if ( (LA38_0==COMMA) ) {
                           alt38=1;
                       }


                       switch (alt38) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:67: COMMA pragma_param
                   	    {
                   	    COMMA151=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration1051); if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) {
                   	    COMMA151_tree = 
                   	    cast(Object)adaptor.create(COMMA151)
                   	    ;
                   	    adaptor.addChild(root_0, COMMA151_tree);
                   	    }

                   	    pushFollow(FOLLOW_pragma_param_in_pragma_declaration1053);
                   	    pragma_param152=pragma_param();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param152.getTree());

                   	    }
                   	    break;

                   	default :
                   	    if ( cnt38 >= 1 ) break loop38;
                   	    if (state.backtracking>0) {state.failed=true; return retval;}
                               EarlyExitException eee =
                                   new EarlyExitException(38, input);
                               throw eee;
                       }
                       cnt38++;
                   } while (true);


                   RPAREN153=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1058); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN153_tree = 
                   cast(Object)adaptor.create(RPAREN153)
                   ;
                   adaptor.addChild(root_0, RPAREN153_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:541:5: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
                   {
                   pushFollow(FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration1065);
                   keyEXCEPTION_INIT154=keyEXCEPTION_INIT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXCEPTION_INIT154.getTree());

                   LPAREN155=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1067); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN155_tree = 
                   cast(Object)adaptor.create(LPAREN155)
                   ;
                   adaptor.addChild(root_0, LPAREN155_tree);
                   }

                   pushFollow(FOLLOW_exception_name_in_pragma_declaration1069);
                   exception_name156=exception_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name156.getTree());

                   COMMA157=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration1071); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   COMMA157_tree = 
                   cast(Object)adaptor.create(COMMA157)
                   ;
                   adaptor.addChild(root_0, COMMA157_tree);
                   }

                   pushFollow(FOLLOW_literal_in_pragma_declaration1073);
                   literal158=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal158.getTree());

                   RPAREN159=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1075); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN159_tree = 
                   cast(Object)adaptor.create(RPAREN159)
                   ;
                   adaptor.addChild(root_0, RPAREN159_tree);
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:542:5: keyAUTONOMOUS_TRANSACTION
                   {
                   pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration1081);
                   keyAUTONOMOUS_TRANSACTION160=keyAUTONOMOUS_TRANSACTION();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTONOMOUS_TRANSACTION160.getTree());

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:543:5: keySERIALLY_REUSABLE
                   {
                   pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration1087);
                   keySERIALLY_REUSABLE161=keySERIALLY_REUSABLE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keySERIALLY_REUSABLE161.getTree());

                   }
                   break;
               case 5 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:544:5: keyBUILTIN LPAREN pragma_params RPAREN
                   {
                   pushFollow(FOLLOW_keyBUILTIN_in_pragma_declaration1093);
                   keyBUILTIN162=keyBUILTIN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBUILTIN162.getTree());

                   LPAREN163=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1095); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN163_tree = 
                   cast(Object)adaptor.create(LPAREN163)
                   ;
                   adaptor.addChild(root_0, LPAREN163_tree);
                   }

                   pushFollow(FOLLOW_pragma_params_in_pragma_declaration1097);
                   pragma_params164=pragma_params();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params164.getTree());

                   RPAREN165=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1099); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN165_tree = 
                   cast(Object)adaptor.create(RPAREN165)
                   ;
                   adaptor.addChild(root_0, RPAREN165_tree);
                   }

                   }
                   break;
               case 6 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:545:5: keyFIPSFLAG LPAREN pragma_params RPAREN
                   {
                   pushFollow(FOLLOW_keyFIPSFLAG_in_pragma_declaration1105);
                   keyFIPSFLAG166=keyFIPSFLAG();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIPSFLAG166.getTree());

                   LPAREN167=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1107); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN167_tree = 
                   cast(Object)adaptor.create(LPAREN167)
                   ;
                   adaptor.addChild(root_0, LPAREN167_tree);
                   }

                   pushFollow(FOLLOW_pragma_params_in_pragma_declaration1109);
                   pragma_params168=pragma_params();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params168.getTree());

                   RPAREN169=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1111); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN169_tree = 
                   cast(Object)adaptor.create(RPAREN169)
                   ;
                   adaptor.addChild(root_0, RPAREN169_tree);
                   }

                   }
                   break;
               case 7 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:546:5: keyINTERFACE LPAREN pragma_params RPAREN
                   {
                   pushFollow(FOLLOW_keyINTERFACE_in_pragma_declaration1117);
                   keyINTERFACE170=keyINTERFACE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERFACE170.getTree());

                   LPAREN171=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1119); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN171_tree = 
                   cast(Object)adaptor.create(LPAREN171)
                   ;
                   adaptor.addChild(root_0, LPAREN171_tree);
                   }

                   pushFollow(FOLLOW_pragma_params_in_pragma_declaration1121);
                   pragma_params172=pragma_params();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params172.getTree());

                   RPAREN173=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1123); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN173_tree = 
                   cast(Object)adaptor.create(RPAREN173)
                   ;
                   adaptor.addChild(root_0, RPAREN173_tree);
                   }

                   }
                   break;
               case 8 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:547:5: keyNEW_NAMES LPAREN pragma_params RPAREN
                   {
                   pushFollow(FOLLOW_keyNEW_NAMES_in_pragma_declaration1129);
                   keyNEW_NAMES174=keyNEW_NAMES();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW_NAMES174.getTree());

                   LPAREN175=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1131); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN175_tree = 
                   cast(Object)adaptor.create(LPAREN175)
                   ;
                   adaptor.addChild(root_0, LPAREN175_tree);
                   }

                   pushFollow(FOLLOW_pragma_params_in_pragma_declaration1133);
                   pragma_params176=pragma_params();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params176.getTree());

                   RPAREN177=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1135); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN177_tree = 
                   cast(Object)adaptor.create(RPAREN177)
                   ;
                   adaptor.addChild(root_0, RPAREN177_tree);
                   }

                   }
                   break;
               case 9 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:548:5: keyTIMESTAMP LPAREN pragma_params RPAREN
                   {
                   pushFollow(FOLLOW_keyTIMESTAMP_in_pragma_declaration1141);
                   keyTIMESTAMP178=keyTIMESTAMP();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP178.getTree());

                   LPAREN179=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration1143); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN179_tree = 
                   cast(Object)adaptor.create(LPAREN179)
                   ;
                   adaptor.addChild(root_0, LPAREN179_tree);
                   }

                   pushFollow(FOLLOW_pragma_params_in_pragma_declaration1145);
                   pragma_params180=pragma_params();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params180.getTree());

                   RPAREN181=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration1147); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN181_tree = 
                   cast(Object)adaptor.create(RPAREN181)
                   ;
                   adaptor.addChild(root_0, RPAREN181_tree);
                   }

                   }
                   break;

                default:
            }


            SEMI182=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_pragma_declaration1155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI182_tree = 
            cast(Object)adaptor.create(SEMI182)
            ;
            adaptor.addChild(root_0, SEMI182_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","pragma_declaration"," ",21);
            if ( state.backtracking>0 ) { memoize(input, 21, pragma_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_declaration"


    public static class pragma_params_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_params"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:553:1: pragma_params : pragma_param ( COMMA pragma_param )* ;
    public final PLSQL3_2_DParser.pragma_params_return pragma_params()  {
        debug(trace_rules) writeln("Entering rule:","pragma_params"," ",22);
        PLSQL3_2_DParser.pragma_params_return retval = new PLSQL3_2_DParser.pragma_params_return();
        retval.start = input.LT(1);

        int pragma_params_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA184=null;
        PLSQL3_2_DParser.pragma_param_return pragma_param183 =null;

        PLSQL3_2_DParser.pragma_param_return pragma_param185 =null;


        Object COMMA184_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:554:2: ( pragma_param ( COMMA pragma_param )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:554:4: pragma_param ( COMMA pragma_param )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_pragma_param_in_pragma_params1166);
            pragma_param183=pragma_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param183.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:554:17: ( COMMA pragma_param )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==COMMA) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:554:19: COMMA pragma_param
            	    {
            	    COMMA184=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_params1170); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA184_tree = 
            	    cast(Object)adaptor.create(COMMA184)
            	    ;
            	    adaptor.addChild(root_0, COMMA184_tree);
            	    }

            	    pushFollow(FOLLOW_pragma_param_in_pragma_params1172);
            	    pragma_param185=pragma_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param185.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","pragma_params"," ",22);
            if ( state.backtracking>0 ) { memoize(input, 22, pragma_params_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_params"


    public static class pragma_param_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_param"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:557:1: pragma_param : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier );
    public final PLSQL3_2_DParser.pragma_param_return pragma_param()  {
        debug(trace_rules) writeln("Entering rule:","pragma_param"," ",23);
        PLSQL3_2_DParser.pragma_param_return retval = new PLSQL3_2_DParser.pragma_param_return();
        retval.start = input.LT(1);

        int pragma_param_StartIndex = input.index();

        Object root_0 = null;

        Token set186=null;
        Token NUMBER187=null;
        Token QUOTED_STRING188=null;
        PLSQL3_2_DParser.identifier_return identifier189 =null;


        Object set186_tree=null;
        Object NUMBER187_tree=null;
        Object QUOTED_STRING188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:558:2: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier )
            int alt42=3;
            switch ( input.LA(1) ) {
            case MINUS:
            case NUMBER:
            case PLUS:
                {
                alt42=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt42=2;
                }
                break;
            case DOUBLEQUOTED_STRING:
            case ID:
                {
                alt42=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }

            switch (alt42) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:558:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:558:4: ( PLUS | MINUS )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==MINUS||LA41_0==PLUS) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                           {
                           set186=cast(Token)input.LT(1);

                           if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                               input.consume();
                               debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                               if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                               cast(Object)adaptor.create(set186)
                               );
                               state.errorRecovery=false;
                               state.failed=false;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               MismatchedSetException mse = new MismatchedSetException(null,input);
                               throw mse;
                           }


                           }
                           break;

                        default:
                    }


                    NUMBER187=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_pragma_param1197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER187_tree = 
                    cast(Object)adaptor.create(NUMBER187)
                    ;
                    adaptor.addChild(root_0, NUMBER187_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:559:4: QUOTED_STRING
                    {
                    root_0 = cast(Object)adaptor.nil();


                    QUOTED_STRING188=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pragma_param1202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING188_tree = 
                    cast(Object)adaptor.create(QUOTED_STRING188)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING188_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:560:4: identifier
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_pragma_param1207);
                    identifier189=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier189.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","pragma_param"," ",23);
            if ( state.backtracking>0 ) { memoize(input, 23, pragma_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_param"


    public static class assignment_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:563:1: assignment_statement : ( lvalue ASSIGN plsql_expression ) ;
    public final PLSQL3_2_DParser.assignment_statement_return assignment_statement()  {
        debug(trace_rules) writeln("Entering rule:","assignment_statement"," ",24);
        PLSQL3_2_DParser.assignment_statement_return retval = new PLSQL3_2_DParser.assignment_statement_return();
        retval.start = input.LT(1);

        int assignment_statement_StartIndex = input.index();

        Object root_0 = null;

        Token ASSIGN191=null;
        PLSQL3_2_DParser.lvalue_return lvalue190 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression192 =null;


        Object ASSIGN191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:564:2: ( ( lvalue ASSIGN plsql_expression ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:566:3: ( lvalue ASSIGN plsql_expression )
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:566:3: ( lvalue ASSIGN plsql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:566:4: lvalue ASSIGN plsql_expression
            {
            pushFollow(FOLLOW_lvalue_in_assignment_statement1223);
            lvalue190=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue190.getTree());

            ASSIGN191=cast(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement1225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN191_tree = 
            cast(Object)adaptor.create(ASSIGN191)
            ;
            adaptor.addChild(root_0, ASSIGN191_tree);
            }

            pushFollow(FOLLOW_plsql_expression_in_assignment_statement1227);
            plsql_expression192=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression192.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","assignment_statement"," ",24);
            if ( state.backtracking>0 ) { memoize(input, 24, assignment_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_statement"


    public static class lvalues_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalues"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:569:1: lvalues : lvalue ( COMMA lvalue )* ;
    public final PLSQL3_2_DParser.lvalues_return lvalues()  {
        debug(trace_rules) writeln("Entering rule:","lvalues"," ",25);
        PLSQL3_2_DParser.lvalues_return retval = new PLSQL3_2_DParser.lvalues_return();
        retval.start = input.LT(1);

        int lvalues_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA194=null;
        PLSQL3_2_DParser.lvalue_return lvalue193 =null;

        PLSQL3_2_DParser.lvalue_return lvalue195 =null;


        Object COMMA194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:570:2: ( lvalue ( COMMA lvalue )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:570:4: lvalue ( COMMA lvalue )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalues1239);
            lvalue193=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue193.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:570:11: ( COMMA lvalue )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:570:13: COMMA lvalue
            	    {
            	    COMMA194=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_lvalues1243); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA194_tree = 
            	    cast(Object)adaptor.create(COMMA194)
            	    ;
            	    adaptor.addChild(root_0, COMMA194_tree);
            	    }

            	    pushFollow(FOLLOW_lvalue_in_lvalues1245);
            	    lvalue195=lvalue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue195.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lvalues"," ",25);
            if ( state.backtracking>0 ) { memoize(input, 25, lvalues_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lvalues"


    public static class lvalue_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:572:1: lvalue : ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? );
    public final PLSQL3_2_DParser.lvalue_return lvalue()  {
        debug(trace_rules) writeln("Entering rule:","lvalue"," ",26);
        PLSQL3_2_DParser.lvalue_return retval = new PLSQL3_2_DParser.lvalue_return();
        retval.start = input.LT(1);

        int lvalue_StartIndex = input.index();

        Object root_0 = null;

        Token DOT198=null;
        Token LPAREN201=null;
        Token RPAREN203=null;
        Token DOT204=null;
        Token COLON206=null;
        Token COLON208=null;
        PLSQL3_2_DParser.variable_name_return variable_name196 =null;

        PLSQL3_2_DParser.record_name_return record_name197 =null;

        PLSQL3_2_DParser.field_name_return field_name199 =null;

        PLSQL3_2_DParser.plsql_table_name_return plsql_table_name200 =null;

        PLSQL3_2_DParser.subscript_return subscript202 =null;

        PLSQL3_2_DParser.field_name_return field_name205 =null;

        PLSQL3_2_DParser.host_variable_return host_variable207 =null;

        PLSQL3_2_DParser.host_variable_return host_variable209 =null;


        Object DOT198_tree=null;
        Object LPAREN201_tree=null;
        Object RPAREN203_tree=null;
        Object DOT204_tree=null;
        Object COLON206_tree=null;
        Object COLON208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:573:2: ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? )
            int alt46=4;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==DOUBLEQUOTED_STRING||LA46_0==ID) ) {
                switch ( input.LA(2) ) {
                case EOF:
                case ASSIGN:
                case COMMA:
                case SEMI:
                case 106:
                    {
                    alt46=1;
                    }
                    break;
                case DOT:
                    {
                    int LA46_4 = input.LA(3);

                    if ( (LA46_4==DOUBLEQUOTED_STRING||LA46_4==ID) ) {
                        int LA46_6 = input.LA(4);

                        if ( (LA46_6==EOF||LA46_6==ASSIGN||LA46_6==COMMA||LA46_6==SEMI||LA46_6==106) ) {
                            alt46=2;
                        }
                        else if ( (LA46_6==DOT||LA46_6==LPAREN) ) {
                            alt46=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 46, 6, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 4, input);

                        throw nvae;

                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt46=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae = 
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA46_0==COLON) ) {
                alt46=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:573:4: variable_name
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_name_in_lvalue1258);
                    variable_name196=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name196.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:574:4: record_name DOT field_name
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_record_name_in_lvalue1263);
                    record_name197=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name197.getTree());

                    DOT198=cast(Token)match(input,DOT,FOLLOW_DOT_in_lvalue1265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT198_tree = 
                    cast(Object)adaptor.create(DOT198)
                    ;
                    adaptor.addChild(root_0, DOT198_tree);
                    }

                    pushFollow(FOLLOW_field_name_in_lvalue1267);
                    field_name199=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name199.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:575:4: plsql_table_name LPAREN subscript RPAREN ( DOT field_name )*
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_name_in_lvalue1272);
                    plsql_table_name200=plsql_table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name200.getTree());

                    LPAREN201=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lvalue1274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN201_tree = 
                    cast(Object)adaptor.create(LPAREN201)
                    ;
                    adaptor.addChild(root_0, LPAREN201_tree);
                    }

                    pushFollow(FOLLOW_subscript_in_lvalue1276);
                    subscript202=subscript();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subscript202.getTree());

                    RPAREN203=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lvalue1278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN203_tree = 
                    cast(Object)adaptor.create(RPAREN203)
                    ;
                    adaptor.addChild(root_0, RPAREN203_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:575:45: ( DOT field_name )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==DOT) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:575:47: DOT field_name
                    	    {
                    	    DOT204=cast(Token)match(input,DOT,FOLLOW_DOT_in_lvalue1282); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT204_tree = 
                    	    cast(Object)adaptor.create(DOT204)
                    	    ;
                    	    adaptor.addChild(root_0, DOT204_tree);
                    	    }

                    	    pushFollow(FOLLOW_field_name_in_lvalue1284);
                    	    field_name205=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name205.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:576:4: COLON host_variable ( COLON host_variable )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    COLON206=cast(Token)match(input,COLON,FOLLOW_COLON_in_lvalue1292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON206_tree = 
                    cast(Object)adaptor.create(COLON206)
                    ;
                    adaptor.addChild(root_0, COLON206_tree);
                    }

                    pushFollow(FOLLOW_host_variable_in_lvalue1294);
                    host_variable207=host_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable207.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:576:24: ( COLON host_variable )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==COLON) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:576:26: COLON host_variable
                           {
                           COLON208=cast(Token)match(input,COLON,FOLLOW_COLON_in_lvalue1298); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           COLON208_tree = 
                           cast(Object)adaptor.create(COLON208)
                           ;
                           adaptor.addChild(root_0, COLON208_tree);
                           }

                           pushFollow(FOLLOW_host_variable_in_lvalue1300);
                           host_variable209=host_variable();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable209.getTree());

                           }
                           break;

                        default:
                    }


                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lvalue"," ",26);
            if ( state.backtracking>0 ) { memoize(input, 26, lvalue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class field_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:579:1: field_name : identifier ;
    public final PLSQL3_2_DParser.field_name_return field_name()  {
        debug(trace_rules) writeln("Entering rule:","field_name"," ",27);
        PLSQL3_2_DParser.field_name_return retval = new PLSQL3_2_DParser.field_name_return();
        retval.start = input.LT(1);

        int field_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier210 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:580:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:580:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_field_name1314);
            identifier210=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier210.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","field_name"," ",27);
            if ( state.backtracking>0 ) { memoize(input, 27, field_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class subscript_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscript"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:583:1: subscript : plsql_expression ;
    public final PLSQL3_2_DParser.subscript_return subscript()  {
        debug(trace_rules) writeln("Entering rule:","subscript"," ",28);
        PLSQL3_2_DParser.subscript_return retval = new PLSQL3_2_DParser.subscript_return();
        retval.start = input.LT(1);

        int subscript_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression211 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:584:2: ( plsql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:584:4: plsql_expression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_subscript1326);
            plsql_expression211=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression211.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","subscript"," ",28);
            if ( state.backtracking>0 ) { memoize(input, 28, subscript_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subscript"


    public static class host_variable_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "host_variable"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:587:1: host_variable : identifier ;
    public final PLSQL3_2_DParser.host_variable_return host_variable()  {
        debug(trace_rules) writeln("Entering rule:","host_variable"," ",29);
        PLSQL3_2_DParser.host_variable_return retval = new PLSQL3_2_DParser.host_variable_return();
        retval.start = input.LT(1);

        int host_variable_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier212 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:588:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:588:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_host_variable1339);
            identifier212=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier212.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","host_variable"," ",29);
            if ( state.backtracking>0 ) { memoize(input, 29, host_variable_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "host_variable"


    public static class goto_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:591:1: goto_statement : 'GOTO' label_name ;
    public final PLSQL3_2_DParser.goto_statement_return goto_statement()  {
        debug(trace_rules) writeln("Entering rule:","goto_statement"," ",30);
        PLSQL3_2_DParser.goto_statement_return retval = new PLSQL3_2_DParser.goto_statement_return();
        retval.start = input.LT(1);

        int goto_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal213=null;
        PLSQL3_2_DParser.label_name_return label_name214 =null;


        Object string_literal213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:592:2: ( 'GOTO' label_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:592:4: 'GOTO' label_name
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal213=cast(Token)match(input,108,FOLLOW_108_in_goto_statement1351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal213_tree = 
            cast(Object)adaptor.create(string_literal213)
            ;
            adaptor.addChild(root_0, string_literal213_tree);
            }

            pushFollow(FOLLOW_label_name_in_goto_statement1353);
            label_name214=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name214.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","goto_statement"," ",30);
            if ( state.backtracking>0 ) { memoize(input, 30, goto_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class label_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "label_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:595:1: label_name : identifier ;
    public final PLSQL3_2_DParser.label_name_return label_name()  {
        debug(trace_rules) writeln("Entering rule:","label_name"," ",31);
        PLSQL3_2_DParser.label_name_return retval = new PLSQL3_2_DParser.label_name_return();
        retval.start = input.LT(1);

        int label_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier215 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:596:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:596:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_label_name1365);
            identifier215=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier215.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","label_name"," ",31);
            if ( state.backtracking>0 ) { memoize(input, 31, label_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "label_name"


    public static class exit_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exit_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:599:1: exit_statement : keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? ;
    public final PLSQL3_2_DParser.exit_statement_return exit_statement()  {
        debug(trace_rules) writeln("Entering rule:","exit_statement"," ",32);
        PLSQL3_2_DParser.exit_statement_return retval = new PLSQL3_2_DParser.exit_statement_return();
        retval.start = input.LT(1);

        int exit_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal218=null;
        PLSQL3_2_DParser.keyEXIT_return keyEXIT216 =null;

        PLSQL3_2_DParser.label_name_return label_name217 =null;

        PLSQL3_2_DParser.plsql_condition_return plsql_condition219 =null;


        Object string_literal218_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:2: ( keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:4: keyEXIT ( label_name )? ( 'WHEN' plsql_condition )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyEXIT_in_exit_statement1377);
            keyEXIT216=keyEXIT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXIT216.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:12: ( label_name )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==DOUBLEQUOTED_STRING||LA47_0==ID) ) {
                alt47=1;
            }
            switch (alt47) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:14: label_name
                   {
                   pushFollow(FOLLOW_label_name_in_exit_statement1381);
                   label_name217=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name217.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:28: ( 'WHEN' plsql_condition )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==182) ) {
                alt48=1;
            }
            switch (alt48) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:600:30: 'WHEN' plsql_condition
                   {
                   string_literal218=cast(Token)match(input,182,FOLLOW_182_in_exit_statement1388); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal218_tree = 
                   cast(Object)adaptor.create(string_literal218)
                   ;
                   adaptor.addChild(root_0, string_literal218_tree);
                   }

                   pushFollow(FOLLOW_plsql_condition_in_exit_statement1390);
                   plsql_condition219=plsql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition219.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exit_statement"," ",32);
            if ( state.backtracking>0 ) { memoize(input, 32, exit_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exit_statement"


    public static class datatype_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datatype"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:603:1: datatype : ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? );
    public final PLSQL3_2_DParser.datatype_return datatype()  {
        debug(trace_rules) writeln("Entering rule:","datatype"," ",33);
        PLSQL3_2_DParser.datatype_return retval = new PLSQL3_2_DParser.datatype_return();
        retval.start = input.LT(1);

        int datatype_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal220=null;
        Token string_literal221=null;
        Token string_literal222=null;
        Token string_literal223=null;
        Token string_literal224=null;
        Token set225=null;
        Token LPAREN226=null;
        Token NUMBER227=null;
        Token COMMA228=null;
        Token NUMBER229=null;
        Token RPAREN230=null;
        Token string_literal231=null;
        Token string_literal232=null;
        Token LPAREN233=null;
        Token NUMBER234=null;
        Token RPAREN235=null;
        Token string_literal236=null;
        Token LPAREN237=null;
        Token NUMBER238=null;
        Token RPAREN239=null;
        Token string_literal240=null;
        Token string_literal241=null;
        Token LPAREN244=null;
        Token NUMBER245=null;
        Token RPAREN246=null;
        Token string_literal247=null;
        Token LPAREN249=null;
        Token NUMBER250=null;
        Token RPAREN251=null;
        Token LPAREN254=null;
        Token NUMBER255=null;
        Token RPAREN256=null;
        Token string_literal257=null;
        Token LPAREN261=null;
        Token NUMBER262=null;
        Token RPAREN263=null;
        Token string_literal264=null;
        Token string_literal268=null;
        Token string_literal269=null;
        Token string_literal270=null;
        Token string_literal271=null;
        Token LPAREN272=null;
        Token NUMBER273=null;
        Token RPAREN274=null;
        Token string_literal275=null;
        Token string_literal276=null;
        Token string_literal278=null;
        Token LPAREN280=null;
        Token NUMBER281=null;
        Token string_literal283=null;
        Token RPAREN284=null;
        Token string_literal285=null;
        Token string_literal286=null;
        Token CHARSET_ATTR289=null;
        Token string_literal290=null;
        Token LPAREN291=null;
        Token NUMBER292=null;
        Token string_literal294=null;
        Token RPAREN295=null;
        Token string_literal296=null;
        Token string_literal297=null;
        Token CHARSET_ATTR300=null;
        Token string_literal301=null;
        Token LPAREN302=null;
        Token NUMBER303=null;
        Token string_literal305=null;
        Token RPAREN306=null;
        Token string_literal307=null;
        Token string_literal308=null;
        Token CHARSET_ATTR311=null;
        Token string_literal312=null;
        Token LPAREN314=null;
        Token NUMBER315=null;
        Token RPAREN316=null;
        Token string_literal317=null;
        Token LPAREN319=null;
        Token NUMBER320=null;
        Token RPAREN321=null;
        Token string_literal322=null;
        Token LPAREN323=null;
        Token NUMBER324=null;
        Token RPAREN325=null;
        Token string_literal326=null;
        Token LPAREN327=null;
        Token NUMBER328=null;
        Token RPAREN329=null;
        Token string_literal330=null;
        Token set331=null;
        Token LPAREN333=null;
        Token NUMBER334=null;
        Token RPAREN335=null;
        Token string_literal336=null;
        Token string_literal337=null;
        Token string_literal338=null;
        Token string_literal339=null;
        Token string_literal340=null;
        Token string_literal341=null;
        Token CHARSET_ATTR344=null;
        Token string_literal345=null;
        Token string_literal346=null;
        Token string_literal347=null;
        Token string_literal348=null;
        Token LPAREN349=null;
        Token NUMBER350=null;
        Token RPAREN351=null;
        PLSQL3_2_DParser.keyINTERVAL_return keyINTERVAL242 =null;

        PLSQL3_2_DParser.keyDAY_return keyDAY243 =null;

        PLSQL3_2_DParser.keySECOND_return keySECOND248 =null;

        PLSQL3_2_DParser.keyINTERVAL_return keyINTERVAL252 =null;

        PLSQL3_2_DParser.keyYEAR_return keyYEAR253 =null;

        PLSQL3_2_DParser.keyMONTH_return keyMONTH258 =null;

        PLSQL3_2_DParser.keyTIME_return keyTIME259 =null;

        PLSQL3_2_DParser.keyTIMESTAMP_return keyTIMESTAMP260 =null;

        PLSQL3_2_DParser.keyLOCAL_return keyLOCAL265 =null;

        PLSQL3_2_DParser.keyTIME_return keyTIME266 =null;

        PLSQL3_2_DParser.keyZONE_return keyZONE267 =null;

        PLSQL3_2_DParser.keyPRECISION_return keyPRECISION277 =null;

        PLSQL3_2_DParser.keyVARYING_return keyVARYING279 =null;

        PLSQL3_2_DParser.keyBYTE_return keyBYTE282 =null;

        PLSQL3_2_DParser.identifier_return identifier287 =null;

        PLSQL3_2_DParser.column_spec_return column_spec288 =null;

        PLSQL3_2_DParser.keyBYTE_return keyBYTE293 =null;

        PLSQL3_2_DParser.identifier_return identifier298 =null;

        PLSQL3_2_DParser.column_spec_return column_spec299 =null;

        PLSQL3_2_DParser.keyBYTE_return keyBYTE304 =null;

        PLSQL3_2_DParser.identifier_return identifier309 =null;

        PLSQL3_2_DParser.column_spec_return column_spec310 =null;

        PLSQL3_2_DParser.keyVARYING_return keyVARYING313 =null;

        PLSQL3_2_DParser.keyVARYING_return keyVARYING318 =null;

        PLSQL3_2_DParser.keyVARYING_return keyVARYING332 =null;

        PLSQL3_2_DParser.identifier_return identifier342 =null;

        PLSQL3_2_DParser.column_spec_return column_spec343 =null;


        Object string_literal220_tree=null;
        Object string_literal221_tree=null;
        Object string_literal222_tree=null;
        Object string_literal223_tree=null;
        Object string_literal224_tree=null;
        Object set225_tree=null;
        Object LPAREN226_tree=null;
        Object NUMBER227_tree=null;
        Object COMMA228_tree=null;
        Object NUMBER229_tree=null;
        Object RPAREN230_tree=null;
        Object string_literal231_tree=null;
        Object string_literal232_tree=null;
        Object LPAREN233_tree=null;
        Object NUMBER234_tree=null;
        Object RPAREN235_tree=null;
        Object string_literal236_tree=null;
        Object LPAREN237_tree=null;
        Object NUMBER238_tree=null;
        Object RPAREN239_tree=null;
        Object string_literal240_tree=null;
        Object string_literal241_tree=null;
        Object LPAREN244_tree=null;
        Object NUMBER245_tree=null;
        Object RPAREN246_tree=null;
        Object string_literal247_tree=null;
        Object LPAREN249_tree=null;
        Object NUMBER250_tree=null;
        Object RPAREN251_tree=null;
        Object LPAREN254_tree=null;
        Object NUMBER255_tree=null;
        Object RPAREN256_tree=null;
        Object string_literal257_tree=null;
        Object LPAREN261_tree=null;
        Object NUMBER262_tree=null;
        Object RPAREN263_tree=null;
        Object string_literal264_tree=null;
        Object string_literal268_tree=null;
        Object string_literal269_tree=null;
        Object string_literal270_tree=null;
        Object string_literal271_tree=null;
        Object LPAREN272_tree=null;
        Object NUMBER273_tree=null;
        Object RPAREN274_tree=null;
        Object string_literal275_tree=null;
        Object string_literal276_tree=null;
        Object string_literal278_tree=null;
        Object LPAREN280_tree=null;
        Object NUMBER281_tree=null;
        Object string_literal283_tree=null;
        Object RPAREN284_tree=null;
        Object string_literal285_tree=null;
        Object string_literal286_tree=null;
        Object CHARSET_ATTR289_tree=null;
        Object string_literal290_tree=null;
        Object LPAREN291_tree=null;
        Object NUMBER292_tree=null;
        Object string_literal294_tree=null;
        Object RPAREN295_tree=null;
        Object string_literal296_tree=null;
        Object string_literal297_tree=null;
        Object CHARSET_ATTR300_tree=null;
        Object string_literal301_tree=null;
        Object LPAREN302_tree=null;
        Object NUMBER303_tree=null;
        Object string_literal305_tree=null;
        Object RPAREN306_tree=null;
        Object string_literal307_tree=null;
        Object string_literal308_tree=null;
        Object CHARSET_ATTR311_tree=null;
        Object string_literal312_tree=null;
        Object LPAREN314_tree=null;
        Object NUMBER315_tree=null;
        Object RPAREN316_tree=null;
        Object string_literal317_tree=null;
        Object LPAREN319_tree=null;
        Object NUMBER320_tree=null;
        Object RPAREN321_tree=null;
        Object string_literal322_tree=null;
        Object LPAREN323_tree=null;
        Object NUMBER324_tree=null;
        Object RPAREN325_tree=null;
        Object string_literal326_tree=null;
        Object LPAREN327_tree=null;
        Object NUMBER328_tree=null;
        Object RPAREN329_tree=null;
        Object string_literal330_tree=null;
        Object set331_tree=null;
        Object LPAREN333_tree=null;
        Object NUMBER334_tree=null;
        Object RPAREN335_tree=null;
        Object string_literal336_tree=null;
        Object string_literal337_tree=null;
        Object string_literal338_tree=null;
        Object string_literal339_tree=null;
        Object string_literal340_tree=null;
        Object string_literal341_tree=null;
        Object CHARSET_ATTR344_tree=null;
        Object string_literal345_tree=null;
        Object string_literal346_tree=null;
        Object string_literal347_tree=null;
        Object string_literal348_tree=null;
        Object LPAREN349_tree=null;
        Object NUMBER350_tree=null;
        Object RPAREN351_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:604:2: ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? )
            int alt86=35;
            switch ( input.LA(1) ) {
            case 72:
                {
                alt86=1;
                }
                break;
            case 71:
                {
                alt86=2;
                }
                break;
            case 70:
                {
                alt86=3;
                }
                break;
            case 129:
                {
                alt86=4;
                }
                break;
            case 149:
                {
                alt86=5;
                }
                break;
            case 86:
            case 87:
            case 138:
            case 139:
                {
                alt86=6;
                }
                break;
            case 123:
                {
                alt86=7;
                }
                break;
            case 155:
                {
                alt86=8;
                }
                break;
            case 74:
                {
                alt86=9;
                }
                break;
            case 85:
                {
                alt86=10;
                }
                break;
            case ID:
                {
                int LA86_11 = input.LA(2);

                if ( (LA86_11==ID) ) {
                    switch ( input.LA(3) ) {
                    case LPAREN:
                        {
                        int LA86_36 = input.LA(4);

                        if ( (LA86_36==NUMBER) ) {
                            int LA86_38 = input.LA(5);

                            if ( (LA86_38==RPAREN) ) {
                                int LA86_40 = input.LA(6);

                                if ( (LA86_40==173) ) {
                                    int LA86_37 = input.LA(7);

                                    if ( (LA86_37==ID) ) {
                                        int LA86_39 = input.LA(8);

                                        if ( (((synpred133_PLSQL3_2_D()&&synpred133_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "INTERVAL"))) ) {
                                            alt86=11;
                                        }
                                        else if ( (((synpred135_PLSQL3_2_D()&&synpred135_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "INTERVAL"))) ) {
                                            alt86=12;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 86, 39, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 86, 37, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 86, 40, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 86, 38, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 36, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 173:
                        {
                        int LA86_37 = input.LA(4);

                        if ( (LA86_37==ID) ) {
                            int LA86_39 = input.LA(5);

                            if ( (((synpred133_PLSQL3_2_D()&&synpred133_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "INTERVAL"))) ) {
                                alt86=11;
                            }
                            else if ( (((synpred135_PLSQL3_2_D()&&synpred135_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "INTERVAL"))) ) {
                                alt86=12;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 86, 39, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 37, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOT:
                    case DOUBLEQUOTED_STRING:
                    case ID:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 77:
                    case 78:
                    case 79:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 94:
                    case 98:
                    case 103:
                    case 116:
                    case 117:
                    case 123:
                    case 126:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 148:
                    case 149:
                    case 155:
                    case 156:
                    case 162:
                    case 168:
                    case 178:
                    case 180:
                    case 181:
                        {
                        alt86=13;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 86, 34, input);

                        throw nvae;

                    }

                }
                else if ( (LA86_11==EOF||LA86_11==ASSIGN||LA86_11==COMMA||LA86_11==DOUBLEQUOTED_STRING||LA86_11==LPAREN||(LA86_11 >=52  && LA86_11<=53)||LA86_11==64||LA86_11==67||LA86_11==84||LA86_11==90||LA86_11==97||LA86_11==107||LA86_11==114||LA86_11==120||LA86_11==134||LA86_11==150||LA86_11==152||LA86_11==185) ) {
                    alt86=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 11, input);

                    throw nvae;

                }
                }
                break;
            case 117:
                {
                alt86=14;
                }
                break;
            case 116:
                {
                alt86=15;
                }
                break;
            case 168:
                {
                alt86=16;
                }
                break;
            case 103:
                {
                alt86=17;
                }
                break;
            case 156:
                {
                alt86=18;
                }
                break;
            case 94:
                {
                alt86=19;
                }
                break;
            case 77:
                {
                alt86=20;
                }
                break;
            case 180:
                {
                alt86=21;
                }
                break;
            case 181:
                {
                alt86=22;
                }
                break;
            case 78:
                {
                alt86=23;
                }
                break;
            case 130:
                {
                alt86=24;
                }
                break;
            case 140:
                {
                alt86=25;
                }
                break;
            case 141:
                {
                alt86=26;
                }
                break;
            case 128:
                {
                alt86=27;
                }
                break;
            case 126:
                {
                alt86=28;
                }
                break;
            case 148:
                {
                alt86=29;
                }
                break;
            case 73:
                {
                alt86=30;
                }
                break;
            case 79:
                {
                alt86=31;
                }
                break;
            case 131:
                {
                alt86=32;
                }
                break;
            case 69:
                {
                alt86=33;
                }
                break;
            case 162:
                {
                alt86=34;
                }
                break;
            case 178:
                {
                alt86=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }

            switch (alt86) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:604:4: 'BINARY_INTEGER'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal220=cast(Token)match(input,72,FOLLOW_72_in_datatype1405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal220_tree = 
                    cast(Object)adaptor.create(string_literal220)
                    ;
                    adaptor.addChild(root_0, string_literal220_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:605:4: 'BINARY_FLOAT'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal221=cast(Token)match(input,71,FOLLOW_71_in_datatype1411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal221_tree = 
                    cast(Object)adaptor.create(string_literal221)
                    ;
                    adaptor.addChild(root_0, string_literal221_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:606:4: 'BINARY_DOUBLE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal222=cast(Token)match(input,70,FOLLOW_70_in_datatype1416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal222_tree = 
                    cast(Object)adaptor.create(string_literal222)
                    ;
                    adaptor.addChild(root_0, string_literal222_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:607:4: 'NATURAL'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal223=cast(Token)match(input,129,FOLLOW_129_in_datatype1421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal223_tree = 
                    cast(Object)adaptor.create(string_literal223)
                    ;
                    adaptor.addChild(root_0, string_literal223_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:608:4: 'POSITIVE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal224=cast(Token)match(input,149,FOLLOW_149_in_datatype1427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal224_tree = 
                    cast(Object)adaptor.create(string_literal224)
                    ;
                    adaptor.addChild(root_0, string_literal224_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:609:4: ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    set225=cast(Token)input.LT(1);

                    if ( (input.LA(1) >=86 && input.LA(1)<=87)||(input.LA(1) >=138 && input.LA(1)<=139) ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set225)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:609:49: ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==LPAREN) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:609:51: LPAREN NUMBER ( COMMA NUMBER )? RPAREN
                           {
                           LPAREN226=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1453); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN226_tree = 
                           cast(Object)adaptor.create(LPAREN226)
                           ;
                           adaptor.addChild(root_0, LPAREN226_tree);
                           }

                           NUMBER227=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1455); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER227_tree = 
                           cast(Object)adaptor.create(NUMBER227)
                           ;
                           adaptor.addChild(root_0, NUMBER227_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:609:65: ( COMMA NUMBER )?
                           int alt49=2;
                           int LA49_0 = input.LA(1);

                           if ( (LA49_0==COMMA) ) {
                               alt49=1;
                           }
                           switch (alt49) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:609:67: COMMA NUMBER
                                  {
                                  COMMA228=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_datatype1459); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  COMMA228_tree = 
                                  cast(Object)adaptor.create(COMMA228)
                                  ;
                                  adaptor.addChild(root_0, COMMA228_tree);
                                  }

                                  NUMBER229=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1461); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  NUMBER229_tree = 
                                  cast(Object)adaptor.create(NUMBER229)
                                  ;
                                  adaptor.addChild(root_0, NUMBER229_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           RPAREN230=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1466); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN230_tree = 
                           cast(Object)adaptor.create(RPAREN230)
                           ;
                           adaptor.addChild(root_0, RPAREN230_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:610:4: 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal231=cast(Token)match(input,123,FOLLOW_123_in_datatype1474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal231_tree = 
                    cast(Object)adaptor.create(string_literal231)
                    ;
                    adaptor.addChild(root_0, string_literal231_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:610:11: ( 'RAW' )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==155) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:610:13: 'RAW'
                           {
                           string_literal232=cast(Token)match(input,155,FOLLOW_155_in_datatype1478); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal232_tree = 
                           cast(Object)adaptor.create(string_literal232)
                           ;
                           adaptor.addChild(root_0, string_literal232_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:610:21: ( LPAREN NUMBER RPAREN )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==LPAREN) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:610:23: LPAREN NUMBER RPAREN
                           {
                           LPAREN233=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1484); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN233_tree = 
                           cast(Object)adaptor.create(LPAREN233)
                           ;
                           adaptor.addChild(root_0, LPAREN233_tree);
                           }

                           NUMBER234=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1486); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER234_tree = 
                           cast(Object)adaptor.create(NUMBER234)
                           ;
                           adaptor.addChild(root_0, NUMBER234_tree);
                           }

                           RPAREN235=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1488); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN235_tree = 
                           cast(Object)adaptor.create(RPAREN235)
                           ;
                           adaptor.addChild(root_0, RPAREN235_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:611:4: 'RAW' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal236=cast(Token)match(input,155,FOLLOW_155_in_datatype1496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal236_tree = 
                    cast(Object)adaptor.create(string_literal236)
                    ;
                    adaptor.addChild(root_0, string_literal236_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:611:10: ( LPAREN NUMBER RPAREN )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==LPAREN) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:611:12: LPAREN NUMBER RPAREN
                           {
                           LPAREN237=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1500); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN237_tree = 
                           cast(Object)adaptor.create(LPAREN237)
                           ;
                           adaptor.addChild(root_0, LPAREN237_tree);
                           }

                           NUMBER238=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1502); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER238_tree = 
                           cast(Object)adaptor.create(NUMBER238)
                           ;
                           adaptor.addChild(root_0, NUMBER238_tree);
                           }

                           RPAREN239=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1504); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN239_tree = 
                           cast(Object)adaptor.create(RPAREN239)
                           ;
                           adaptor.addChild(root_0, RPAREN239_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:612:4: 'BOOLEAN'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal240=cast(Token)match(input,74,FOLLOW_74_in_datatype1512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal240_tree = 
                    cast(Object)adaptor.create(string_literal240)
                    ;
                    adaptor.addChild(root_0, string_literal240_tree);
                    }

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:613:4: 'DATE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal241=cast(Token)match(input,85,FOLLOW_85_in_datatype1517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal241_tree = 
                    cast(Object)adaptor.create(string_literal241)
                    ;
                    adaptor.addChild(root_0, string_literal241_tree);
                    }

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:4: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_keyINTERVAL_in_datatype1522);
                    keyINTERVAL242=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL242.getTree());

                    pushFollow(FOLLOW_keyDAY_in_datatype1524);
                    keyDAY243=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY243.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:23: ( LPAREN NUMBER RPAREN )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==LPAREN) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:25: LPAREN NUMBER RPAREN
                           {
                           LPAREN244=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1528); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN244_tree = 
                           cast(Object)adaptor.create(LPAREN244)
                           ;
                           adaptor.addChild(root_0, LPAREN244_tree);
                           }

                           NUMBER245=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1530); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER245_tree = 
                           cast(Object)adaptor.create(NUMBER245)
                           ;
                           adaptor.addChild(root_0, NUMBER245_tree);
                           }

                           RPAREN246=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1532); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN246_tree = 
                           cast(Object)adaptor.create(RPAREN246)
                           ;
                           adaptor.addChild(root_0, RPAREN246_tree);
                           }

                           }
                           break;

                        default:
                    }


                    string_literal247=cast(Token)match(input,173,FOLLOW_173_in_datatype1537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal247_tree = 
                    cast(Object)adaptor.create(string_literal247)
                    ;
                    adaptor.addChild(root_0, string_literal247_tree);
                    }

                    pushFollow(FOLLOW_keySECOND_in_datatype1539);
                    keySECOND248=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND248.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:64: ( LPAREN NUMBER RPAREN )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==LPAREN) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:66: LPAREN NUMBER RPAREN
                           {
                           LPAREN249=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1543); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN249_tree = 
                           cast(Object)adaptor.create(LPAREN249)
                           ;
                           adaptor.addChild(root_0, LPAREN249_tree);
                           }

                           NUMBER250=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1545); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER250_tree = 
                           cast(Object)adaptor.create(NUMBER250)
                           ;
                           adaptor.addChild(root_0, NUMBER250_tree);
                           }

                           RPAREN251=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1547); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN251_tree = 
                           cast(Object)adaptor.create(RPAREN251)
                           ;
                           adaptor.addChild(root_0, RPAREN251_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:4: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_keyINTERVAL_in_datatype1555);
                    keyINTERVAL252=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL252.getTree());

                    pushFollow(FOLLOW_keyYEAR_in_datatype1557);
                    keyYEAR253=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR253.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:24: ( LPAREN NUMBER RPAREN )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==LPAREN) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:26: LPAREN NUMBER RPAREN
                           {
                           LPAREN254=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1561); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN254_tree = 
                           cast(Object)adaptor.create(LPAREN254)
                           ;
                           adaptor.addChild(root_0, LPAREN254_tree);
                           }

                           NUMBER255=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1563); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER255_tree = 
                           cast(Object)adaptor.create(NUMBER255)
                           ;
                           adaptor.addChild(root_0, NUMBER255_tree);
                           }

                           RPAREN256=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1565); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN256_tree = 
                           cast(Object)adaptor.create(RPAREN256)
                           ;
                           adaptor.addChild(root_0, RPAREN256_tree);
                           }

                           }
                           break;

                        default:
                    }


                    string_literal257=cast(Token)match(input,173,FOLLOW_173_in_datatype1570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal257_tree = 
                    cast(Object)adaptor.create(string_literal257)
                    ;
                    adaptor.addChild(root_0, string_literal257_tree);
                    }

                    pushFollow(FOLLOW_keyMONTH_in_datatype1572);
                    keyMONTH258=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH258.getTree());

                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:4: ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:4: ( keyTIME | keyTIMESTAMP )
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==ID) ) {
                        int LA57_1 = input.LA(2);

                        if ( (((synpred136_PLSQL3_2_D()&&synpred136_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "TIME"))) ) {
                            alt57=1;
                        }
                        else if ( ((toUpper(input.LT(1).getText)== "TIMESTAMP")) ) {
                            alt57=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 57, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        throw nvae;

                    }
                    switch (alt57) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:6: keyTIME
                           {
                           pushFollow(FOLLOW_keyTIME_in_datatype1579);
                           keyTIME259=keyTIME();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME259.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:16: keyTIMESTAMP
                           {
                           pushFollow(FOLLOW_keyTIMESTAMP_in_datatype1583);
                           keyTIMESTAMP260=keyTIMESTAMP();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP260.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:31: ( LPAREN NUMBER RPAREN )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==LPAREN) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:33: LPAREN NUMBER RPAREN
                           {
                           LPAREN261=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1589); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN261_tree = 
                           cast(Object)adaptor.create(LPAREN261)
                           ;
                           adaptor.addChild(root_0, LPAREN261_tree);
                           }

                           NUMBER262=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1591); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER262_tree = 
                           cast(Object)adaptor.create(NUMBER262)
                           ;
                           adaptor.addChild(root_0, NUMBER262_tree);
                           }

                           RPAREN263=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1593); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN263_tree = 
                           cast(Object)adaptor.create(RPAREN263)
                           ;
                           adaptor.addChild(root_0, RPAREN263_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:57: ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==185) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:59: 'WITH' ( keyLOCAL )? keyTIME keyZONE
                           {
                           string_literal264=cast(Token)match(input,185,FOLLOW_185_in_datatype1600); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal264_tree = 
                           cast(Object)adaptor.create(string_literal264)
                           ;
                           adaptor.addChild(root_0, string_literal264_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:66: ( keyLOCAL )?
                           int alt59=2;
                           int LA59_0 = input.LA(1);

                           if ( (LA59_0==ID) ) {
                               int LA59_1 = input.LA(2);

                               if ( (LA59_1==ID) ) {
                                   int LA59_2 = input.LA(3);

                                   if ( (LA59_2==ID) ) {
                                       switch ( input.LA(4) ) {
                                           case EOF:
                                           case ASSIGN:
                                           case COMMA:
                                           case RPAREN:
                                           case SEMI:
                                           case 64:
                                           case 67:
                                           case 84:
                                           case 90:
                                           case 97:
                                           case 107:
                                           case 114:
                                           case 120:
                                           case 134:
                                           case 150:
                                           case 152:
                                               {
                                               alt59=1;
                                               }
                                               break;
                                           case ID:
                                               {
                                               switch ( input.LA(5) ) {
                                                   case DOUBLEQUOTED_STRING:
                                                   case MINUS:
                                                   case NUMBER:
                                                   case PLUS:
                                                   case QUOTED_STRING:
                                                   case 69:
                                                   case 70:
                                                   case 71:
                                                   case 72:
                                                   case 73:
                                                   case 74:
                                                   case 77:
                                                   case 78:
                                                   case 79:
                                                   case 83:
                                                   case 85:
                                                   case 86:
                                                   case 87:
                                                   case 94:
                                                   case 98:
                                                   case 103:
                                                   case 116:
                                                   case 117:
                                                   case 123:
                                                   case 126:
                                                   case 128:
                                                   case 129:
                                                   case 130:
                                                   case 131:
                                                   case 138:
                                                   case 139:
                                                   case 140:
                                                   case 141:
                                                   case 148:
                                                   case 149:
                                                   case 155:
                                                   case 156:
                                                   case 162:
                                                   case 168:
                                                   case 178:
                                                   case 180:
                                                   case 181:
                                                       {
                                                       alt59=1;
                                                       }
                                                       break;
                                                   case ID:
                                                       {
                                                       int LA59_8 = input.LA(6);

                                                       if ( (LA59_8==ASSIGN||LA59_8==DOT||LA59_8==ID||LA59_8==ROWTYPE_ATTR||LA59_8==SEMI||LA59_8==TYPE_ATTR||LA59_8==90||LA59_8==120||LA59_8==134||LA59_8==158||LA59_8==185) ) {
                                                           alt59=1;
                                                       }
                                                       else if ( (LA59_8==LPAREN) ) {
                                                           int LA59_10 = input.LA(7);

                                                           if ( (LA59_10==NUMBER) ) {
                                                               int LA59_12 = input.LA(8);

                                                               if ( (LA59_12==RPAREN) ) {
                                                                   int LA59_13 = input.LA(9);

                                                                   if ( (LA59_13==ASSIGN||LA59_13==SEMI||LA59_13==90||LA59_13==120||LA59_13==134||LA59_13==185) ) {
                                                                       alt59=1;
                                                                   }
                                                               }
                                                           }
                                                           else if ( (LA59_10==DOUBLEQUOTED_STRING||LA59_10==ID) ) {
                                                               alt59=1;
                                                           }
                                                       }
                                                       }
                                                       break;
                                                   case DOT:
                                                       {
                                                       int LA59_9 = input.LA(6);

                                                       if ( (LA59_9==DOUBLEQUOTED_STRING||LA59_9==ID) ) {
                                                           int LA59_11 = input.LA(7);

                                                           if ( (LA59_11==98) ) {
                                                               alt59=1;
                                                           }
                                                       }
                                                       }
                                                       break;
                                                   default:
                                               }

                                               }
                                               break;
                                           case DOUBLEQUOTED_STRING:
                                               {
                                               int LA59_7 = input.LA(5);

                                               if ( (LA59_7==DOUBLEQUOTED_STRING||LA59_7==ID||(LA59_7 >=69  && LA59_7<=74)||(LA59_7 >=77  && LA59_7<=79)||LA59_7==83||(LA59_7 >=85  && LA59_7<=87)||LA59_7==94||LA59_7==98||LA59_7==103||(LA59_7 >=116  && LA59_7<=117)||LA59_7==123||LA59_7==126||(LA59_7 >=128  && LA59_7<=131)||(LA59_7 >=138  && LA59_7<=141)||(LA59_7 >=148  && LA59_7<=149)||(LA59_7 >=155  && LA59_7<=156)||LA59_7==162||LA59_7==168||LA59_7==178||(LA59_7 >=180  && LA59_7<=181)) ) {
                                                   alt59=1;
                                               }
                                               else if ( (LA59_7==DOT) ) {
                                                   int LA59_9 = input.LA(6);

                                                   if ( (LA59_9==DOUBLEQUOTED_STRING||LA59_9==ID) ) {
                                                       int LA59_11 = input.LA(7);

                                                       if ( (LA59_11==98) ) {
                                                           alt59=1;
                                                       }
                                                   }
                                               }
                                               }
                                               break;
                                           default:
                                       }

                                   }
                               }
                           }
                           switch (alt59) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:68: keyLOCAL
                                  {
                                  pushFollow(FOLLOW_keyLOCAL_in_datatype1604);
                                  keyLOCAL265=keyLOCAL();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL265.getTree());

                                  }
                                  break;

                               default:
                           }


                           pushFollow(FOLLOW_keyTIME_in_datatype1609);
                           keyTIME266=keyTIME();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME266.getTree());

                           pushFollow(FOLLOW_keyZONE_in_datatype1611);
                           keyZONE267=keyZONE();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE267.getTree());

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:617:4: 'INTEGER'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal268=cast(Token)match(input,117,FOLLOW_117_in_datatype1618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal268_tree = 
                    cast(Object)adaptor.create(string_literal268)
                    ;
                    adaptor.addChild(root_0, string_literal268_tree);
                    }

                    }
                    break;
                case 15 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:618:4: 'INT'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal269=cast(Token)match(input,116,FOLLOW_116_in_datatype1623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal269_tree = 
                    cast(Object)adaptor.create(string_literal269)
                    ;
                    adaptor.addChild(root_0, string_literal269_tree);
                    }

                    }
                    break;
                case 16 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:619:4: 'SMALLINT'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal270=cast(Token)match(input,168,FOLLOW_168_in_datatype1628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal270_tree = 
                    cast(Object)adaptor.create(string_literal270)
                    ;
                    adaptor.addChild(root_0, string_literal270_tree);
                    }

                    }
                    break;
                case 17 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:620:4: 'FLOAT' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal271=cast(Token)match(input,103,FOLLOW_103_in_datatype1633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal271_tree = 
                    cast(Object)adaptor.create(string_literal271)
                    ;
                    adaptor.addChild(root_0, string_literal271_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:620:12: ( LPAREN NUMBER RPAREN )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==LPAREN) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:620:14: LPAREN NUMBER RPAREN
                           {
                           LPAREN272=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1637); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN272_tree = 
                           cast(Object)adaptor.create(LPAREN272)
                           ;
                           adaptor.addChild(root_0, LPAREN272_tree);
                           }

                           NUMBER273=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1639); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER273_tree = 
                           cast(Object)adaptor.create(NUMBER273)
                           ;
                           adaptor.addChild(root_0, NUMBER273_tree);
                           }

                           RPAREN274=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1641); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN274_tree = 
                           cast(Object)adaptor.create(RPAREN274)
                           ;
                           adaptor.addChild(root_0, RPAREN274_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 18 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:621:4: 'REAL'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal275=cast(Token)match(input,156,FOLLOW_156_in_datatype1649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal275_tree = 
                    cast(Object)adaptor.create(string_literal275)
                    ;
                    adaptor.addChild(root_0, string_literal275_tree);
                    }

                    }
                    break;
                case 19 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:622:4: 'DOUBLE' keyPRECISION
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal276=cast(Token)match(input,94,FOLLOW_94_in_datatype1654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal276_tree = 
                    cast(Object)adaptor.create(string_literal276)
                    ;
                    adaptor.addChild(root_0, string_literal276_tree);
                    }

                    pushFollow(FOLLOW_keyPRECISION_in_datatype1656);
                    keyPRECISION277=keyPRECISION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRECISION277.getTree());

                    }
                    break;
                case 20 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:4: 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal278=cast(Token)match(input,77,FOLLOW_77_in_datatype1661); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal278_tree = 
                    cast(Object)adaptor.create(string_literal278)
                    ;
                    adaptor.addChild(root_0, string_literal278_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:16: ( keyVARYING )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 64:
                            case 67:
                            case 84:
                            case 90:
                            case 97:
                            case 107:
                            case 114:
                            case 120:
                            case 134:
                            case 150:
                            case 152:
                                {
                                alt62=1;
                                }
                                break;
                            case 78:
                                {
                                int LA62_4 = input.LA(3);

                                if ( (LA62_4==166) ) {
                                    alt62=1;
                                }
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 69:
                                    case 70:
                                    case 71:
                                    case 72:
                                    case 73:
                                    case 74:
                                    case 77:
                                    case 78:
                                    case 79:
                                    case 83:
                                    case 85:
                                    case 86:
                                    case 87:
                                    case 94:
                                    case 98:
                                    case 103:
                                    case 116:
                                    case 117:
                                    case 123:
                                    case 126:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 148:
                                    case 149:
                                    case 155:
                                    case 156:
                                    case 162:
                                    case 168:
                                    case 178:
                                    case 180:
                                    case 181:
                                        {
                                        alt62=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA62_7 = input.LA(4);

                                        if ( (LA62_7==ASSIGN||LA62_7==DOT||LA62_7==ID||LA62_7==ROWTYPE_ATTR||LA62_7==SEMI||LA62_7==TYPE_ATTR||LA62_7==90||LA62_7==120||LA62_7==134||LA62_7==158||LA62_7==185) ) {
                                            alt62=1;
                                        }
                                        else if ( (LA62_7==LPAREN) ) {
                                            int LA62_9 = input.LA(5);

                                            if ( (LA62_9==NUMBER) ) {
                                                int LA62_11 = input.LA(6);

                                                if ( (LA62_11==RPAREN) ) {
                                                    int LA62_12 = input.LA(7);

                                                    if ( (LA62_12==ASSIGN||LA62_12==SEMI||LA62_12==90||LA62_12==120||LA62_12==134||LA62_12==185) ) {
                                                        alt62=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA62_9==DOUBLEQUOTED_STRING||LA62_9==ID) ) {
                                                alt62=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA62_8 = input.LA(4);

                                        if ( (LA62_8==DOUBLEQUOTED_STRING||LA62_8==ID) ) {
                                            int LA62_10 = input.LA(5);

                                            if ( (LA62_10==98) ) {
                                                alt62=1;
                                            }
                                        }
                                        }
                                        break;
                                    default:
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA62_6 = input.LA(3);

                                if ( (LA62_6==DOUBLEQUOTED_STRING||LA62_6==ID||(LA62_6 >=69  && LA62_6<=74)||(LA62_6 >=77  && LA62_6<=79)||LA62_6==83||(LA62_6 >=85  && LA62_6<=87)||LA62_6==94||LA62_6==98||LA62_6==103||(LA62_6 >=116  && LA62_6<=117)||LA62_6==123||LA62_6==126||(LA62_6 >=128  && LA62_6<=131)||(LA62_6 >=138  && LA62_6<=141)||(LA62_6 >=148  && LA62_6<=149)||(LA62_6 >=155  && LA62_6<=156)||LA62_6==162||LA62_6==168||LA62_6==178||(LA62_6 >=180  && LA62_6<=181)) ) {
                                    alt62=1;
                                }
                                else if ( (LA62_6==DOT) ) {
                                    int LA62_8 = input.LA(4);

                                    if ( (LA62_8==DOUBLEQUOTED_STRING||LA62_8==ID) ) {
                                        int LA62_10 = input.LA(5);

                                        if ( (LA62_10==98) ) {
                                            alt62=1;
                                        }
                                    }
                                }
                                }
                                break;
                            default:
                        }

                    }
                    switch (alt62) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:18: keyVARYING
                           {
                           pushFollow(FOLLOW_keyVARYING_in_datatype1670);
                           keyVARYING279=keyVARYING();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING279.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==LPAREN) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                           {
                           LPAREN280=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1677); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN280_tree = 
                           cast(Object)adaptor.create(LPAREN280)
                           ;
                           adaptor.addChild(root_0, LPAREN280_tree);
                           }

                           NUMBER281=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1679); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER281_tree = 
                           cast(Object)adaptor.create(NUMBER281)
                           ;
                           adaptor.addChild(root_0, NUMBER281_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:48: ( keyBYTE | 'CHAR' )?
                           int alt63=3;
                           int LA63_0 = input.LA(1);

                           if ( (LA63_0==ID) ) {
                               alt63=1;
                           }
                           else if ( (LA63_0==77) ) {
                               alt63=2;
                           }
                           switch (alt63) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:50: keyBYTE
                                  {
                                  pushFollow(FOLLOW_keyBYTE_in_datatype1683);
                                  keyBYTE282=keyBYTE();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE282.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:60: 'CHAR'
                                  {
                                  string_literal283=cast(Token)match(input,77,FOLLOW_77_in_datatype1687); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  string_literal283_tree = 
                                  cast(Object)adaptor.create(string_literal283)
                                  ;
                                  adaptor.addChild(root_0, string_literal283_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           RPAREN284=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1692); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN284_tree = 
                           cast(Object)adaptor.create(RPAREN284)
                           ;
                           adaptor.addChild(root_0, RPAREN284_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==78) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                           {
                           string_literal285=cast(Token)match(input,78,FOLLOW_78_in_datatype1699); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal285_tree = 
                           cast(Object)adaptor.create(string_literal285)
                           ;
                           adaptor.addChild(root_0, string_literal285_tree);
                           }

                           string_literal286=cast(Token)match(input,166,FOLLOW_166_in_datatype1701); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal286_tree = 
                           cast(Object)adaptor.create(string_literal286)
                           ;
                           adaptor.addChild(root_0, string_literal286_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:100: ( identifier | column_spec CHARSET_ATTR )
                           int alt65=2;
                           int LA65_0 = input.LA(1);

                           if ( (LA65_0==DOUBLEQUOTED_STRING||LA65_0==ID) ) {
                               int LA65_1 = input.LA(2);

                               if ( (LA65_1==EOF||LA65_1==ASSIGN||LA65_1==COMMA||LA65_1==DOUBLEQUOTED_STRING||LA65_1==ID||(LA65_1 >=52  && LA65_1<=53)||LA65_1==64||LA65_1==67||LA65_1==84||LA65_1==90||LA65_1==97||LA65_1==107||LA65_1==114||LA65_1==120||LA65_1==134||LA65_1==150||LA65_1==152) ) {
                                   alt65=1;
                               }
                               else if ( (LA65_1==CHARSET_ATTR||LA65_1==DOT) ) {
                                   alt65=2;
                               }
                               else {
                                   if (state.backtracking>0) {state.failed=true; return retval;}
                                   NoViableAltException nvae =
                                       new NoViableAltException("", 65, 1, input);

                                   throw nvae;

                               }
                           }
                           else if ( (LA65_0==162) ) {
                               alt65=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 65, 0, input);

                               throw nvae;

                           }
                           switch (alt65) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:102: identifier
                                  {
                                  pushFollow(FOLLOW_identifier_in_datatype1705);
                                  identifier287=identifier();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier287.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:623:115: column_spec CHARSET_ATTR
                                  {
                                  pushFollow(FOLLOW_column_spec_in_datatype1709);
                                  column_spec288=column_spec();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec288.getTree());

                                  CHARSET_ATTR289=cast(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1711); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  CHARSET_ATTR289_tree = 
                                  cast(Object)adaptor.create(CHARSET_ATTR289)
                                  ;
                                  adaptor.addChild(root_0, CHARSET_ATTR289_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 21 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:4: 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal290=cast(Token)match(input,180,FOLLOW_180_in_datatype1721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal290_tree = 
                    cast(Object)adaptor.create(string_literal290)
                    ;
                    adaptor.addChild(root_0, string_literal290_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==LPAREN) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                           {
                           LPAREN291=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1743); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN291_tree = 
                           cast(Object)adaptor.create(LPAREN291)
                           ;
                           adaptor.addChild(root_0, LPAREN291_tree);
                           }

                           NUMBER292=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1745); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER292_tree = 
                           cast(Object)adaptor.create(NUMBER292)
                           ;
                           adaptor.addChild(root_0, NUMBER292_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:48: ( keyBYTE | 'CHAR' )?
                           int alt67=3;
                           int LA67_0 = input.LA(1);

                           if ( (LA67_0==ID) ) {
                               alt67=1;
                           }
                           else if ( (LA67_0==77) ) {
                               alt67=2;
                           }
                           switch (alt67) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:50: keyBYTE
                                  {
                                  pushFollow(FOLLOW_keyBYTE_in_datatype1749);
                                  keyBYTE293=keyBYTE();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE293.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:60: 'CHAR'
                                  {
                                  string_literal294=cast(Token)match(input,77,FOLLOW_77_in_datatype1753); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  string_literal294_tree = 
                                  cast(Object)adaptor.create(string_literal294)
                                  ;
                                  adaptor.addChild(root_0, string_literal294_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           RPAREN295=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1758); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN295_tree = 
                           cast(Object)adaptor.create(RPAREN295)
                           ;
                           adaptor.addChild(root_0, RPAREN295_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==78) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                           {
                           string_literal296=cast(Token)match(input,78,FOLLOW_78_in_datatype1765); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal296_tree = 
                           cast(Object)adaptor.create(string_literal296)
                           ;
                           adaptor.addChild(root_0, string_literal296_tree);
                           }

                           string_literal297=cast(Token)match(input,166,FOLLOW_166_in_datatype1767); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal297_tree = 
                           cast(Object)adaptor.create(string_literal297)
                           ;
                           adaptor.addChild(root_0, string_literal297_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:100: ( identifier | column_spec CHARSET_ATTR )
                           int alt69=2;
                           int LA69_0 = input.LA(1);

                           if ( (LA69_0==DOUBLEQUOTED_STRING||LA69_0==ID) ) {
                               int LA69_1 = input.LA(2);

                               if ( (LA69_1==EOF||LA69_1==ASSIGN||LA69_1==COMMA||LA69_1==DOUBLEQUOTED_STRING||LA69_1==ID||(LA69_1 >=52  && LA69_1<=53)||LA69_1==64||LA69_1==67||LA69_1==84||LA69_1==90||LA69_1==97||LA69_1==107||LA69_1==114||LA69_1==120||LA69_1==134||LA69_1==150||LA69_1==152) ) {
                                   alt69=1;
                               }
                               else if ( (LA69_1==CHARSET_ATTR||LA69_1==DOT) ) {
                                   alt69=2;
                               }
                               else {
                                   if (state.backtracking>0) {state.failed=true; return retval;}
                                   NoViableAltException nvae =
                                       new NoViableAltException("", 69, 1, input);

                                   throw nvae;

                               }
                           }
                           else if ( (LA69_0==162) ) {
                               alt69=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 69, 0, input);

                               throw nvae;

                           }
                           switch (alt69) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:102: identifier
                                  {
                                  pushFollow(FOLLOW_identifier_in_datatype1771);
                                  identifier298=identifier();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier298.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:624:115: column_spec CHARSET_ATTR
                                  {
                                  pushFollow(FOLLOW_column_spec_in_datatype1775);
                                  column_spec299=column_spec();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec299.getTree());

                                  CHARSET_ATTR300=cast(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1777); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  CHARSET_ATTR300_tree = 
                                  cast(Object)adaptor.create(CHARSET_ATTR300)
                                  ;
                                  adaptor.addChild(root_0, CHARSET_ATTR300_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 22 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:4: 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal301=cast(Token)match(input,181,FOLLOW_181_in_datatype1787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal301_tree = 
                    cast(Object)adaptor.create(string_literal301)
                    ;
                    adaptor.addChild(root_0, string_literal301_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==LPAREN) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                           {
                           LPAREN302=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1808); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN302_tree = 
                           cast(Object)adaptor.create(LPAREN302)
                           ;
                           adaptor.addChild(root_0, LPAREN302_tree);
                           }

                           NUMBER303=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1810); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER303_tree = 
                           cast(Object)adaptor.create(NUMBER303)
                           ;
                           adaptor.addChild(root_0, NUMBER303_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:48: ( keyBYTE | 'CHAR' )?
                           int alt71=3;
                           int LA71_0 = input.LA(1);

                           if ( (LA71_0==ID) ) {
                               alt71=1;
                           }
                           else if ( (LA71_0==77) ) {
                               alt71=2;
                           }
                           switch (alt71) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:50: keyBYTE
                                  {
                                  pushFollow(FOLLOW_keyBYTE_in_datatype1814);
                                  keyBYTE304=keyBYTE();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE304.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:60: 'CHAR'
                                  {
                                  string_literal305=cast(Token)match(input,77,FOLLOW_77_in_datatype1818); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  string_literal305_tree = 
                                  cast(Object)adaptor.create(string_literal305)
                                  ;
                                  adaptor.addChild(root_0, string_literal305_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           RPAREN306=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1823); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN306_tree = 
                           cast(Object)adaptor.create(RPAREN306)
                           ;
                           adaptor.addChild(root_0, RPAREN306_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==78) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                           {
                           string_literal307=cast(Token)match(input,78,FOLLOW_78_in_datatype1830); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal307_tree = 
                           cast(Object)adaptor.create(string_literal307)
                           ;
                           adaptor.addChild(root_0, string_literal307_tree);
                           }

                           string_literal308=cast(Token)match(input,166,FOLLOW_166_in_datatype1832); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal308_tree = 
                           cast(Object)adaptor.create(string_literal308)
                           ;
                           adaptor.addChild(root_0, string_literal308_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:100: ( identifier | column_spec CHARSET_ATTR )
                           int alt73=2;
                           int LA73_0 = input.LA(1);

                           if ( (LA73_0==DOUBLEQUOTED_STRING||LA73_0==ID) ) {
                               int LA73_1 = input.LA(2);

                               if ( (LA73_1==EOF||LA73_1==ASSIGN||LA73_1==COMMA||LA73_1==DOUBLEQUOTED_STRING||LA73_1==ID||(LA73_1 >=52  && LA73_1<=53)||LA73_1==64||LA73_1==67||LA73_1==84||LA73_1==90||LA73_1==97||LA73_1==107||LA73_1==114||LA73_1==120||LA73_1==134||LA73_1==150||LA73_1==152) ) {
                                   alt73=1;
                               }
                               else if ( (LA73_1==CHARSET_ATTR||LA73_1==DOT) ) {
                                   alt73=2;
                               }
                               else {
                                   if (state.backtracking>0) {state.failed=true; return retval;}
                                   NoViableAltException nvae =
                                       new NoViableAltException("", 73, 1, input);

                                   throw nvae;

                               }
                           }
                           else if ( (LA73_0==162) ) {
                               alt73=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 73, 0, input);

                               throw nvae;

                           }
                           switch (alt73) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:102: identifier
                                  {
                                  pushFollow(FOLLOW_identifier_in_datatype1836);
                                  identifier309=identifier();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier309.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:625:115: column_spec CHARSET_ATTR
                                  {
                                  pushFollow(FOLLOW_column_spec_in_datatype1840);
                                  column_spec310=column_spec();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec310.getTree());

                                  CHARSET_ATTR311=cast(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1842); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  CHARSET_ATTR311_tree = 
                                  cast(Object)adaptor.create(CHARSET_ATTR311)
                                  ;
                                  adaptor.addChild(root_0, CHARSET_ATTR311_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 23 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:626:4: 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal312=cast(Token)match(input,78,FOLLOW_78_in_datatype1852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal312_tree = 
                    cast(Object)adaptor.create(string_literal312)
                    ;
                    adaptor.addChild(root_0, string_literal312_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:626:16: ( keyVARYING )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 64:
                            case 67:
                            case 84:
                            case 90:
                            case 97:
                            case 107:
                            case 114:
                            case 120:
                            case 134:
                            case 150:
                            case 152:
                                {
                                alt75=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 69:
                                    case 70:
                                    case 71:
                                    case 72:
                                    case 73:
                                    case 74:
                                    case 77:
                                    case 78:
                                    case 79:
                                    case 83:
                                    case 85:
                                    case 86:
                                    case 87:
                                    case 94:
                                    case 98:
                                    case 103:
                                    case 116:
                                    case 117:
                                    case 123:
                                    case 126:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 148:
                                    case 149:
                                    case 155:
                                    case 156:
                                    case 162:
                                    case 168:
                                    case 178:
                                    case 180:
                                    case 181:
                                        {
                                        alt75=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA75_6 = input.LA(4);

                                        if ( (LA75_6==ASSIGN||LA75_6==DOT||LA75_6==ID||LA75_6==ROWTYPE_ATTR||LA75_6==SEMI||LA75_6==TYPE_ATTR||LA75_6==90||LA75_6==120||LA75_6==134||LA75_6==158||LA75_6==185) ) {
                                            alt75=1;
                                        }
                                        else if ( (LA75_6==LPAREN) ) {
                                            int LA75_8 = input.LA(5);

                                            if ( (LA75_8==NUMBER) ) {
                                                int LA75_10 = input.LA(6);

                                                if ( (LA75_10==RPAREN) ) {
                                                    int LA75_11 = input.LA(7);

                                                    if ( (LA75_11==ASSIGN||LA75_11==SEMI||LA75_11==90||LA75_11==120||LA75_11==134||LA75_11==185) ) {
                                                        alt75=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA75_8==DOUBLEQUOTED_STRING||LA75_8==ID) ) {
                                                alt75=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA75_7 = input.LA(4);

                                        if ( (LA75_7==DOUBLEQUOTED_STRING||LA75_7==ID) ) {
                                            int LA75_9 = input.LA(5);

                                            if ( (LA75_9==98) ) {
                                                alt75=1;
                                            }
                                        }
                                        }
                                        break;
                                    default:
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA75_5 = input.LA(3);

                                if ( (LA75_5==DOUBLEQUOTED_STRING||LA75_5==ID||(LA75_5 >=69  && LA75_5<=74)||(LA75_5 >=77  && LA75_5<=79)||LA75_5==83||(LA75_5 >=85  && LA75_5<=87)||LA75_5==94||LA75_5==98||LA75_5==103||(LA75_5 >=116  && LA75_5<=117)||LA75_5==123||LA75_5==126||(LA75_5 >=128  && LA75_5<=131)||(LA75_5 >=138  && LA75_5<=141)||(LA75_5 >=148  && LA75_5<=149)||(LA75_5 >=155  && LA75_5<=156)||LA75_5==162||LA75_5==168||LA75_5==178||(LA75_5 >=180  && LA75_5<=181)) ) {
                                    alt75=1;
                                }
                                else if ( (LA75_5==DOT) ) {
                                    int LA75_7 = input.LA(4);

                                    if ( (LA75_7==DOUBLEQUOTED_STRING||LA75_7==ID) ) {
                                        int LA75_9 = input.LA(5);

                                        if ( (LA75_9==98) ) {
                                            alt75=1;
                                        }
                                    }
                                }
                                }
                                break;
                            default:
                        }

                    }
                    switch (alt75) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:626:18: keyVARYING
                           {
                           pushFollow(FOLLOW_keyVARYING_in_datatype1856);
                           keyVARYING313=keyVARYING();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING313.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:626:32: ( LPAREN NUMBER RPAREN )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==LPAREN) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:626:34: LPAREN NUMBER RPAREN
                           {
                           LPAREN314=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1863); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN314_tree = 
                           cast(Object)adaptor.create(LPAREN314)
                           ;
                           adaptor.addChild(root_0, LPAREN314_tree);
                           }

                           NUMBER315=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1865); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER315_tree = 
                           cast(Object)adaptor.create(NUMBER315)
                           ;
                           adaptor.addChild(root_0, NUMBER315_tree);
                           }

                           RPAREN316=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1867); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN316_tree = 
                           cast(Object)adaptor.create(RPAREN316)
                           ;
                           adaptor.addChild(root_0, RPAREN316_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 24 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:627:4: 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal317=cast(Token)match(input,130,FOLLOW_130_in_datatype1875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal317_tree = 
                    cast(Object)adaptor.create(string_literal317)
                    ;
                    adaptor.addChild(root_0, string_literal317_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:627:16: ( keyVARYING )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 64:
                            case 67:
                            case 84:
                            case 90:
                            case 97:
                            case 107:
                            case 114:
                            case 120:
                            case 134:
                            case 150:
                            case 152:
                                {
                                alt77=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 69:
                                    case 70:
                                    case 71:
                                    case 72:
                                    case 73:
                                    case 74:
                                    case 77:
                                    case 78:
                                    case 79:
                                    case 83:
                                    case 85:
                                    case 86:
                                    case 87:
                                    case 94:
                                    case 98:
                                    case 103:
                                    case 116:
                                    case 117:
                                    case 123:
                                    case 126:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 148:
                                    case 149:
                                    case 155:
                                    case 156:
                                    case 162:
                                    case 168:
                                    case 178:
                                    case 180:
                                    case 181:
                                        {
                                        alt77=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA77_6 = input.LA(4);

                                        if ( (LA77_6==ASSIGN||LA77_6==DOT||LA77_6==ID||LA77_6==ROWTYPE_ATTR||LA77_6==SEMI||LA77_6==TYPE_ATTR||LA77_6==90||LA77_6==120||LA77_6==134||LA77_6==158||LA77_6==185) ) {
                                            alt77=1;
                                        }
                                        else if ( (LA77_6==LPAREN) ) {
                                            int LA77_8 = input.LA(5);

                                            if ( (LA77_8==NUMBER) ) {
                                                int LA77_10 = input.LA(6);

                                                if ( (LA77_10==RPAREN) ) {
                                                    int LA77_11 = input.LA(7);

                                                    if ( (LA77_11==ASSIGN||LA77_11==SEMI||LA77_11==90||LA77_11==120||LA77_11==134||LA77_11==185) ) {
                                                        alt77=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA77_8==DOUBLEQUOTED_STRING||LA77_8==ID) ) {
                                                alt77=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA77_7 = input.LA(4);

                                        if ( (LA77_7==DOUBLEQUOTED_STRING||LA77_7==ID) ) {
                                            int LA77_9 = input.LA(5);

                                            if ( (LA77_9==98) ) {
                                                alt77=1;
                                            }
                                        }
                                        }
                                        break;
                                    default:
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA77_5 = input.LA(3);

                                if ( (LA77_5==DOUBLEQUOTED_STRING||LA77_5==ID||(LA77_5 >=69  && LA77_5<=74)||(LA77_5 >=77  && LA77_5<=79)||LA77_5==83||(LA77_5 >=85  && LA77_5<=87)||LA77_5==94||LA77_5==98||LA77_5==103||(LA77_5 >=116  && LA77_5<=117)||LA77_5==123||LA77_5==126||(LA77_5 >=128  && LA77_5<=131)||(LA77_5 >=138  && LA77_5<=141)||(LA77_5 >=148  && LA77_5<=149)||(LA77_5 >=155  && LA77_5<=156)||LA77_5==162||LA77_5==168||LA77_5==178||(LA77_5 >=180  && LA77_5<=181)) ) {
                                    alt77=1;
                                }
                                else if ( (LA77_5==DOT) ) {
                                    int LA77_7 = input.LA(4);

                                    if ( (LA77_7==DOUBLEQUOTED_STRING||LA77_7==ID) ) {
                                        int LA77_9 = input.LA(5);

                                        if ( (LA77_9==98) ) {
                                            alt77=1;
                                        }
                                    }
                                }
                                }
                                break;
                            default:
                        }

                    }
                    switch (alt77) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:627:18: keyVARYING
                           {
                           pushFollow(FOLLOW_keyVARYING_in_datatype1883);
                           keyVARYING318=keyVARYING();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING318.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:627:32: ( LPAREN NUMBER RPAREN )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==LPAREN) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:627:34: LPAREN NUMBER RPAREN
                           {
                           LPAREN319=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1890); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN319_tree = 
                           cast(Object)adaptor.create(LPAREN319)
                           ;
                           adaptor.addChild(root_0, LPAREN319_tree);
                           }

                           NUMBER320=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1892); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER320_tree = 
                           cast(Object)adaptor.create(NUMBER320)
                           ;
                           adaptor.addChild(root_0, NUMBER320_tree);
                           }

                           RPAREN321=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1894); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN321_tree = 
                           cast(Object)adaptor.create(RPAREN321)
                           ;
                           adaptor.addChild(root_0, RPAREN321_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 25 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:628:4: 'NVARCHAR' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal322=cast(Token)match(input,140,FOLLOW_140_in_datatype1902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal322_tree = 
                    cast(Object)adaptor.create(string_literal322)
                    ;
                    adaptor.addChild(root_0, string_literal322_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:628:16: ( LPAREN NUMBER RPAREN )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==LPAREN) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:628:18: LPAREN NUMBER RPAREN
                           {
                           LPAREN323=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1907); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN323_tree = 
                           cast(Object)adaptor.create(LPAREN323)
                           ;
                           adaptor.addChild(root_0, LPAREN323_tree);
                           }

                           NUMBER324=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1909); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER324_tree = 
                           cast(Object)adaptor.create(NUMBER324)
                           ;
                           adaptor.addChild(root_0, NUMBER324_tree);
                           }

                           RPAREN325=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1911); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN325_tree = 
                           cast(Object)adaptor.create(RPAREN325)
                           ;
                           adaptor.addChild(root_0, RPAREN325_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 26 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:629:4: 'NVARCHAR2' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal326=cast(Token)match(input,141,FOLLOW_141_in_datatype1919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal326_tree = 
                    cast(Object)adaptor.create(string_literal326)
                    ;
                    adaptor.addChild(root_0, string_literal326_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:629:16: ( LPAREN NUMBER RPAREN )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==LPAREN) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:629:18: LPAREN NUMBER RPAREN
                           {
                           LPAREN327=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1923); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN327_tree = 
                           cast(Object)adaptor.create(LPAREN327)
                           ;
                           adaptor.addChild(root_0, LPAREN327_tree);
                           }

                           NUMBER328=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1925); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER328_tree = 
                           cast(Object)adaptor.create(NUMBER328)
                           ;
                           adaptor.addChild(root_0, NUMBER328_tree);
                           }

                           RPAREN329=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1927); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN329_tree = 
                           cast(Object)adaptor.create(RPAREN329)
                           ;
                           adaptor.addChild(root_0, RPAREN329_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 27 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:630:4: 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal330=cast(Token)match(input,128,FOLLOW_128_in_datatype1935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal330_tree = 
                    cast(Object)adaptor.create(string_literal330)
                    ;
                    adaptor.addChild(root_0, string_literal330_tree);
                    }

                    set331=cast(Token)input.LT(1);

                    if ( (input.LA(1) >=77 && input.LA(1)<=78) ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set331)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:630:41: ( keyVARYING )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 64:
                            case 67:
                            case 84:
                            case 90:
                            case 97:
                            case 107:
                            case 114:
                            case 120:
                            case 134:
                            case 150:
                            case 152:
                                {
                                alt81=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 69:
                                    case 70:
                                    case 71:
                                    case 72:
                                    case 73:
                                    case 74:
                                    case 77:
                                    case 78:
                                    case 79:
                                    case 83:
                                    case 85:
                                    case 86:
                                    case 87:
                                    case 94:
                                    case 98:
                                    case 103:
                                    case 116:
                                    case 117:
                                    case 123:
                                    case 126:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 148:
                                    case 149:
                                    case 155:
                                    case 156:
                                    case 162:
                                    case 168:
                                    case 178:
                                    case 180:
                                    case 181:
                                        {
                                        alt81=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA81_6 = input.LA(4);

                                        if ( (LA81_6==ASSIGN||LA81_6==DOT||LA81_6==ID||LA81_6==ROWTYPE_ATTR||LA81_6==SEMI||LA81_6==TYPE_ATTR||LA81_6==90||LA81_6==120||LA81_6==134||LA81_6==158||LA81_6==185) ) {
                                            alt81=1;
                                        }
                                        else if ( (LA81_6==LPAREN) ) {
                                            int LA81_8 = input.LA(5);

                                            if ( (LA81_8==NUMBER) ) {
                                                int LA81_10 = input.LA(6);

                                                if ( (LA81_10==RPAREN) ) {
                                                    int LA81_11 = input.LA(7);

                                                    if ( (LA81_11==ASSIGN||LA81_11==SEMI||LA81_11==90||LA81_11==120||LA81_11==134||LA81_11==185) ) {
                                                        alt81=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA81_8==DOUBLEQUOTED_STRING||LA81_8==ID) ) {
                                                alt81=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA81_7 = input.LA(4);

                                        if ( (LA81_7==DOUBLEQUOTED_STRING||LA81_7==ID) ) {
                                            int LA81_9 = input.LA(5);

                                            if ( (LA81_9==98) ) {
                                                alt81=1;
                                            }
                                        }
                                        }
                                        break;
                                    default:
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA81_5 = input.LA(3);

                                if ( (LA81_5==DOUBLEQUOTED_STRING||LA81_5==ID||(LA81_5 >=69  && LA81_5<=74)||(LA81_5 >=77  && LA81_5<=79)||LA81_5==83||(LA81_5 >=85  && LA81_5<=87)||LA81_5==94||LA81_5==98||LA81_5==103||(LA81_5 >=116  && LA81_5<=117)||LA81_5==123||LA81_5==126||(LA81_5 >=128  && LA81_5<=131)||(LA81_5 >=138  && LA81_5<=141)||(LA81_5 >=148  && LA81_5<=149)||(LA81_5 >=155  && LA81_5<=156)||LA81_5==162||LA81_5==168||LA81_5==178||(LA81_5 >=180  && LA81_5<=181)) ) {
                                    alt81=1;
                                }
                                else if ( (LA81_5==DOT) ) {
                                    int LA81_7 = input.LA(4);

                                    if ( (LA81_7==DOUBLEQUOTED_STRING||LA81_7==ID) ) {
                                        int LA81_9 = input.LA(5);

                                        if ( (LA81_9==98) ) {
                                            alt81=1;
                                        }
                                    }
                                }
                                }
                                break;
                            default:
                        }

                    }
                    switch (alt81) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:630:43: keyVARYING
                           {
                           pushFollow(FOLLOW_keyVARYING_in_datatype1950);
                           keyVARYING332=keyVARYING();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING332.getTree());

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:630:57: ( LPAREN NUMBER RPAREN )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==LPAREN) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:630:59: LPAREN NUMBER RPAREN
                           {
                           LPAREN333=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1957); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN333_tree = 
                           cast(Object)adaptor.create(LPAREN333)
                           ;
                           adaptor.addChild(root_0, LPAREN333_tree);
                           }

                           NUMBER334=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1959); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER334_tree = 
                           cast(Object)adaptor.create(NUMBER334)
                           ;
                           adaptor.addChild(root_0, NUMBER334_tree);
                           }

                           RPAREN335=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1961); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN335_tree = 
                           cast(Object)adaptor.create(RPAREN335)
                           ;
                           adaptor.addChild(root_0, RPAREN335_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 28 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:631:4: 'MLSLABEL'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal336=cast(Token)match(input,126,FOLLOW_126_in_datatype1969); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal336_tree = 
                    cast(Object)adaptor.create(string_literal336)
                    ;
                    adaptor.addChild(root_0, string_literal336_tree);
                    }

                    }
                    break;
                case 29 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:632:4: 'PLS_INTEGER'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal337=cast(Token)match(input,148,FOLLOW_148_in_datatype1974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal337_tree = 
                    cast(Object)adaptor.create(string_literal337)
                    ;
                    adaptor.addChild(root_0, string_literal337_tree);
                    }

                    }
                    break;
                case 30 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:633:4: 'BLOB'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal338=cast(Token)match(input,73,FOLLOW_73_in_datatype1979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal338_tree = 
                    cast(Object)adaptor.create(string_literal338)
                    ;
                    adaptor.addChild(root_0, string_literal338_tree);
                    }

                    }
                    break;
                case 31 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:4: 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal339=cast(Token)match(input,79,FOLLOW_79_in_datatype1984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal339_tree = 
                    cast(Object)adaptor.create(string_literal339)
                    ;
                    adaptor.addChild(root_0, string_literal339_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:11: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==78) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:13: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                           {
                           string_literal340=cast(Token)match(input,78,FOLLOW_78_in_datatype1988); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal340_tree = 
                           cast(Object)adaptor.create(string_literal340)
                           ;
                           adaptor.addChild(root_0, string_literal340_tree);
                           }

                           string_literal341=cast(Token)match(input,166,FOLLOW_166_in_datatype1990); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal341_tree = 
                           cast(Object)adaptor.create(string_literal341)
                           ;
                           adaptor.addChild(root_0, string_literal341_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:31: ( identifier | column_spec CHARSET_ATTR )
                           int alt83=2;
                           int LA83_0 = input.LA(1);

                           if ( (LA83_0==DOUBLEQUOTED_STRING||LA83_0==ID) ) {
                               int LA83_1 = input.LA(2);

                               if ( (LA83_1==EOF||LA83_1==ASSIGN||LA83_1==COMMA||LA83_1==DOUBLEQUOTED_STRING||LA83_1==ID||(LA83_1 >=52  && LA83_1<=53)||LA83_1==64||LA83_1==67||LA83_1==84||LA83_1==90||LA83_1==97||LA83_1==107||LA83_1==114||LA83_1==120||LA83_1==134||LA83_1==150||LA83_1==152) ) {
                                   alt83=1;
                               }
                               else if ( (LA83_1==CHARSET_ATTR||LA83_1==DOT) ) {
                                   alt83=2;
                               }
                               else {
                                   if (state.backtracking>0) {state.failed=true; return retval;}
                                   NoViableAltException nvae =
                                       new NoViableAltException("", 83, 1, input);

                                   throw nvae;

                               }
                           }
                           else if ( (LA83_0==162) ) {
                               alt83=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 83, 0, input);

                               throw nvae;

                           }
                           switch (alt83) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:33: identifier
                                  {
                                  pushFollow(FOLLOW_identifier_in_datatype1994);
                                  identifier342=identifier();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier342.getTree());

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:634:46: column_spec CHARSET_ATTR
                                  {
                                  pushFollow(FOLLOW_column_spec_in_datatype1998);
                                  column_spec343=column_spec();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec343.getTree());

                                  CHARSET_ATTR344=cast(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype2000); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  CHARSET_ATTR344_tree = 
                                  cast(Object)adaptor.create(CHARSET_ATTR344)
                                  ;
                                  adaptor.addChild(root_0, CHARSET_ATTR344_tree);
                                  }

                                  }
                                  break;

                               default:
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 32 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:635:4: 'NCLOB'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal345=cast(Token)match(input,131,FOLLOW_131_in_datatype2010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal345_tree = 
                    cast(Object)adaptor.create(string_literal345)
                    ;
                    adaptor.addChild(root_0, string_literal345_tree);
                    }

                    }
                    break;
                case 33 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:636:4: 'BFILE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal346=cast(Token)match(input,69,FOLLOW_69_in_datatype2015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal346_tree = 
                    cast(Object)adaptor.create(string_literal346)
                    ;
                    adaptor.addChild(root_0, string_literal346_tree);
                    }

                    }
                    break;
                case 34 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:637:4: 'ROWID'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal347=cast(Token)match(input,162,FOLLOW_162_in_datatype2020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal347_tree = 
                    cast(Object)adaptor.create(string_literal347)
                    ;
                    adaptor.addChild(root_0, string_literal347_tree);
                    }

                    }
                    break;
                case 35 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:638:4: 'UROWID' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal348=cast(Token)match(input,178,FOLLOW_178_in_datatype2026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal348_tree = 
                    cast(Object)adaptor.create(string_literal348)
                    ;
                    adaptor.addChild(root_0, string_literal348_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:638:13: ( LPAREN NUMBER RPAREN )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==LPAREN) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:638:15: LPAREN NUMBER RPAREN
                           {
                           LPAREN349=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype2030); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN349_tree = 
                           cast(Object)adaptor.create(LPAREN349)
                           ;
                           adaptor.addChild(root_0, LPAREN349_tree);
                           }

                           NUMBER350=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype2032); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER350_tree = 
                           cast(Object)adaptor.create(NUMBER350)
                           ;
                           adaptor.addChild(root_0, NUMBER350_tree);
                           }

                           RPAREN351=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype2034); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN351_tree = 
                           cast(Object)adaptor.create(RPAREN351)
                           ;
                           adaptor.addChild(root_0, RPAREN351_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","datatype"," ",33);
            if ( state.backtracking>0 ) { memoize(input, 33, datatype_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "datatype"


    public static class type_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:641:1: type_spec : ( datatype | type_name type_variants );
    public final PLSQL3_2_DParser.type_spec_return type_spec()  {
        debug(trace_rules) writeln("Entering rule:","type_spec"," ",34);
        PLSQL3_2_DParser.type_spec_return retval = new PLSQL3_2_DParser.type_spec_return();
        retval.start = input.LT(1);

        int type_spec_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.datatype_return datatype352 =null;

        PLSQL3_2_DParser.type_name_return type_name353 =null;

        PLSQL3_2_DParser.type_variants_return type_variants354 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:642:2: ( datatype | type_name type_variants )
            int alt87=2;
            switch ( input.LA(1) ) {
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 77:
            case 78:
            case 79:
            case 85:
            case 86:
            case 87:
            case 94:
            case 103:
            case 116:
            case 117:
            case 123:
            case 126:
            case 128:
            case 129:
            case 130:
            case 131:
            case 138:
            case 139:
            case 140:
            case 141:
            case 148:
            case 149:
            case 155:
            case 156:
            case 162:
            case 168:
            case 178:
            case 180:
            case 181:
                {
                alt87=1;
                }
                break;
            case ID:
                {
                int LA87_2 = input.LA(2);

                if ( (((synpred191_PLSQL3_2_D()&&synpred191_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "INTERVAL")||(toUpper(input.LT(1).getText)== "TIMESTAMP")||(toUpper(input.LT(1).getText)== "TIME")))) ) {
                    alt87=1;
                }
                else if ( (true) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                alt87=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }

            switch (alt87) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:642:4: datatype
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_datatype_in_type_spec2048);
                    datatype352=datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, datatype352.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:644:15: type_name type_variants
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_type_name_in_type_spec2066);
                    type_name353=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name353.getTree());

                    pushFollow(FOLLOW_type_variants_in_type_spec2068);
                    type_variants354=type_variants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variants354.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_spec"," ",34);
            if ( state.backtracking>0 ) { memoize(input, 34, type_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_spec"


    public static class type_spec2_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_spec2"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:653:1: type_spec2 : type_name type_variants ;
    public final PLSQL3_2_DParser.type_spec2_return type_spec2()  {
        debug(trace_rules) writeln("Entering rule:","type_spec2"," ",35);
        PLSQL3_2_DParser.type_spec2_return retval = new PLSQL3_2_DParser.type_spec2_return();
        retval.start = input.LT(1);

        int type_spec2_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.type_name_return type_name355 =null;

        PLSQL3_2_DParser.type_variants_return type_variants356 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:654:2: ( type_name type_variants )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:654:4: type_name type_variants
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_type_name_in_type_spec22095);
            type_name355=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name355.getTree());

            pushFollow(FOLLOW_type_variants_in_type_spec22097);
            type_variants356=type_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variants356.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_spec2"," ",35);
            if ( state.backtracking>0 ) { memoize(input, 35, type_spec2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_spec2"


    public static class type_variants_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_variants"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:656:1: type_variants : ( ( LPAREN NUMBER RPAREN )? | ROWTYPE_ATTR | TYPE_ATTR );
    public final PLSQL3_2_DParser.type_variants_return type_variants()  {
        debug(trace_rules) writeln("Entering rule:","type_variants"," ",36);
        PLSQL3_2_DParser.type_variants_return retval = new PLSQL3_2_DParser.type_variants_return();
        retval.start = input.LT(1);

        int type_variants_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN357=null;
        Token NUMBER358=null;
        Token RPAREN359=null;
        Token ROWTYPE_ATTR360=null;
        Token TYPE_ATTR361=null;

        Object LPAREN357_tree=null;
        Object NUMBER358_tree=null;
        Object RPAREN359_tree=null;
        Object ROWTYPE_ATTR360_tree=null;
        Object TYPE_ATTR361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:657:2: ( ( LPAREN NUMBER RPAREN )? | ROWTYPE_ATTR | TYPE_ATTR )
            int alt89=3;
            switch ( input.LA(1) ) {
            case EOF:
            case ASSIGN:
            case COMMA:
            case DOUBLEQUOTED_STRING:
            case ID:
            case LPAREN:
            case RPAREN:
            case SEMI:
            case 64:
            case 67:
            case 84:
            case 90:
            case 97:
            case 107:
            case 114:
            case 120:
            case 134:
            case 150:
            case 152:
                {
                alt89=1;
                }
                break;
            case ROWTYPE_ATTR:
                {
                alt89=2;
                }
                break;
            case TYPE_ATTR:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:657:4: ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:657:4: ( LPAREN NUMBER RPAREN )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==LPAREN) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:657:6: LPAREN NUMBER RPAREN
                           {
                           LPAREN357=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_variants2109); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN357_tree = 
                           cast(Object)adaptor.create(LPAREN357)
                           ;
                           adaptor.addChild(root_0, LPAREN357_tree);
                           }

                           NUMBER358=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_type_variants2111); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           NUMBER358_tree = 
                           cast(Object)adaptor.create(NUMBER358)
                           ;
                           adaptor.addChild(root_0, NUMBER358_tree);
                           }

                           RPAREN359=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_variants2113); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN359_tree = 
                           cast(Object)adaptor.create(RPAREN359)
                           ;
                           adaptor.addChild(root_0, RPAREN359_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:658:7: ROWTYPE_ATTR
                    {
                    root_0 = cast(Object)adaptor.nil();


                    ROWTYPE_ATTR360=cast(Token)match(input,ROWTYPE_ATTR,FOLLOW_ROWTYPE_ATTR_in_type_variants2125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWTYPE_ATTR360_tree = 
                    cast(Object)adaptor.create(ROWTYPE_ATTR360)
                    ;
                    adaptor.addChild(root_0, ROWTYPE_ATTR360_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:659:7: TYPE_ATTR
                    {
                    root_0 = cast(Object)adaptor.nil();


                    TYPE_ATTR361=cast(Token)match(input,TYPE_ATTR,FOLLOW_TYPE_ATTR_in_type_variants2134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_ATTR361_tree = 
                    cast(Object)adaptor.create(TYPE_ATTR361)
                    ;
                    adaptor.addChild(root_0, TYPE_ATTR361_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_variants"," ",36);
            if ( state.backtracking>0 ) { memoize(input, 36, type_variants_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_variants"


    public static class type_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:661:1: type_name : identifier ( DOT identifier )* ;
    public final PLSQL3_2_DParser.type_name_return type_name()  {
        debug(trace_rules) writeln("Entering rule:","type_name"," ",37);
        PLSQL3_2_DParser.type_name_return retval = new PLSQL3_2_DParser.type_name_return();
        retval.start = input.LT(1);

        int type_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT363=null;
        PLSQL3_2_DParser.identifier_return identifier362 =null;

        PLSQL3_2_DParser.identifier_return identifier364 =null;


        Object DOT363_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:662:2: ( identifier ( DOT identifier )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:662:4: identifier ( DOT identifier )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_type_name2144);
            identifier362=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier362.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:662:15: ( DOT identifier )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==DOT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:662:17: DOT identifier
            	    {
            	    DOT363=cast(Token)match(input,DOT,FOLLOW_DOT_in_type_name2148); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT363_tree = 
            	    cast(Object)adaptor.create(DOT363)
            	    ;
            	    adaptor.addChild(root_0, DOT363_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_type_name2150);
            	    identifier364=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier364.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_name"," ",37);
            if ( state.backtracking>0 ) { memoize(input, 37, type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class parameter_specs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_specs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:665:1: parameter_specs : parameter_spec ( COMMA parameter_spec )* ;
    public final PLSQL3_2_DParser.parameter_specs_return parameter_specs()  {
        debug(trace_rules) writeln("Entering rule:","parameter_specs"," ",38);
        PLSQL3_2_DParser.parameter_specs_return retval = new PLSQL3_2_DParser.parameter_specs_return();
        retval.start = input.LT(1);

        int parameter_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA366=null;
        PLSQL3_2_DParser.parameter_spec_return parameter_spec365 =null;

        PLSQL3_2_DParser.parameter_spec_return parameter_spec367 =null;


        Object COMMA366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:666:2: ( parameter_spec ( COMMA parameter_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:666:4: parameter_spec ( COMMA parameter_spec )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_parameter_spec_in_parameter_specs2164);
            parameter_spec365=parameter_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec365.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:666:19: ( COMMA parameter_spec )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:666:21: COMMA parameter_spec
            	    {
            	    COMMA366=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_specs2168); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA366_tree = 
            	    cast(Object)adaptor.create(COMMA366)
            	    ;
            	    adaptor.addChild(root_0, COMMA366_tree);
            	    }

            	    pushFollow(FOLLOW_parameter_spec_in_parameter_specs2170);
            	    parameter_spec367=parameter_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec367.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameter_specs"," ",38);
            if ( state.backtracking>0 ) { memoize(input, 38, parameter_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_specs"


    public static class parameter_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:669:1: parameter_spec : parameter_name ( 'IN' )? ( type_spec )? ;
    public final PLSQL3_2_DParser.parameter_spec_return parameter_spec()  {
        debug(trace_rules) writeln("Entering rule:","parameter_spec"," ",39);
        PLSQL3_2_DParser.parameter_spec_return retval = new PLSQL3_2_DParser.parameter_spec_return();
        retval.start = input.LT(1);

        int parameter_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal369=null;
        PLSQL3_2_DParser.parameter_name_return parameter_name368 =null;

        PLSQL3_2_DParser.type_spec_return type_spec370 =null;


        Object string_literal369_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:2: ( parameter_name ( 'IN' )? ( type_spec )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:4: parameter_name ( 'IN' )? ( type_spec )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_parameter_name_in_parameter_spec2184);
            parameter_name368=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name368.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:19: ( 'IN' )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==113) ) {
                alt92=1;
            }
            switch (alt92) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:21: 'IN'
                   {
                   string_literal369=cast(Token)match(input,113,FOLLOW_113_in_parameter_spec2188); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal369_tree = 
                   cast(Object)adaptor.create(string_literal369)
                   ;
                   adaptor.addChild(root_0, string_literal369_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:29: ( type_spec )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DOUBLEQUOTED_STRING||LA93_0==ID||(LA93_0 >=69  && LA93_0<=74)||(LA93_0 >=77  && LA93_0<=79)||(LA93_0 >=85  && LA93_0<=87)||LA93_0==94||LA93_0==103||(LA93_0 >=116  && LA93_0<=117)||LA93_0==123||LA93_0==126||(LA93_0 >=128  && LA93_0<=131)||(LA93_0 >=138  && LA93_0<=141)||(LA93_0 >=148  && LA93_0<=149)||(LA93_0 >=155  && LA93_0<=156)||LA93_0==162||LA93_0==168||LA93_0==178||(LA93_0 >=180  && LA93_0<=181)) ) {
                alt93=1;
            }
            switch (alt93) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:670:31: type_spec
                   {
                   pushFollow(FOLLOW_type_spec_in_parameter_spec2195);
                   type_spec370=type_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec370.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameter_spec"," ",39);
            if ( state.backtracking>0 ) { memoize(input, 39, parameter_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_spec"


    public static class parameter_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:673:1: parameter_name : identifier ;
    public final PLSQL3_2_DParser.parameter_name_return parameter_name()  {
        debug(trace_rules) writeln("Entering rule:","parameter_name"," ",40);
        PLSQL3_2_DParser.parameter_name_return retval = new PLSQL3_2_DParser.parameter_name_return();
        retval.start = input.LT(1);

        int parameter_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier371 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:674:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:674:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_parameter_name2210);
            identifier371=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier371.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","parameter_name"," ",40);
            if ( state.backtracking>0 ) { memoize(input, 40, parameter_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_name"


    public static class cursor_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:677:1: cursor_spec : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !;
    public final PLSQL3_2_DParser.cursor_spec_return cursor_spec()  {
        debug(trace_rules) writeln("Entering rule:","cursor_spec"," ",41);
        PLSQL3_2_DParser.cursor_spec_return retval = new PLSQL3_2_DParser.cursor_spec_return();
        retval.start = input.LT(1);

        int cursor_spec_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN374=null;
        Token RPAREN376=null;
        Token SEMI379=null;
        PLSQL3_2_DParser.keyCURSOR_return keyCURSOR372 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name373 =null;

        PLSQL3_2_DParser.parameter_specs_return parameter_specs375 =null;

        PLSQL3_2_DParser.keyRETURN_return keyRETURN377 =null;

        PLSQL3_2_DParser.return_type_return return_type378 =null;


        Object LPAREN374_tree=null;
        Object RPAREN376_tree=null;
        Object SEMI379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:678:2: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !)
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:678:4: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_spec2221);
            keyCURSOR372=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR372.getTree());

            pushFollow(FOLLOW_cursor_name_in_cursor_spec2223);
            cursor_name373=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name373.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:679:3: ( LPAREN parameter_specs RPAREN )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==LPAREN) ) {
                alt94=1;
            }
            switch (alt94) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:679:5: LPAREN parameter_specs RPAREN
                   {
                   LPAREN374=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_spec2230); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN374_tree = 
                   cast(Object)adaptor.create(LPAREN374)
                   ;
                   adaptor.addChild(root_0, LPAREN374_tree);
                   }

                   pushFollow(FOLLOW_parameter_specs_in_cursor_spec2232);
                   parameter_specs375=parameter_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs375.getTree());

                   RPAREN376=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_spec2234); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN376_tree = 
                   cast(Object)adaptor.create(RPAREN376)
                   ;
                   adaptor.addChild(root_0, RPAREN376_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyRETURN_in_cursor_spec2241);
            keyRETURN377=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN377.getTree());

            pushFollow(FOLLOW_return_type_in_cursor_spec2243);
            return_type378=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type378.getTree());

            SEMI379=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_cursor_spec2245); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cursor_spec"," ",41);
            if ( state.backtracking>0 ) { memoize(input, 41, cursor_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_spec"


    public static class procedure_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:683:1: procedure_spec : 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI ;
    public final PLSQL3_2_DParser.procedure_spec_return procedure_spec()  {
        debug(trace_rules) writeln("Entering rule:","procedure_spec"," ",42);
        PLSQL3_2_DParser.procedure_spec_return retval = new PLSQL3_2_DParser.procedure_spec_return();
        retval.start = input.LT(1);

        int procedure_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal380=null;
        Token LPAREN382=null;
        Token RPAREN384=null;
        Token SEMI385=null;
        PLSQL3_2_DParser.procedure_name_return procedure_name381 =null;

        PLSQL3_2_DParser.arguments_return arguments383 =null;


        Object string_literal380_tree=null;
        Object LPAREN382_tree=null;
        Object RPAREN384_tree=null;
        Object SEMI385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:683:15: ( 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:684:2: 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal380=cast(Token)match(input,152,FOLLOW_152_in_procedure_spec2258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal380_tree = 
            cast(Object)adaptor.create(string_literal380)
            ;
            adaptor.addChild(root_0, string_literal380_tree);
            }

            pushFollow(FOLLOW_procedure_name_in_procedure_spec2260);
            procedure_name381=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name381.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:685:2: ( LPAREN arguments RPAREN )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==LPAREN) ) {
                alt95=1;
            }
            switch (alt95) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:685:4: LPAREN arguments RPAREN
                   {
                   LPAREN382=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_spec2266); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN382_tree = 
                   cast(Object)adaptor.create(LPAREN382)
                   ;
                   adaptor.addChild(root_0, LPAREN382_tree);
                   }

                   pushFollow(FOLLOW_arguments_in_procedure_spec2268);
                   arguments383=arguments();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments383.getTree());

                   RPAREN384=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_spec2270); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN384_tree = 
                   cast(Object)adaptor.create(RPAREN384)
                   ;
                   adaptor.addChild(root_0, RPAREN384_tree);
                   }

                   }
                   break;

                default:
            }


            SEMI385=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_spec2275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI385_tree = 
            cast(Object)adaptor.create(SEMI385)
            ;
            adaptor.addChild(root_0, SEMI385_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","procedure_spec"," ",42);
            if ( state.backtracking>0 ) { memoize(input, 42, procedure_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_spec"


    public static class function_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:688:1: function_spec : 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI ;
    public final PLSQL3_2_DParser.function_spec_return function_spec()  {
        debug(trace_rules) writeln("Entering rule:","function_spec"," ",43);
        PLSQL3_2_DParser.function_spec_return retval = new PLSQL3_2_DParser.function_spec_return();
        retval.start = input.LT(1);

        int function_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal386=null;
        Token LPAREN388=null;
        Token RPAREN390=null;
        Token SEMI393=null;
        PLSQL3_2_DParser.function_name_return function_name387 =null;

        PLSQL3_2_DParser.arguments_return arguments389 =null;

        PLSQL3_2_DParser.keyRETURN_return keyRETURN391 =null;

        PLSQL3_2_DParser.return_type_return return_type392 =null;


        Object string_literal386_tree=null;
        Object LPAREN388_tree=null;
        Object RPAREN390_tree=null;
        Object SEMI393_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:689:2: ( 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:689:4: 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal386=cast(Token)match(input,107,FOLLOW_107_in_function_spec2286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = 
            cast(Object)adaptor.create(string_literal386)
            ;
            adaptor.addChild(root_0, string_literal386_tree);
            }

            pushFollow(FOLLOW_function_name_in_function_spec2288);
            function_name387=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name387.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:690:3: ( LPAREN arguments RPAREN )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:690:5: LPAREN arguments RPAREN
                   {
                   LPAREN388=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_spec2295); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN388_tree = 
                   cast(Object)adaptor.create(LPAREN388)
                   ;
                   adaptor.addChild(root_0, LPAREN388_tree);
                   }

                   pushFollow(FOLLOW_arguments_in_function_spec2297);
                   arguments389=arguments();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments389.getTree());

                   RPAREN390=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_spec2299); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN390_tree = 
                   cast(Object)adaptor.create(RPAREN390)
                   ;
                   adaptor.addChild(root_0, RPAREN390_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyRETURN_in_function_spec2306);
            keyRETURN391=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN391.getTree());

            pushFollow(FOLLOW_return_type_in_function_spec2308);
            return_type392=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type392.getTree());

            SEMI393=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_function_spec2310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI393_tree = 
            cast(Object)adaptor.create(SEMI393)
            ;
            adaptor.addChild(root_0, SEMI393_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_spec"," ",43);
            if ( state.backtracking>0 ) { memoize(input, 43, function_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_spec"


    public static class exception_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:694:1: exception_declaration : exception_name 'EXCEPTION' SEMI ;
    public final PLSQL3_2_DParser.exception_declaration_return exception_declaration()  {
        debug(trace_rules) writeln("Entering rule:","exception_declaration"," ",44);
        PLSQL3_2_DParser.exception_declaration_return retval = new PLSQL3_2_DParser.exception_declaration_return();
        retval.start = input.LT(1);

        int exception_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal395=null;
        Token SEMI396=null;
        PLSQL3_2_DParser.exception_name_return exception_name394 =null;


        Object string_literal395_tree=null;
        Object SEMI396_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:695:2: ( exception_name 'EXCEPTION' SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:695:4: exception_name 'EXCEPTION' SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_exception_name_in_exception_declaration2321);
            exception_name394=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name394.getTree());

            string_literal395=cast(Token)match(input,98,FOLLOW_98_in_exception_declaration2323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal395_tree = 
            cast(Object)adaptor.create(string_literal395)
            ;
            adaptor.addChild(root_0, string_literal395_tree);
            }

            SEMI396=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_exception_declaration2325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI396_tree = 
            cast(Object)adaptor.create(SEMI396)
            ;
            adaptor.addChild(root_0, SEMI396_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exception_declaration"," ",44);
            if ( state.backtracking>0 ) { memoize(input, 44, exception_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_declaration"


    public static class exception_names_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_names"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:698:1: exception_names : exception_name ( 'OR' exception_name )* ;
    public final PLSQL3_2_DParser.exception_names_return exception_names()  {
        debug(trace_rules) writeln("Entering rule:","exception_names"," ",45);
        PLSQL3_2_DParser.exception_names_return retval = new PLSQL3_2_DParser.exception_names_return();
        retval.start = input.LT(1);

        int exception_names_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal398=null;
        PLSQL3_2_DParser.exception_name_return exception_name397 =null;

        PLSQL3_2_DParser.exception_name_return exception_name399 =null;


        Object string_literal398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:699:2: ( exception_name ( 'OR' exception_name )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:699:4: exception_name ( 'OR' exception_name )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_exception_name_in_exception_names2336);
            exception_name397=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name397.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:699:19: ( 'OR' exception_name )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==144) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:699:21: 'OR' exception_name
            	    {
            	    string_literal398=cast(Token)match(input,144,FOLLOW_144_in_exception_names2340); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal398_tree = 
            	    cast(Object)adaptor.create(string_literal398)
            	    ;
            	    adaptor.addChild(root_0, string_literal398_tree);
            	    }

            	    pushFollow(FOLLOW_exception_name_in_exception_names2342);
            	    exception_name399=exception_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name399.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exception_names"," ",45);
            if ( state.backtracking>0 ) { memoize(input, 45, exception_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_names"


    public static class exception_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:702:1: exception_name : ( exception_package_name DOT )? identifier ;
    public final PLSQL3_2_DParser.exception_name_return exception_name()  {
        debug(trace_rules) writeln("Entering rule:","exception_name"," ",46);
        PLSQL3_2_DParser.exception_name_return retval = new PLSQL3_2_DParser.exception_name_return();
        retval.start = input.LT(1);

        int exception_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT401=null;
        PLSQL3_2_DParser.exception_package_name_return exception_package_name400 =null;

        PLSQL3_2_DParser.identifier_return identifier402 =null;


        Object DOT401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:703:2: ( ( exception_package_name DOT )? identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:703:4: ( exception_package_name DOT )? identifier
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:703:4: ( exception_package_name DOT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==DOUBLEQUOTED_STRING||LA98_0==ID) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==DOT) ) {
                    alt98=1;
                }
            }
            switch (alt98) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:703:6: exception_package_name DOT
                   {
                   pushFollow(FOLLOW_exception_package_name_in_exception_name2358);
                   exception_package_name400=exception_package_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_package_name400.getTree());

                   DOT401=cast(Token)match(input,DOT,FOLLOW_DOT_in_exception_name2360); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT401_tree = 
                   cast(Object)adaptor.create(DOT401)
                   ;
                   adaptor.addChild(root_0, DOT401_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_identifier_in_exception_name2365);
            identifier402=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier402.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exception_name"," ",46);
            if ( state.backtracking>0 ) { memoize(input, 46, exception_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_name"


    public static class exception_package_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_package_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:706:1: exception_package_name : identifier ;
    public final PLSQL3_2_DParser.exception_package_name_return exception_package_name()  {
        debug(trace_rules) writeln("Entering rule:","exception_package_name"," ",47);
        PLSQL3_2_DParser.exception_package_name_return retval = new PLSQL3_2_DParser.exception_package_name_return();
        retval.start = input.LT(1);

        int exception_package_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier403 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:707:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:707:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_exception_package_name2376);
            identifier403=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier403.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exception_package_name"," ",47);
            if ( state.backtracking>0 ) { memoize(input, 47, exception_package_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_package_name"


    public static class record_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:716:1: record_declaration : record_type_dec ;
    public final PLSQL3_2_DParser.record_declaration_return record_declaration()  {
        debug(trace_rules) writeln("Entering rule:","record_declaration"," ",48);
        PLSQL3_2_DParser.record_declaration_return retval = new PLSQL3_2_DParser.record_declaration_return();
        retval.start = input.LT(1);

        int record_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.record_type_dec_return record_type_dec404 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:717:2: ( record_type_dec )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:717:4: record_type_dec
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_record_type_dec_in_record_declaration2395);
            record_type_dec404=record_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_type_dec404.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","record_declaration"," ",48);
            if ( state.backtracking>0 ) { memoize(input, 48, record_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_declaration"


    public static class record_type_dec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_type_dec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:721:1: record_type_dec : keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI ;
    public final PLSQL3_2_DParser.record_type_dec_return record_type_dec()  {
        debug(trace_rules) writeln("Entering rule:","record_type_dec"," ",49);
        PLSQL3_2_DParser.record_type_dec_return retval = new PLSQL3_2_DParser.record_type_dec_return();
        retval.start = input.LT(1);

        int record_type_dec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal407=null;
        Token LPAREN409=null;
        Token RPAREN411=null;
        Token SEMI412=null;
        PLSQL3_2_DParser.keyTYPE_return keyTYPE405 =null;

        PLSQL3_2_DParser.type_name_return type_name406 =null;

        PLSQL3_2_DParser.keyRECORD_return keyRECORD408 =null;

        PLSQL3_2_DParser.field_specs_return field_specs410 =null;


        Object string_literal407_tree=null;
        Object LPAREN409_tree=null;
        Object RPAREN411_tree=null;
        Object SEMI412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:722:2: ( keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:722:4: keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_record_type_dec2408);
            keyTYPE405=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE405.getTree());

            pushFollow(FOLLOW_type_name_in_record_type_dec2410);
            type_name406=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name406.getTree());

            string_literal407=cast(Token)match(input,120,FOLLOW_120_in_record_type_dec2412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal407_tree = 
            cast(Object)adaptor.create(string_literal407)
            ;
            adaptor.addChild(root_0, string_literal407_tree);
            }

            pushFollow(FOLLOW_keyRECORD_in_record_type_dec2414);
            keyRECORD408=keyRECORD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRECORD408.getTree());

            LPAREN409=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_record_type_dec2419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN409_tree = 
            cast(Object)adaptor.create(LPAREN409)
            ;
            adaptor.addChild(root_0, LPAREN409_tree);
            }

            pushFollow(FOLLOW_field_specs_in_record_type_dec2421);
            field_specs410=field_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_specs410.getTree());

            RPAREN411=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_record_type_dec2423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN411_tree = 
            cast(Object)adaptor.create(RPAREN411)
            ;
            adaptor.addChild(root_0, RPAREN411_tree);
            }

            SEMI412=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_record_type_dec2425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI412_tree = 
            cast(Object)adaptor.create(SEMI412)
            ;
            adaptor.addChild(root_0, SEMI412_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","record_type_dec"," ",49);
            if ( state.backtracking>0 ) { memoize(input, 49, record_type_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_type_dec"


    public static class field_specs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_specs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:730:1: field_specs : field_spec ( COMMA field_spec )* ;
    public final PLSQL3_2_DParser.field_specs_return field_specs()  {
        debug(trace_rules) writeln("Entering rule:","field_specs"," ",50);
        PLSQL3_2_DParser.field_specs_return retval = new PLSQL3_2_DParser.field_specs_return();
        retval.start = input.LT(1);

        int field_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA414=null;
        PLSQL3_2_DParser.field_spec_return field_spec413 =null;

        PLSQL3_2_DParser.field_spec_return field_spec415 =null;


        Object COMMA414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:731:2: ( field_spec ( COMMA field_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:731:4: field_spec ( COMMA field_spec )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_field_spec_in_field_specs2440);
            field_spec413=field_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec413.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:731:15: ( COMMA field_spec )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:731:17: COMMA field_spec
            	    {
            	    COMMA414=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_field_specs2444); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA414_tree = 
            	    cast(Object)adaptor.create(COMMA414)
            	    ;
            	    adaptor.addChild(root_0, COMMA414_tree);
            	    }

            	    pushFollow(FOLLOW_field_spec_in_field_specs2446);
            	    field_spec415=field_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec415.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","field_specs"," ",50);
            if ( state.backtracking>0 ) { memoize(input, 50, field_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_specs"


    public static class field_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:733:1: field_spec : column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final PLSQL3_2_DParser.field_spec_return field_spec()  {
        debug(trace_rules) writeln("Entering rule:","field_spec"," ",51);
        PLSQL3_2_DParser.field_spec_return retval = new PLSQL3_2_DParser.field_spec_return();
        retval.start = input.LT(1);

        int field_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal418=null;
        Token string_literal419=null;
        Token set420=null;
        PLSQL3_2_DParser.column_name_return column_name416 =null;

        PLSQL3_2_DParser.type_spec_return type_spec417 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression421 =null;


        Object string_literal418_tree=null;
        Object string_literal419_tree=null;
        Object set420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:734:2: ( column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:734:4: column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_column_name_in_field_spec2459);
            column_name416=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name416.getTree());

            pushFollow(FOLLOW_type_spec_in_field_spec2461);
            type_spec417=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec417.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:735:3: ( 'NOT' 'NULL' )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==134) ) {
                alt100=1;
            }
            switch (alt100) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:735:4: 'NOT' 'NULL'
                   {
                   string_literal418=cast(Token)match(input,134,FOLLOW_134_in_field_spec2466); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal418_tree = 
                   cast(Object)adaptor.create(string_literal418)
                   ;
                   adaptor.addChild(root_0, string_literal418_tree);
                   }

                   string_literal419=cast(Token)match(input,136,FOLLOW_136_in_field_spec2468); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal419_tree = 
                   cast(Object)adaptor.create(string_literal419)
                   ;
                   adaptor.addChild(root_0, string_literal419_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:736:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==ASSIGN||LA101_0==90) ) {
                alt101=1;
            }
            switch (alt101) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:736:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                   {
                   set420=cast(Token)input.LT(1);

                   if ( input.LA(1)==ASSIGN||input.LA(1)==90 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set420)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   pushFollow(FOLLOW_plsql_expression_in_field_spec2487);
                   plsql_expression421=plsql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression421.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","field_spec"," ",51);
            if ( state.backtracking>0 ) { memoize(input, 51, field_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_spec"


    public static class plsql_table_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_table_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:739:1: plsql_table_declaration : table_type_dec ;
    public final PLSQL3_2_DParser.plsql_table_declaration_return plsql_table_declaration()  {
        debug(trace_rules) writeln("Entering rule:","plsql_table_declaration"," ",52);
        PLSQL3_2_DParser.plsql_table_declaration_return retval = new PLSQL3_2_DParser.plsql_table_declaration_return();
        retval.start = input.LT(1);

        int plsql_table_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.table_type_dec_return table_type_dec422 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:740:2: ( table_type_dec )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:740:4: table_type_dec
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_table_type_dec_in_plsql_table_declaration2500);
            table_type_dec422=table_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_type_dec422.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_table_declaration"," ",52);
            if ( state.backtracking>0 ) { memoize(input, 52, plsql_table_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_table_declaration"


    public static class table_type_dec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_type_dec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:744:1: table_type_dec : keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI ;
    public final PLSQL3_2_DParser.table_type_dec_return table_type_dec()  {
        debug(trace_rules) writeln("Entering rule:","table_type_dec"," ",53);
        PLSQL3_2_DParser.table_type_dec_return retval = new PLSQL3_2_DParser.table_type_dec_return();
        retval.start = input.LT(1);

        int table_type_dec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal425=null;
        Token string_literal426=null;
        Token string_literal427=null;
        Token string_literal429=null;
        Token string_literal430=null;
        Token string_literal431=null;
        Token string_literal432=null;
        Token string_literal433=null;
        Token string_literal434=null;
        Token string_literal435=null;
        Token LPAREN436=null;
        Token RPAREN438=null;
        Token SEMI439=null;
        PLSQL3_2_DParser.keyTYPE_return keyTYPE423 =null;

        PLSQL3_2_DParser.type_name_return type_name424 =null;

        PLSQL3_2_DParser.type_spec_return type_spec428 =null;

        PLSQL3_2_DParser.integer_return integer437 =null;


        Object string_literal425_tree=null;
        Object string_literal426_tree=null;
        Object string_literal427_tree=null;
        Object string_literal429_tree=null;
        Object string_literal430_tree=null;
        Object string_literal431_tree=null;
        Object string_literal432_tree=null;
        Object string_literal433_tree=null;
        Object string_literal434_tree=null;
        Object string_literal435_tree=null;
        Object LPAREN436_tree=null;
        Object RPAREN438_tree=null;
        Object SEMI439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:745:2: ( keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:745:4: keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_table_type_dec2512);
            keyTYPE423=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE423.getTree());

            pushFollow(FOLLOW_type_name_in_table_type_dec2514);
            type_name424=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name424.getTree());

            string_literal425=cast(Token)match(input,120,FOLLOW_120_in_table_type_dec2516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal425_tree = 
            cast(Object)adaptor.create(string_literal425)
            ;
            adaptor.addChild(root_0, string_literal425_tree);
            }

            string_literal426=cast(Token)match(input,171,FOLLOW_171_in_table_type_dec2518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = 
            cast(Object)adaptor.create(string_literal426)
            ;
            adaptor.addChild(root_0, string_literal426_tree);
            }

            string_literal427=cast(Token)match(input,142,FOLLOW_142_in_table_type_dec2523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal427_tree = 
            cast(Object)adaptor.create(string_literal427)
            ;
            adaptor.addChild(root_0, string_literal427_tree);
            }

            pushFollow(FOLLOW_type_spec_in_table_type_dec2525);
            type_spec428=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec428.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:746:18: ( 'NOT' 'NULL' )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==134) ) {
                alt102=1;
            }
            switch (alt102) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:746:20: 'NOT' 'NULL'
                   {
                   string_literal429=cast(Token)match(input,134,FOLLOW_134_in_table_type_dec2529); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal429_tree = 
                   cast(Object)adaptor.create(string_literal429)
                   ;
                   adaptor.addChild(root_0, string_literal429_tree);
                   }

                   string_literal430=cast(Token)match(input,136,FOLLOW_136_in_table_type_dec2531); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal430_tree = 
                   cast(Object)adaptor.create(string_literal430)
                   ;
                   adaptor.addChild(root_0, string_literal430_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:747:3: ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==114) ) {
                alt104=1;
            }
            switch (alt104) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:747:5: 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                   {
                   string_literal431=cast(Token)match(input,114,FOLLOW_114_in_table_type_dec2540); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal431_tree = 
                   cast(Object)adaptor.create(string_literal431)
                   ;
                   adaptor.addChild(root_0, string_literal431_tree);
                   }

                   string_literal432=cast(Token)match(input,75,FOLLOW_75_in_table_type_dec2542); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal432_tree = 
                   cast(Object)adaptor.create(string_literal432)
                   ;
                   adaptor.addChild(root_0, string_literal432_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:748:4: ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                   int alt103=3;
                   switch ( input.LA(1) ) {
                   case 72:
                       {
                       alt103=1;
                       }
                       break;
                   case 148:
                       {
                       alt103=2;
                       }
                       break;
                   case 181:
                       {
                       alt103=3;
                       }
                       break;
                   default:
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae = 
                           new NoViableAltException("", 103, 0, input);

                       throw nvae;

                   }

                   switch (alt103) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:748:6: 'BINARY_INTEGER'
                          {
                          string_literal433=cast(Token)match(input,72,FOLLOW_72_in_table_type_dec2550); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal433_tree = 
                          cast(Object)adaptor.create(string_literal433)
                          ;
                          adaptor.addChild(root_0, string_literal433_tree);
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:749:6: 'PLS_INTEGER'
                          {
                          string_literal434=cast(Token)match(input,148,FOLLOW_148_in_table_type_dec2557); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal434_tree = 
                          cast(Object)adaptor.create(string_literal434)
                          ;
                          adaptor.addChild(root_0, string_literal434_tree);
                          }

                          }
                          break;
                      case 3 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:750:6: 'VARCHAR2' LPAREN integer RPAREN
                          {
                          string_literal435=cast(Token)match(input,181,FOLLOW_181_in_table_type_dec2564); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal435_tree = 
                          cast(Object)adaptor.create(string_literal435)
                          ;
                          adaptor.addChild(root_0, string_literal435_tree);
                          }

                          LPAREN436=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_type_dec2566); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN436_tree = 
                          cast(Object)adaptor.create(LPAREN436)
                          ;
                          adaptor.addChild(root_0, LPAREN436_tree);
                          }

                          pushFollow(FOLLOW_integer_in_table_type_dec2568);
                          integer437=integer();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, integer437.getTree());

                          RPAREN438=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_type_dec2570); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN438_tree = 
                          cast(Object)adaptor.create(RPAREN438)
                          ;
                          adaptor.addChild(root_0, RPAREN438_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            SEMI439=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_table_type_dec2584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI439_tree = 
            cast(Object)adaptor.create(SEMI439)
            ;
            adaptor.addChild(root_0, SEMI439_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_type_dec"," ",53);
            if ( state.backtracking>0 ) { memoize(input, 53, table_type_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_type_dec"


    public static class table_var_dec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_var_dec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:756:1: table_var_dec : plsql_table_name type_name SEMI ;
    public final PLSQL3_2_DParser.table_var_dec_return table_var_dec()  {
        debug(trace_rules) writeln("Entering rule:","table_var_dec"," ",54);
        PLSQL3_2_DParser.table_var_dec_return retval = new PLSQL3_2_DParser.table_var_dec_return();
        retval.start = input.LT(1);

        int table_var_dec_StartIndex = input.index();

        Object root_0 = null;

        Token SEMI442=null;
        PLSQL3_2_DParser.plsql_table_name_return plsql_table_name440 =null;

        PLSQL3_2_DParser.type_name_return type_name441 =null;


        Object SEMI442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:757:2: ( plsql_table_name type_name SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:757:4: plsql_table_name type_name SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_table_name_in_table_var_dec2595);
            plsql_table_name440=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name440.getTree());

            pushFollow(FOLLOW_type_name_in_table_var_dec2597);
            type_name441=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name441.getTree());

            SEMI442=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_table_var_dec2599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI442_tree = 
            cast(Object)adaptor.create(SEMI442)
            ;
            adaptor.addChild(root_0, SEMI442_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_var_dec"," ",54);
            if ( state.backtracking>0 ) { memoize(input, 54, table_var_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_var_dec"


    public static class plsql_table_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_table_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:760:1: plsql_table_name : identifier ( DOT identifier )* ;
    public final PLSQL3_2_DParser.plsql_table_name_return plsql_table_name()  {
        debug(trace_rules) writeln("Entering rule:","plsql_table_name"," ",55);
        PLSQL3_2_DParser.plsql_table_name_return retval = new PLSQL3_2_DParser.plsql_table_name_return();
        retval.start = input.LT(1);

        int plsql_table_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT444=null;
        PLSQL3_2_DParser.identifier_return identifier443 =null;

        PLSQL3_2_DParser.identifier_return identifier445 =null;


        Object DOT444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:761:2: ( identifier ( DOT identifier )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:761:4: identifier ( DOT identifier )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_plsql_table_name2610);
            identifier443=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier443.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:761:15: ( DOT identifier )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==DOT) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:761:17: DOT identifier
            	    {
            	    DOT444=cast(Token)match(input,DOT,FOLLOW_DOT_in_plsql_table_name2614); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT444_tree = 
            	    cast(Object)adaptor.create(DOT444)
            	    ;
            	    adaptor.addChild(root_0, DOT444_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_plsql_table_name2616);
            	    identifier445=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier445.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_table_name"," ",55);
            if ( state.backtracking>0 ) { memoize(input, 55, plsql_table_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_table_name"


    public static class varray_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varray_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:764:1: varray_declaration : keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? ;
    public final PLSQL3_2_DParser.varray_declaration_return varray_declaration()  {
        debug(trace_rules) writeln("Entering rule:","varray_declaration"," ",56);
        PLSQL3_2_DParser.varray_declaration_return retval = new PLSQL3_2_DParser.varray_declaration_return();
        retval.start = input.LT(1);

        int varray_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal448=null;
        Token LPAREN452=null;
        Token RPAREN454=null;
        Token string_literal455=null;
        Token string_literal457=null;
        Token string_literal458=null;
        PLSQL3_2_DParser.keyTYPE_return keyTYPE446 =null;

        PLSQL3_2_DParser.type_name_return type_name447 =null;

        PLSQL3_2_DParser.keyVARRAY_return keyVARRAY449 =null;

        PLSQL3_2_DParser.keyVARYING_return keyVARYING450 =null;

        PLSQL3_2_DParser.keyARRAY_return keyARRAY451 =null;

        PLSQL3_2_DParser.integer_return integer453 =null;

        PLSQL3_2_DParser.type_spec_return type_spec456 =null;


        Object string_literal448_tree=null;
        Object LPAREN452_tree=null;
        Object RPAREN454_tree=null;
        Object string_literal455_tree=null;
        Object string_literal457_tree=null;
        Object string_literal458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:765:2: ( keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:765:4: keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_varray_declaration2630);
            keyTYPE446=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE446.getTree());

            pushFollow(FOLLOW_type_name_in_varray_declaration2632);
            type_name447=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name447.getTree());

            string_literal448=cast(Token)match(input,120,FOLLOW_120_in_varray_declaration2634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = 
            cast(Object)adaptor.create(string_literal448)
            ;
            adaptor.addChild(root_0, string_literal448_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:766:3: ( keyVARRAY | keyVARYING keyARRAY )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ID) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==LPAREN) ) {
                    alt106=1;
                }
                else if ( (LA106_1==ID) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }
            switch (alt106) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:766:5: keyVARRAY
                   {
                   pushFollow(FOLLOW_keyVARRAY_in_varray_declaration2641);
                   keyVARRAY449=keyVARRAY();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARRAY449.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:766:17: keyVARYING keyARRAY
                   {
                   pushFollow(FOLLOW_keyVARYING_in_varray_declaration2645);
                   keyVARYING450=keyVARYING();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING450.getTree());

                   pushFollow(FOLLOW_keyARRAY_in_varray_declaration2647);
                   keyARRAY451=keyARRAY();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyARRAY451.getTree());

                   }
                   break;

                default:
            }


            LPAREN452=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_varray_declaration2651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN452_tree = 
            cast(Object)adaptor.create(LPAREN452)
            ;
            adaptor.addChild(root_0, LPAREN452_tree);
            }

            pushFollow(FOLLOW_integer_in_varray_declaration2653);
            integer453=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer453.getTree());

            RPAREN454=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_varray_declaration2655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN454_tree = 
            cast(Object)adaptor.create(RPAREN454)
            ;
            adaptor.addChild(root_0, RPAREN454_tree);
            }

            string_literal455=cast(Token)match(input,142,FOLLOW_142_in_varray_declaration2659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal455_tree = 
            cast(Object)adaptor.create(string_literal455)
            ;
            adaptor.addChild(root_0, string_literal455_tree);
            }

            pushFollow(FOLLOW_type_spec_in_varray_declaration2661);
            type_spec456=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec456.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:767:18: ( 'NOT' 'NULL' )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==134) ) {
                alt107=1;
            }
            switch (alt107) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:767:20: 'NOT' 'NULL'
                   {
                   string_literal457=cast(Token)match(input,134,FOLLOW_134_in_varray_declaration2665); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal457_tree = 
                   cast(Object)adaptor.create(string_literal457)
                   ;
                   adaptor.addChild(root_0, string_literal457_tree);
                   }

                   string_literal458=cast(Token)match(input,136,FOLLOW_136_in_varray_declaration2667); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal458_tree = 
                   cast(Object)adaptor.create(string_literal458)
                   ;
                   adaptor.addChild(root_0, string_literal458_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","varray_declaration"," ",56);
            if ( state.backtracking>0 ) { memoize(input, 56, varray_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varray_declaration"


    public static class procedure_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:770:1: procedure_declaration : procedure_body ;
    public final PLSQL3_2_DParser.procedure_declaration_return procedure_declaration()  {
        debug(trace_rules) writeln("Entering rule:","procedure_declaration"," ",57);
        PLSQL3_2_DParser.procedure_declaration_return retval = new PLSQL3_2_DParser.procedure_declaration_return();
        retval.start = input.LT(1);

        int procedure_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.procedure_body_return procedure_body459 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:771:2: ( procedure_body )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:771:4: procedure_body
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_procedure_body_in_procedure_declaration2681);
            procedure_body459=procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body459.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","procedure_declaration"," ",57);
            if ( state.backtracking>0 ) { memoize(input, 57, procedure_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"


    public static class procedure_body_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_body"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:774:1: procedure_body : ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI ;
    public final PLSQL3_2_DParser.procedure_body_return procedure_body()  {
        debug(trace_rules) writeln("Entering rule:","procedure_body"," ",58);
        PLSQL3_2_DParser.procedure_body_return retval = new PLSQL3_2_DParser.procedure_body_return();
        retval.start = input.LT(1);

        int procedure_body_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal461=null;
        Token LPAREN463=null;
        Token COMMA465=null;
        Token RPAREN467=null;
        Token set468=null;
        Token string_literal470=null;
        Token string_literal472=null;
        Token string_literal474=null;
        Token SEMI476=null;
        PLSQL3_2_DParser.proc_fun_start_return proc_fun_start460 =null;

        PLSQL3_2_DParser.procedure_name_return procedure_name462 =null;

        PLSQL3_2_DParser.argument_return argument464 =null;

        PLSQL3_2_DParser.argument_return argument466 =null;

        PLSQL3_2_DParser.declare_spec_return declare_spec469 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements471 =null;

        PLSQL3_2_DParser.exception_handler_return exception_handler473 =null;

        PLSQL3_2_DParser.procedure_name_return procedure_name475 =null;


        Object string_literal461_tree=null;
        Object LPAREN463_tree=null;
        Object COMMA465_tree=null;
        Object RPAREN467_tree=null;
        Object set468_tree=null;
        Object string_literal470_tree=null;
        Object string_literal472_tree=null;
        Object string_literal474_tree=null;
        Object SEMI476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:775:2: ( ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:775:4: ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:775:4: ( proc_fun_start )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==84) ) {
                alt108=1;
            }
            switch (alt108) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:775:6: proc_fun_start
                   {
                   pushFollow(FOLLOW_proc_fun_start_in_procedure_body2694);
                   proc_fun_start460=proc_fun_start();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start460.getTree());

                   }
                   break;

                default:
            }


            string_literal461=cast(Token)match(input,152,FOLLOW_152_in_procedure_body2699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = 
            cast(Object)adaptor.create(string_literal461)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(string_literal461_tree, root_0);
            }

            pushFollow(FOLLOW_procedure_name_in_procedure_body2702);
            procedure_name462=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name462.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:776:3: ( LPAREN argument ( COMMA argument )* RPAREN )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==LPAREN) ) {
                alt110=1;
            }
            switch (alt110) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:776:5: LPAREN argument ( COMMA argument )* RPAREN
                   {
                   LPAREN463=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_body2709); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN463_tree = 
                   cast(Object)adaptor.create(LPAREN463)
                   ;
                   adaptor.addChild(root_0, LPAREN463_tree);
                   }

                   pushFollow(FOLLOW_argument_in_procedure_body2711);
                   argument464=argument();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, argument464.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:776:21: ( COMMA argument )*
                   loop109:
                   do {
                       int alt109=2;
                       int LA109_0 = input.LA(1);

                       if ( (LA109_0==COMMA) ) {
                           alt109=1;
                       }


                       switch (alt109) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:776:23: COMMA argument
                   	    {
                   	    COMMA465=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_procedure_body2715); if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) {
                   	    COMMA465_tree = 
                   	    cast(Object)adaptor.create(COMMA465)
                   	    ;
                   	    adaptor.addChild(root_0, COMMA465_tree);
                   	    }

                   	    pushFollow(FOLLOW_argument_in_procedure_body2717);
                   	    argument466=argument();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument466.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop109;
                       }
                   } while (true);


                   RPAREN467=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_body2722); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN467_tree = 
                   cast(Object)adaptor.create(RPAREN467)
                   ;
                   adaptor.addChild(root_0, RPAREN467_tree);
                   }

                   }
                   break;

                default:
            }


            set468=cast(Token)input.LT(1);

            if ( input.LA(1)==64||input.LA(1)==120 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set468)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:779:3: ( ( declare_spec )=> ( declare_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:779:5: ( declare_spec )=> ( declare_spec )*
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:779:25: ( declare_spec )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==DOUBLEQUOTED_STRING||LA111_0==ID||LA111_0==84||LA111_0==107||LA111_0==150||LA111_0==152) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:779:27: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_procedure_body2757);
            	    declare_spec469=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec469.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:780:3: ( 'BEGIN' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:780:5: 'BEGIN'
            {
            string_literal470=cast(Token)match(input,67,FOLLOW_67_in_procedure_body2768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = 
            cast(Object)adaptor.create(string_literal470)
            ;
            adaptor.addChild(root_0, string_literal470_tree);
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:781:3: ( seq_of_statements )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:781:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_procedure_body2776);
            seq_of_statements471=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements471.getTree());

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:782:3: ( 'EXCEPTION' ( exception_handler )* )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==98) ) {
                alt113=1;
            }
            switch (alt113) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:782:5: 'EXCEPTION' ( exception_handler )*
                   {
                   string_literal472=cast(Token)match(input,98,FOLLOW_98_in_procedure_body2784); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal472_tree = 
                   cast(Object)adaptor.create(string_literal472)
                   ;
                   adaptor.addChild(root_0, string_literal472_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:782:17: ( exception_handler )*
                   loop112:
                   do {
                       int alt112=2;
                       int LA112_0 = input.LA(1);

                       if ( (LA112_0==182) ) {
                           alt112=1;
                       }


                       switch (alt112) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:782:19: exception_handler
                   	    {
                   	    pushFollow(FOLLOW_exception_handler_in_procedure_body2788);
                   	    exception_handler473=exception_handler();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler473.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop112;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            string_literal474=cast(Token)match(input,97,FOLLOW_97_in_procedure_body2798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = 
            cast(Object)adaptor.create(string_literal474)
            ;
            adaptor.addChild(root_0, string_literal474_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:783:9: ( procedure_name )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DOUBLEQUOTED_STRING||LA114_0==ID||LA114_0==QUOTED_STRING) ) {
                alt114=1;
            }
            switch (alt114) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:783:11: procedure_name
                   {
                   pushFollow(FOLLOW_procedure_name_in_procedure_body2802);
                   procedure_name475=procedure_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name475.getTree());

                   }
                   break;

                default:
            }


            SEMI476=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_body2807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI476_tree = 
            cast(Object)adaptor.create(SEMI476)
            ;
            adaptor.addChild(root_0, SEMI476_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","procedure_body"," ",58);
            if ( state.backtracking>0 ) { memoize(input, 58, procedure_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_body"


    public static class begin_block_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "begin_block"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:786:1: begin_block : 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ;
    public final PLSQL3_2_DParser.begin_block_return begin_block()  {
        debug(trace_rules) writeln("Entering rule:","begin_block"," ",59);
        PLSQL3_2_DParser.begin_block_return retval = new PLSQL3_2_DParser.begin_block_return();
        retval.start = input.LT(1);

        int begin_block_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal477=null;
        Token string_literal479=null;
        Token string_literal481=null;
        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements478 =null;

        PLSQL3_2_DParser.exception_handler_return exception_handler480 =null;


        Object string_literal477_tree=null;
        Object string_literal479_tree=null;
        Object string_literal481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:787:2: ( 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:787:4: 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal477=cast(Token)match(input,67,FOLLOW_67_in_begin_block2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = 
            cast(Object)adaptor.create(string_literal477)
            ;
            adaptor.addChild(root_0, string_literal477_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:788:3: ( seq_of_statements )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:788:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_begin_block2824);
            seq_of_statements478=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements478.getTree());

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:789:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==98) ) {
                alt116=1;
            }
            switch (alt116) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:789:5: 'EXCEPTION' ( exception_handler )+
                   {
                   string_literal479=cast(Token)match(input,98,FOLLOW_98_in_begin_block2832); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal479_tree = 
                   cast(Object)adaptor.create(string_literal479)
                   ;
                   adaptor.addChild(root_0, string_literal479_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:789:17: ( exception_handler )+
                   int cnt115=0;
                   loop115:
                   do {
                       int alt115=2;
                       int LA115_0 = input.LA(1);

                       if ( (LA115_0==182) ) {
                           alt115=1;
                       }


                       switch (alt115) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:789:19: exception_handler
                   	    {
                   	    pushFollow(FOLLOW_exception_handler_in_begin_block2836);
                   	    exception_handler480=exception_handler();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler480.getTree());

                   	    }
                   	    break;

                   	default :
                   	    if ( cnt115 >= 1 ) break loop115;
                   	    if (state.backtracking>0) {state.failed=true; return retval;}
                               EarlyExitException eee =
                                   new EarlyExitException(115, input);
                               throw eee;
                       }
                       cnt115++;
                   } while (true);


                   }
                   break;

                default:
            }


            string_literal481=cast(Token)match(input,97,FOLLOW_97_in_begin_block2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal481_tree = 
            cast(Object)adaptor.create(string_literal481)
            ;
            adaptor.addChild(root_0, string_literal481_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","begin_block"," ",59);
            if ( state.backtracking>0 ) { memoize(input, 59, begin_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "begin_block"


    public static class exception_handler_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_handler"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:794:1: exception_handler : 'WHEN' exception_names 'THEN' seq_of_statements ;
    public final PLSQL3_2_DParser.exception_handler_return exception_handler()  {
        debug(trace_rules) writeln("Entering rule:","exception_handler"," ",60);
        PLSQL3_2_DParser.exception_handler_return retval = new PLSQL3_2_DParser.exception_handler_return();
        retval.start = input.LT(1);

        int exception_handler_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal482=null;
        Token string_literal484=null;
        PLSQL3_2_DParser.exception_names_return exception_names483 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements485 =null;


        Object string_literal482_tree=null;
        Object string_literal484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:795:2: ( 'WHEN' exception_names 'THEN' seq_of_statements )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:795:4: 'WHEN' exception_names 'THEN' seq_of_statements
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal482=cast(Token)match(input,182,FOLLOW_182_in_exception_handler2858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = 
            cast(Object)adaptor.create(string_literal482)
            ;
            adaptor.addChild(root_0, string_literal482_tree);
            }

            pushFollow(FOLLOW_exception_names_in_exception_handler2860);
            exception_names483=exception_names();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_names483.getTree());

            string_literal484=cast(Token)match(input,172,FOLLOW_172_in_exception_handler2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = 
            cast(Object)adaptor.create(string_literal484)
            ;
            adaptor.addChild(root_0, string_literal484_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_exception_handler2866);
            seq_of_statements485=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements485.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exception_handler"," ",60);
            if ( state.backtracking>0 ) { memoize(input, 60, exception_handler_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_handler"


    public static class proc_fun_start_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "proc_fun_start"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:799:1: proc_fun_start : 'CREATE' ( 'OR' keyREPLACE )? ;
    public final PLSQL3_2_DParser.proc_fun_start_return proc_fun_start()  {
        debug(trace_rules) writeln("Entering rule:","proc_fun_start"," ",61);
        PLSQL3_2_DParser.proc_fun_start_return retval = new PLSQL3_2_DParser.proc_fun_start_return();
        retval.start = input.LT(1);

        int proc_fun_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal486=null;
        Token string_literal487=null;
        PLSQL3_2_DParser.keyREPLACE_return keyREPLACE488 =null;


        Object string_literal486_tree=null;
        Object string_literal487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:800:2: ( 'CREATE' ( 'OR' keyREPLACE )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:800:4: 'CREATE' ( 'OR' keyREPLACE )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal486=cast(Token)match(input,84,FOLLOW_84_in_proc_fun_start2877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = 
            cast(Object)adaptor.create(string_literal486)
            ;
            adaptor.addChild(root_0, string_literal486_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:800:13: ( 'OR' keyREPLACE )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==144) ) {
                alt117=1;
            }
            switch (alt117) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:800:15: 'OR' keyREPLACE
                   {
                   string_literal487=cast(Token)match(input,144,FOLLOW_144_in_proc_fun_start2881); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal487_tree = 
                   cast(Object)adaptor.create(string_literal487)
                   ;
                   adaptor.addChild(root_0, string_literal487_tree);
                   }

                   pushFollow(FOLLOW_keyREPLACE_in_proc_fun_start2883);
                   keyREPLACE488=keyREPLACE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE488.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","proc_fun_start"," ",61);
            if ( state.backtracking>0 ) { memoize(input, 61, proc_fun_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "proc_fun_start"


    public static class function_body_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_body"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:803:1: function_body : ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI ;
    public final PLSQL3_2_DParser.function_body_return function_body()  {
        debug(trace_rules) writeln("Entering rule:","function_body"," ",62);
        PLSQL3_2_DParser.function_body_return retval = new PLSQL3_2_DParser.function_body_return();
        retval.start = input.LT(1);

        int function_body_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal490=null;
        Token LPAREN492=null;
        Token RPAREN494=null;
        Token set497=null;
        Token string_literal499=null;
        Token string_literal501=null;
        Token string_literal503=null;
        Token SEMI505=null;
        PLSQL3_2_DParser.proc_fun_start_return proc_fun_start489 =null;

        PLSQL3_2_DParser.function_name_return function_name491 =null;

        PLSQL3_2_DParser.arguments_return arguments493 =null;

        PLSQL3_2_DParser.keyRETURN_return keyRETURN495 =null;

        PLSQL3_2_DParser.return_type_return return_type496 =null;

        PLSQL3_2_DParser.declare_spec_return declare_spec498 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements500 =null;

        PLSQL3_2_DParser.exception_handler_return exception_handler502 =null;

        PLSQL3_2_DParser.function_name_return function_name504 =null;


        Object string_literal490_tree=null;
        Object LPAREN492_tree=null;
        Object RPAREN494_tree=null;
        Object set497_tree=null;
        Object string_literal499_tree=null;
        Object string_literal501_tree=null;
        Object string_literal503_tree=null;
        Object SEMI505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:804:2: ( ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:804:4: ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:804:4: ( proc_fun_start )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==84) ) {
                alt118=1;
            }
            switch (alt118) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:804:6: proc_fun_start
                   {
                   pushFollow(FOLLOW_proc_fun_start_in_function_body2899);
                   proc_fun_start489=proc_fun_start();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start489.getTree());

                   }
                   break;

                default:
            }


            string_literal490=cast(Token)match(input,107,FOLLOW_107_in_function_body2904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = 
            cast(Object)adaptor.create(string_literal490)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(string_literal490_tree, root_0);
            }

            pushFollow(FOLLOW_function_name_in_function_body2907);
            function_name491=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name491.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:805:3: ( LPAREN arguments RPAREN )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==LPAREN) ) {
                alt119=1;
            }
            switch (alt119) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:805:5: LPAREN arguments RPAREN
                   {
                   LPAREN492=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_body2914); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN492_tree = 
                   cast(Object)adaptor.create(LPAREN492)
                   ;
                   adaptor.addChild(root_0, LPAREN492_tree);
                   }

                   pushFollow(FOLLOW_arguments_in_function_body2916);
                   arguments493=arguments();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments493.getTree());

                   RPAREN494=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_body2918); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN494_tree = 
                   cast(Object)adaptor.create(RPAREN494)
                   ;
                   adaptor.addChild(root_0, RPAREN494_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyRETURN_in_function_body2926);
            keyRETURN495=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN495.getTree());

            pushFollow(FOLLOW_return_type_in_function_body2928);
            return_type496=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type496.getTree());

            set497=cast(Token)input.LT(1);

            if ( input.LA(1)==64||input.LA(1)==120 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set497)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:808:3: ( ( declare_spec )=> ( declare_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:808:5: ( declare_spec )=> ( declare_spec )*
            {
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:808:25: ( declare_spec )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==DOUBLEQUOTED_STRING||LA120_0==ID||LA120_0==84||LA120_0==107||LA120_0==150||LA120_0==152) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:808:27: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_function_body2957);
            	    declare_spec498=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec498.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:809:3: ( 'BEGIN' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:809:5: 'BEGIN'
            {
            string_literal499=cast(Token)match(input,67,FOLLOW_67_in_function_body2968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal499_tree = 
            cast(Object)adaptor.create(string_literal499)
            ;
            adaptor.addChild(root_0, string_literal499_tree);
            }

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:810:3: ( seq_of_statements )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:810:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_function_body2976);
            seq_of_statements500=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements500.getTree());

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:811:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==98) ) {
                alt122=1;
            }
            switch (alt122) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:811:5: 'EXCEPTION' ( exception_handler )+
                   {
                   string_literal501=cast(Token)match(input,98,FOLLOW_98_in_function_body2984); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal501_tree = 
                   cast(Object)adaptor.create(string_literal501)
                   ;
                   adaptor.addChild(root_0, string_literal501_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:811:17: ( exception_handler )+
                   int cnt121=0;
                   loop121:
                   do {
                       int alt121=2;
                       int LA121_0 = input.LA(1);

                       if ( (LA121_0==182) ) {
                           alt121=1;
                       }


                       switch (alt121) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:811:19: exception_handler
                   	    {
                   	    pushFollow(FOLLOW_exception_handler_in_function_body2988);
                   	    exception_handler502=exception_handler();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler502.getTree());

                   	    }
                   	    break;

                   	default :
                   	    if ( cnt121 >= 1 ) break loop121;
                   	    if (state.backtracking>0) {state.failed=true; return retval;}
                               EarlyExitException eee =
                                   new EarlyExitException(121, input);
                               throw eee;
                       }
                       cnt121++;
                   } while (true);


                   }
                   break;

                default:
            }


            string_literal503=cast(Token)match(input,97,FOLLOW_97_in_function_body2998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal503_tree = 
            cast(Object)adaptor.create(string_literal503)
            ;
            adaptor.addChild(root_0, string_literal503_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:812:9: ( function_name )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==DOUBLEQUOTED_STRING||LA123_0==ID||LA123_0==QUOTED_STRING) ) {
                alt123=1;
            }
            switch (alt123) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:812:11: function_name
                   {
                   pushFollow(FOLLOW_function_name_in_function_body3002);
                   function_name504=function_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name504.getTree());

                   }
                   break;

                default:
            }


            SEMI505=cast(Token)match(input,SEMI,FOLLOW_SEMI_in_function_body3007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI505_tree = 
            cast(Object)adaptor.create(SEMI505)
            ;
            adaptor.addChild(root_0, SEMI505_tree);
            }

            if ( state.backtracking==0 ) { /*ANTLR3_FPRINTF(stderr,"%s",function_name.text);*/}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_body"," ",62);
            if ( state.backtracking>0 ) { memoize(input, 62, function_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_body"


    public static class function_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:815:1: function_name : ( identifier | QUOTED_STRING );
    public final PLSQL3_2_DParser.function_name_return function_name()  {
        debug(trace_rules) writeln("Entering rule:","function_name"," ",63);
        PLSQL3_2_DParser.function_name_return retval = new PLSQL3_2_DParser.function_name_return();
        retval.start = input.LT(1);

        int function_name_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING507=null;
        PLSQL3_2_DParser.identifier_return identifier506 =null;


        Object QUOTED_STRING507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:816:2: ( identifier | QUOTED_STRING )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==DOUBLEQUOTED_STRING||LA124_0==ID) ) {
                alt124=1;
            }
            else if ( (LA124_0==QUOTED_STRING) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:816:4: identifier
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_function_name3020);
                    identifier506=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier506.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:816:17: QUOTED_STRING
                    {
                    root_0 = cast(Object)adaptor.nil();


                    QUOTED_STRING507=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_function_name3024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING507_tree = 
                    cast(Object)adaptor.create(QUOTED_STRING507)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING507_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_name"," ",63);
            if ( state.backtracking>0 ) { memoize(input, 63, function_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_name"


    public static class procedure_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:819:1: procedure_name : ( identifier | QUOTED_STRING );
    public final PLSQL3_2_DParser.procedure_name_return procedure_name()  {
        debug(trace_rules) writeln("Entering rule:","procedure_name"," ",64);
        PLSQL3_2_DParser.procedure_name_return retval = new PLSQL3_2_DParser.procedure_name_return();
        retval.start = input.LT(1);

        int procedure_name_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING509=null;
        PLSQL3_2_DParser.identifier_return identifier508 =null;


        Object QUOTED_STRING509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:820:2: ( identifier | QUOTED_STRING )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==DOUBLEQUOTED_STRING||LA125_0==ID) ) {
                alt125=1;
            }
            else if ( (LA125_0==QUOTED_STRING) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:820:4: identifier
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_procedure_name3036);
                    identifier508=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier508.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:820:17: QUOTED_STRING
                    {
                    root_0 = cast(Object)adaptor.nil();


                    QUOTED_STRING509=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_procedure_name3040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING509_tree = 
                    cast(Object)adaptor.create(QUOTED_STRING509)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING509_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","procedure_name"," ",64);
            if ( state.backtracking>0 ) { memoize(input, 64, procedure_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_name"


    public static class arguments_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arguments"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:823:1: arguments : argument ( COMMA argument )* ;
    public final PLSQL3_2_DParser.arguments_return arguments()  {
        debug(trace_rules) writeln("Entering rule:","arguments"," ",65);
        PLSQL3_2_DParser.arguments_return retval = new PLSQL3_2_DParser.arguments_return();
        retval.start = input.LT(1);

        int arguments_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA511=null;
        PLSQL3_2_DParser.argument_return argument510 =null;

        PLSQL3_2_DParser.argument_return argument512 =null;


        Object COMMA511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:824:2: ( argument ( COMMA argument )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:824:4: argument ( COMMA argument )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_argument_in_arguments3052);
            argument510=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument510.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:824:13: ( COMMA argument )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:824:15: COMMA argument
            	    {
            	    COMMA511=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments3056); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA511_tree = 
            	    cast(Object)adaptor.create(COMMA511)
            	    ;
            	    adaptor.addChild(root_0, COMMA511_tree);
            	    }

            	    pushFollow(FOLLOW_argument_in_arguments3058);
            	    argument512=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument512.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","arguments"," ",65);
            if ( state.backtracking>0 ) { memoize(input, 65, arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arguments"


    public static class argument_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:827:1: argument : argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final PLSQL3_2_DParser.argument_return argument()  {
        debug(trace_rules) writeln("Entering rule:","argument"," ",66);
        PLSQL3_2_DParser.argument_return retval = new PLSQL3_2_DParser.argument_return();
        retval.start = input.LT(1);

        int argument_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal515=null;
        Token string_literal517=null;
        Token set519=null;
        PLSQL3_2_DParser.argument_name_return argument_name513 =null;

        PLSQL3_2_DParser.keyOUT_return keyOUT514 =null;

        PLSQL3_2_DParser.keyOUT_return keyOUT516 =null;

        PLSQL3_2_DParser.argument_type_return argument_type518 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression520 =null;


        Object string_literal515_tree=null;
        Object string_literal517_tree=null;
        Object set519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:2: ( argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:4: argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_argument_name_in_argument3072);
            argument_name513=argument_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name513.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:18: ( keyOUT | 'IN' keyOUT | 'IN' )?
            int alt127=4;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==146) ) {
                alt127=1;
            }
            else if ( (LA127_0==113) ) {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==146) ) {
                    alt127=2;
                }
                else if ( (LA127_2==EOF||LA127_2==ASSIGN||LA127_2==COMMA||LA127_2==DOUBLEQUOTED_STRING||LA127_2==ID||LA127_2==RPAREN||(LA127_2 >=69  && LA127_2<=74)||(LA127_2 >=77  && LA127_2<=79)||(LA127_2 >=85  && LA127_2<=87)||LA127_2==90||LA127_2==94||LA127_2==103||(LA127_2 >=116  && LA127_2<=117)||LA127_2==123||LA127_2==126||(LA127_2 >=128  && LA127_2<=131)||(LA127_2 >=138  && LA127_2<=141)||(LA127_2 >=148  && LA127_2<=149)||(LA127_2 >=155  && LA127_2<=156)||LA127_2==162||LA127_2==168||LA127_2==178||(LA127_2 >=180  && LA127_2<=181)) ) {
                    alt127=3;
                }
            }
            switch (alt127) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:20: keyOUT
                   {
                   pushFollow(FOLLOW_keyOUT_in_argument3076);
                   keyOUT514=keyOUT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT514.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:29: 'IN' keyOUT
                   {
                   string_literal515=cast(Token)match(input,113,FOLLOW_113_in_argument3080); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal515_tree = 
                   cast(Object)adaptor.create(string_literal515)
                   ;
                   adaptor.addChild(root_0, string_literal515_tree);
                   }

                   pushFollow(FOLLOW_keyOUT_in_argument3082);
                   keyOUT516=keyOUT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT516.getTree());

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:43: 'IN'
                   {
                   string_literal517=cast(Token)match(input,113,FOLLOW_113_in_argument3086); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal517_tree = 
                   cast(Object)adaptor.create(string_literal517)
                   ;
                   adaptor.addChild(root_0, string_literal517_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:51: ( argument_type )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==DOUBLEQUOTED_STRING||LA128_0==ID||(LA128_0 >=69  && LA128_0<=74)||(LA128_0 >=77  && LA128_0<=79)||(LA128_0 >=85  && LA128_0<=87)||LA128_0==94||LA128_0==103||(LA128_0 >=116  && LA128_0<=117)||LA128_0==123||LA128_0==126||(LA128_0 >=128  && LA128_0<=131)||(LA128_0 >=138  && LA128_0<=141)||(LA128_0 >=148  && LA128_0<=149)||(LA128_0 >=155  && LA128_0<=156)||LA128_0==162||LA128_0==168||LA128_0==178||(LA128_0 >=180  && LA128_0<=181)) ) {
                alt128=1;
            }
            switch (alt128) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:828:52: argument_type
                   {
                   pushFollow(FOLLOW_argument_type_in_argument3092);
                   argument_type518=argument_type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_type518.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:829:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ASSIGN||LA129_0==90) ) {
                alt129=1;
            }
            switch (alt129) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:829:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                   {
                   set519=cast(Token)input.LT(1);

                   if ( input.LA(1)==ASSIGN||input.LA(1)==90 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set519)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   pushFollow(FOLLOW_plsql_expression_in_argument3111);
                   plsql_expression520=plsql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression520.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","argument"," ",66);
            if ( state.backtracking>0 ) { memoize(input, 66, argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:832:1: argument_name : identifier ;
    public final PLSQL3_2_DParser.argument_name_return argument_name()  {
        debug(trace_rules) writeln("Entering rule:","argument_name"," ",67);
        PLSQL3_2_DParser.argument_name_return retval = new PLSQL3_2_DParser.argument_name_return();
        retval.start = input.LT(1);

        int argument_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier521 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:833:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:833:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_argument_name3125);
            identifier521=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier521.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","argument_name"," ",67);
            if ( state.backtracking>0 ) { memoize(input, 67, argument_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_type_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_type"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:836:1: argument_type : type_spec ;
    public final PLSQL3_2_DParser.argument_type_return argument_type()  {
        debug(trace_rules) writeln("Entering rule:","argument_type"," ",68);
        PLSQL3_2_DParser.argument_type_return retval = new PLSQL3_2_DParser.argument_type_return();
        retval.start = input.LT(1);

        int argument_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.type_spec_return type_spec522 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:837:2: ( type_spec )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:837:4: type_spec
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_type_spec_in_argument_type3136);
            type_spec522=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec522.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","argument_type"," ",68);
            if ( state.backtracking>0 ) { memoize(input, 68, argument_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_type"


    public static class value_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:840:1: value : ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' );
    public final PLSQL3_2_DParser.value_return value()  {
        debug(trace_rules) writeln("Entering rule:","value"," ",69);
        PLSQL3_2_DParser.value_return retval = new PLSQL3_2_DParser.value_return();
        retval.start = input.LT(1);

        int value_StartIndex = input.index();

        Object root_0 = null;

        Token set523=null;
        Token NUMBER524=null;
        Token string_literal526=null;
        Token string_literal527=null;
        Token string_literal528=null;
        PLSQL3_2_DParser.quoted_string_return quoted_string525 =null;


        Object set523_tree=null;
        Object NUMBER524_tree=null;
        Object string_literal526_tree=null;
        Object string_literal527_tree=null;
        Object string_literal528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:841:2: ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' )
            int alt131=5;
            switch ( input.LA(1) ) {
            case MINUS:
            case NUMBER:
            case PLUS:
                {
                alt131=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt131=2;
                }
                break;
            case 174:
                {
                alt131=3;
                }
                break;
            case 101:
                {
                alt131=4;
                }
                break;
            case 136:
                {
                alt131=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:841:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:841:4: ( PLUS | MINUS )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==MINUS||LA130_0==PLUS) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                           {
                           set523=cast(Token)input.LT(1);

                           if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                               input.consume();
                               debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                               if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                               cast(Object)adaptor.create(set523)
                               );
                               state.errorRecovery=false;
                               state.failed=false;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               MismatchedSetException mse = new MismatchedSetException(null,input);
                               throw mse;
                           }


                           }
                           break;

                        default:
                    }


                    NUMBER524=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value3158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER524_tree = 
                    cast(Object)adaptor.create(NUMBER524)
                    ;
                    adaptor.addChild(root_0, NUMBER524_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:842:4: quoted_string
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_quoted_string_in_value3163);
                    quoted_string525=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string525.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:843:4: 'TRUE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal526=cast(Token)match(input,174,FOLLOW_174_in_value3168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal526_tree = 
                    cast(Object)adaptor.create(string_literal526)
                    ;
                    adaptor.addChild(root_0, string_literal526_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:843:13: 'FALSE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal527=cast(Token)match(input,101,FOLLOW_101_in_value3172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal527_tree = 
                    cast(Object)adaptor.create(string_literal527)
                    ;
                    adaptor.addChild(root_0, string_literal527_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:844:4: 'NULL'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal528=cast(Token)match(input,136,FOLLOW_136_in_value3177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal528_tree = 
                    cast(Object)adaptor.create(string_literal528)
                    ;
                    adaptor.addChild(root_0, string_literal528_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","value"," ",69);
            if ( state.backtracking>0 ) { memoize(input, 69, value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "value"


    public static class return_type_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_type"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:847:1: return_type : type_spec ;
    public final PLSQL3_2_DParser.return_type_return return_type()  {
        debug(trace_rules) writeln("Entering rule:","return_type"," ",70);
        PLSQL3_2_DParser.return_type_return retval = new PLSQL3_2_DParser.return_type_return();
        retval.start = input.LT(1);

        int return_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.type_spec_return type_spec529 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:848:2: ( type_spec )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:848:4: type_spec
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_type_spec_in_return_type3188);
            type_spec529=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec529.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","return_type"," ",70);
            if ( state.backtracking>0 ) { memoize(input, 70, return_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class function_declaration_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_declaration"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:851:1: function_declaration : function_body ;
    public final PLSQL3_2_DParser.function_declaration_return function_declaration()  {
        debug(trace_rules) writeln("Entering rule:","function_declaration"," ",71);
        PLSQL3_2_DParser.function_declaration_return retval = new PLSQL3_2_DParser.function_declaration_return();
        retval.start = input.LT(1);

        int function_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.function_body_return function_body530 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:852:2: ( function_body )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:852:4: function_body
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_function_body_in_function_declaration3199);
            function_body530=function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body530.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_declaration"," ",71);
            if ( state.backtracking>0 ) { memoize(input, 71, function_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_declaration"


    public static class function_call_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_call"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:855:1: function_call : user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? ;
    public final PLSQL3_2_DParser.function_call_return function_call()  {
        debug(trace_rules) writeln("Entering rule:","function_call"," ",72);
        PLSQL3_2_DParser.function_call_return retval = new PLSQL3_2_DParser.function_call_return();
        retval.start = input.LT(1);

        int function_call_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN532=null;
        Token RPAREN534=null;
        PLSQL3_2_DParser.user_defined_function_return user_defined_function531 =null;

        PLSQL3_2_DParser.call_parameters_return call_parameters533 =null;


        Object LPAREN532_tree=null;
        Object RPAREN534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:2: ( user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:4: user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_user_defined_function_in_function_call3210);
            user_defined_function531=user_defined_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, user_defined_function531.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:26: ({...}? LPAREN ( call_parameters )? RPAREN )?
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:28: {...}? LPAREN ( call_parameters )? RPAREN
                   {
                   if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       throw new FailedPredicateException(input, "function_call", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
                   }

                   LPAREN532=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call3216); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN532_tree = 
                   cast(Object)adaptor.create(LPAREN532)
                   ;
                   adaptor.addChild(root_0, LPAREN532_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:110: ( call_parameters )?
                   int alt132=2;
                   int LA132_0 = input.LA(1);

                   if ( (LA132_0==DOUBLEQUOTED_STRING||LA132_0==ID||LA132_0==LPAREN||LA132_0==MINUS||LA132_0==NUMBER||LA132_0==PLUS||LA132_0==QUOTED_STRING||LA132_0==76||LA132_0==93||LA132_0==101||LA132_0==134||LA132_0==136||LA132_0==162||LA132_0==165||LA132_0==169||LA132_0==174) ) {
                       alt132=1;
                   }
                   switch (alt132) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:112: call_parameters
                          {
                          pushFollow(FOLLOW_call_parameters_in_function_call3220);
                          call_parameters533=call_parameters();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters533.getTree());

                          }
                          break;

                       default:
                   }


                   RPAREN534=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call3225); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN534_tree = 
                   cast(Object)adaptor.create(RPAREN534)
                   ;
                   adaptor.addChild(root_0, RPAREN534_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_call"," ",72);
            if ( state.backtracking>0 ) { memoize(input, 72, function_call_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_call"


    public static class collection_function_call_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collection_function_call"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:864:1: collection_function_call : plsql_table_name ;
    public final PLSQL3_2_DParser.collection_function_call_return collection_function_call()  {
        debug(trace_rules) writeln("Entering rule:","collection_function_call"," ",73);
        PLSQL3_2_DParser.collection_function_call_return retval = new PLSQL3_2_DParser.collection_function_call_return();
        retval.start = input.LT(1);

        int collection_function_call_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.plsql_table_name_return plsql_table_name535 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:865:2: ( plsql_table_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:865:4: plsql_table_name
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_table_name_in_collection_function_call3244);
            plsql_table_name535=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name535.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","collection_function_call"," ",73);
            if ( state.backtracking>0 ) { memoize(input, 73, collection_function_call_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "collection_function_call"


    public static class variable_names_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_names"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:868:1: variable_names : variable_name ( COMMA variable_name )* ;
    public final PLSQL3_2_DParser.variable_names_return variable_names()  {
        debug(trace_rules) writeln("Entering rule:","variable_names"," ",74);
        PLSQL3_2_DParser.variable_names_return retval = new PLSQL3_2_DParser.variable_names_return();
        retval.start = input.LT(1);

        int variable_names_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA537=null;
        PLSQL3_2_DParser.variable_name_return variable_name536 =null;

        PLSQL3_2_DParser.variable_name_return variable_name538 =null;


        Object COMMA537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:869:2: ( variable_name ( COMMA variable_name )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:869:4: variable_name ( COMMA variable_name )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_variable_name_in_variable_names3255);
            variable_name536=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name536.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:869:18: ( COMMA variable_name )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:869:20: COMMA variable_name
            	    {
            	    COMMA537=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_names3259); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA537_tree = 
            	    cast(Object)adaptor.create(COMMA537)
            	    ;
            	    adaptor.addChild(root_0, COMMA537_tree);
            	    }

            	    pushFollow(FOLLOW_variable_name_in_variable_names3261);
            	    variable_name538=variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name538.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","variable_names"," ",74);
            if ( state.backtracking>0 ) { memoize(input, 74, variable_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_names"


    public static class variable_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:871:1: variable_name : identifier ;
    public final PLSQL3_2_DParser.variable_name_return variable_name()  {
        debug(trace_rules) writeln("Entering rule:","variable_name"," ",75);
        PLSQL3_2_DParser.variable_name_return retval = new PLSQL3_2_DParser.variable_name_return();
        retval.start = input.LT(1);

        int variable_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier539 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:872:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:872:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_variable_name3274);
            identifier539=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier539.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","variable_name"," ",75);
            if ( state.backtracking>0 ) { memoize(input, 75, variable_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_name"


    public static class full_variable_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_variable_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:876:1: full_variable_name : identifier ( DOT identifier )* ;
    public final PLSQL3_2_DParser.full_variable_name_return full_variable_name()  {
        debug(trace_rules) writeln("Entering rule:","full_variable_name"," ",76);
        PLSQL3_2_DParser.full_variable_name_return retval = new PLSQL3_2_DParser.full_variable_name_return();
        retval.start = input.LT(1);

        int full_variable_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT541=null;
        PLSQL3_2_DParser.identifier_return identifier540 =null;

        PLSQL3_2_DParser.identifier_return identifier542 =null;


        Object DOT541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:877:2: ( identifier ( DOT identifier )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:877:5: identifier ( DOT identifier )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_full_variable_name3293);
            identifier540=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier540.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:877:16: ( DOT identifier )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==DOT) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:877:17: DOT identifier
            	    {
            	    DOT541=cast(Token)match(input,DOT,FOLLOW_DOT_in_full_variable_name3296); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT541_tree = 
            	    cast(Object)adaptor.create(DOT541)
            	    ;
            	    adaptor.addChild(root_0, DOT541_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_full_variable_name3299);
            	    identifier542=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier542.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","full_variable_name"," ",76);
            if ( state.backtracking>0 ) { memoize(input, 76, full_variable_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "full_variable_name"


    public static class null_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:879:1: null_statement : 'NULL' ;
    public final PLSQL3_2_DParser.null_statement_return null_statement()  {
        debug(trace_rules) writeln("Entering rule:","null_statement"," ",77);
        PLSQL3_2_DParser.null_statement_return retval = new PLSQL3_2_DParser.null_statement_return();
        retval.start = input.LT(1);

        int null_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal543=null;

        Object string_literal543_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:880:2: ( 'NULL' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:880:4: 'NULL'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal543=cast(Token)match(input,136,FOLLOW_136_in_null_statement3314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = 
            cast(Object)adaptor.create(string_literal543)
            ;
            adaptor.addChild(root_0, string_literal543_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","null_statement"," ",77);
            if ( state.backtracking>0 ) { memoize(input, 77, null_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "null_statement"


    public static class raise_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:883:1: raise_statement : keyRAISE ( exception_name )? ;
    public final PLSQL3_2_DParser.raise_statement_return raise_statement()  {
        debug(trace_rules) writeln("Entering rule:","raise_statement"," ",78);
        PLSQL3_2_DParser.raise_statement_return retval = new PLSQL3_2_DParser.raise_statement_return();
        retval.start = input.LT(1);

        int raise_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyRAISE_return keyRAISE544 =null;

        PLSQL3_2_DParser.exception_name_return exception_name545 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:884:2: ( keyRAISE ( exception_name )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:884:4: keyRAISE ( exception_name )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyRAISE_in_raise_statement3326);
            keyRAISE544=keyRAISE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRAISE544.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:884:13: ( exception_name )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==DOUBLEQUOTED_STRING||LA136_0==ID) ) {
                alt136=1;
            }
            switch (alt136) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:884:15: exception_name
                   {
                   pushFollow(FOLLOW_exception_name_in_raise_statement3330);
                   exception_name545=exception_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name545.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","raise_statement"," ",78);
            if ( state.backtracking>0 ) { memoize(input, 78, raise_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "raise_statement"


    public static class return_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:887:1: return_statement : keyRETURN ( plsql_expression )? ;
    public final PLSQL3_2_DParser.return_statement_return return_statement()  {
        debug(trace_rules) writeln("Entering rule:","return_statement"," ",79);
        PLSQL3_2_DParser.return_statement_return retval = new PLSQL3_2_DParser.return_statement_return();
        retval.start = input.LT(1);

        int return_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyRETURN_return keyRETURN546 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression547 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:888:2: ( keyRETURN ( plsql_expression )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:888:4: keyRETURN ( plsql_expression )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyRETURN_in_return_statement3345);
            keyRETURN546=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN546.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:888:14: ( plsql_expression )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==DOUBLEQUOTED_STRING||LA137_0==ID||LA137_0==LPAREN||LA137_0==MINUS||LA137_0==NUMBER||LA137_0==PLUS||LA137_0==QUOTED_STRING||LA137_0==76||LA137_0==93||LA137_0==101||LA137_0==134||LA137_0==136||LA137_0==162||LA137_0==165||LA137_0==169||LA137_0==174) ) {
                alt137=1;
            }
            switch (alt137) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:888:16: plsql_expression
                   {
                   pushFollow(FOLLOW_plsql_expression_in_return_statement3349);
                   plsql_expression547=plsql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression547.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","return_statement"," ",79);
            if ( state.backtracking>0 ) { memoize(input, 79, return_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class loop_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loop_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:891:1: loop_statement : ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? ;
    public final PLSQL3_2_DParser.loop_statement_return loop_statement()  {
        debug(trace_rules) writeln("Entering rule:","loop_statement"," ",80);
        PLSQL3_2_DParser.loop_statement_return retval = new PLSQL3_2_DParser.loop_statement_return();
        retval.start = input.LT(1);

        int loop_statement_StartIndex = input.index();

        Object root_0 = null;

        Token LLABEL548=null;
        Token RLABEL550=null;
        Token string_literal553=null;
        Token string_literal558=null;
        PLSQL3_2_DParser.label_name_return label_name549 =null;

        PLSQL3_2_DParser.keyWHILE_return keyWHILE551 =null;

        PLSQL3_2_DParser.plsql_condition_return plsql_condition552 =null;

        PLSQL3_2_DParser.numeric_loop_param_return numeric_loop_param554 =null;

        PLSQL3_2_DParser.cursor_loop_param_return cursor_loop_param555 =null;

        PLSQL3_2_DParser.keyLOOP_return keyLOOP556 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements557 =null;

        PLSQL3_2_DParser.keyLOOP_return keyLOOP559 =null;

        PLSQL3_2_DParser.label_name_return label_name560 =null;


        Object LLABEL548_tree=null;
        Object RLABEL550_tree=null;
        Object string_literal553_tree=null;
        Object string_literal558_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:892:2: ( ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:892:4: ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:892:4: ( LLABEL label_name RLABEL )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==LLABEL) ) {
                alt138=1;
            }
            switch (alt138) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:892:6: LLABEL label_name RLABEL
                   {
                   LLABEL548=cast(Token)match(input,LLABEL,FOLLOW_LLABEL_in_loop_statement3365); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LLABEL548_tree = 
                   cast(Object)adaptor.create(LLABEL548)
                   ;
                   adaptor.addChild(root_0, LLABEL548_tree);
                   }

                   pushFollow(FOLLOW_label_name_in_loop_statement3367);
                   label_name549=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name549.getTree());

                   RLABEL550=cast(Token)match(input,RLABEL,FOLLOW_RLABEL_in_loop_statement3369); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RLABEL550_tree = 
                   cast(Object)adaptor.create(RLABEL550)
                   ;
                   adaptor.addChild(root_0, RLABEL550_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:893:3: ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )?
            int alt140=3;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==184) ) {
                alt140=1;
            }
            else if ( (LA140_0==104) ) {
                alt140=2;
            }
            switch (alt140) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:893:5: keyWHILE ^ plsql_condition
                   {
                   pushFollow(FOLLOW_keyWHILE_in_loop_statement3378);
                   keyWHILE551=keyWHILE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) root_0 = cast(Object)adaptor.becomeRoot(keyWHILE551.getTree(), root_0);

                   pushFollow(FOLLOW_plsql_condition_in_loop_statement3381);
                   plsql_condition552=plsql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition552.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:894:6: ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:894:6: ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:894:8: 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                   {
                   string_literal553=cast(Token)match(input,104,FOLLOW_104_in_loop_statement3390); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal553_tree = 
                   cast(Object)adaptor.create(string_literal553)
                   ;
                   root_0 = cast(Object)adaptor.becomeRoot(string_literal553_tree, root_0);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:895:5: ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                   int alt139=2;
                   int LA139_0 = input.LA(1);

                   if ( (LA139_0==DOUBLEQUOTED_STRING||LA139_0==ID) ) {
                       int LA139_1 = input.LA(2);

                       if ( (synpred258_PLSQL3_2_D()) ) {
                           alt139=1;
                       }
                       else if ( (synpred259_PLSQL3_2_D()) ) {
                           alt139=2;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 139, 1, input);

                           throw nvae;

                       }
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 139, 0, input);

                       throw nvae;

                   }
                   switch (alt139) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:895:7: ( numeric_loop_param )=> numeric_loop_param
                          {
                          pushFollow(FOLLOW_numeric_loop_param_in_loop_statement3407);
                          numeric_loop_param554=numeric_loop_param();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric_loop_param554.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:896:7: ( cursor_loop_param )=> cursor_loop_param
                          {
                          pushFollow(FOLLOW_cursor_loop_param_in_loop_statement3423);
                          cursor_loop_param555=cursor_loop_param();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_loop_param555.getTree());

                          }
                          break;

                       default:
                   }


                   }


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyLOOP_in_loop_statement3444);
            keyLOOP556=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP556.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_loop_statement3448);
            seq_of_statements557=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements557.getTree());

            string_literal558=cast(Token)match(input,97,FOLLOW_97_in_loop_statement3452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = 
            cast(Object)adaptor.create(string_literal558)
            ;
            adaptor.addChild(root_0, string_literal558_tree);
            }

            pushFollow(FOLLOW_keyLOOP_in_loop_statement3454);
            keyLOOP559=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP559.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:903:3: ( label_name )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==DOUBLEQUOTED_STRING||LA141_0==ID) ) {
                alt141=1;
            }
            switch (alt141) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:903:5: label_name
                   {
                   pushFollow(FOLLOW_label_name_in_loop_statement3461);
                   label_name560=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name560.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","loop_statement"," ",80);
            if ( state.backtracking>0 ) { memoize(input, 80, loop_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "loop_statement"


    public static class numeric_loop_param_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numeric_loop_param"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:906:1: numeric_loop_param : index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr ;
    public final PLSQL3_2_DParser.numeric_loop_param_return numeric_loop_param()  {
        debug(trace_rules) writeln("Entering rule:","numeric_loop_param"," ",81);
        PLSQL3_2_DParser.numeric_loop_param_return retval = new PLSQL3_2_DParser.numeric_loop_param_return();
        retval.start = input.LT(1);

        int numeric_loop_param_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal562=null;
        Token DOUBLEDOT565=null;
        PLSQL3_2_DParser.index_name_return index_name561 =null;

        PLSQL3_2_DParser.keyREVERSE_return keyREVERSE563 =null;

        PLSQL3_2_DParser.integer_expr_return integer_expr564 =null;

        PLSQL3_2_DParser.integer_expr_return integer_expr566 =null;


        Object string_literal562_tree=null;
        Object DOUBLEDOT565_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:2: ( index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:4: index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_index_name_in_numeric_loop_param3475);
            index_name561=index_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name561.getTree());

            string_literal562=cast(Token)match(input,113,FOLLOW_113_in_numeric_loop_param3477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = 
            cast(Object)adaptor.create(string_literal562)
            ;
            adaptor.addChild(root_0, string_literal562_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:20: ( keyREVERSE )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ID) ) {
                int LA142_1 = input.LA(2);

                if ( (((synpred262_PLSQL3_2_D()&&synpred262_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "REVERSE"))) ) {
                    alt142=1;
                }
            }
            switch (alt142) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:22: keyREVERSE
                   {
                   pushFollow(FOLLOW_keyREVERSE_in_numeric_loop_param3481);
                   keyREVERSE563=keyREVERSE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREVERSE563.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param3486);
            integer_expr564=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr564.getTree());

            DOUBLEDOT565=cast(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_numeric_loop_param3488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLEDOT565_tree = 
            cast(Object)adaptor.create(DOUBLEDOT565)
            ;
            adaptor.addChild(root_0, DOUBLEDOT565_tree);
            }

            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param3490);
            integer_expr566=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr566.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","numeric_loop_param"," ",81);
            if ( state.backtracking>0 ) { memoize(input, 81, numeric_loop_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numeric_loop_param"


    public static class index_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:910:1: index_name : identifier ;
    public final PLSQL3_2_DParser.index_name_return index_name()  {
        debug(trace_rules) writeln("Entering rule:","index_name"," ",82);
        PLSQL3_2_DParser.index_name_return retval = new PLSQL3_2_DParser.index_name_return();
        retval.start = input.LT(1);

        int index_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier567 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:911:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:911:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_index_name3501);
            identifier567=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier567.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","index_name"," ",82);
            if ( state.backtracking>0 ) { memoize(input, 82, index_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "index_name"


    public static class integer_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:915:1: integer_expr : sql_expression ;
    public final PLSQL3_2_DParser.integer_expr_return integer_expr()  {
        debug(trace_rules) writeln("Entering rule:","integer_expr"," ",83);
        PLSQL3_2_DParser.integer_expr_return retval = new PLSQL3_2_DParser.integer_expr_return();
        retval.start = input.LT(1);

        int integer_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_expression_return sql_expression568 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:916:2: ( sql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:916:4: sql_expression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_integer_expr3513);
            sql_expression568=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression568.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","integer_expr"," ",83);
            if ( state.backtracking>0 ) { memoize(input, 83, integer_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integer_expr"


    public static class cursor_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:919:1: cursor_name : identifier ;
    public final PLSQL3_2_DParser.cursor_name_return cursor_name()  {
        debug(trace_rules) writeln("Entering rule:","cursor_name"," ",84);
        PLSQL3_2_DParser.cursor_name_return retval = new PLSQL3_2_DParser.cursor_name_return();
        retval.start = input.LT(1);

        int cursor_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier569 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:920:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:920:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_cursor_name3524);
            identifier569=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier569.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cursor_name"," ",84);
            if ( state.backtracking>0 ) { memoize(input, 84, cursor_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_name"


    public static class cursor_loop_param_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_loop_param"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:923:1: cursor_loop_param : record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) ;
    public final PLSQL3_2_DParser.cursor_loop_param_return cursor_loop_param()  {
        debug(trace_rules) writeln("Entering rule:","cursor_loop_param"," ",85);
        PLSQL3_2_DParser.cursor_loop_param_return retval = new PLSQL3_2_DParser.cursor_loop_param_return();
        retval.start = input.LT(1);

        int cursor_loop_param_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal571=null;
        Token LPAREN573=null;
        Token RPAREN575=null;
        Token LPAREN576=null;
        Token RPAREN578=null;
        PLSQL3_2_DParser.record_name_return record_name570 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name572 =null;

        PLSQL3_2_DParser.plsql_expressions_return plsql_expressions574 =null;

        PLSQL3_2_DParser.select_statement_return select_statement577 =null;


        Object string_literal571_tree=null;
        Object LPAREN573_tree=null;
        Object RPAREN575_tree=null;
        Object LPAREN576_tree=null;
        Object RPAREN578_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:924:2: ( record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:924:4: record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_record_name_in_cursor_loop_param3535);
            record_name570=record_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name570.getTree());

            string_literal571=cast(Token)match(input,113,FOLLOW_113_in_cursor_loop_param3537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal571_tree = 
            cast(Object)adaptor.create(string_literal571)
            ;
            adaptor.addChild(root_0, string_literal571_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:925:3: ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==DOUBLEQUOTED_STRING||LA144_0==ID) ) {
                alt144=1;
            }
            else if ( (LA144_0==LPAREN) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:925:5: cursor_name ( LPAREN plsql_expressions RPAREN )?
                   {
                   pushFollow(FOLLOW_cursor_name_in_cursor_loop_param3543);
                   cursor_name572=cursor_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name572.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:925:17: ( LPAREN plsql_expressions RPAREN )?
                   int alt143=2;
                   int LA143_0 = input.LA(1);

                   if ( (LA143_0==LPAREN) ) {
                       alt143=1;
                   }
                   switch (alt143) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:925:19: LPAREN plsql_expressions RPAREN
                          {
                          LPAREN573=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param3547); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN573_tree = 
                          cast(Object)adaptor.create(LPAREN573)
                          ;
                          adaptor.addChild(root_0, LPAREN573_tree);
                          }

                          pushFollow(FOLLOW_plsql_expressions_in_cursor_loop_param3549);
                          plsql_expressions574=plsql_expressions();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions574.getTree());

                          RPAREN575=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param3551); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN575_tree = 
                          cast(Object)adaptor.create(RPAREN575)
                          ;
                          adaptor.addChild(root_0, RPAREN575_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:926:5: LPAREN select_statement RPAREN
                   {
                   LPAREN576=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param3560); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN576_tree = 
                   cast(Object)adaptor.create(LPAREN576)
                   ;
                   adaptor.addChild(root_0, LPAREN576_tree);
                   }

                   pushFollow(FOLLOW_select_statement_in_cursor_loop_param3562);
                   select_statement577=select_statement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement577.getTree());

                   RPAREN578=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param3564); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN578_tree = 
                   cast(Object)adaptor.create(RPAREN578)
                   ;
                   adaptor.addChild(root_0, RPAREN578_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cursor_loop_param"," ",85);
            if ( state.backtracking>0 ) { memoize(input, 85, cursor_loop_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_loop_param"


    public static class record_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:930:1: record_name : identifier ;
    public final PLSQL3_2_DParser.record_name_return record_name()  {
        debug(trace_rules) writeln("Entering rule:","record_name"," ",86);
        PLSQL3_2_DParser.record_name_return retval = new PLSQL3_2_DParser.record_name_return();
        retval.start = input.LT(1);

        int record_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier579 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:931:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:931:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_record_name3579);
            identifier579=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier579.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","record_name"," ",86);
            if ( state.backtracking>0 ) { memoize(input, 86, record_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_name"


    public static class commit_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commit_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:934:1: commit_statement : 'COMMIT' ;
    public final PLSQL3_2_DParser.commit_statement_return commit_statement()  {
        debug(trace_rules) writeln("Entering rule:","commit_statement"," ",87);
        PLSQL3_2_DParser.commit_statement_return retval = new PLSQL3_2_DParser.commit_statement_return();
        retval.start = input.LT(1);

        int commit_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal580=null;

        Object string_literal580_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:935:2: ( 'COMMIT' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:935:4: 'COMMIT'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal580=cast(Token)match(input,81,FOLLOW_81_in_commit_statement3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = 
            cast(Object)adaptor.create(string_literal580)
            ;
            adaptor.addChild(root_0, string_literal580_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","commit_statement"," ",87);
            if ( state.backtracking>0 ) { memoize(input, 87, commit_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "commit_statement"


    public static class if_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:938:1: if_statement : 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' ;
    public final PLSQL3_2_DParser.if_statement_return if_statement()  {
        debug(trace_rules) writeln("Entering rule:","if_statement"," ",88);
        PLSQL3_2_DParser.if_statement_return retval = new PLSQL3_2_DParser.if_statement_return();
        retval.start = input.LT(1);

        int if_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal581=null;
        Token string_literal583=null;
        Token string_literal587=null;
        Token string_literal589=null;
        Token string_literal591=null;
        Token string_literal592=null;
        PLSQL3_2_DParser.plsql_condition_return plsql_condition582 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements584 =null;

        PLSQL3_2_DParser.keyELSIF_return keyELSIF585 =null;

        PLSQL3_2_DParser.plsql_condition_return plsql_condition586 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements588 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements590 =null;


        Object string_literal581_tree=null;
        Object string_literal583_tree=null;
        Object string_literal587_tree=null;
        Object string_literal589_tree=null;
        Object string_literal591_tree=null;
        Object string_literal592_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:939:2: ( 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:939:4: 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal581=cast(Token)match(input,112,FOLLOW_112_in_if_statement3601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal581_tree = 
            cast(Object)adaptor.create(string_literal581)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(string_literal581_tree, root_0);
            }

            pushFollow(FOLLOW_plsql_condition_in_if_statement3604);
            plsql_condition582=plsql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition582.getTree());

            string_literal583=cast(Token)match(input,172,FOLLOW_172_in_if_statement3606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal583_tree = 
            cast(Object)adaptor.create(string_literal583)
            ;
            adaptor.addChild(root_0, string_literal583_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_if_statement3608);
            seq_of_statements584=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements584.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:940:3: ( keyELSIF plsql_condition 'THEN' seq_of_statements )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==96) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:941:4: keyELSIF plsql_condition 'THEN' seq_of_statements
            	    {
            	    pushFollow(FOLLOW_keyELSIF_in_if_statement3618);
            	    keyELSIF585=keyELSIF();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyELSIF585.getTree());

            	    pushFollow(FOLLOW_plsql_condition_in_if_statement3620);
            	    plsql_condition586=plsql_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition586.getTree());

            	    string_literal587=cast(Token)match(input,172,FOLLOW_172_in_if_statement3622); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal587_tree = 
            	    cast(Object)adaptor.create(string_literal587)
            	    ;
            	    adaptor.addChild(root_0, string_literal587_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_if_statement3624);
            	    seq_of_statements588=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements588.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:943:3: ( 'ELSE' seq_of_statements )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==95) ) {
                alt146=1;
            }
            switch (alt146) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:943:5: 'ELSE' seq_of_statements
                   {
                   string_literal589=cast(Token)match(input,95,FOLLOW_95_in_if_statement3635); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal589_tree = 
                   cast(Object)adaptor.create(string_literal589)
                   ;
                   adaptor.addChild(root_0, string_literal589_tree);
                   }

                   pushFollow(FOLLOW_seq_of_statements_in_if_statement3637);
                   seq_of_statements590=seq_of_statements();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements590.getTree());

                   }
                   break;

                default:
            }


            string_literal591=cast(Token)match(input,97,FOLLOW_97_in_if_statement3644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal591_tree = 
            cast(Object)adaptor.create(string_literal591)
            ;
            adaptor.addChild(root_0, string_literal591_tree);
            }

            string_literal592=cast(Token)match(input,112,FOLLOW_112_in_if_statement3646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = 
            cast(Object)adaptor.create(string_literal592)
            ;
            adaptor.addChild(root_0, string_literal592_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","if_statement"," ",88);
            if ( state.backtracking>0 ) { memoize(input, 88, if_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class sql_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:947:1: sql_statement : sql_command ;
    public final PLSQL3_2_DParser.sql_statement_return sql_statement()  {
        debug(trace_rules) writeln("Entering rule:","sql_statement"," ",89);
        PLSQL3_2_DParser.sql_statement_return retval = new PLSQL3_2_DParser.sql_statement_return();
        retval.start = input.LT(1);

        int sql_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_command_return sql_command593 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:948:2: ( sql_command )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:948:4: sql_command
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_command_in_sql_statement3657);
            sql_command593=sql_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_command593.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_statement"," ",89);
            if ( state.backtracking>0 ) { memoize(input, 89, sql_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_statement"


    public static class sql_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:951:1: sql_command : ( to_modify_data | to_control_data );
    public final PLSQL3_2_DParser.sql_command_return sql_command()  {
        debug(trace_rules) writeln("Entering rule:","sql_command"," ",90);
        PLSQL3_2_DParser.sql_command_return retval = new PLSQL3_2_DParser.sql_command_return();
        retval.start = input.LT(1);

        int sql_command_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.to_modify_data_return to_modify_data594 =null;

        PLSQL3_2_DParser.to_control_data_return to_control_data595 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:952:2: ( to_modify_data | to_control_data )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==91||LA147_0==115||(LA147_0 >=165  && LA147_0<=166)||LA147_0==177) ) {
                alt147=1;
            }
            else if ( (LA147_0==ID||LA147_0==81||LA147_0==102||LA147_0==122||LA147_0==160||LA147_0==164) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:952:4: to_modify_data
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_to_modify_data_in_sql_command3668);
                    to_modify_data594=to_modify_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_modify_data594.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:953:4: to_control_data
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_to_control_data_in_sql_command3673);
                    to_control_data595=to_control_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_control_data595.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_command"," ",90);
            if ( state.backtracking>0 ) { memoize(input, 90, sql_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_command"


    public static class to_modify_data_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_modify_data"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:956:1: to_modify_data : ( select_command | insert_command | update_command | delete_command | set_transaction_command );
    public final PLSQL3_2_DParser.to_modify_data_return to_modify_data()  {
        debug(trace_rules) writeln("Entering rule:","to_modify_data"," ",91);
        PLSQL3_2_DParser.to_modify_data_return retval = new PLSQL3_2_DParser.to_modify_data_return();
        retval.start = input.LT(1);

        int to_modify_data_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.select_command_return select_command596 =null;

        PLSQL3_2_DParser.insert_command_return insert_command597 =null;

        PLSQL3_2_DParser.update_command_return update_command598 =null;

        PLSQL3_2_DParser.delete_command_return delete_command599 =null;

        PLSQL3_2_DParser.set_transaction_command_return set_transaction_command600 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:957:2: ( select_command | insert_command | update_command | delete_command | set_transaction_command )
            int alt148=5;
            switch ( input.LA(1) ) {
            case 165:
                {
                alt148=1;
                }
                break;
            case 115:
                {
                alt148=2;
                }
                break;
            case 177:
                {
                alt148=3;
                }
                break;
            case 91:
                {
                alt148=4;
                }
                break;
            case 166:
                {
                alt148=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }

            switch (alt148) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:957:4: select_command
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_select_command_in_to_modify_data3684);
                    select_command596=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command596.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:958:4: insert_command
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_insert_command_in_to_modify_data3689);
                    insert_command597=insert_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_command597.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:959:4: update_command
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_update_command_in_to_modify_data3694);
                    update_command598=update_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_command598.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:960:4: delete_command
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_delete_command_in_to_modify_data3699);
                    delete_command599=delete_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_command599.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:961:4: set_transaction_command
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_set_transaction_command_in_to_modify_data3704);
                    set_transaction_command600=set_transaction_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_command600.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","to_modify_data"," ",91);
            if ( state.backtracking>0 ) { memoize(input, 91, to_modify_data_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "to_modify_data"


    public static class to_control_data_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_control_data"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:964:1: to_control_data : ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement );
    public final PLSQL3_2_DParser.to_control_data_return to_control_data()  {
        debug(trace_rules) writeln("Entering rule:","to_control_data"," ",92);
        PLSQL3_2_DParser.to_control_data_return retval = new PLSQL3_2_DParser.to_control_data_return();
        retval.start = input.LT(1);

        int to_control_data_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.close_statement_return close_statement601 =null;

        PLSQL3_2_DParser.commit_statement_return commit_statement602 =null;

        PLSQL3_2_DParser.fetch_statement_return fetch_statement603 =null;

        PLSQL3_2_DParser.lock_table_statement_return lock_table_statement604 =null;

        PLSQL3_2_DParser.open_statement_return open_statement605 =null;

        PLSQL3_2_DParser.rollback_statement_return rollback_statement606 =null;

        PLSQL3_2_DParser.savepoint_statement_return savepoint_statement607 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:965:2: ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement )
            int alt149=7;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA149_1 = input.LA(2);

                if ( (LA149_1==DOUBLEQUOTED_STRING||LA149_1==ID) ) {
                    int LA149_7 = input.LA(3);

                    if ( ((((toUpper(input.LT(1).getText)== "CLOSE")&&(toUpper(input.LT(1).getText)== "CLOSE"))&&synpred272_PLSQL3_2_D())) ) {
                        alt149=1;
                    }
                    else if ( ((((toUpper(input.LT(1).getText)== "OPEN")&&(toUpper(input.LT(1).getText)== "OPEN"))&&synpred276_PLSQL3_2_D())) ) {
                        alt149=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 7, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);

                    throw nvae;

                }
                }
                break;
            case 81:
                {
                alt149=2;
                }
                break;
            case 102:
                {
                alt149=3;
                }
                break;
            case 122:
                {
                alt149=4;
                }
                break;
            case 160:
                {
                alt149=6;
                }
                break;
            case 164:
                {
                alt149=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }

            switch (alt149) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:965:4: close_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_close_statement_in_to_control_data3715);
                    close_statement601=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement601.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:966:4: commit_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_commit_statement_in_to_control_data3720);
                    commit_statement602=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement602.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:967:4: fetch_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_fetch_statement_in_to_control_data3725);
                    fetch_statement603=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement603.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:968:4: lock_table_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_lock_table_statement_in_to_control_data3730);
                    lock_table_statement604=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement604.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:969:4: open_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_open_statement_in_to_control_data3735);
                    open_statement605=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement605.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:970:4: rollback_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_rollback_statement_in_to_control_data3740);
                    rollback_statement606=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement606.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:971:4: savepoint_statement
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_savepoint_statement_in_to_control_data3745);
                    savepoint_statement607=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement607.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","to_control_data"," ",92);
            if ( state.backtracking>0 ) { memoize(input, 92, to_control_data_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "to_control_data"


    public static class select_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:974:1: select_command : select_statement ;
    public final PLSQL3_2_DParser.select_command_return select_command()  {
        debug(trace_rules) writeln("Entering rule:","select_command"," ",93);
        PLSQL3_2_DParser.select_command_return retval = new PLSQL3_2_DParser.select_command_return();
        retval.start = input.LT(1);

        int select_command_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.select_statement_return select_statement608 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:975:2: ( select_statement )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:975:4: select_statement
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_select_statement_in_select_command3756);
            select_statement608=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement608.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","select_command"," ",93);
            if ( state.backtracking>0 ) { memoize(input, 93, select_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_command"


    public static class select_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:978:1: select_statement : select_expression ;
    public final PLSQL3_2_DParser.select_statement_return select_statement()  {
        debug(trace_rules) writeln("Entering rule:","select_statement"," ",94);
        PLSQL3_2_DParser.select_statement_return retval = new PLSQL3_2_DParser.select_statement_return();
        retval.start = input.LT(1);

        int select_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.select_expression_return select_expression609 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:979:2: ( select_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:980:3: select_expression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_select_expression_in_select_statement3770);
            select_expression609=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression609.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","select_statement"," ",94);
            if ( state.backtracking>0 ) { memoize(input, 94, select_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_statement"


    public static class select_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:983:1: select_expression : 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? ;
    public final PLSQL3_2_DParser.select_expression_return select_expression()  {
        debug(trace_rules) writeln("Entering rule:","select_expression"," ",95);
        PLSQL3_2_DParser.select_expression_return retval = new PLSQL3_2_DParser.select_expression_return();
        retval.start = input.LT(1);

        int select_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal610=null;
        Token set611=null;
        Token string_literal615=null;
        Token string_literal617=null;
        Token LPAREN619=null;
        Token RPAREN621=null;
        Token string_literal626=null;
        Token string_literal629=null;
        Token string_literal630=null;
        Token string_literal631=null;
        Token string_literal632=null;
        PLSQL3_2_DParser.select_list_return select_list612 =null;

        PLSQL3_2_DParser.keyBULK_return keyBULK613 =null;

        PLSQL3_2_DParser.keyCOLLECT_return keyCOLLECT614 =null;

        PLSQL3_2_DParser.lvalues_return lvalues616 =null;

        PLSQL3_2_DParser.join_clause_return join_clause618 =null;

        PLSQL3_2_DParser.join_clause_return join_clause620 =null;

        PLSQL3_2_DParser.table_reference_list_return table_reference_list622 =null;

        PLSQL3_2_DParser.where_clause_return where_clause623 =null;

        PLSQL3_2_DParser.hierarchical_query_clause_return hierarchical_query_clause624 =null;

        PLSQL3_2_DParser.group_by_clause_return group_by_clause625 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition627 =null;

        PLSQL3_2_DParser.model_clause_return model_clause628 =null;

        PLSQL3_2_DParser.select_expression_return select_expression633 =null;

        PLSQL3_2_DParser.subquery_return subquery634 =null;

        PLSQL3_2_DParser.order_by_clause_return order_by_clause635 =null;


        Object string_literal610_tree=null;
        Object set611_tree=null;
        Object string_literal615_tree=null;
        Object string_literal617_tree=null;
        Object LPAREN619_tree=null;
        Object RPAREN621_tree=null;
        Object string_literal626_tree=null;
        Object string_literal629_tree=null;
        Object string_literal630_tree=null;
        Object string_literal631_tree=null;
        Object string_literal632_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:984:2: ( 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:985:3: 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal610=cast(Token)match(input,165,FOLLOW_165_in_select_expression3785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = 
            cast(Object)adaptor.create(string_literal610)
            ;
            adaptor.addChild(root_0, string_literal610_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:985:26: ( 'DISTINCT' | 'UNIQUE' | 'ALL' )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==93) ) {
                int LA150_1 = input.LA(2);

                if ( (!((( is_sql )))) ) {
                    alt150=1;
                }
            }
            else if ( (LA150_0==61||LA150_0==176) ) {
                alt150=1;
            }
            switch (alt150) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                   {
                   set611=cast(Token)input.LT(1);

                   if ( input.LA(1)==61||input.LA(1)==93||input.LA(1)==176 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set611)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_select_list_in_select_expression3804);
            select_list612=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list612.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:986:3: ( keyBULK keyCOLLECT )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ID) ) {
                alt151=1;
            }
            switch (alt151) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:986:5: keyBULK keyCOLLECT
                   {
                   pushFollow(FOLLOW_keyBULK_in_select_expression3810);
                   keyBULK613=keyBULK();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK613.getTree());

                   pushFollow(FOLLOW_keyCOLLECT_in_select_expression3812);
                   keyCOLLECT614=keyCOLLECT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT614.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:987:3: ( 'INTO' lvalues )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==119) ) {
                alt152=1;
            }
            switch (alt152) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:987:5: 'INTO' lvalues
                   {
                   string_literal615=cast(Token)match(input,119,FOLLOW_119_in_select_expression3821); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal615_tree = 
                   cast(Object)adaptor.create(string_literal615)
                   ;
                   adaptor.addChild(root_0, string_literal615_tree);
                   }

                   pushFollow(FOLLOW_lvalues_in_select_expression3823);
                   lvalues616=lvalues();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues616.getTree());

                   }
                   break;

                default:
            }


            string_literal617=cast(Token)match(input,106,FOLLOW_106_in_select_expression3830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal617_tree = 
            cast(Object)adaptor.create(string_literal617)
            ;
            adaptor.addChild(root_0, string_literal617_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:10: ( join_clause | LPAREN join_clause RPAREN | table_reference_list )
            int alt153=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA153_1 = input.LA(2);

                if ( (synpred283_PLSQL3_2_D()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA153_2 = input.LA(2);

                if ( (synpred283_PLSQL3_2_D()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 2, input);

                    throw nvae;

                }
                }
                break;
            case 171:
                {
                int LA153_3 = input.LA(2);

                if ( (synpred283_PLSQL3_2_D()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA153_4 = input.LA(2);

                if ( (synpred283_PLSQL3_2_D()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 4, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA153_5 = input.LA(2);

                if ( (synpred283_PLSQL3_2_D()) ) {
                    alt153=1;
                }
                else if ( (synpred284_PLSQL3_2_D()) ) {
                    alt153=2;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 5, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }

            switch (alt153) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:12: join_clause
                   {
                   pushFollow(FOLLOW_join_clause_in_select_expression3834);
                   join_clause618=join_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause618.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:26: LPAREN join_clause RPAREN
                   {
                   LPAREN619=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_select_expression3838); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN619_tree = 
                   cast(Object)adaptor.create(LPAREN619)
                   ;
                   adaptor.addChild(root_0, LPAREN619_tree);
                   }

                   pushFollow(FOLLOW_join_clause_in_select_expression3840);
                   join_clause620=join_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause620.getTree());

                   RPAREN621=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_select_expression3842); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN621_tree = 
                   cast(Object)adaptor.create(RPAREN621)
                   ;
                   adaptor.addChild(root_0, RPAREN621_tree);
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:54: table_reference_list
                   {
                   pushFollow(FOLLOW_table_reference_list_in_select_expression3846);
                   table_reference_list622=table_reference_list();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list622.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:3: ( where_clause )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==183) ) {
                int LA154_1 = input.LA(2);

                if ( (synpred285_PLSQL3_2_D()) ) {
                    alt154=1;
                }
            }
            switch (alt154) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:5: where_clause
                   {
                   pushFollow(FOLLOW_where_clause_in_select_expression3854);
                   where_clause623=where_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause623.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:21: ( hierarchical_query_clause )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==170) ) {
                int LA155_1 = input.LA(2);

                if ( (synpred286_PLSQL3_2_D()) ) {
                    alt155=1;
                }
            }
            else if ( (LA155_0==82) ) {
                int LA155_2 = input.LA(2);

                if ( (synpred286_PLSQL3_2_D()) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:23: hierarchical_query_clause
                   {
                   pushFollow(FOLLOW_hierarchical_query_clause_in_select_expression3861);
                   hierarchical_query_clause624=hierarchical_query_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, hierarchical_query_clause624.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:52: ( group_by_clause )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==109) ) {
                int LA156_1 = input.LA(2);

                if ( (synpred287_PLSQL3_2_D()) ) {
                    alt156=1;
                }
            }
            switch (alt156) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:54: group_by_clause
                   {
                   pushFollow(FOLLOW_group_by_clause_in_select_expression3868);
                   group_by_clause625=group_by_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_clause625.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:3: ( 'HAVING' sql_condition )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==110) ) {
                int LA157_1 = input.LA(2);

                if ( (synpred288_PLSQL3_2_D()) ) {
                    alt157=1;
                }
            }
            switch (alt157) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:5: 'HAVING' sql_condition
                   {
                   string_literal626=cast(Token)match(input,110,FOLLOW_110_in_select_expression3877); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal626_tree = 
                   cast(Object)adaptor.create(string_literal626)
                   ;
                   adaptor.addChild(root_0, string_literal626_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_select_expression3879);
                   sql_condition627=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition627.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:31: ( model_clause )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ID) ) {
                int LA158_1 = input.LA(2);

                if ( ((((toUpper(input.LT(1).getText)== "MODEL")&&(toUpper(input.LT(1).getText)== "MODEL"))&&synpred289_PLSQL3_2_D())) ) {
                    alt158=1;
                }
            }
            switch (alt158) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:33: model_clause
                   {
                   pushFollow(FOLLOW_model_clause_in_select_expression3886);
                   model_clause628=model_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, model_clause628.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:3: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )?
            int alt162=2;
            switch ( input.LA(1) ) {
                case 175:
                    {
                    int LA162_1 = input.LA(2);

                    if ( (synpred294_PLSQL3_2_D()) ) {
                        alt162=1;
                    }
                    }
                    break;
                case 118:
                    {
                    int LA162_2 = input.LA(2);

                    if ( (synpred294_PLSQL3_2_D()) ) {
                        alt162=1;
                    }
                    }
                    break;
                case 125:
                    {
                    int LA162_3 = input.LA(2);

                    if ( (synpred294_PLSQL3_2_D()) ) {
                        alt162=1;
                    }
                    }
                    break;
                default:
            }

            switch (alt162) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
                   int alt160=3;
                   switch ( input.LA(1) ) {
                   case 175:
                       {
                       alt160=1;
                       }
                       break;
                   case 118:
                       {
                       alt160=2;
                       }
                       break;
                   case 125:
                       {
                       alt160=3;
                       }
                       break;
                   default:
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae = 
                           new NoViableAltException("", 160, 0, input);

                       throw nvae;

                   }

                   switch (alt160) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:7: 'UNION' ( 'ALL' )?
                          {
                          string_literal629=cast(Token)match(input,175,FOLLOW_175_in_select_expression3897); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal629_tree = 
                          cast(Object)adaptor.create(string_literal629)
                          ;
                          adaptor.addChild(root_0, string_literal629_tree);
                          }

                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:15: ( 'ALL' )?
                          int alt159=2;
                          int LA159_0 = input.LA(1);

                          if ( (LA159_0==61) ) {
                              alt159=1;
                          }
                          switch (alt159) {
                             case 1 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:17: 'ALL'
                                 {
                                 string_literal630=cast(Token)match(input,61,FOLLOW_61_in_select_expression3901); if (state.failed) return retval;
                                 if ( state.backtracking==0 ) {
                                 string_literal630_tree = 
                                 cast(Object)adaptor.create(string_literal630)
                                 ;
                                 adaptor.addChild(root_0, string_literal630_tree);
                                 }

                                 }
                                 break;

                              default:
                          }


                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:992:6: 'INTERSECT'
                          {
                          string_literal631=cast(Token)match(input,118,FOLLOW_118_in_select_expression3911); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal631_tree = 
                          cast(Object)adaptor.create(string_literal631)
                          ;
                          adaptor.addChild(root_0, string_literal631_tree);
                          }

                          }
                          break;
                      case 3 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:993:6: 'MINUS'
                          {
                          string_literal632=cast(Token)match(input,125,FOLLOW_125_in_select_expression3918); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal632_tree = 
                          cast(Object)adaptor.create(string_literal632)
                          ;
                          adaptor.addChild(root_0, string_literal632_tree);
                          }

                          }
                          break;

                       default:
                   }


                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:995:4: ( select_expression | subquery )
                   int alt161=2;
                   int LA161_0 = input.LA(1);

                   if ( (LA161_0==165) ) {
                       alt161=1;
                   }
                   else if ( (LA161_0==LPAREN) ) {
                       alt161=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 161, 0, input);

                       throw nvae;

                   }
                   switch (alt161) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:995:6: select_expression
                          {
                          pushFollow(FOLLOW_select_expression_in_select_expression3930);
                          select_expression633=select_expression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression633.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:996:6: subquery
                          {
                          pushFollow(FOLLOW_subquery_in_select_expression3938);
                          subquery634=subquery();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery634.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:999:3: ( order_by_clause )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==145) ) {
                int LA163_1 = input.LA(2);

                if ( (synpred295_PLSQL3_2_D()) ) {
                    alt163=1;
                }
            }
            switch (alt163) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:999:5: order_by_clause
                   {
                   pushFollow(FOLLOW_order_by_clause_in_select_expression3954);
                   order_by_clause635=order_by_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause635.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","select_expression"," ",95);
            if ( state.backtracking>0 ) { memoize(input, 95, select_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_expression"


    public static class select_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1002:1: select_list : ( ASTERISK | displayed_column ( COMMA displayed_column )* );
    public final PLSQL3_2_DParser.select_list_return select_list()  {
        debug(trace_rules) writeln("Entering rule:","select_list"," ",96);
        PLSQL3_2_DParser.select_list_return retval = new PLSQL3_2_DParser.select_list_return();
        retval.start = input.LT(1);

        int select_list_StartIndex = input.index();

        Object root_0 = null;

        Token ASTERISK636=null;
        Token COMMA638=null;
        PLSQL3_2_DParser.displayed_column_return displayed_column637 =null;

        PLSQL3_2_DParser.displayed_column_return displayed_column639 =null;


        Object ASTERISK636_tree=null;
        Object COMMA638_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1003:2: ( ASTERISK | displayed_column ( COMMA displayed_column )* )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ASTERISK) ) {
                alt165=1;
            }
            else if ( (LA165_0==DOUBLEQUOTED_STRING||LA165_0==ID||LA165_0==LPAREN||LA165_0==MINUS||LA165_0==NUMBER||LA165_0==PLUS||LA165_0==QUOTED_STRING||LA165_0==76||LA165_0==93||LA165_0==101||LA165_0==136||LA165_0==162||LA165_0==165||LA165_0==169||LA165_0==174) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1003:5: ASTERISK
                    {
                    root_0 = cast(Object)adaptor.nil();


                    ASTERISK636=cast(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list3970); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK636_tree = 
                    cast(Object)adaptor.create(ASTERISK636)
                    ;
                    adaptor.addChild(root_0, ASTERISK636_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1004:4: displayed_column ( COMMA displayed_column )*
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_displayed_column_in_select_list3975);
                    displayed_column637=displayed_column();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column637.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1004:21: ( COMMA displayed_column )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==COMMA) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1004:23: COMMA displayed_column
                    	    {
                    	    COMMA638=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list3979); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA638_tree = 
                    	    cast(Object)adaptor.create(COMMA638)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA638_tree);
                    	    }

                    	    pushFollow(FOLLOW_displayed_column_in_select_list3981);
                    	    displayed_column639=displayed_column();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column639.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","select_list"," ",96);
            if ( state.backtracking>0 ) { memoize(input, 96, select_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_list"


    public static class table_reference_list_from_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_reference_list_from"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1007:1: table_reference_list_from : 'FROM' table_reference_list ;
    public final PLSQL3_2_DParser.table_reference_list_from_return table_reference_list_from()  {
        debug(trace_rules) writeln("Entering rule:","table_reference_list_from"," ",97);
        PLSQL3_2_DParser.table_reference_list_from_return retval = new PLSQL3_2_DParser.table_reference_list_from_return();
        retval.start = input.LT(1);

        int table_reference_list_from_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal640=null;
        PLSQL3_2_DParser.table_reference_list_return table_reference_list641 =null;


        Object string_literal640_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1008:2: ( 'FROM' table_reference_list )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1008:4: 'FROM' table_reference_list
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal640=cast(Token)match(input,106,FOLLOW_106_in_table_reference_list_from3995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = 
            cast(Object)adaptor.create(string_literal640)
            ;
            adaptor.addChild(root_0, string_literal640_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_table_reference_list_from3997);
            table_reference_list641=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list641.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_reference_list_from"," ",97);
            if ( state.backtracking>0 ) { memoize(input, 97, table_reference_list_from_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_reference_list_from"


    public static class table_reference_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_reference_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1011:1: table_reference_list : selected_table ( COMMA selected_table )* ;
    public final PLSQL3_2_DParser.table_reference_list_return table_reference_list()  {
        debug(trace_rules) writeln("Entering rule:","table_reference_list"," ",98);
        PLSQL3_2_DParser.table_reference_list_return retval = new PLSQL3_2_DParser.table_reference_list_return();
        retval.start = input.LT(1);

        int table_reference_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA643=null;
        PLSQL3_2_DParser.selected_table_return selected_table642 =null;

        PLSQL3_2_DParser.selected_table_return selected_table644 =null;


        Object COMMA643_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:2: ( selected_table ( COMMA selected_table )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:4: selected_table ( COMMA selected_table )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_selected_table_in_table_reference_list4008);
            selected_table642=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table642.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:19: ( COMMA selected_table )*
            loop166:
            do {
                int alt166=2;
                alt166 = dfa166.predict(input);
                switch (alt166) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:21: COMMA selected_table
            	    {
            	    COMMA643=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_table_reference_list4012); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA643_tree = 
            	    cast(Object)adaptor.create(COMMA643)
            	    ;
            	    adaptor.addChild(root_0, COMMA643_tree);
            	    }

            	    pushFollow(FOLLOW_selected_table_in_table_reference_list4014);
            	    selected_table644=selected_table();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table644.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_reference_list"," ",98);
            if ( state.backtracking>0 ) { memoize(input, 98, table_reference_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_reference_list"


    public static class join_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1015:1: join_clause : selected_table ( inner_cross_join_clause | outer_join_clause )+ ;
    public final PLSQL3_2_DParser.join_clause_return join_clause()  {
        debug(trace_rules) writeln("Entering rule:","join_clause"," ",99);
        PLSQL3_2_DParser.join_clause_return retval = new PLSQL3_2_DParser.join_clause_return();
        retval.start = input.LT(1);

        int join_clause_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.selected_table_return selected_table645 =null;

        PLSQL3_2_DParser.inner_cross_join_clause_return inner_cross_join_clause646 =null;

        PLSQL3_2_DParser.outer_join_clause_return outer_join_clause647 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:2: ( selected_table ( inner_cross_join_clause | outer_join_clause )+ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:4: selected_table ( inner_cross_join_clause | outer_join_clause )+
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_selected_table_in_join_clause4028);
            selected_table645=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table645.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:19: ( inner_cross_join_clause | outer_join_clause )+
            int cnt167=0;
            loop167:
            do {
                int alt167=3;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==ID) ) {
                    int LA167_2 = input.LA(2);

                    if ( (((synpred299_PLSQL3_2_D()&&synpred299_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "CROSS")||(toUpper(input.LT(1).getText)== "NATURAL")||(toUpper(input.LT(1).getText)== "JOIN")||(toUpper(input.LT(1).getText)== "INNER")))) ) {
                        alt167=1;
                    }
                    else if ( (((((toUpper(input.LT(1).getText)== "NATURAL")||(toUpper(input.LT(1).getText)== "FULL")||(toUpper(input.LT(1).getText)== "RIGHT")||(toUpper(input.LT(1).getText)== "LEFT")||(toUpper(input.LT(1).getText)== "PARTITION"))&&((toUpper(input.LT(1).getText)== "NATURAL")||(toUpper(input.LT(1).getText)== "FULL")||(toUpper(input.LT(1).getText)== "RIGHT")||(toUpper(input.LT(1).getText)== "LEFT")||(toUpper(input.LT(1).getText)== "PARTITION")))&&synpred300_PLSQL3_2_D())) ) {
                        alt167=2;
                    }


                }


                switch (alt167) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:21: inner_cross_join_clause
            	    {
            	    pushFollow(FOLLOW_inner_cross_join_clause_in_join_clause4032);
            	    inner_cross_join_clause646=inner_cross_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inner_cross_join_clause646.getTree());

            	    }
            	    break;
            	case 2 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:47: outer_join_clause
            	    {
            	    pushFollow(FOLLOW_outer_join_clause_in_join_clause4036);
            	    outer_join_clause647=outer_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_clause647.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","join_clause"," ",99);
            if ( state.backtracking>0 ) { memoize(input, 99, join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class inner_cross_join_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inner_cross_join_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1018:1: inner_cross_join_clause : ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name );
    public final PLSQL3_2_DParser.inner_cross_join_clause_return inner_cross_join_clause()  {
        debug(trace_rules) writeln("Entering rule:","inner_cross_join_clause"," ",100);
        PLSQL3_2_DParser.inner_cross_join_clause_return retval = new PLSQL3_2_DParser.inner_cross_join_clause_return();
        retval.start = input.LT(1);

        int inner_cross_join_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal651=null;
        Token LPAREN654=null;
        Token RPAREN656=null;
        PLSQL3_2_DParser.keyINNER_return keyINNER648 =null;

        PLSQL3_2_DParser.keyJOIN_return keyJOIN649 =null;

        PLSQL3_2_DParser.table_name_return table_name650 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition652 =null;

        PLSQL3_2_DParser.keyUSING_return keyUSING653 =null;

        PLSQL3_2_DParser.column_specs_return column_specs655 =null;

        PLSQL3_2_DParser.keyCROSS_return keyCROSS657 =null;

        PLSQL3_2_DParser.keyNATURAL_return keyNATURAL658 =null;

        PLSQL3_2_DParser.keyINNER_return keyINNER659 =null;

        PLSQL3_2_DParser.keyJOIN_return keyJOIN660 =null;

        PLSQL3_2_DParser.table_name_return table_name661 =null;


        Object string_literal651_tree=null;
        Object LPAREN654_tree=null;
        Object RPAREN656_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:2: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID) ) {
                int LA171_1 = input.LA(2);

                if ( (((((toUpper(input.LT(1).getText)== "JOIN")||(toUpper(input.LT(1).getText)== "INNER"))&&((toUpper(input.LT(1).getText)== "JOIN")||(toUpper(input.LT(1).getText)== "INNER")))&&synpred303_PLSQL3_2_D())) ) {
                    alt171=1;
                }
                else if ( (((toUpper(input.LT(1).getText)== "CROSS")||(toUpper(input.LT(1).getText)== "NATURAL"))) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }
            switch (alt171) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:4: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:4: ( keyINNER )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==ID) ) {
                        int LA168_1 = input.LA(2);

                        if ( (LA168_1==ID) ) {
                            int LA168_2 = input.LA(3);

                            if ( (LA168_2==ID) ) {
                                int LA168_4 = input.LA(4);

                                if ( (LA168_4==ID||LA168_4==143) ) {
                                    alt168=1;
                                }
                            }
                            else if ( (LA168_2==DOUBLEQUOTED_STRING||LA168_2==162) ) {
                                alt168=1;
                            }
                        }
                    }
                    switch (alt168) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:6: keyINNER
                           {
                           pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause4051);
                           keyINNER648=keyINNER();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER648.getTree());

                           }
                           break;

                        default:
                    }


                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause4056);
                    keyJOIN649=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN649.getTree());

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause4058);
                    table_name650=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name650.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:37: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==143) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==ID) ) {
                        alt169=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 0, input);

                        throw nvae;

                    }
                    switch (alt169) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:39: 'ON' sql_condition
                           {
                           string_literal651=cast(Token)match(input,143,FOLLOW_143_in_inner_cross_join_clause4062); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal651_tree = 
                           cast(Object)adaptor.create(string_literal651)
                           ;
                           adaptor.addChild(root_0, string_literal651_tree);
                           }

                           pushFollow(FOLLOW_sql_condition_in_inner_cross_join_clause4064);
                           sql_condition652=sql_condition();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition652.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:60: keyUSING LPAREN column_specs RPAREN
                           {
                           pushFollow(FOLLOW_keyUSING_in_inner_cross_join_clause4068);
                           keyUSING653=keyUSING();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING653.getTree());

                           LPAREN654=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_inner_cross_join_clause4070); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN654_tree = 
                           cast(Object)adaptor.create(LPAREN654)
                           ;
                           adaptor.addChild(root_0, LPAREN654_tree);
                           }

                           pushFollow(FOLLOW_column_specs_in_inner_cross_join_clause4072);
                           column_specs655=column_specs();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs655.getTree());

                           RPAREN656=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_cross_join_clause4074); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN656_tree = 
                           cast(Object)adaptor.create(RPAREN656)
                           ;
                           adaptor.addChild(root_0, RPAREN656_tree);
                           }

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:4: ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:4: ( keyCROSS | keyNATURAL ( keyINNER ) )
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==ID) ) {
                        int LA170_1 = input.LA(2);

                        if ( (LA170_1==ID) ) {
                            int LA170_2 = input.LA(3);

                            if ( (LA170_2==ID) ) {
                                switch ( input.LA(4) ) {
                                case EOF:
                                case ASTERISK:
                                case BULK_ROWCOUNT_ATTR:
                                case COMMA:
                                case DIVIDE:
                                case DOUBLEDOT:
                                case DOUBLEVERTBAR:
                                case EQ:
                                case EXPONENT:
                                case FOUND_ATTR:
                                case GEQ:
                                case GTH:
                                case ISOPEN_ATTR:
                                case LEQ:
                                case LPAREN:
                                case LTH:
                                case MINUS:
                                case NOTFOUND_ATTR:
                                case NOT_EQ:
                                case NUMBER:
                                case PLUS:
                                case QUOTED_STRING:
                                case RBRACK:
                                case ROWCOUNT_ATTR:
                                case RPAREN:
                                case SEMI:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 68:
                                case 76:
                                case 82:
                                case 92:
                                case 93:
                                case 95:
                                case 97:
                                case 100:
                                case 101:
                                case 106:
                                case 109:
                                case 110:
                                case 113:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 124:
                                case 125:
                                case 134:
                                case 136:
                                case 143:
                                case 144:
                                case 145:
                                case 151:
                                case 158:
                                case 159:
                                case 165:
                                case 169:
                                case 170:
                                case 172:
                                case 174:
                                case 175:
                                case 182:
                                case 183:
                                    {
                                    alt170=1;
                                    }
                                    break;
                                case ID:
                                    {
                                    int LA170_5 = input.LA(5);

                                    if ( ((((toUpper(input.LT(1).getText)== "CROSS")&&(toUpper(input.LT(1).getText)== "CROSS"))&&synpred304_PLSQL3_2_D())) ) {
                                        alt170=1;
                                    }
                                    else if ( ((toUpper(input.LT(1).getText)== "NATURAL")) ) {
                                        alt170=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 170, 5, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA170_6 = input.LA(5);

                                    if ( ((((toUpper(input.LT(1).getText)== "CROSS")&&(toUpper(input.LT(1).getText)== "CROSS"))&&synpred304_PLSQL3_2_D())) ) {
                                        alt170=1;
                                    }
                                    else if ( ((toUpper(input.LT(1).getText)== "NATURAL")) ) {
                                        alt170=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 170, 6, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case 162:
                                    {
                                    int LA170_7 = input.LA(5);

                                    if ( ((((toUpper(input.LT(1).getText)== "CROSS")&&(toUpper(input.LT(1).getText)== "CROSS"))&&synpred304_PLSQL3_2_D())) ) {
                                        alt170=1;
                                    }
                                    else if ( ((toUpper(input.LT(1).getText)== "NATURAL")) ) {
                                        alt170=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 170, 7, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae = 
                                        new NoViableAltException("", 170, 3, input);

                                    throw nvae;

                                }

                            }
                            else if ( (LA170_2==DOUBLEQUOTED_STRING||LA170_2==162) ) {
                                alt170=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 2, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;

                    }
                    switch (alt170) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:6: keyCROSS
                           {
                           pushFollow(FOLLOW_keyCROSS_in_inner_cross_join_clause4083);
                           keyCROSS657=keyCROSS();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCROSS657.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:17: keyNATURAL ( keyINNER )
                           {
                           pushFollow(FOLLOW_keyNATURAL_in_inner_cross_join_clause4087);
                           keyNATURAL658=keyNATURAL();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL658.getTree());

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:28: ( keyINNER )
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:30: keyINNER
                           {
                           pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause4091);
                           keyINNER659=keyINNER();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER659.getTree());

                           }


                           }
                           break;

                        default:
                    }


                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause4097);
                    keyJOIN660=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN660.getTree());

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause4099);
                    table_name661=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name661.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","inner_cross_join_clause"," ",100);
            if ( state.backtracking>0 ) { memoize(input, 100, inner_cross_join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inner_cross_join_clause"


    public static class outer_join_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1022:1: outer_join_clause : ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? ;
    public final PLSQL3_2_DParser.outer_join_clause_return outer_join_clause()  {
        debug(trace_rules) writeln("Entering rule:","outer_join_clause"," ",101);
        PLSQL3_2_DParser.outer_join_clause_return retval = new PLSQL3_2_DParser.outer_join_clause_return();
        retval.start = input.LT(1);

        int outer_join_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal670=null;
        Token LPAREN673=null;
        Token RPAREN675=null;
        PLSQL3_2_DParser.query_partition_clause_return query_partition_clause662 =null;

        PLSQL3_2_DParser.outer_join_type_return outer_join_type663 =null;

        PLSQL3_2_DParser.keyJOIN_return keyJOIN664 =null;

        PLSQL3_2_DParser.keyNATURAL_return keyNATURAL665 =null;

        PLSQL3_2_DParser.outer_join_type_return outer_join_type666 =null;

        PLSQL3_2_DParser.keyJOIN_return keyJOIN667 =null;

        PLSQL3_2_DParser.selected_table_return selected_table668 =null;

        PLSQL3_2_DParser.query_partition_clause_return query_partition_clause669 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition671 =null;

        PLSQL3_2_DParser.keyUSING_return keyUSING672 =null;

        PLSQL3_2_DParser.column_specs_return column_specs674 =null;


        Object string_literal670_tree=null;
        Object LPAREN673_tree=null;
        Object RPAREN675_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1023:2: ( ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1023:4: ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1023:4: ( query_partition_clause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==ID) ) {
                int LA172_1 = input.LA(2);

                if ( (LA172_1==75) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1023:6: query_partition_clause
                   {
                   pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause4111);
                   query_partition_clause662=query_partition_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause662.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1024:3: ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ID) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==ID) ) {
                    int LA174_2 = input.LA(3);

                    if ( (((synpred306_PLSQL3_2_D()&&synpred306_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "FULL")||(toUpper(input.LT(1).getText)== "RIGHT")||(toUpper(input.LT(1).getText)== "LEFT")))) ) {
                        alt174=1;
                    }
                    else if ( ((toUpper(input.LT(1).getText)== "NATURAL")) ) {
                        alt174=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 174, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1024:5: outer_join_type keyJOIN
                   {
                   pushFollow(FOLLOW_outer_join_type_in_outer_join_clause4120);
                   outer_join_type663=outer_join_type();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type663.getTree());

                   pushFollow(FOLLOW_keyJOIN_in_outer_join_clause4122);
                   keyJOIN664=keyJOIN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN664.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1025:5: keyNATURAL ( outer_join_type )? keyJOIN
                   {
                   pushFollow(FOLLOW_keyNATURAL_in_outer_join_clause4128);
                   keyNATURAL665=keyNATURAL();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL665.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1025:16: ( outer_join_type )?
                   int alt173=2;
                   int LA173_0 = input.LA(1);

                   if ( (LA173_0==ID) ) {
                       int LA173_1 = input.LA(2);

                       if ( (LA173_1==ID) ) {
                           int LA173_2 = input.LA(3);

                           if ( (((synpred307_PLSQL3_2_D()&&synpred307_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "FULL")||(toUpper(input.LT(1).getText)== "RIGHT")||(toUpper(input.LT(1).getText)== "LEFT")))) ) {
                               alt173=1;
                           }
                       }
                   }
                   switch (alt173) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1025:18: outer_join_type
                          {
                          pushFollow(FOLLOW_outer_join_type_in_outer_join_clause4132);
                          outer_join_type666=outer_join_type();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type666.getTree());

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_keyJOIN_in_outer_join_clause4137);
                   keyJOIN667=keyJOIN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN667.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_selected_table_in_outer_join_clause4145);
            selected_table668=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table668.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1027:18: ( query_partition_clause )?
            int alt175=2;
            alt175 = dfa175.predict(input);
            switch (alt175) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1027:20: query_partition_clause
                   {
                   pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause4149);
                   query_partition_clause669=query_partition_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause669.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:3: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            int alt176=3;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==143) ) {
                int LA176_1 = input.LA(2);

                if ( (synpred309_PLSQL3_2_D()) ) {
                    alt176=1;
                }
            }
            else if ( (LA176_0==ID) ) {
                int LA176_2 = input.LA(2);

                if ( (((synpred310_PLSQL3_2_D()&&synpred310_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "USING"))) ) {
                    alt176=2;
                }
            }
            switch (alt176) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:5: 'ON' sql_condition
                   {
                   string_literal670=cast(Token)match(input,143,FOLLOW_143_in_outer_join_clause4158); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal670_tree = 
                   cast(Object)adaptor.create(string_literal670)
                   ;
                   adaptor.addChild(root_0, string_literal670_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_outer_join_clause4160);
                   sql_condition671=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition671.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:26: keyUSING LPAREN column_specs RPAREN
                   {
                   pushFollow(FOLLOW_keyUSING_in_outer_join_clause4164);
                   keyUSING672=keyUSING();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING672.getTree());

                   LPAREN673=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_clause4166); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN673_tree = 
                   cast(Object)adaptor.create(LPAREN673)
                   ;
                   adaptor.addChild(root_0, LPAREN673_tree);
                   }

                   pushFollow(FOLLOW_column_specs_in_outer_join_clause4168);
                   column_specs674=column_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs674.getTree());

                   RPAREN675=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_clause4170); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN675_tree = 
                   cast(Object)adaptor.create(RPAREN675)
                   ;
                   adaptor.addChild(root_0, RPAREN675_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","outer_join_clause"," ",101);
            if ( state.backtracking>0 ) { memoize(input, 101, outer_join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_clause"


    public static class query_partition_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_partition_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1030:1: query_partition_clause : keyPARTITION 'BY' expression_list ;
    public final PLSQL3_2_DParser.query_partition_clause_return query_partition_clause()  {
        debug(trace_rules) writeln("Entering rule:","query_partition_clause"," ",102);
        PLSQL3_2_DParser.query_partition_clause_return retval = new PLSQL3_2_DParser.query_partition_clause_return();
        retval.start = input.LT(1);

        int query_partition_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal677=null;
        PLSQL3_2_DParser.keyPARTITION_return keyPARTITION676 =null;

        PLSQL3_2_DParser.expression_list_return expression_list678 =null;


        Object string_literal677_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1031:2: ( keyPARTITION 'BY' expression_list )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1031:4: keyPARTITION 'BY' expression_list
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyPARTITION_in_query_partition_clause4183);
            keyPARTITION676=keyPARTITION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPARTITION676.getTree());

            string_literal677=cast(Token)match(input,75,FOLLOW_75_in_query_partition_clause4185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal677_tree = 
            cast(Object)adaptor.create(string_literal677)
            ;
            adaptor.addChild(root_0, string_literal677_tree);
            }

            pushFollow(FOLLOW_expression_list_in_query_partition_clause4187);
            expression_list678=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list678.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","query_partition_clause"," ",102);
            if ( state.backtracking>0 ) { memoize(input, 102, query_partition_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"


    public static class outer_join_type_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_type"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1033:1: outer_join_type : ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? ;
    public final PLSQL3_2_DParser.outer_join_type_return outer_join_type()  {
        debug(trace_rules) writeln("Entering rule:","outer_join_type"," ",103);
        PLSQL3_2_DParser.outer_join_type_return retval = new PLSQL3_2_DParser.outer_join_type_return();
        retval.start = input.LT(1);

        int outer_join_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyFULL_return keyFULL679 =null;

        PLSQL3_2_DParser.keyLEFT_return keyLEFT680 =null;

        PLSQL3_2_DParser.keyRIGHT_return keyRIGHT681 =null;

        PLSQL3_2_DParser.keyOUTER_return keyOUTER682 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:2: ( ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:4: ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:4: ( keyFULL | keyLEFT | keyRIGHT )
            int alt177=3;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==ID) ) {
                int LA177_1 = input.LA(2);

                if ( ((((toUpper(input.LT(1).getText)== "FULL")&&(toUpper(input.LT(1).getText)== "FULL"))&&synpred311_PLSQL3_2_D())) ) {
                    alt177=1;
                }
                else if ( (((synpred312_PLSQL3_2_D()&&synpred312_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "LEFT"))) ) {
                    alt177=2;
                }
                else if ( ((toUpper(input.LT(1).getText)== "RIGHT")) ) {
                    alt177=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 177, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }
            switch (alt177) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:6: keyFULL
                   {
                   pushFollow(FOLLOW_keyFULL_in_outer_join_type4199);
                   keyFULL679=keyFULL();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFULL679.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:16: keyLEFT
                   {
                   pushFollow(FOLLOW_keyLEFT_in_outer_join_type4203);
                   keyLEFT680=keyLEFT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLEFT680.getTree());

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:26: keyRIGHT
                   {
                   pushFollow(FOLLOW_keyRIGHT_in_outer_join_type4207);
                   keyRIGHT681=keyRIGHT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRIGHT681.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:37: ( keyOUTER )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==ID) ) {
                    int LA178_3 = input.LA(3);

                    if ( ((((toUpper(input.LT(1).getText)== "OUTER")&&(toUpper(input.LT(1).getText)== "OUTER"))&&synpred313_PLSQL3_2_D())) ) {
                        alt178=1;
                    }
                }
                else if ( (LA178_1==EOF) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:39: keyOUTER
                   {
                   pushFollow(FOLLOW_keyOUTER_in_outer_join_type4213);
                   keyOUTER682=keyOUTER();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUTER682.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","outer_join_type"," ",103);
            if ( state.backtracking>0 ) { memoize(input, 103, outer_join_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_type"


    public static class outer_join_sign_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_sign"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1036:1: outer_join_sign : LPAREN PLUS RPAREN ;
    public final PLSQL3_2_DParser.outer_join_sign_return outer_join_sign()  {
        debug(trace_rules) writeln("Entering rule:","outer_join_sign"," ",104);
        PLSQL3_2_DParser.outer_join_sign_return retval = new PLSQL3_2_DParser.outer_join_sign_return();
        retval.start = input.LT(1);

        int outer_join_sign_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN683=null;
        Token PLUS684=null;
        Token RPAREN685=null;

        Object LPAREN683_tree=null;
        Object PLUS684_tree=null;
        Object RPAREN685_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1037:2: ( LPAREN PLUS RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1037:4: LPAREN PLUS RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN683=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_sign4226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN683_tree = 
            cast(Object)adaptor.create(LPAREN683)
            ;
            adaptor.addChild(root_0, LPAREN683_tree);
            }

            PLUS684=cast(Token)match(input,PLUS,FOLLOW_PLUS_in_outer_join_sign4228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLUS684_tree = 
            cast(Object)adaptor.create(PLUS684)
            ;
            adaptor.addChild(root_0, PLUS684_tree);
            }

            RPAREN685=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_sign4230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN685_tree = 
            cast(Object)adaptor.create(RPAREN685)
            ;
            adaptor.addChild(root_0, RPAREN685_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","outer_join_sign"," ",104);
            if ( state.backtracking>0 ) { memoize(input, 104, outer_join_sign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_sign"


    public static class where_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1039:1: where_clause : 'WHERE' sql_condition ;
    public final PLSQL3_2_DParser.where_clause_return where_clause()  {
        debug(trace_rules) writeln("Entering rule:","where_clause"," ",105);
        PLSQL3_2_DParser.where_clause_return retval = new PLSQL3_2_DParser.where_clause_return();
        retval.start = input.LT(1);

        int where_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal686=null;
        PLSQL3_2_DParser.sql_condition_return sql_condition687 =null;


        Object string_literal686_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1040:2: ( 'WHERE' sql_condition )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1040:4: 'WHERE' sql_condition
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal686=cast(Token)match(input,183,FOLLOW_183_in_where_clause4240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = 
            cast(Object)adaptor.create(string_literal686)
            ;
            adaptor.addChild(root_0, string_literal686_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_where_clause4242);
            sql_condition687=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition687.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","where_clause"," ",105);
            if ( state.backtracking>0 ) { memoize(input, 105, where_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class hierarchical_query_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hierarchical_query_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1042:1: hierarchical_query_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition ;
    public final PLSQL3_2_DParser.hierarchical_query_clause_return hierarchical_query_clause()  {
        debug(trace_rules) writeln("Entering rule:","hierarchical_query_clause"," ",106);
        PLSQL3_2_DParser.hierarchical_query_clause_return retval = new PLSQL3_2_DParser.hierarchical_query_clause_return();
        retval.start = input.LT(1);

        int hierarchical_query_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal688=null;
        Token string_literal689=null;
        Token string_literal691=null;
        Token string_literal692=null;
        PLSQL3_2_DParser.sql_condition_return sql_condition690 =null;

        PLSQL3_2_DParser.keyNOCYCLE_return keyNOCYCLE693 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition694 =null;


        Object string_literal688_tree=null;
        Object string_literal689_tree=null;
        Object string_literal691_tree=null;
        Object string_literal692_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:2: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:4: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:4: ( 'START' 'WITH' sql_condition )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==170) ) {
                alt179=1;
            }
            switch (alt179) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:6: 'START' 'WITH' sql_condition
                   {
                   string_literal688=cast(Token)match(input,170,FOLLOW_170_in_hierarchical_query_clause4254); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal688_tree = 
                   cast(Object)adaptor.create(string_literal688)
                   ;
                   adaptor.addChild(root_0, string_literal688_tree);
                   }

                   string_literal689=cast(Token)match(input,185,FOLLOW_185_in_hierarchical_query_clause4256); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal689_tree = 
                   cast(Object)adaptor.create(string_literal689)
                   ;
                   adaptor.addChild(root_0, string_literal689_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause4258);
                   sql_condition690=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition690.getTree());

                   }
                   break;

                default:
            }


            string_literal691=cast(Token)match(input,82,FOLLOW_82_in_hierarchical_query_clause4263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal691_tree = 
            cast(Object)adaptor.create(string_literal691)
            ;
            adaptor.addChild(root_0, string_literal691_tree);
            }

            string_literal692=cast(Token)match(input,75,FOLLOW_75_in_hierarchical_query_clause4265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = 
            cast(Object)adaptor.create(string_literal692)
            ;
            adaptor.addChild(root_0, string_literal692_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:53: ( keyNOCYCLE )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (((synpred315_PLSQL3_2_D()&&synpred315_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "NOCYCLE"))) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:55: keyNOCYCLE
                   {
                   pushFollow(FOLLOW_keyNOCYCLE_in_hierarchical_query_clause4269);
                   keyNOCYCLE693=keyNOCYCLE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNOCYCLE693.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause4274);
            sql_condition694=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition694.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","hierarchical_query_clause"," ",106);
            if ( state.backtracking>0 ) { memoize(input, 106, hierarchical_query_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"


    public static class group_by_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1045:1: group_by_clause : 'GROUP' 'BY' group_by_exprs ;
    public final PLSQL3_2_DParser.group_by_clause_return group_by_clause()  {
        debug(trace_rules) writeln("Entering rule:","group_by_clause"," ",107);
        PLSQL3_2_DParser.group_by_clause_return retval = new PLSQL3_2_DParser.group_by_clause_return();
        retval.start = input.LT(1);

        int group_by_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal695=null;
        Token string_literal696=null;
        PLSQL3_2_DParser.group_by_exprs_return group_by_exprs697 =null;


        Object string_literal695_tree=null;
        Object string_literal696_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1046:2: ( 'GROUP' 'BY' group_by_exprs )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1046:4: 'GROUP' 'BY' group_by_exprs
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal695=cast(Token)match(input,109,FOLLOW_109_in_group_by_clause4284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal695_tree = 
            cast(Object)adaptor.create(string_literal695)
            ;
            adaptor.addChild(root_0, string_literal695_tree);
            }

            string_literal696=cast(Token)match(input,75,FOLLOW_75_in_group_by_clause4286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = 
            cast(Object)adaptor.create(string_literal696)
            ;
            adaptor.addChild(root_0, string_literal696_tree);
            }

            pushFollow(FOLLOW_group_by_exprs_in_group_by_clause4288);
            group_by_exprs697=group_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_exprs697.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","group_by_clause"," ",107);
            if ( state.backtracking>0 ) { memoize(input, 107, group_by_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_clause"


    public static class group_by_exprs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_exprs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1048:1: group_by_exprs : group_by_expr ( COMMA group_by_expr )* ;
    public final PLSQL3_2_DParser.group_by_exprs_return group_by_exprs()  {
        debug(trace_rules) writeln("Entering rule:","group_by_exprs"," ",108);
        PLSQL3_2_DParser.group_by_exprs_return retval = new PLSQL3_2_DParser.group_by_exprs_return();
        retval.start = input.LT(1);

        int group_by_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA699=null;
        PLSQL3_2_DParser.group_by_expr_return group_by_expr698 =null;

        PLSQL3_2_DParser.group_by_expr_return group_by_expr700 =null;


        Object COMMA699_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:2: ( group_by_expr ( COMMA group_by_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:4: group_by_expr ( COMMA group_by_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_group_by_expr_in_group_by_exprs4298);
            group_by_expr698=group_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr698.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:18: ( COMMA group_by_expr )*
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==COMMA) ) {
                    int LA181_2 = input.LA(2);

                    if ( (synpred316_PLSQL3_2_D()) ) {
                        alt181=1;
                    }


                }


                switch (alt181) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:20: COMMA group_by_expr
            	    {
            	    COMMA699=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_exprs4302); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA699_tree = 
            	    cast(Object)adaptor.create(COMMA699)
            	    ;
            	    adaptor.addChild(root_0, COMMA699_tree);
            	    }

            	    pushFollow(FOLLOW_group_by_expr_in_group_by_exprs4304);
            	    group_by_expr700=group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr700.getTree());

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","group_by_exprs"," ",108);
            if ( state.backtracking>0 ) { memoize(input, 108, group_by_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_exprs"


    public static class group_by_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1051:1: group_by_expr : ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list );
    public final PLSQL3_2_DParser.group_by_expr_return group_by_expr()  {
        debug(trace_rules) writeln("Entering rule:","group_by_expr"," ",109);
        PLSQL3_2_DParser.group_by_expr_return retval = new PLSQL3_2_DParser.group_by_expr_return();
        retval.start = input.LT(1);

        int group_by_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.rollup_cube_clause_return rollup_cube_clause701 =null;

        PLSQL3_2_DParser.grouping_sets_clause_return grouping_sets_clause702 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list703 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1052:2: ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list )
            int alt182=3;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==ID) ) {
                int LA182_1 = input.LA(2);

                if ( (((synpred317_PLSQL3_2_D()&&synpred317_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "CUBE")||(toUpper(input.LT(1).getText)== "ROLLUP")))) ) {
                    alt182=1;
                }
                else if ( ((((toUpper(input.LT(1).getText)== "GROUPING")&&(toUpper(input.LT(1).getText)== "GROUPING"))&&synpred318_PLSQL3_2_D())) ) {
                    alt182=2;
                }
                else if ( (true) ) {
                    alt182=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA182_0==DOUBLEQUOTED_STRING||LA182_0==LPAREN||LA182_0==MINUS||LA182_0==NUMBER||LA182_0==PLUS||LA182_0==QUOTED_STRING||LA182_0==76||LA182_0==93||LA182_0==101||LA182_0==136||LA182_0==162||LA182_0==165||LA182_0==169||LA182_0==174) ) {
                alt182=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;

            }
            switch (alt182) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1052:4: rollup_cube_clause
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_expr4317);
                    rollup_cube_clause701=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause701.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1053:4: grouping_sets_clause
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_expr4322);
                    grouping_sets_clause702=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_clause702.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1054:4: grouping_expression_list
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_expression_list_in_group_by_expr4327);
                    grouping_expression_list703=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list703.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","group_by_expr"," ",109);
            if ( state.backtracking>0 ) { memoize(input, 109, group_by_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_expr"


    public static class rollup_cube_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollup_cube_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1056:1: rollup_cube_clause : ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN ;
    public final PLSQL3_2_DParser.rollup_cube_clause_return rollup_cube_clause()  {
        debug(trace_rules) writeln("Entering rule:","rollup_cube_clause"," ",110);
        PLSQL3_2_DParser.rollup_cube_clause_return retval = new PLSQL3_2_DParser.rollup_cube_clause_return();
        retval.start = input.LT(1);

        int rollup_cube_clause_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN706=null;
        Token RPAREN708=null;
        PLSQL3_2_DParser.keyROLLUP_return keyROLLUP704 =null;

        PLSQL3_2_DParser.keyCUBE_return keyCUBE705 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list707 =null;


        Object LPAREN706_tree=null;
        Object RPAREN708_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:2: ( ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:4: ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:4: ( keyROLLUP | keyCUBE )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==ID) ) {
                int LA183_1 = input.LA(2);

                if ( (((synpred319_PLSQL3_2_D()&&synpred319_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "ROLLUP"))) ) {
                    alt183=1;
                }
                else if ( ((toUpper(input.LT(1).getText)== "CUBE")) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:6: keyROLLUP
                   {
                   pushFollow(FOLLOW_keyROLLUP_in_rollup_cube_clause4339);
                   keyROLLUP704=keyROLLUP();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLUP704.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:18: keyCUBE
                   {
                   pushFollow(FOLLOW_keyCUBE_in_rollup_cube_clause4343);
                   keyCUBE705=keyCUBE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCUBE705.getTree());

                   }
                   break;

                default:
            }


            LPAREN706=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_rollup_cube_clause4347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN706_tree = 
            cast(Object)adaptor.create(LPAREN706)
            ;
            adaptor.addChild(root_0, LPAREN706_tree);
            }

            pushFollow(FOLLOW_grouping_expression_list_in_rollup_cube_clause4349);
            grouping_expression_list707=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list707.getTree());

            RPAREN708=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_rollup_cube_clause4351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN708_tree = 
            cast(Object)adaptor.create(RPAREN708)
            ;
            adaptor.addChild(root_0, RPAREN708_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","rollup_cube_clause"," ",110);
            if ( state.backtracking>0 ) { memoize(input, 110, rollup_cube_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"


    public static class grouping_sets_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1059:1: grouping_sets_clause : keyGROUPING keySETS LPAREN grouping_expression_list RPAREN ;
    public final PLSQL3_2_DParser.grouping_sets_clause_return grouping_sets_clause()  {
        debug(trace_rules) writeln("Entering rule:","grouping_sets_clause"," ",111);
        PLSQL3_2_DParser.grouping_sets_clause_return retval = new PLSQL3_2_DParser.grouping_sets_clause_return();
        retval.start = input.LT(1);

        int grouping_sets_clause_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN711=null;
        Token RPAREN713=null;
        PLSQL3_2_DParser.keyGROUPING_return keyGROUPING709 =null;

        PLSQL3_2_DParser.keySETS_return keySETS710 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list712 =null;


        Object LPAREN711_tree=null;
        Object RPAREN713_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1060:2: ( keyGROUPING keySETS LPAREN grouping_expression_list RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1060:4: keyGROUPING keySETS LPAREN grouping_expression_list RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyGROUPING_in_grouping_sets_clause4361);
            keyGROUPING709=keyGROUPING();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyGROUPING709.getTree());

            pushFollow(FOLLOW_keySETS_in_grouping_sets_clause4363);
            keySETS710=keySETS();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySETS710.getTree());

            LPAREN711=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_grouping_sets_clause4365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN711_tree = 
            cast(Object)adaptor.create(LPAREN711)
            ;
            adaptor.addChild(root_0, LPAREN711_tree);
            }

            pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_clause4367);
            grouping_expression_list712=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list712.getTree());

            RPAREN713=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_grouping_sets_clause4369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN713_tree = 
            cast(Object)adaptor.create(RPAREN713)
            ;
            adaptor.addChild(root_0, RPAREN713_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","grouping_sets_clause"," ",111);
            if ( state.backtracking>0 ) { memoize(input, 111, grouping_sets_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"


    public static class grouping_sets_exprs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_exprs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1062:1: grouping_sets_exprs : grouping_sets_expr ( COMMA grouping_sets_expr )* ;
    public final PLSQL3_2_DParser.grouping_sets_exprs_return grouping_sets_exprs()  {
        debug(trace_rules) writeln("Entering rule:","grouping_sets_exprs"," ",112);
        PLSQL3_2_DParser.grouping_sets_exprs_return retval = new PLSQL3_2_DParser.grouping_sets_exprs_return();
        retval.start = input.LT(1);

        int grouping_sets_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA715=null;
        PLSQL3_2_DParser.grouping_sets_expr_return grouping_sets_expr714 =null;

        PLSQL3_2_DParser.grouping_sets_expr_return grouping_sets_expr716 =null;


        Object COMMA715_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1063:2: ( grouping_sets_expr ( COMMA grouping_sets_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1063:4: grouping_sets_expr ( COMMA grouping_sets_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4379);
            grouping_sets_expr714=grouping_sets_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr714.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1063:23: ( COMMA grouping_sets_expr )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==COMMA) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1063:25: COMMA grouping_sets_expr
            	    {
            	    COMMA715=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_exprs4383); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA715_tree = 
            	    cast(Object)adaptor.create(COMMA715)
            	    ;
            	    adaptor.addChild(root_0, COMMA715_tree);
            	    }

            	    pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4385);
            	    grouping_sets_expr716=grouping_sets_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr716.getTree());

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","grouping_sets_exprs"," ",112);
            if ( state.backtracking>0 ) { memoize(input, 112, grouping_sets_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_exprs"


    public static class grouping_sets_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1065:1: grouping_sets_expr : ( rollup_cube_clause | grouping_expression_list );
    public final PLSQL3_2_DParser.grouping_sets_expr_return grouping_sets_expr()  {
        debug(trace_rules) writeln("Entering rule:","grouping_sets_expr"," ",113);
        PLSQL3_2_DParser.grouping_sets_expr_return retval = new PLSQL3_2_DParser.grouping_sets_expr_return();
        retval.start = input.LT(1);

        int grouping_sets_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.rollup_cube_clause_return rollup_cube_clause717 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list718 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1066:2: ( rollup_cube_clause | grouping_expression_list )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID) ) {
                int LA185_1 = input.LA(2);

                if ( (((synpred321_PLSQL3_2_D()&&synpred321_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "CUBE")||(toUpper(input.LT(1).getText)== "ROLLUP")))) ) {
                    alt185=1;
                }
                else if ( (true) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA185_0==DOUBLEQUOTED_STRING||LA185_0==LPAREN||LA185_0==MINUS||LA185_0==NUMBER||LA185_0==PLUS||LA185_0==QUOTED_STRING||LA185_0==76||LA185_0==93||LA185_0==101||LA185_0==136||LA185_0==162||LA185_0==165||LA185_0==169||LA185_0==174) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }
            switch (alt185) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1066:4: rollup_cube_clause
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_expr4398);
                    rollup_cube_clause717=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause717.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1066:25: grouping_expression_list
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_expr4402);
                    grouping_expression_list718=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list718.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","grouping_sets_expr"," ",113);
            if ( state.backtracking>0 ) { memoize(input, 113, grouping_sets_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_expr"


    public static class model_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1068:1: model_clause : keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model ;
    public final PLSQL3_2_DParser.model_clause_return model_clause()  {
        debug(trace_rules) writeln("Entering rule:","model_clause"," ",114);
        PLSQL3_2_DParser.model_clause_return retval = new PLSQL3_2_DParser.model_clause_return();
        retval.start = input.LT(1);

        int model_clause_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyMODEL_return keyMODEL719 =null;

        PLSQL3_2_DParser.cell_reference_options_return cell_reference_options720 =null;

        PLSQL3_2_DParser.return_rows_clause_return return_rows_clause721 =null;

        PLSQL3_2_DParser.reference_model_return reference_model722 =null;

        PLSQL3_2_DParser.main_model_return main_model723 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1069:2: ( keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1069:4: keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyMODEL_in_model_clause4412);
            keyMODEL719=keyMODEL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMODEL719.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1069:13: ( cell_reference_options )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1069:15: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_model_clause4416);
            cell_reference_options720=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options720.getTree());

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1070:3: ( return_rows_clause )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==158) ) {
                alt186=1;
            }
            switch (alt186) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1070:5: return_rows_clause
                   {
                   pushFollow(FOLLOW_return_rows_clause_in_model_clause4424);
                   return_rows_clause721=return_rows_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, return_rows_clause721.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1071:3: ( reference_model )+
            int cnt187=0;
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==ID) ) {
                    int LA187_1 = input.LA(2);

                    if ( (LA187_1==DOUBLEQUOTED_STRING||LA187_1==ID) ) {
                        int LA187_2 = input.LA(3);

                        if ( (LA187_2==143) ) {
                            alt187=1;
                        }


                    }


                }


                switch (alt187) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1071:5: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause4433);
            	    reference_model722=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model722.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt187 >= 1 ) break loop187;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(187, input);
                        throw eee;
                }
                cnt187++;
            } while (true);


            pushFollow(FOLLOW_main_model_in_model_clause4438);
            main_model723=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model723.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_clause"," ",114);
            if ( state.backtracking>0 ) { memoize(input, 114, model_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_clause"


    public static class cell_reference_options_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_reference_options"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1073:1: cell_reference_options : ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? ;
    public final PLSQL3_2_DParser.cell_reference_options_return cell_reference_options()  {
        debug(trace_rules) writeln("Entering rule:","cell_reference_options"," ",115);
        PLSQL3_2_DParser.cell_reference_options_return retval = new PLSQL3_2_DParser.cell_reference_options_return();
        retval.start = input.LT(1);

        int cell_reference_options_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal727=null;
        PLSQL3_2_DParser.keyIGNORE_return keyIGNORE724 =null;

        PLSQL3_2_DParser.keyKEEP_return keyKEEP725 =null;

        PLSQL3_2_DParser.keyNAV_return keyNAV726 =null;

        PLSQL3_2_DParser.keyDIMENSION_return keyDIMENSION728 =null;

        PLSQL3_2_DParser.keySINGLE_return keySINGLE729 =null;

        PLSQL3_2_DParser.keyREFERENCE_return keyREFERENCE730 =null;


        Object string_literal727_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:2: ( ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:4: ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:4: ( ( keyIGNORE | keyKEEP ) keyNAV )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==ID) ) {
                int LA189_1 = input.LA(2);

                if ( (LA189_1==ID) ) {
                    int LA189_3 = input.LA(3);

                    if ( (((synpred325_PLSQL3_2_D()&&synpred325_PLSQL3_2_D())&&((toUpper(input.LT(1).getText)== "KEEP")||(toUpper(input.LT(1).getText)== "IGNORE")))) ) {
                        alt189=1;
                    }
                }
            }
            switch (alt189) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:6: ( keyIGNORE | keyKEEP ) keyNAV
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:6: ( keyIGNORE | keyKEEP )
                   int alt188=2;
                   int LA188_0 = input.LA(1);

                   if ( (LA188_0==ID) ) {
                       int LA188_1 = input.LA(2);

                       if ( (((synpred324_PLSQL3_2_D()&&synpred324_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "IGNORE"))) ) {
                           alt188=1;
                       }
                       else if ( ((toUpper(input.LT(1).getText)== "KEEP")) ) {
                           alt188=2;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 188, 1, input);

                           throw nvae;

                       }
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 188, 0, input);

                       throw nvae;

                   }
                   switch (alt188) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:8: keyIGNORE
                          {
                          pushFollow(FOLLOW_keyIGNORE_in_cell_reference_options4452);
                          keyIGNORE724=keyIGNORE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyIGNORE724.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:20: keyKEEP
                          {
                          pushFollow(FOLLOW_keyKEEP_in_cell_reference_options4456);
                          keyKEEP725=keyKEEP();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyKEEP725.getTree());

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_keyNAV_in_cell_reference_options4460);
                   keyNAV726=keyNAV();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAV726.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:3: ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==176) ) {
                alt191=1;
            }
            switch (alt191) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:5: 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE )
                   {
                   string_literal727=cast(Token)match(input,176,FOLLOW_176_in_cell_reference_options4469); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal727_tree = 
                   cast(Object)adaptor.create(string_literal727)
                   ;
                   adaptor.addChild(root_0, string_literal727_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:14: ( keyDIMENSION | keySINGLE keyREFERENCE )
                   int alt190=2;
                   int LA190_0 = input.LA(1);

                   if ( (LA190_0==ID) ) {
                       int LA190_1 = input.LA(2);

                       if ( (LA190_1==EOF||LA190_1==LPAREN||LA190_1==158) ) {
                           alt190=1;
                       }
                       else if ( (LA190_1==ID) ) {
                           int LA190_3 = input.LA(3);

                           if ( ((((toUpper(input.LT(1).getText)== "DIMENSION")&&(toUpper(input.LT(1).getText)== "DIMENSION"))&&synpred326_PLSQL3_2_D())) ) {
                               alt190=1;
                           }
                           else if ( ((toUpper(input.LT(1).getText)== "SINGLE")) ) {
                               alt190=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 190, 3, input);

                               throw nvae;

                           }
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 190, 1, input);

                           throw nvae;

                       }
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 190, 0, input);

                       throw nvae;

                   }
                   switch (alt190) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:16: keyDIMENSION
                          {
                          pushFollow(FOLLOW_keyDIMENSION_in_cell_reference_options4473);
                          keyDIMENSION728=keyDIMENSION();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION728.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:31: keySINGLE keyREFERENCE
                          {
                          pushFollow(FOLLOW_keySINGLE_in_cell_reference_options4477);
                          keySINGLE729=keySINGLE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keySINGLE729.getTree());

                          pushFollow(FOLLOW_keyREFERENCE_in_cell_reference_options4479);
                          keyREFERENCE730=keyREFERENCE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE730.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cell_reference_options"," ",115);
            if ( state.backtracking>0 ) { memoize(input, 115, cell_reference_options_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"


    public static class return_rows_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_rows_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1077:1: return_rows_clause : keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' ;
    public final PLSQL3_2_DParser.return_rows_clause_return return_rows_clause()  {
        debug(trace_rules) writeln("Entering rule:","return_rows_clause"," ",116);
        PLSQL3_2_DParser.return_rows_clause_return retval = new PLSQL3_2_DParser.return_rows_clause_return();
        retval.start = input.LT(1);

        int return_rows_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal733=null;
        Token string_literal734=null;
        PLSQL3_2_DParser.keyRETURN_return keyRETURN731 =null;

        PLSQL3_2_DParser.keyUPDATED_return keyUPDATED732 =null;


        Object string_literal733_tree=null;
        Object string_literal734_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1078:2: ( keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1078:4: keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS'
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyRETURN_in_return_rows_clause4494);
            keyRETURN731=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN731.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1078:14: ( keyUPDATED | 'ALL' )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==ID) ) {
                alt192=1;
            }
            else if ( (LA192_0==61) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;

            }
            switch (alt192) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1078:16: keyUPDATED
                   {
                   pushFollow(FOLLOW_keyUPDATED_in_return_rows_clause4498);
                   keyUPDATED732=keyUPDATED();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPDATED732.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1078:29: 'ALL'
                   {
                   string_literal733=cast(Token)match(input,61,FOLLOW_61_in_return_rows_clause4502); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal733_tree = 
                   cast(Object)adaptor.create(string_literal733)
                   ;
                   adaptor.addChild(root_0, string_literal733_tree);
                   }

                   }
                   break;

                default:
            }


            string_literal734=cast(Token)match(input,163,FOLLOW_163_in_return_rows_clause4506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = 
            cast(Object)adaptor.create(string_literal734)
            ;
            adaptor.addChild(root_0, string_literal734_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","return_rows_clause"," ",116);
            if ( state.backtracking>0 ) { memoize(input, 116, return_rows_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"


    public static class reference_model_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_model"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1080:1: reference_model : keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) ;
    public final PLSQL3_2_DParser.reference_model_return reference_model()  {
        debug(trace_rules) writeln("Entering rule:","reference_model"," ",117);
        PLSQL3_2_DParser.reference_model_return retval = new PLSQL3_2_DParser.reference_model_return();
        retval.start = input.LT(1);

        int reference_model_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal737=null;
        Token LPAREN738=null;
        Token RPAREN740=null;
        PLSQL3_2_DParser.keyREFERENCE_return keyREFERENCE735 =null;

        PLSQL3_2_DParser.reference_model_name_return reference_model_name736 =null;

        PLSQL3_2_DParser.subquery_return subquery739 =null;

        PLSQL3_2_DParser.model_column_clauses_return model_column_clauses741 =null;

        PLSQL3_2_DParser.cell_reference_options_return cell_reference_options742 =null;


        Object string_literal737_tree=null;
        Object LPAREN738_tree=null;
        Object RPAREN740_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1081:2: ( keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1081:4: keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyREFERENCE_in_reference_model4516);
            keyREFERENCE735=keyREFERENCE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE735.getTree());

            pushFollow(FOLLOW_reference_model_name_in_reference_model4518);
            reference_model_name736=reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model_name736.getTree());

            string_literal737=cast(Token)match(input,143,FOLLOW_143_in_reference_model4520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal737_tree = 
            cast(Object)adaptor.create(string_literal737)
            ;
            adaptor.addChild(root_0, string_literal737_tree);
            }

            LPAREN738=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_model4522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN738_tree = 
            cast(Object)adaptor.create(LPAREN738)
            ;
            adaptor.addChild(root_0, LPAREN738_tree);
            }

            pushFollow(FOLLOW_subquery_in_reference_model4524);
            subquery739=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery739.getTree());

            RPAREN740=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_model4526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN740_tree = 
            cast(Object)adaptor.create(RPAREN740)
            ;
            adaptor.addChild(root_0, RPAREN740_tree);
            }

            pushFollow(FOLLOW_model_column_clauses_in_reference_model4530);
            model_column_clauses741=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses741.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1082:24: ( cell_reference_options )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1082:26: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_reference_model4534);
            cell_reference_options742=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options742.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","reference_model"," ",117);
            if ( state.backtracking>0 ) { memoize(input, 117, reference_model_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference_model"


    public static class reference_model_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_model_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1084:1: reference_model_name : identifier ;
    public final PLSQL3_2_DParser.reference_model_name_return reference_model_name()  {
        debug(trace_rules) writeln("Entering rule:","reference_model_name"," ",118);
        PLSQL3_2_DParser.reference_model_name_return retval = new PLSQL3_2_DParser.reference_model_name_return();
        retval.start = input.LT(1);

        int reference_model_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier743 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1085:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1085:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_reference_model_name4546);
            identifier743=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier743.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","reference_model_name"," ",118);
            if ( state.backtracking>0 ) { memoize(input, 118, reference_model_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference_model_name"


    public static class main_model_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_model"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1087:1: main_model : ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause ;
    public final PLSQL3_2_DParser.main_model_return main_model()  {
        debug(trace_rules) writeln("Entering rule:","main_model"," ",119);
        PLSQL3_2_DParser.main_model_return retval = new PLSQL3_2_DParser.main_model_return();
        retval.start = input.LT(1);

        int main_model_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyMAIN_return keyMAIN744 =null;

        PLSQL3_2_DParser.main_model_name_return main_model_name745 =null;

        PLSQL3_2_DParser.model_column_clauses_return model_column_clauses746 =null;

        PLSQL3_2_DParser.cell_reference_options_return cell_reference_options747 =null;

        PLSQL3_2_DParser.model_rules_clause_return model_rules_clause748 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1088:2: ( ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1088:4: ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1088:4: ( keyMAIN main_model_name )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ID) ) {
                int LA193_1 = input.LA(2);

                if ( (LA193_1==DOUBLEQUOTED_STRING||LA193_1==ID) ) {
                    alt193=1;
                }
            }
            switch (alt193) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1088:6: keyMAIN main_model_name
                   {
                   pushFollow(FOLLOW_keyMAIN_in_main_model4558);
                   keyMAIN744=keyMAIN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMAIN744.getTree());

                   pushFollow(FOLLOW_main_model_name_in_main_model4560);
                   main_model_name745=main_model_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model_name745.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_model_column_clauses_in_main_model4565);
            model_column_clauses746=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses746.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1089:3: ( cell_reference_options )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1089:5: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_main_model4571);
            cell_reference_options747=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options747.getTree());

            }


            pushFollow(FOLLOW_model_rules_clause_in_main_model4575);
            model_rules_clause748=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_clause748.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","main_model"," ",119);
            if ( state.backtracking>0 ) { memoize(input, 119, main_model_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "main_model"


    public static class main_model_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_model_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1091:1: main_model_name : identifier ;
    public final PLSQL3_2_DParser.main_model_name_return main_model_name()  {
        debug(trace_rules) writeln("Entering rule:","main_model_name"," ",120);
        PLSQL3_2_DParser.main_model_name_return retval = new PLSQL3_2_DParser.main_model_name_return();
        retval.start = input.LT(1);

        int main_model_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier749 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1092:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1092:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_main_model_name4585);
            identifier749=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier749.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","main_model_name"," ",120);
            if ( state.backtracking>0 ) { memoize(input, 120, main_model_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "main_model_name"


    public static class model_column_clauses_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column_clauses"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1094:1: model_column_clauses : ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN ;
    public final PLSQL3_2_DParser.model_column_clauses_return model_column_clauses()  {
        debug(trace_rules) writeln("Entering rule:","model_column_clauses"," ",121);
        PLSQL3_2_DParser.model_column_clauses_return retval = new PLSQL3_2_DParser.model_column_clauses_return();
        retval.start = input.LT(1);

        int model_column_clauses_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal753=null;
        Token LPAREN754=null;
        Token RPAREN756=null;
        Token LPAREN758=null;
        Token RPAREN760=null;
        PLSQL3_2_DParser.query_partition_clause_return query_partition_clause750 =null;

        PLSQL3_2_DParser.column_spec_return column_spec751 =null;

        PLSQL3_2_DParser.keyDIMENSION_return keyDIMENSION752 =null;

        PLSQL3_2_DParser.model_columns_return model_columns755 =null;

        PLSQL3_2_DParser.keyMEASURES_return keyMEASURES757 =null;

        PLSQL3_2_DParser.model_columns_return model_columns759 =null;


        Object string_literal753_tree=null;
        Object LPAREN754_tree=null;
        Object RPAREN756_tree=null;
        Object LPAREN758_tree=null;
        Object RPAREN760_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:2: ( ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:4: ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:4: ( query_partition_clause ( column_spec )? )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID) ) {
                int LA195_1 = input.LA(2);

                if ( (((synpred331_PLSQL3_2_D()&&synpred331_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "PARTITION"))) ) {
                    alt195=1;
                }
            }
            switch (alt195) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:6: query_partition_clause ( column_spec )?
                   {
                   pushFollow(FOLLOW_query_partition_clause_in_model_column_clauses4597);
                   query_partition_clause750=query_partition_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause750.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:29: ( column_spec )?
                   int alt194=2;
                   int LA194_0 = input.LA(1);

                   if ( (LA194_0==ID) ) {
                       int LA194_1 = input.LA(2);

                       if ( (LA194_1==DOT||LA194_1==ID) ) {
                           alt194=1;
                       }
                   }
                   else if ( (LA194_0==DOUBLEQUOTED_STRING||LA194_0==162) ) {
                       alt194=1;
                   }
                   switch (alt194) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:31: column_spec
                          {
                          pushFollow(FOLLOW_column_spec_in_model_column_clauses4601);
                          column_spec751=column_spec();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec751.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyDIMENSION_in_model_column_clauses4611);
            keyDIMENSION752=keyDIMENSION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION752.getTree());

            string_literal753=cast(Token)match(input,75,FOLLOW_75_in_model_column_clauses4613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal753_tree = 
            cast(Object)adaptor.create(string_literal753)
            ;
            adaptor.addChild(root_0, string_literal753_tree);
            }

            LPAREN754=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses4615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN754_tree = 
            cast(Object)adaptor.create(LPAREN754)
            ;
            adaptor.addChild(root_0, LPAREN754_tree);
            }

            pushFollow(FOLLOW_model_columns_in_model_column_clauses4617);
            model_columns755=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns755.getTree());

            RPAREN756=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses4619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN756_tree = 
            cast(Object)adaptor.create(RPAREN756)
            ;
            adaptor.addChild(root_0, RPAREN756_tree);
            }

            pushFollow(FOLLOW_keyMEASURES_in_model_column_clauses4623);
            keyMEASURES757=keyMEASURES();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEASURES757.getTree());

            LPAREN758=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses4625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN758_tree = 
            cast(Object)adaptor.create(LPAREN758)
            ;
            adaptor.addChild(root_0, LPAREN758_tree);
            }

            pushFollow(FOLLOW_model_columns_in_model_column_clauses4627);
            model_columns759=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns759.getTree());

            RPAREN760=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses4629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN760_tree = 
            cast(Object)adaptor.create(RPAREN760)
            ;
            adaptor.addChild(root_0, RPAREN760_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_column_clauses"," ",121);
            if ( state.backtracking>0 ) { memoize(input, 121, model_column_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"


    public static class model_columns_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_columns"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1099:1: model_columns : model_column ( COMMA model_column )* ;
    public final PLSQL3_2_DParser.model_columns_return model_columns()  {
        debug(trace_rules) writeln("Entering rule:","model_columns"," ",122);
        PLSQL3_2_DParser.model_columns_return retval = new PLSQL3_2_DParser.model_columns_return();
        retval.start = input.LT(1);

        int model_columns_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA762=null;
        PLSQL3_2_DParser.model_column_return model_column761 =null;

        PLSQL3_2_DParser.model_column_return model_column763 =null;


        Object COMMA762_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1100:2: ( model_column ( COMMA model_column )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1100:4: model_column ( COMMA model_column )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_model_column_in_model_columns4639);
            model_column761=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column761.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1100:17: ( COMMA model_column )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1100:19: COMMA model_column
            	    {
            	    COMMA762=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_model_columns4643); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA762_tree = 
            	    cast(Object)adaptor.create(COMMA762)
            	    ;
            	    adaptor.addChild(root_0, COMMA762_tree);
            	    }

            	    pushFollow(FOLLOW_model_column_in_model_columns4645);
            	    model_column763=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column763.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_columns"," ",122);
            if ( state.backtracking>0 ) { memoize(input, 122, model_columns_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_columns"


    public static class model_column_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1102:1: model_column : sql_expression ( ( 'AS' )? column_spec )? ;
    public final PLSQL3_2_DParser.model_column_return model_column()  {
        debug(trace_rules) writeln("Entering rule:","model_column"," ",123);
        PLSQL3_2_DParser.model_column_return retval = new PLSQL3_2_DParser.model_column_return();
        retval.start = input.LT(1);

        int model_column_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal765=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression764 =null;

        PLSQL3_2_DParser.column_spec_return column_spec766 =null;


        Object string_literal765_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:2: ( sql_expression ( ( 'AS' )? column_spec )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:4: sql_expression ( ( 'AS' )? column_spec )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_model_column4658);
            sql_expression764=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression764.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:19: ( ( 'AS' )? column_spec )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==DOUBLEQUOTED_STRING||LA198_0==ID||LA198_0==64||LA198_0==162) ) {
                alt198=1;
            }
            switch (alt198) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:21: ( 'AS' )? column_spec
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:21: ( 'AS' )?
                   int alt197=2;
                   int LA197_0 = input.LA(1);

                   if ( (LA197_0==64) ) {
                       alt197=1;
                   }
                   switch (alt197) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1103:23: 'AS'
                          {
                          string_literal765=cast(Token)match(input,64,FOLLOW_64_in_model_column4664); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal765_tree = 
                          cast(Object)adaptor.create(string_literal765)
                          ;
                          adaptor.addChild(root_0, string_literal765_tree);
                          }

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_column_spec_in_model_column4669);
                   column_spec766=column_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec766.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_column"," ",123);
            if ( state.backtracking>0 ) { memoize(input, 123, model_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_column"


    public static class model_rules_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1105:1: model_rules_clause : ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN ;
    public final PLSQL3_2_DParser.model_rules_clause_return model_rules_clause()  {
        debug(trace_rules) writeln("Entering rule:","model_rules_clause"," ",124);
        PLSQL3_2_DParser.model_rules_clause_return retval = new PLSQL3_2_DParser.model_rules_clause_return();
        retval.start = input.LT(1);

        int model_rules_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal768=null;
        Token string_literal770=null;
        Token string_literal773=null;
        Token LPAREN775=null;
        Token NUMBER776=null;
        Token RPAREN777=null;
        Token LPAREN779=null;
        Token RPAREN781=null;
        Token LPAREN782=null;
        Token RPAREN784=null;
        PLSQL3_2_DParser.keyRULES_return keyRULES767 =null;

        PLSQL3_2_DParser.keyUPSERT_return keyUPSERT769 =null;

        PLSQL3_2_DParser.keyAUTOMATIC_return keyAUTOMATIC771 =null;

        PLSQL3_2_DParser.keySEQUENTIAL_return keySEQUENTIAL772 =null;

        PLSQL3_2_DParser.keyITERATE_return keyITERATE774 =null;

        PLSQL3_2_DParser.keyUNTIL_return keyUNTIL778 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition780 =null;

        PLSQL3_2_DParser.model_rules_exprs_return model_rules_exprs783 =null;


        Object string_literal768_tree=null;
        Object string_literal770_tree=null;
        Object string_literal773_tree=null;
        Object LPAREN775_tree=null;
        Object NUMBER776_tree=null;
        Object RPAREN777_tree=null;
        Object LPAREN779_tree=null;
        Object RPAREN781_tree=null;
        Object LPAREN782_tree=null;
        Object RPAREN784_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:2: ( ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:4: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:4: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ID) ) {
                int LA203_1 = input.LA(2);

                if ( (LA203_1==ID||LA203_1==177) ) {
                    alt203=1;
                }
                else if ( (LA203_1==LPAREN) ) {
                    int LA203_4 = input.LA(3);

                    if ( (LA203_4==DOUBLEQUOTED_STRING||LA203_4==ID||LA203_4==162||LA203_4==177) ) {
                        alt203=1;
                    }
                }
            }
            switch (alt203) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:6: keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                   {
                   pushFollow(FOLLOW_keyRULES_in_model_rules_clause4684);
                   keyRULES767=keyRULES();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRULES767.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:15: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
                   int alt200=3;
                   int LA200_0 = input.LA(1);

                   if ( (LA200_0==177) ) {
                       alt200=1;
                   }
                   else if ( (LA200_0==ID) ) {
                       int LA200_2 = input.LA(2);

                       if ( (LA200_2==ID||LA200_2==61) ) {
                           alt200=2;
                       }
                       else if ( (LA200_2==LPAREN) ) {
                           int LA200_5 = input.LA(3);

                           if ( (LA200_5==DOUBLEQUOTED_STRING||LA200_5==ID||LA200_5==162||LA200_5==177) ) {
                               alt200=2;
                           }
                       }
                   }
                   switch (alt200) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:17: 'UPDATE'
                          {
                          string_literal768=cast(Token)match(input,177,FOLLOW_177_in_model_rules_clause4688); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal768_tree = 
                          cast(Object)adaptor.create(string_literal768)
                          ;
                          adaptor.addChild(root_0, string_literal768_tree);
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:28: keyUPSERT ( 'ALL' )?
                          {
                          pushFollow(FOLLOW_keyUPSERT_in_model_rules_clause4692);
                          keyUPSERT769=keyUPSERT();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT769.getTree());

                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:38: ( 'ALL' )?
                          int alt199=2;
                          int LA199_0 = input.LA(1);

                          if ( (LA199_0==61) ) {
                              alt199=1;
                          }
                          switch (alt199) {
                             case 1 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:40: 'ALL'
                                 {
                                 string_literal770=cast(Token)match(input,61,FOLLOW_61_in_model_rules_clause4696); if (state.failed) return retval;
                                 if ( state.backtracking==0 ) {
                                 string_literal770_tree = 
                                 cast(Object)adaptor.create(string_literal770)
                                 ;
                                 adaptor.addChild(root_0, string_literal770_tree);
                                 }

                                 }
                                 break;

                              default:
                          }


                          }
                          break;

                       default:
                   }


                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:52: ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                   int alt202=2;
                   int LA202_0 = input.LA(1);

                   if ( (LA202_0==ID) ) {
                       int LA202_1 = input.LA(2);

                       if ( (LA202_1==145) ) {
                           alt202=1;
                       }
                   }
                   switch (alt202) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:54: ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER'
                          {
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:54: ( keyAUTOMATIC | keySEQUENTIAL )
                          int alt201=2;
                          int LA201_0 = input.LA(1);

                          if ( (LA201_0==ID) ) {
                              int LA201_1 = input.LA(2);

                              if ( ((((toUpper(input.LT(1).getText)== "AUTOMATIC")&&(toUpper(input.LT(1).getText)== "AUTOMATIC"))&&synpred338_PLSQL3_2_D())) ) {
                                  alt201=1;
                              }
                              else if ( ((toUpper(input.LT(1).getText)== "SEQUENTIAL")) ) {
                                  alt201=2;
                              }
                              else {
                                  if (state.backtracking>0) {state.failed=true; return retval;}
                                  NoViableAltException nvae =
                                      new NoViableAltException("", 201, 1, input);

                                  throw nvae;

                              }
                          }
                          else {
                              if (state.backtracking>0) {state.failed=true; return retval;}
                              NoViableAltException nvae =
                                  new NoViableAltException("", 201, 0, input);

                              throw nvae;

                          }
                          switch (alt201) {
                             case 1 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:56: keyAUTOMATIC
                                 {
                                 pushFollow(FOLLOW_keyAUTOMATIC_in_model_rules_clause4708);
                                 keyAUTOMATIC771=keyAUTOMATIC();

                                 state._fsp--;
                                 if (state.failed) return retval;
                                 if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTOMATIC771.getTree());

                                 }
                                 break;
                             case 2 :
                                 // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:71: keySEQUENTIAL
                                 {
                                 pushFollow(FOLLOW_keySEQUENTIAL_in_model_rules_clause4712);
                                 keySEQUENTIAL772=keySEQUENTIAL();

                                 state._fsp--;
                                 if (state.failed) return retval;
                                 if ( state.backtracking==0 ) adaptor.addChild(root_0, keySEQUENTIAL772.getTree());

                                 }
                                 break;

                              default:
                          }


                          string_literal773=cast(Token)match(input,145,FOLLOW_145_in_model_rules_clause4716); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal773_tree = 
                          cast(Object)adaptor.create(string_literal773)
                          ;
                          adaptor.addChild(root_0, string_literal773_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1107:3: ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==ID) ) {
                alt205=1;
            }
            switch (alt205) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1107:5: keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )?
                   {
                   pushFollow(FOLLOW_keyITERATE_in_model_rules_clause4728);
                   keyITERATE774=keyITERATE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyITERATE774.getTree());

                   LPAREN775=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4730); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN775_tree = 
                   cast(Object)adaptor.create(LPAREN775)
                   ;
                   adaptor.addChild(root_0, LPAREN775_tree);
                   }

                   NUMBER776=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_model_rules_clause4732); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   NUMBER776_tree = 
                   cast(Object)adaptor.create(NUMBER776)
                   ;
                   adaptor.addChild(root_0, NUMBER776_tree);
                   }

                   RPAREN777=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4734); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN777_tree = 
                   cast(Object)adaptor.create(RPAREN777)
                   ;
                   adaptor.addChild(root_0, RPAREN777_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1107:37: ( keyUNTIL LPAREN sql_condition RPAREN )?
                   int alt204=2;
                   int LA204_0 = input.LA(1);

                   if ( (LA204_0==ID) ) {
                       alt204=1;
                   }
                   switch (alt204) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1107:39: keyUNTIL LPAREN sql_condition RPAREN
                          {
                          pushFollow(FOLLOW_keyUNTIL_in_model_rules_clause4738);
                          keyUNTIL778=keyUNTIL();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNTIL778.getTree());

                          LPAREN779=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4740); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN779_tree = 
                          cast(Object)adaptor.create(LPAREN779)
                          ;
                          adaptor.addChild(root_0, LPAREN779_tree);
                          }

                          pushFollow(FOLLOW_sql_condition_in_model_rules_clause4742);
                          sql_condition780=sql_condition();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition780.getTree());

                          RPAREN781=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4744); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN781_tree = 
                          cast(Object)adaptor.create(RPAREN781)
                          ;
                          adaptor.addChild(root_0, RPAREN781_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            LPAREN782=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN782_tree = 
            cast(Object)adaptor.create(LPAREN782)
            ;
            adaptor.addChild(root_0, LPAREN782_tree);
            }

            pushFollow(FOLLOW_model_rules_exprs_in_model_rules_clause4756);
            model_rules_exprs783=model_rules_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_exprs783.getTree());

            RPAREN784=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN784_tree = 
            cast(Object)adaptor.create(RPAREN784)
            ;
            adaptor.addChild(root_0, RPAREN784_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_rules_clause"," ",124);
            if ( state.backtracking>0 ) { memoize(input, 124, model_rules_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"


    public static class model_rules_exprs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_exprs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1110:1: model_rules_exprs : model_rules_expr ( COMMA model_rules_expr )* ;
    public final PLSQL3_2_DParser.model_rules_exprs_return model_rules_exprs()  {
        debug(trace_rules) writeln("Entering rule:","model_rules_exprs"," ",125);
        PLSQL3_2_DParser.model_rules_exprs_return retval = new PLSQL3_2_DParser.model_rules_exprs_return();
        retval.start = input.LT(1);

        int model_rules_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA786=null;
        PLSQL3_2_DParser.model_rules_expr_return model_rules_expr785 =null;

        PLSQL3_2_DParser.model_rules_expr_return model_rules_expr787 =null;


        Object COMMA786_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1111:2: ( model_rules_expr ( COMMA model_rules_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1111:4: model_rules_expr ( COMMA model_rules_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs4768);
            model_rules_expr785=model_rules_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr785.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1111:21: ( COMMA model_rules_expr )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==COMMA) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1111:23: COMMA model_rules_expr
            	    {
            	    COMMA786=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_model_rules_exprs4772); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA786_tree = 
            	    cast(Object)adaptor.create(COMMA786)
            	    ;
            	    adaptor.addChild(root_0, COMMA786_tree);
            	    }

            	    pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs4774);
            	    model_rules_expr787=model_rules_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr787.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_rules_exprs"," ",125);
            if ( state.backtracking>0 ) { memoize(input, 125, model_rules_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_exprs"


    public static class model_rules_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1113:1: model_rules_expr : ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression ;
    public final PLSQL3_2_DParser.model_rules_expr_return model_rules_expr()  {
        debug(trace_rules) writeln("Entering rule:","model_rules_expr"," ",126);
        PLSQL3_2_DParser.model_rules_expr_return retval = new PLSQL3_2_DParser.model_rules_expr_return();
        retval.start = input.LT(1);

        int model_rules_expr_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal788=null;
        Token string_literal790=null;
        Token EQ793=null;
        PLSQL3_2_DParser.keyUPSERT_return keyUPSERT789 =null;

        PLSQL3_2_DParser.cell_assignment_return cell_assignment791 =null;

        PLSQL3_2_DParser.order_by_clause_return order_by_clause792 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression794 =null;


        Object string_literal788_tree=null;
        Object string_literal790_tree=null;
        Object EQ793_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:2: ( ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:4: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:4: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
            int alt208=3;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==177) ) {
                alt208=1;
            }
            else if ( (LA208_0==ID) ) {
                int LA208_2 = input.LA(2);

                if ( (LA208_2==DOUBLEQUOTED_STRING||LA208_2==ID||LA208_2==61||LA208_2==162) ) {
                    alt208=2;
                }
            }
            switch (alt208) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:6: 'UPDATE'
                   {
                   string_literal788=cast(Token)match(input,177,FOLLOW_177_in_model_rules_expr4789); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal788_tree = 
                   cast(Object)adaptor.create(string_literal788)
                   ;
                   adaptor.addChild(root_0, string_literal788_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:17: keyUPSERT ( 'ALL' )?
                   {
                   pushFollow(FOLLOW_keyUPSERT_in_model_rules_expr4793);
                   keyUPSERT789=keyUPSERT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT789.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:27: ( 'ALL' )?
                   int alt207=2;
                   int LA207_0 = input.LA(1);

                   if ( (LA207_0==61) ) {
                       alt207=1;
                   }
                   switch (alt207) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:29: 'ALL'
                          {
                          string_literal790=cast(Token)match(input,61,FOLLOW_61_in_model_rules_expr4797); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal790_tree = 
                          cast(Object)adaptor.create(string_literal790)
                          ;
                          adaptor.addChild(root_0, string_literal790_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_cell_assignment_in_model_rules_expr4805);
            cell_assignment791=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment791.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:57: ( order_by_clause )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==145) ) {
                alt209=1;
            }
            switch (alt209) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1114:59: order_by_clause
                   {
                   pushFollow(FOLLOW_order_by_clause_in_model_rules_expr4809);
                   order_by_clause792=order_by_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause792.getTree());

                   }
                   break;

                default:
            }


            EQ793=cast(Token)match(input,EQ,FOLLOW_EQ_in_model_rules_expr4814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ793_tree = 
            cast(Object)adaptor.create(EQ793)
            ;
            adaptor.addChild(root_0, EQ793_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_model_rules_expr4816);
            sql_expression794=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression794.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_rules_expr"," ",126);
            if ( state.backtracking>0 ) { memoize(input, 126, model_rules_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_expr"


    public static class cell_assignment_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1116:1: cell_assignment : measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK ;
    public final PLSQL3_2_DParser.cell_assignment_return cell_assignment()  {
        debug(trace_rules) writeln("Entering rule:","cell_assignment"," ",127);
        PLSQL3_2_DParser.cell_assignment_return retval = new PLSQL3_2_DParser.cell_assignment_return();
        retval.start = input.LT(1);

        int cell_assignment_StartIndex = input.index();

        Object root_0 = null;

        Token LBRACK796=null;
        Token RBRACK799=null;
        PLSQL3_2_DParser.measure_column_return measure_column795 =null;

        PLSQL3_2_DParser.multi_column_for_loop_return multi_column_for_loop797 =null;

        PLSQL3_2_DParser.cell_assignment_exprs_return cell_assignment_exprs798 =null;


        Object LBRACK796_tree=null;
        Object RBRACK799_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1117:2: ( measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1117:4: measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_measure_column_in_cell_assignment4826);
            measure_column795=measure_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measure_column795.getTree());

            LBRACK796=cast(Token)match(input,LBRACK,FOLLOW_LBRACK_in_cell_assignment4828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK796_tree = 
            cast(Object)adaptor.create(LBRACK796)
            ;
            adaptor.addChild(root_0, LBRACK796_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1117:26: ( multi_column_for_loop | cell_assignment_exprs )
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==104) ) {
                int LA210_1 = input.LA(2);

                if ( (LA210_1==LPAREN) ) {
                    alt210=1;
                }
                else if ( (LA210_1==DOUBLEQUOTED_STRING||LA210_1==ID||LA210_1==162) ) {
                    alt210=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA210_0==DOUBLEQUOTED_STRING||LA210_0==ID||LA210_0==LPAREN||LA210_0==MINUS||LA210_0==NUMBER||LA210_0==PLUS||LA210_0==QUOTED_STRING||LA210_0==63||LA210_0==76||LA210_0==93||(LA210_0 >=100  && LA210_0<=101)||LA210_0==134||LA210_0==136||LA210_0==151||LA210_0==162||LA210_0==165||LA210_0==169||LA210_0==174) ) {
                alt210=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;

            }
            switch (alt210) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1117:28: multi_column_for_loop
                   {
                   pushFollow(FOLLOW_multi_column_for_loop_in_cell_assignment4832);
                   multi_column_for_loop797=multi_column_for_loop();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_column_for_loop797.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1117:52: cell_assignment_exprs
                   {
                   pushFollow(FOLLOW_cell_assignment_exprs_in_cell_assignment4836);
                   cell_assignment_exprs798=cell_assignment_exprs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_exprs798.getTree());

                   }
                   break;

                default:
            }


            RBRACK799=cast(Token)match(input,RBRACK,FOLLOW_RBRACK_in_cell_assignment4840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK799_tree = 
            cast(Object)adaptor.create(RBRACK799)
            ;
            adaptor.addChild(root_0, RBRACK799_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cell_assignment"," ",127);
            if ( state.backtracking>0 ) { memoize(input, 127, cell_assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment"


    public static class cell_assignment_exprs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment_exprs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1119:1: cell_assignment_exprs : cell_assignment_expr ( COMMA cell_assignment_expr )* ;
    public final PLSQL3_2_DParser.cell_assignment_exprs_return cell_assignment_exprs()  {
        debug(trace_rules) writeln("Entering rule:","cell_assignment_exprs"," ",128);
        PLSQL3_2_DParser.cell_assignment_exprs_return retval = new PLSQL3_2_DParser.cell_assignment_exprs_return();
        retval.start = input.LT(1);

        int cell_assignment_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA801=null;
        PLSQL3_2_DParser.cell_assignment_expr_return cell_assignment_expr800 =null;

        PLSQL3_2_DParser.cell_assignment_expr_return cell_assignment_expr802 =null;


        Object COMMA801_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1120:2: ( cell_assignment_expr ( COMMA cell_assignment_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1120:4: cell_assignment_expr ( COMMA cell_assignment_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4850);
            cell_assignment_expr800=cell_assignment_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr800.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1120:25: ( COMMA cell_assignment_expr )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1120:27: COMMA cell_assignment_expr
            	    {
            	    COMMA801=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_cell_assignment_exprs4854); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA801_tree = 
            	    cast(Object)adaptor.create(COMMA801)
            	    ;
            	    adaptor.addChild(root_0, COMMA801_tree);
            	    }

            	    pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4856);
            	    cell_assignment_expr802=cell_assignment_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr802.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cell_assignment_exprs"," ",128);
            if ( state.backtracking>0 ) { memoize(input, 128, cell_assignment_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment_exprs"


    public static class cell_assignment_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1122:1: cell_assignment_expr : ( sql_condition | sql_expression | single_column_for_loop );
    public final PLSQL3_2_DParser.cell_assignment_expr_return cell_assignment_expr()  {
        debug(trace_rules) writeln("Entering rule:","cell_assignment_expr"," ",129);
        PLSQL3_2_DParser.cell_assignment_expr_return retval = new PLSQL3_2_DParser.cell_assignment_expr_return();
        retval.start = input.LT(1);

        int cell_assignment_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_condition_return sql_condition803 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression804 =null;

        PLSQL3_2_DParser.single_column_for_loop_return single_column_for_loop805 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:2: ( sql_condition | sql_expression | single_column_for_loop )
            int alt212=3;
            switch ( input.LA(1) ) {
            case 63:
            case 100:
            case 134:
            case 151:
                {
                alt212=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA212_3 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 3, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA212_4 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 4, input);

                    throw nvae;

                }
                }
                break;
            case 76:
                {
                int LA212_5 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 5, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA212_6 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 6, input);

                    throw nvae;

                }
                }
                break;
            case 93:
                {
                int LA212_7 = input.LA(2);

                if ( (((synpred350_PLSQL3_2_D()&&synpred350_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt212=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred351_PLSQL3_2_D())) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 7, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA212_8 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 8, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA212_9 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 9, input);

                    throw nvae;

                }
                }
                break;
            case 101:
            case 174:
                {
                int LA212_10 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 10, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA212_11 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 11, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA212_12 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 12, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA212_13 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 13, input);

                    throw nvae;

                }
                }
                break;
            case 136:
                {
                int LA212_14 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 14, input);

                    throw nvae;

                }
                }
                break;
            case 165:
                {
                int LA212_15 = input.LA(2);

                if ( (synpred350_PLSQL3_2_D()) ) {
                    alt212=1;
                }
                else if ( (synpred351_PLSQL3_2_D()) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 15, input);

                    throw nvae;

                }
                }
                break;
            case 104:
                {
                alt212=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 212, 0, input);

                throw nvae;

            }

            switch (alt212) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:4: sql_condition
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_condition_in_cell_assignment_expr4869);
                    sql_condition803=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition803.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:20: sql_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_cell_assignment_expr4873);
                    sql_expression804=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression804.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:37: single_column_for_loop
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_single_column_for_loop_in_cell_assignment_expr4877);
                    single_column_for_loop805=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop805.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cell_assignment_expr"," ",129);
            if ( state.backtracking>0 ) { memoize(input, 129, cell_assignment_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment_expr"


    public static class measure_column_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "measure_column"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1125:1: measure_column : column_name ;
    public final PLSQL3_2_DParser.measure_column_return measure_column()  {
        debug(trace_rules) writeln("Entering rule:","measure_column"," ",130);
        PLSQL3_2_DParser.measure_column_return retval = new PLSQL3_2_DParser.measure_column_return();
        retval.start = input.LT(1);

        int measure_column_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.column_name_return column_name806 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1126:2: ( column_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1126:4: column_name
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_column_name_in_measure_column4887);
            column_name806=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name806.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","measure_column"," ",130);
            if ( state.backtracking>0 ) { memoize(input, 130, measure_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "measure_column"


    public static class single_column_for_loop_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_column_for_loop"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1128:1: single_column_for_loop : 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) ;
    public final PLSQL3_2_DParser.single_column_for_loop_return single_column_for_loop()  {
        debug(trace_rules) writeln("Entering rule:","single_column_for_loop"," ",131);
        PLSQL3_2_DParser.single_column_for_loop_return retval = new PLSQL3_2_DParser.single_column_for_loop_return();
        retval.start = input.LT(1);

        int single_column_for_loop_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal807=null;
        Token string_literal809=null;
        Token LPAREN810=null;
        Token RPAREN813=null;
        Token string_literal814=null;
        Token string_literal816=null;
        Token string_literal818=null;
        PLSQL3_2_DParser.column_name_return column_name808 =null;

        PLSQL3_2_DParser.literals_return literals811 =null;

        PLSQL3_2_DParser.subquery_return subquery812 =null;

        PLSQL3_2_DParser.pattern_return pattern815 =null;

        PLSQL3_2_DParser.literal_return literal817 =null;

        PLSQL3_2_DParser.literal_return literal819 =null;

        PLSQL3_2_DParser.keyINCREMENT_return keyINCREMENT820 =null;

        PLSQL3_2_DParser.keyDECREMENT_return keyDECREMENT821 =null;

        PLSQL3_2_DParser.literal_return literal822 =null;


        Object string_literal807_tree=null;
        Object string_literal809_tree=null;
        Object LPAREN810_tree=null;
        Object RPAREN813_tree=null;
        Object string_literal814_tree=null;
        Object string_literal816_tree=null;
        Object string_literal818_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1129:2: ( 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1129:4: 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal807=cast(Token)match(input,104,FOLLOW_104_in_single_column_for_loop4897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal807_tree = 
            cast(Object)adaptor.create(string_literal807)
            ;
            adaptor.addChild(root_0, string_literal807_tree);
            }

            pushFollow(FOLLOW_column_name_in_single_column_for_loop4899);
            column_name808=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name808.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1130:3: ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==113) ) {
                alt216=1;
            }
            else if ( (LA216_0==106||LA216_0==121) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }
            switch (alt216) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1130:5: 'IN' LPAREN ( literals | subquery ) RPAREN
                   {
                   string_literal809=cast(Token)match(input,113,FOLLOW_113_in_single_column_for_loop4905); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal809_tree = 
                   cast(Object)adaptor.create(string_literal809)
                   ;
                   adaptor.addChild(root_0, string_literal809_tree);
                   }

                   LPAREN810=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_single_column_for_loop4907); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN810_tree = 
                   cast(Object)adaptor.create(LPAREN810)
                   ;
                   adaptor.addChild(root_0, LPAREN810_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1130:17: ( literals | subquery )
                   int alt213=2;
                   int LA213_0 = input.LA(1);

                   if ( (LA213_0==MINUS||LA213_0==NUMBER||LA213_0==PLUS||LA213_0==QUOTED_STRING) ) {
                       alt213=1;
                   }
                   else if ( (LA213_0==LPAREN) ) {
                       alt213=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 213, 0, input);

                       throw nvae;

                   }
                   switch (alt213) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1130:19: literals
                          {
                          pushFollow(FOLLOW_literals_in_single_column_for_loop4911);
                          literals811=literals();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, literals811.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1130:30: subquery
                          {
                          pushFollow(FOLLOW_subquery_in_single_column_for_loop4915);
                          subquery812=subquery();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery812.getTree());

                          }
                          break;

                       default:
                   }


                   RPAREN813=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_single_column_for_loop4919); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN813_tree = 
                   cast(Object)adaptor.create(RPAREN813)
                   ;
                   adaptor.addChild(root_0, RPAREN813_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:5: ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:5: ( 'LIKE' pattern )?
                   int alt214=2;
                   int LA214_0 = input.LA(1);

                   if ( (LA214_0==121) ) {
                       alt214=1;
                   }
                   switch (alt214) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:7: 'LIKE' pattern
                          {
                          string_literal814=cast(Token)match(input,121,FOLLOW_121_in_single_column_for_loop4927); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal814_tree = 
                          cast(Object)adaptor.create(string_literal814)
                          ;
                          adaptor.addChild(root_0, string_literal814_tree);
                          }

                          pushFollow(FOLLOW_pattern_in_single_column_for_loop4929);
                          pattern815=pattern();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern815.getTree());

                          }
                          break;

                       default:
                   }


                   string_literal816=cast(Token)match(input,106,FOLLOW_106_in_single_column_for_loop4934); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal816_tree = 
                   cast(Object)adaptor.create(string_literal816)
                   ;
                   adaptor.addChild(root_0, string_literal816_tree);
                   }

                   pushFollow(FOLLOW_literal_in_single_column_for_loop4936);
                   literal817=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal817.getTree());

                   string_literal818=cast(Token)match(input,173,FOLLOW_173_in_single_column_for_loop4938); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal818_tree = 
                   cast(Object)adaptor.create(string_literal818)
                   ;
                   adaptor.addChild(root_0, string_literal818_tree);
                   }

                   pushFollow(FOLLOW_literal_in_single_column_for_loop4940);
                   literal819=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal819.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:53: ( keyINCREMENT | keyDECREMENT )
                   int alt215=2;
                   int LA215_0 = input.LA(1);

                   if ( (LA215_0==ID) ) {
                       int LA215_1 = input.LA(2);

                       if ( ((((toUpper(input.LT(1).getText)== "INCREMENT")&&(toUpper(input.LT(1).getText)== "INCREMENT"))&&synpred355_PLSQL3_2_D())) ) {
                           alt215=1;
                       }
                       else if ( ((toUpper(input.LT(1).getText)== "DECREMENT")) ) {
                           alt215=2;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 215, 1, input);

                           throw nvae;

                       }
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 215, 0, input);

                       throw nvae;

                   }
                   switch (alt215) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:55: keyINCREMENT
                          {
                          pushFollow(FOLLOW_keyINCREMENT_in_single_column_for_loop4944);
                          keyINCREMENT820=keyINCREMENT();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINCREMENT820.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:70: keyDECREMENT
                          {
                          pushFollow(FOLLOW_keyDECREMENT_in_single_column_for_loop4948);
                          keyDECREMENT821=keyDECREMENT();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDECREMENT821.getTree());

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_literal_in_single_column_for_loop4952);
                   literal822=literal();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, literal822.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","single_column_for_loop"," ",131);
            if ( state.backtracking>0 ) { memoize(input, 131, single_column_for_loop_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"


    public static class literal_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1134:1: literal : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING );
    public final PLSQL3_2_DParser.literal_return literal()  {
        debug(trace_rules) writeln("Entering rule:","literal"," ",132);
        PLSQL3_2_DParser.literal_return retval = new PLSQL3_2_DParser.literal_return();
        retval.start = input.LT(1);

        int literal_StartIndex = input.index();

        Object root_0 = null;

        Token set823=null;
        Token NUMBER824=null;
        Token QUOTED_STRING825=null;

        Object set823_tree=null;
        Object NUMBER824_tree=null;
        Object QUOTED_STRING825_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1135:2: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==MINUS||LA218_0==NUMBER||LA218_0==PLUS) ) {
                alt218=1;
            }
            else if ( (LA218_0==QUOTED_STRING) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }
            switch (alt218) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1135:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1135:4: ( PLUS | MINUS )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==MINUS||LA217_0==PLUS) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                           {
                           set823=cast(Token)input.LT(1);

                           if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                               input.consume();
                               debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                               if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                               cast(Object)adaptor.create(set823)
                               );
                               state.errorRecovery=false;
                               state.failed=false;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               MismatchedSetException mse = new MismatchedSetException(null,input);
                               throw mse;
                           }


                           }
                           break;

                        default:
                    }


                    NUMBER824=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_literal4977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER824_tree = 
                    cast(Object)adaptor.create(NUMBER824)
                    ;
                    adaptor.addChild(root_0, NUMBER824_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1136:4: QUOTED_STRING
                    {
                    root_0 = cast(Object)adaptor.nil();


                    QUOTED_STRING825=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_literal4982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING825_tree = 
                    cast(Object)adaptor.create(QUOTED_STRING825)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING825_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","literal"," ",132);
            if ( state.backtracking>0 ) { memoize(input, 132, literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class literals_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literals"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1138:1: literals : literal ( COMMA literal )* ;
    public final PLSQL3_2_DParser.literals_return literals()  {
        debug(trace_rules) writeln("Entering rule:","literals"," ",133);
        PLSQL3_2_DParser.literals_return retval = new PLSQL3_2_DParser.literals_return();
        retval.start = input.LT(1);

        int literals_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA827=null;
        PLSQL3_2_DParser.literal_return literal826 =null;

        PLSQL3_2_DParser.literal_return literal828 =null;


        Object COMMA827_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1139:2: ( literal ( COMMA literal )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1139:4: literal ( COMMA literal )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_literal_in_literals4992);
            literal826=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal826.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1139:12: ( COMMA literal )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1139:14: COMMA literal
            	    {
            	    COMMA827=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_literals4996); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA827_tree = 
            	    cast(Object)adaptor.create(COMMA827)
            	    ;
            	    adaptor.addChild(root_0, COMMA827_tree);
            	    }

            	    pushFollow(FOLLOW_literal_in_literals4998);
            	    literal828=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal828.getTree());

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","literals"," ",133);
            if ( state.backtracking>0 ) { memoize(input, 133, literals_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literals"


    public static class bracket_literals_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_literals"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1141:1: bracket_literals : LPAREN literals RPAREN ;
    public final PLSQL3_2_DParser.bracket_literals_return bracket_literals()  {
        debug(trace_rules) writeln("Entering rule:","bracket_literals"," ",134);
        PLSQL3_2_DParser.bracket_literals_return retval = new PLSQL3_2_DParser.bracket_literals_return();
        retval.start = input.LT(1);

        int bracket_literals_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN829=null;
        Token RPAREN831=null;
        PLSQL3_2_DParser.literals_return literals830 =null;


        Object LPAREN829_tree=null;
        Object RPAREN831_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1142:2: ( LPAREN literals RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1142:4: LPAREN literals RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN829=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_bracket_literals5011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN829_tree = 
            cast(Object)adaptor.create(LPAREN829)
            ;
            adaptor.addChild(root_0, LPAREN829_tree);
            }

            pushFollow(FOLLOW_literals_in_bracket_literals5013);
            literals830=literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literals830.getTree());

            RPAREN831=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_bracket_literals5015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN831_tree = 
            cast(Object)adaptor.create(RPAREN831)
            ;
            adaptor.addChild(root_0, RPAREN831_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","bracket_literals"," ",134);
            if ( state.backtracking>0 ) { memoize(input, 134, bracket_literals_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracket_literals"


    public static class bracket_literals_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_literals_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1144:1: bracket_literals_list : bracket_literals ( COMMA bracket_literals )* ;
    public final PLSQL3_2_DParser.bracket_literals_list_return bracket_literals_list()  {
        debug(trace_rules) writeln("Entering rule:","bracket_literals_list"," ",135);
        PLSQL3_2_DParser.bracket_literals_list_return retval = new PLSQL3_2_DParser.bracket_literals_list_return();
        retval.start = input.LT(1);

        int bracket_literals_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA833=null;
        PLSQL3_2_DParser.bracket_literals_return bracket_literals832 =null;

        PLSQL3_2_DParser.bracket_literals_return bracket_literals834 =null;


        Object COMMA833_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1145:2: ( bracket_literals ( COMMA bracket_literals )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1145:4: bracket_literals ( COMMA bracket_literals )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list5025);
            bracket_literals832=bracket_literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals832.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1145:21: ( COMMA bracket_literals )*
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==COMMA) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1145:23: COMMA bracket_literals
            	    {
            	    COMMA833=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_literals_list5029); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA833_tree = 
            	    cast(Object)adaptor.create(COMMA833)
            	    ;
            	    adaptor.addChild(root_0, COMMA833_tree);
            	    }

            	    pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list5031);
            	    bracket_literals834=bracket_literals();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals834.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","bracket_literals_list"," ",135);
            if ( state.backtracking>0 ) { memoize(input, 135, bracket_literals_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracket_literals_list"


    public static class pattern_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pattern"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1147:1: pattern : QUOTED_STRING ;
    public final PLSQL3_2_DParser.pattern_return pattern()  {
        debug(trace_rules) writeln("Entering rule:","pattern"," ",136);
        PLSQL3_2_DParser.pattern_return retval = new PLSQL3_2_DParser.pattern_return();
        retval.start = input.LT(1);

        int pattern_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING835=null;

        Object QUOTED_STRING835_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1148:2: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1148:4: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING835=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pattern5044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING835_tree = 
            cast(Object)adaptor.create(QUOTED_STRING835)
            ;
            adaptor.addChild(root_0, QUOTED_STRING835_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","pattern"," ",136);
            if ( state.backtracking>0 ) { memoize(input, 136, pattern_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pattern"


    public static class multi_column_for_loop_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_column_for_loop"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1150:1: multi_column_for_loop : 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN ;
    public final PLSQL3_2_DParser.multi_column_for_loop_return multi_column_for_loop()  {
        debug(trace_rules) writeln("Entering rule:","multi_column_for_loop"," ",137);
        PLSQL3_2_DParser.multi_column_for_loop_return retval = new PLSQL3_2_DParser.multi_column_for_loop_return();
        retval.start = input.LT(1);

        int multi_column_for_loop_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal836=null;
        Token LPAREN837=null;
        Token RPAREN839=null;
        Token string_literal840=null;
        Token LPAREN841=null;
        Token RPAREN844=null;
        PLSQL3_2_DParser.column_specs_return column_specs838 =null;

        PLSQL3_2_DParser.bracket_literals_list_return bracket_literals_list842 =null;

        PLSQL3_2_DParser.subquery_return subquery843 =null;


        Object string_literal836_tree=null;
        Object LPAREN837_tree=null;
        Object RPAREN839_tree=null;
        Object string_literal840_tree=null;
        Object LPAREN841_tree=null;
        Object RPAREN844_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1151:2: ( 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1151:4: 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal836=cast(Token)match(input,104,FOLLOW_104_in_multi_column_for_loop5054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal836_tree = 
            cast(Object)adaptor.create(string_literal836)
            ;
            adaptor.addChild(root_0, string_literal836_tree);
            }

            LPAREN837=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop5056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN837_tree = 
            cast(Object)adaptor.create(LPAREN837)
            ;
            adaptor.addChild(root_0, LPAREN837_tree);
            }

            pushFollow(FOLLOW_column_specs_in_multi_column_for_loop5058);
            column_specs838=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs838.getTree());

            RPAREN839=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop5060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN839_tree = 
            cast(Object)adaptor.create(RPAREN839)
            ;
            adaptor.addChild(root_0, RPAREN839_tree);
            }

            string_literal840=cast(Token)match(input,113,FOLLOW_113_in_multi_column_for_loop5062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal840_tree = 
            cast(Object)adaptor.create(string_literal840)
            ;
            adaptor.addChild(root_0, string_literal840_tree);
            }

            LPAREN841=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop5064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN841_tree = 
            cast(Object)adaptor.create(LPAREN841)
            ;
            adaptor.addChild(root_0, LPAREN841_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1151:49: ( bracket_literals_list | subquery )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==LPAREN) ) {
                int LA221_1 = input.LA(2);

                if ( (LA221_1==MINUS||LA221_1==NUMBER||LA221_1==PLUS||LA221_1==QUOTED_STRING) ) {
                    alt221=1;
                }
                else if ( (LA221_1==165) ) {
                    alt221=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 221, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;

            }
            switch (alt221) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1151:51: bracket_literals_list
                   {
                   pushFollow(FOLLOW_bracket_literals_list_in_multi_column_for_loop5068);
                   bracket_literals_list842=bracket_literals_list();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals_list842.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1151:75: subquery
                   {
                   pushFollow(FOLLOW_subquery_in_multi_column_for_loop5072);
                   subquery843=subquery();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery843.getTree());

                   }
                   break;

                default:
            }


            RPAREN844=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop5076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN844_tree = 
            cast(Object)adaptor.create(RPAREN844)
            ;
            adaptor.addChild(root_0, RPAREN844_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","multi_column_for_loop"," ",137);
            if ( state.backtracking>0 ) { memoize(input, 137, multi_column_for_loop_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"


    public static class order_by_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1153:1: order_by_clause : 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs ;
    public final PLSQL3_2_DParser.order_by_clause_return order_by_clause()  {
        debug(trace_rules) writeln("Entering rule:","order_by_clause"," ",138);
        PLSQL3_2_DParser.order_by_clause_return retval = new PLSQL3_2_DParser.order_by_clause_return();
        retval.start = input.LT(1);

        int order_by_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal845=null;
        Token string_literal847=null;
        PLSQL3_2_DParser.keySIBLINGS_return keySIBLINGS846 =null;

        PLSQL3_2_DParser.order_by_exprs_return order_by_exprs848 =null;


        Object string_literal845_tree=null;
        Object string_literal847_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1154:2: ( 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1154:4: 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal845=cast(Token)match(input,145,FOLLOW_145_in_order_by_clause5086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal845_tree = 
            cast(Object)adaptor.create(string_literal845)
            ;
            adaptor.addChild(root_0, string_literal845_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1154:12: ( keySIBLINGS )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==ID) ) {
                alt222=1;
            }
            switch (alt222) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1154:14: keySIBLINGS
                   {
                   pushFollow(FOLLOW_keySIBLINGS_in_order_by_clause5090);
                   keySIBLINGS846=keySIBLINGS();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keySIBLINGS846.getTree());

                   }
                   break;

                default:
            }


            string_literal847=cast(Token)match(input,75,FOLLOW_75_in_order_by_clause5095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal847_tree = 
            cast(Object)adaptor.create(string_literal847)
            ;
            adaptor.addChild(root_0, string_literal847_tree);
            }

            pushFollow(FOLLOW_order_by_exprs_in_order_by_clause5097);
            order_by_exprs848=order_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_exprs848.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","order_by_clause"," ",138);
            if ( state.backtracking>0 ) { memoize(input, 138, order_by_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_by_exprs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_exprs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1156:1: order_by_exprs : order_by_expr ( COMMA order_by_expr )* ;
    public final PLSQL3_2_DParser.order_by_exprs_return order_by_exprs()  {
        debug(trace_rules) writeln("Entering rule:","order_by_exprs"," ",139);
        PLSQL3_2_DParser.order_by_exprs_return retval = new PLSQL3_2_DParser.order_by_exprs_return();
        retval.start = input.LT(1);

        int order_by_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA850=null;
        PLSQL3_2_DParser.order_by_expr_return order_by_expr849 =null;

        PLSQL3_2_DParser.order_by_expr_return order_by_expr851 =null;


        Object COMMA850_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:2: ( order_by_expr ( COMMA order_by_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:4: order_by_expr ( COMMA order_by_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_order_by_expr_in_order_by_exprs5107);
            order_by_expr849=order_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr849.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:18: ( COMMA order_by_expr )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==COMMA) ) {
                    int LA223_2 = input.LA(2);

                    if ( (synpred363_PLSQL3_2_D()) ) {
                        alt223=1;
                    }


                }


                switch (alt223) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:20: COMMA order_by_expr
            	    {
            	    COMMA850=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_order_by_exprs5111); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA850_tree = 
            	    cast(Object)adaptor.create(COMMA850)
            	    ;
            	    adaptor.addChild(root_0, COMMA850_tree);
            	    }

            	    pushFollow(FOLLOW_order_by_expr_in_order_by_exprs5113);
            	    order_by_expr851=order_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr851.getTree());

            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","order_by_exprs"," ",139);
            if ( state.backtracking>0 ) { memoize(input, 139, order_by_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_exprs"


    public static class order_by_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1159:1: order_by_expr : ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? ;
    public final PLSQL3_2_DParser.order_by_expr_return order_by_expr()  {
        debug(trace_rules) writeln("Entering rule:","order_by_expr"," ",140);
        PLSQL3_2_DParser.order_by_expr_return retval = new PLSQL3_2_DParser.order_by_expr_return();
        retval.start = input.LT(1);

        int order_by_expr_StartIndex = input.index();

        Object root_0 = null;

        Token set853=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression852 =null;

        PLSQL3_2_DParser.keyNULLS_return keyNULLS854 =null;

        PLSQL3_2_DParser.keyFIRST_return keyFIRST855 =null;

        PLSQL3_2_DParser.keyNULLS_return keyNULLS856 =null;

        PLSQL3_2_DParser.keyLAST_return keyLAST857 =null;


        Object set853_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1160:2: ( ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1160:4: ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1160:4: ( sql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1160:6: sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_order_by_expr5128);
            sql_expression852=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression852.getTree());

            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:3: ( 'ASC' | 'DESC' )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==65||LA224_0==92) ) {
                alt224=1;
            }
            switch (alt224) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                   {
                   set853=cast(Token)input.LT(1);

                   if ( input.LA(1)==65||input.LA(1)==92 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set853)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:23: ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            int alt225=3;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==ID) ) {
                int LA225_1 = input.LA(2);

                if ( ((((toUpper(input.LT(1).getText)== "NULLS")&&(toUpper(input.LT(1).getText)== "NULLS"))&&synpred366_PLSQL3_2_D())) ) {
                    alt225=1;
                }
                else if ( ((((toUpper(input.LT(1).getText)== "NULLS")&&(toUpper(input.LT(1).getText)== "NULLS"))&&synpred367_PLSQL3_2_D())) ) {
                    alt225=2;
                }
            }
            switch (alt225) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:25: keyNULLS keyFIRST
                   {
                   pushFollow(FOLLOW_keyNULLS_in_order_by_expr5151);
                   keyNULLS854=keyNULLS();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS854.getTree());

                   pushFollow(FOLLOW_keyFIRST_in_order_by_expr5153);
                   keyFIRST855=keyFIRST();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIRST855.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:45: keyNULLS keyLAST
                   {
                   pushFollow(FOLLOW_keyNULLS_in_order_by_expr5157);
                   keyNULLS856=keyNULLS();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS856.getTree());

                   pushFollow(FOLLOW_keyLAST_in_order_by_expr5159);
                   keyLAST857=keyLAST();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLAST857.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","order_by_expr"," ",140);
            if ( state.backtracking>0 ) { memoize(input, 140, order_by_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_expr"


    public static class for_update_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_update_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1166:1: for_update_clause : 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? ;
    public final PLSQL3_2_DParser.for_update_clause_return for_update_clause()  {
        debug(trace_rules) writeln("Entering rule:","for_update_clause"," ",141);
        PLSQL3_2_DParser.for_update_clause_return retval = new PLSQL3_2_DParser.for_update_clause_return();
        retval.start = input.LT(1);

        int for_update_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal858=null;
        Token string_literal859=null;
        Token string_literal860=null;
        Token string_literal864=null;
        PLSQL3_2_DParser.column_specs_return column_specs861 =null;

        PLSQL3_2_DParser.keyWAIT_return keyWAIT862 =null;

        PLSQL3_2_DParser.integer_return integer863 =null;


        Object string_literal858_tree=null;
        Object string_literal859_tree=null;
        Object string_literal860_tree=null;
        Object string_literal864_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:2: ( 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:4: 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal858=cast(Token)match(input,104,FOLLOW_104_in_for_update_clause5172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal858_tree = 
            cast(Object)adaptor.create(string_literal858)
            ;
            adaptor.addChild(root_0, string_literal858_tree);
            }

            string_literal859=cast(Token)match(input,177,FOLLOW_177_in_for_update_clause5174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal859_tree = 
            cast(Object)adaptor.create(string_literal859)
            ;
            adaptor.addChild(root_0, string_literal859_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:19: ( 'OF' column_specs )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==142) ) {
                alt226=1;
            }
            switch (alt226) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:21: 'OF' column_specs
                   {
                   string_literal860=cast(Token)match(input,142,FOLLOW_142_in_for_update_clause5178); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal860_tree = 
                   cast(Object)adaptor.create(string_literal860)
                   ;
                   adaptor.addChild(root_0, string_literal860_tree);
                   }

                   pushFollow(FOLLOW_column_specs_in_for_update_clause5180);
                   column_specs861=column_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs861.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:42: ( keyWAIT integer | 'NOWAIT' )?
            int alt227=3;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==ID) ) {
                alt227=1;
            }
            else if ( (LA227_0==135) ) {
                alt227=2;
            }
            switch (alt227) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:44: keyWAIT integer
                   {
                   pushFollow(FOLLOW_keyWAIT_in_for_update_clause5187);
                   keyWAIT862=keyWAIT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWAIT862.getTree());

                   pushFollow(FOLLOW_integer_in_for_update_clause5189);
                   integer863=integer();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, integer863.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1167:62: 'NOWAIT'
                   {
                   string_literal864=cast(Token)match(input,135,FOLLOW_135_in_for_update_clause5193); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal864_tree = 
                   cast(Object)adaptor.create(string_literal864)
                   ;
                   adaptor.addChild(root_0, string_literal864_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","for_update_clause"," ",141);
            if ( state.backtracking>0 ) { memoize(input, 141, for_update_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_update_clause"


    public static class where_condition_whole_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_condition_whole"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1170:1: where_condition_whole : 'WHERE' sql_condition ;
    public final PLSQL3_2_DParser.where_condition_whole_return where_condition_whole()  {
        debug(trace_rules) writeln("Entering rule:","where_condition_whole"," ",142);
        PLSQL3_2_DParser.where_condition_whole_return retval = new PLSQL3_2_DParser.where_condition_whole_return();
        retval.start = input.LT(1);

        int where_condition_whole_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal865=null;
        PLSQL3_2_DParser.sql_condition_return sql_condition866 =null;


        Object string_literal865_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1171:2: ( 'WHERE' sql_condition )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1171:4: 'WHERE' sql_condition
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal865=cast(Token)match(input,183,FOLLOW_183_in_where_condition_whole5207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal865_tree = 
            cast(Object)adaptor.create(string_literal865)
            ;
            adaptor.addChild(root_0, string_literal865_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_where_condition_whole5209);
            sql_condition866=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition866.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","where_condition_whole"," ",142);
            if ( state.backtracking>0 ) { memoize(input, 142, where_condition_whole_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_condition_whole"


    public static class where_condition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_condition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1174:1: where_condition : sql_condition ;
    public final PLSQL3_2_DParser.where_condition_return where_condition()  {
        debug(trace_rules) writeln("Entering rule:","where_condition"," ",143);
        PLSQL3_2_DParser.where_condition_return retval = new PLSQL3_2_DParser.where_condition_return();
        retval.start = input.LT(1);

        int where_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_condition_return sql_condition867 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1175:2: ( sql_condition )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1175:4: sql_condition
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_condition_in_where_condition5220);
            sql_condition867=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition867.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","where_condition"," ",143);
            if ( state.backtracking>0 ) { memoize(input, 143, where_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_condition"


    public static class displayed_column_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "displayed_column"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1178:1: displayed_column : ( column_spec DOT ASTERISK | sql_expression ) ( alias_ )? ;
    public final PLSQL3_2_DParser.displayed_column_return displayed_column()  {
        debug(trace_rules) writeln("Entering rule:","displayed_column"," ",144);
        PLSQL3_2_DParser.displayed_column_return retval = new PLSQL3_2_DParser.displayed_column_return();
        retval.start = input.LT(1);

        int displayed_column_StartIndex = input.index();

        Object root_0 = null;

        Token DOT869=null;
        Token ASTERISK870=null;
        PLSQL3_2_DParser.column_spec_return column_spec868 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression871 =null;

        PLSQL3_2_DParser.alias__return alias_872 =null;


        Object DOT869_tree=null;
        Object ASTERISK870_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1179:2: ( ( column_spec DOT ASTERISK | sql_expression ) ( alias_ )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1179:4: ( column_spec DOT ASTERISK | sql_expression ) ( alias_ )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1179:4: ( column_spec DOT ASTERISK | sql_expression )
            int alt228=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA228_1 = input.LA(2);

                if ( (LA228_1==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt228=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 76:
                    case 91:
                    case 93:
                    case 100:
                    case 101:
                    case 134:
                    case 136:
                    case 151:
                    case 165:
                    case 169:
                    case 174:
                        {
                        alt228=2;
                        }
                        break;
                    case ID:
                        {
                        int LA228_7 = input.LA(4);

                        if ( (LA228_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_7==EOF||LA228_7==ASTERISK||LA228_7==BULK_ROWCOUNT_ATTR||(LA228_7 >=11  && LA228_7<=12)||(LA228_7 >=15  && LA228_7<=23)||LA228_7==LEQ||(LA228_7 >=27  && LA228_7<=29)||(LA228_7 >=32  && LA228_7<=33)||LA228_7==PLUS||LA228_7==ROWCOUNT_ATTR||LA228_7==62||LA228_7==64||LA228_7==68||LA228_7==106||LA228_7==113||(LA228_7 >=119  && LA228_7<=121)||LA228_7==134||LA228_7==144||LA228_7==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 162:
                        {
                        int LA228_8 = input.LA(4);

                        if ( (LA228_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_8==EOF||LA228_8==ASTERISK||LA228_8==BULK_ROWCOUNT_ATTR||(LA228_8 >=11  && LA228_8<=12)||(LA228_8 >=15  && LA228_8<=23)||LA228_8==LEQ||(LA228_8 >=27  && LA228_8<=29)||(LA228_8 >=32  && LA228_8<=33)||LA228_8==PLUS||LA228_8==ROWCOUNT_ATTR||LA228_8==62||LA228_8==64||LA228_8==68||LA228_8==106||LA228_8==113||(LA228_8 >=119  && LA228_8<=121)||LA228_8==134||LA228_8==144||LA228_8==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA228_9 = input.LA(4);

                        if ( (LA228_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_9==EOF||LA228_9==ASTERISK||LA228_9==BULK_ROWCOUNT_ATTR||(LA228_9 >=11  && LA228_9<=12)||(LA228_9 >=15  && LA228_9<=23)||LA228_9==LEQ||(LA228_9 >=27  && LA228_9<=29)||(LA228_9 >=32  && LA228_9<=33)||LA228_9==PLUS||LA228_9==ROWCOUNT_ATTR||LA228_9==62||LA228_9==64||LA228_9==68||LA228_9==106||LA228_9==113||(LA228_9 >=119  && LA228_9<=121)||LA228_9==134||LA228_9==144||LA228_9==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 228, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA228_1==EOF||LA228_1==ASTERISK||(LA228_1 >=11  && LA228_1<=12)||(LA228_1 >=15  && LA228_1<=16)||LA228_1==EXPONENT||LA228_1==ID||LA228_1==LPAREN||LA228_1==MINUS||LA228_1==PLUS||LA228_1==64||LA228_1==106||LA228_1==119||LA228_1==162) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA228_2 = input.LA(2);

                if ( (LA228_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt228=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 76:
                    case 91:
                    case 93:
                    case 100:
                    case 101:
                    case 134:
                    case 136:
                    case 151:
                    case 165:
                    case 169:
                    case 174:
                        {
                        alt228=2;
                        }
                        break;
                    case ID:
                        {
                        int LA228_7 = input.LA(4);

                        if ( (LA228_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_7==EOF||LA228_7==ASTERISK||LA228_7==BULK_ROWCOUNT_ATTR||(LA228_7 >=11  && LA228_7<=12)||(LA228_7 >=15  && LA228_7<=23)||LA228_7==LEQ||(LA228_7 >=27  && LA228_7<=29)||(LA228_7 >=32  && LA228_7<=33)||LA228_7==PLUS||LA228_7==ROWCOUNT_ATTR||LA228_7==62||LA228_7==64||LA228_7==68||LA228_7==106||LA228_7==113||(LA228_7 >=119  && LA228_7<=121)||LA228_7==134||LA228_7==144||LA228_7==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 162:
                        {
                        int LA228_8 = input.LA(4);

                        if ( (LA228_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_8==EOF||LA228_8==ASTERISK||LA228_8==BULK_ROWCOUNT_ATTR||(LA228_8 >=11  && LA228_8<=12)||(LA228_8 >=15  && LA228_8<=23)||LA228_8==LEQ||(LA228_8 >=27  && LA228_8<=29)||(LA228_8 >=32  && LA228_8<=33)||LA228_8==PLUS||LA228_8==ROWCOUNT_ATTR||LA228_8==62||LA228_8==64||LA228_8==68||LA228_8==106||LA228_8==113||(LA228_8 >=119  && LA228_8<=121)||LA228_8==134||LA228_8==144||LA228_8==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA228_9 = input.LA(4);

                        if ( (LA228_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_9==EOF||LA228_9==ASTERISK||LA228_9==BULK_ROWCOUNT_ATTR||(LA228_9 >=11  && LA228_9<=12)||(LA228_9 >=15  && LA228_9<=23)||LA228_9==LEQ||(LA228_9 >=27  && LA228_9<=29)||(LA228_9 >=32  && LA228_9<=33)||LA228_9==PLUS||LA228_9==ROWCOUNT_ATTR||LA228_9==62||LA228_9==64||LA228_9==68||LA228_9==106||LA228_9==113||(LA228_9 >=119  && LA228_9<=121)||LA228_9==134||LA228_9==144||LA228_9==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 228, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA228_2==EOF||LA228_2==ASTERISK||(LA228_2 >=11  && LA228_2<=12)||(LA228_2 >=15  && LA228_2<=16)||LA228_2==EXPONENT||LA228_2==ID||LA228_2==LPAREN||LA228_2==MINUS||LA228_2==PLUS||LA228_2==64||LA228_2==106||LA228_2==119||LA228_2==162) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 2, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
            case MINUS:
            case NUMBER:
            case PLUS:
            case QUOTED_STRING:
            case 76:
            case 93:
            case 101:
            case 136:
            case 165:
            case 169:
            case 174:
                {
                alt228=2;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA228_4 = input.LA(2);

                if ( (LA228_4==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt228=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 76:
                    case 91:
                    case 93:
                    case 100:
                    case 101:
                    case 134:
                    case 136:
                    case 151:
                    case 165:
                    case 169:
                    case 174:
                        {
                        alt228=2;
                        }
                        break;
                    case ID:
                        {
                        int LA228_7 = input.LA(4);

                        if ( (LA228_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_7==EOF||LA228_7==ASTERISK||LA228_7==BULK_ROWCOUNT_ATTR||(LA228_7 >=11  && LA228_7<=12)||(LA228_7 >=15  && LA228_7<=23)||LA228_7==LEQ||(LA228_7 >=27  && LA228_7<=29)||(LA228_7 >=32  && LA228_7<=33)||LA228_7==PLUS||LA228_7==ROWCOUNT_ATTR||LA228_7==62||LA228_7==64||LA228_7==68||LA228_7==106||LA228_7==113||(LA228_7 >=119  && LA228_7<=121)||LA228_7==134||LA228_7==144||LA228_7==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 162:
                        {
                        int LA228_8 = input.LA(4);

                        if ( (LA228_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_8==EOF||LA228_8==ASTERISK||LA228_8==BULK_ROWCOUNT_ATTR||(LA228_8 >=11  && LA228_8<=12)||(LA228_8 >=15  && LA228_8<=23)||LA228_8==LEQ||(LA228_8 >=27  && LA228_8<=29)||(LA228_8 >=32  && LA228_8<=33)||LA228_8==PLUS||LA228_8==ROWCOUNT_ATTR||LA228_8==62||LA228_8==64||LA228_8==68||LA228_8==106||LA228_8==113||(LA228_8 >=119  && LA228_8<=121)||LA228_8==134||LA228_8==144||LA228_8==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA228_9 = input.LA(4);

                        if ( (LA228_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt228=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 76:
                            case 91:
                            case 93:
                            case 100:
                            case 101:
                            case 134:
                            case 136:
                            case 151:
                            case 165:
                            case 169:
                            case 174:
                                {
                                alt228=2;
                                }
                                break;
                            case ID:
                                {
                                int LA228_11 = input.LA(6);

                                if ( (LA228_11==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_11==EOF||LA228_11==ASTERISK||LA228_11==BULK_ROWCOUNT_ATTR||(LA228_11 >=11  && LA228_11<=12)||(LA228_11 >=15  && LA228_11<=23)||LA228_11==LEQ||(LA228_11 >=27  && LA228_11<=29)||(LA228_11 >=32  && LA228_11<=33)||LA228_11==PLUS||LA228_11==ROWCOUNT_ATTR||LA228_11==62||LA228_11==64||LA228_11==68||LA228_11==106||LA228_11==113||(LA228_11 >=119  && LA228_11<=121)||LA228_11==134||LA228_11==144||LA228_11==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 162:
                                {
                                int LA228_12 = input.LA(6);

                                if ( (LA228_12==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_12==EOF||LA228_12==ASTERISK||LA228_12==BULK_ROWCOUNT_ATTR||(LA228_12 >=11  && LA228_12<=12)||(LA228_12 >=15  && LA228_12<=23)||LA228_12==LEQ||(LA228_12 >=27  && LA228_12<=29)||(LA228_12 >=32  && LA228_12<=33)||LA228_12==PLUS||LA228_12==ROWCOUNT_ATTR||LA228_12==62||LA228_12==64||LA228_12==68||LA228_12==106||LA228_12==113||(LA228_12 >=119  && LA228_12<=121)||LA228_12==134||LA228_12==144||LA228_12==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA228_13 = input.LA(6);

                                if ( (LA228_13==DOT) ) {
                                    int LA228_14 = input.LA(7);

                                    if ( (LA228_14==ASTERISK) ) {
                                        alt228=1;
                                    }
                                    else if ( (LA228_14==DOUBLEQUOTED_STRING||LA228_14==ID||LA228_14==LPAREN||LA228_14==MINUS||LA228_14==NUMBER||LA228_14==PLUS||LA228_14==QUOTED_STRING||LA228_14==76||LA228_14==91||LA228_14==93||(LA228_14 >=100  && LA228_14<=101)||LA228_14==134||LA228_14==136||LA228_14==151||LA228_14==162||LA228_14==165||LA228_14==169||LA228_14==174) ) {
                                        alt228=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 228, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA228_13==EOF||LA228_13==ASTERISK||LA228_13==BULK_ROWCOUNT_ATTR||(LA228_13 >=11  && LA228_13<=12)||(LA228_13 >=15  && LA228_13<=23)||LA228_13==LEQ||(LA228_13 >=27  && LA228_13<=29)||(LA228_13 >=32  && LA228_13<=33)||LA228_13==PLUS||LA228_13==ROWCOUNT_ATTR||LA228_13==62||LA228_13==64||LA228_13==68||LA228_13==106||LA228_13==113||(LA228_13 >=119  && LA228_13<=121)||LA228_13==134||LA228_13==144||LA228_13==162) ) {
                                    alt228=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 228, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae = 
                                    new NoViableAltException("", 228, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA228_9==EOF||LA228_9==ASTERISK||LA228_9==BULK_ROWCOUNT_ATTR||(LA228_9 >=11  && LA228_9<=12)||(LA228_9 >=15  && LA228_9<=23)||LA228_9==LEQ||(LA228_9 >=27  && LA228_9<=29)||(LA228_9 >=32  && LA228_9<=33)||LA228_9==PLUS||LA228_9==ROWCOUNT_ATTR||LA228_9==62||LA228_9==64||LA228_9==68||LA228_9==106||LA228_9==113||(LA228_9 >=119  && LA228_9<=121)||LA228_9==134||LA228_9==144||LA228_9==162) ) {
                            alt228=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 228, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA228_4==EOF||LA228_4==ASTERISK||(LA228_4 >=11  && LA228_4<=12)||(LA228_4 >=15  && LA228_4<=16)||LA228_4==EXPONENT||LA228_4==ID||LA228_4==LPAREN||LA228_4==MINUS||LA228_4==PLUS||LA228_4==64||LA228_4==106||LA228_4==119||LA228_4==162) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }

            switch (alt228) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1179:6: column_spec DOT ASTERISK
                   {
                   pushFollow(FOLLOW_column_spec_in_displayed_column5233);
                   column_spec868=column_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec868.getTree());

                   DOT869=cast(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column5235); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT869_tree = 
                   cast(Object)adaptor.create(DOT869)
                   ;
                   adaptor.addChild(root_0, DOT869_tree);
                   }

                   ASTERISK870=cast(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column5237); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   ASTERISK870_tree = 
                   cast(Object)adaptor.create(ASTERISK870)
                   ;
                   adaptor.addChild(root_0, ASTERISK870_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1182:5: sql_expression
                   {
                   pushFollow(FOLLOW_sql_expression_in_displayed_column5245);
                   sql_expression871=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression871.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1184:3: ( alias_ )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==DOUBLEQUOTED_STRING||LA229_0==64||LA229_0==162) ) {
                alt229=1;
            }
            else if ( (LA229_0==ID) ) {
                int LA229_2 = input.LA(2);

                if ( (LA229_2==EOF||LA229_2==COMMA||LA229_2==106||LA229_2==119) ) {
                    alt229=1;
                }
                else if ( (LA229_2==ID) ) {
                    int LA229_4 = input.LA(3);

                    if ( (LA229_4==ID) ) {
                        alt229=1;
                    }
                }
            }
            switch (alt229) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1184:5: alias_
                   {
                   pushFollow(FOLLOW_alias__in_displayed_column5255);
                   alias_872=alias_();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_872.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","displayed_column"," ",144);
            if ( state.backtracking>0 ) { memoize(input, 144, displayed_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "displayed_column"


    public static class schema_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schema_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1187:1: schema_name : sql_identifier ;
    public final PLSQL3_2_DParser.schema_name_return schema_name()  {
        debug(trace_rules) writeln("Entering rule:","schema_name"," ",145);
        PLSQL3_2_DParser.schema_name_return retval = new PLSQL3_2_DParser.schema_name_return();
        retval.start = input.LT(1);

        int schema_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier873 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1188:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1188:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_schema_name5269);
            sql_identifier873=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier873.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","schema_name"," ",145);
            if ( state.backtracking>0 ) { memoize(input, 145, schema_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "schema_name"


    public static class table_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1191:1: table_name : sql_identifier ;
    public final PLSQL3_2_DParser.table_name_return table_name()  {
        debug(trace_rules) writeln("Entering rule:","table_name"," ",146);
        PLSQL3_2_DParser.table_name_return retval = new PLSQL3_2_DParser.table_name_return();
        retval.start = input.LT(1);

        int table_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier874 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1192:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1192:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_table_name5280);
            sql_identifier874=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier874.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_name"," ",146);
            if ( state.backtracking>0 ) { memoize(input, 146, table_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_name"


    public static class nested_expressions_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_expressions"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1195:1: nested_expressions : nested_expression ( COMMA nested_expression )* ;
    public final PLSQL3_2_DParser.nested_expressions_return nested_expressions()  {
        debug(trace_rules) writeln("Entering rule:","nested_expressions"," ",147);
        PLSQL3_2_DParser.nested_expressions_return retval = new PLSQL3_2_DParser.nested_expressions_return();
        retval.start = input.LT(1);

        int nested_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA876=null;
        PLSQL3_2_DParser.nested_expression_return nested_expression875 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression877 =null;


        Object COMMA876_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1196:2: ( nested_expression ( COMMA nested_expression )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1196:4: nested_expression ( COMMA nested_expression )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_nested_expression_in_nested_expressions5291);
            nested_expression875=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression875.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1196:22: ( COMMA nested_expression )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1196:24: COMMA nested_expression
            	    {
            	    COMMA876=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_expressions5295); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA876_tree = 
            	    cast(Object)adaptor.create(COMMA876)
            	    ;
            	    adaptor.addChild(root_0, COMMA876_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_nested_expressions5297);
            	    nested_expression877=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression877.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nested_expressions"," ",147);
            if ( state.backtracking>0 ) { memoize(input, 147, nested_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_expressions"


    public static class nested_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1199:1: nested_expression : ({...}? sql_expression |{...}? plsql_expression );
    public final PLSQL3_2_DParser.nested_expression_return nested_expression()  {
        debug(trace_rules) writeln("Entering rule:","nested_expression"," ",148);
        PLSQL3_2_DParser.nested_expression_return retval = new PLSQL3_2_DParser.nested_expression_return();
        retval.start = input.LT(1);

        int nested_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_expression_return sql_expression878 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression879 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1200:2: ({...}? sql_expression |{...}? plsql_expression )
            int alt231=2;
            switch ( input.LA(1) ) {
            case MINUS:
            case PLUS:
                {
                int LA231_1 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 1, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA231_2 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 2, input);

                    throw nvae;

                }
                }
                break;
            case 76:
                {
                int LA231_3 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 3, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA231_4 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 4, input);

                    throw nvae;

                }
                }
                break;
            case 93:
                {
                int LA231_5 = input.LA(2);

                if ( ((((( is_sql )&&( is_sql ))&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&( !is_sql ))) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 5, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA231_6 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA231_7 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 7, input);

                    throw nvae;

                }
                }
                break;
            case 101:
            case 174:
                {
                int LA231_8 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 8, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA231_9 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 9, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA231_10 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 10, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA231_11 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 11, input);

                    throw nvae;

                }
                }
                break;
            case 136:
                {
                int LA231_12 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 12, input);

                    throw nvae;

                }
                }
                break;
            case 165:
                {
                int LA231_13 = input.LA(2);

                if ( ((((  is_sql )&&(  is_sql ))&&synpred374_PLSQL3_2_D())) ) {
                    alt231=1;
                }
                else if ( (( !is_sql )) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 13, input);

                    throw nvae;

                }
                }
                break;
            case 134:
                {
                alt231=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 231, 0, input);

                throw nvae;

            }

            switch (alt231) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1200:4: {...}? sql_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", "  is_sql ");
                    }

                    pushFollow(FOLLOW_sql_expression_in_nested_expression5313);
                    sql_expression878=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression878.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1201:4: {...}? plsql_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", " !is_sql ");
                    }

                    pushFollow(FOLLOW_plsql_expression_in_nested_expression5320);
                    plsql_expression879=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression879.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nested_expression"," ",148);
            if ( state.backtracking>0 ) { memoize(input, 148, nested_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_expression"


    public static class plsql_condition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_condition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1203:1: plsql_condition : expr_bool ;
    public final PLSQL3_2_DParser.plsql_condition_return plsql_condition()  {
        debug(trace_rules) writeln("Entering rule:","plsql_condition"," ",149);
        PLSQL3_2_DParser.plsql_condition_return retval = new PLSQL3_2_DParser.plsql_condition_return();
        retval.start = input.LT(1);

        int plsql_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.expr_bool_return expr_bool880 =null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1205:2: ( expr_bool )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1205:4: expr_bool
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_bool_in_plsql_condition5337);
            expr_bool880=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool880.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_condition"," ",149);
            if ( state.backtracking>0 ) { memoize(input, 149, plsql_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_condition"


    public static class plsql_expressions_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_expressions"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1208:1: plsql_expressions : plsql_expression ( COMMA plsql_expression )* ;
    public final PLSQL3_2_DParser.plsql_expressions_return plsql_expressions()  {
        debug(trace_rules) writeln("Entering rule:","plsql_expressions"," ",150);
        PLSQL3_2_DParser.plsql_expressions_return retval = new PLSQL3_2_DParser.plsql_expressions_return();
        retval.start = input.LT(1);

        int plsql_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA882=null;
        PLSQL3_2_DParser.plsql_expression_return plsql_expression881 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression883 =null;


        Object COMMA882_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1209:2: ( plsql_expression ( COMMA plsql_expression )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1209:4: plsql_expression ( COMMA plsql_expression )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_plsql_expressions5348);
            plsql_expression881=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression881.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1209:21: ( COMMA plsql_expression )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMMA) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1209:23: COMMA plsql_expression
            	    {
            	    COMMA882=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_plsql_expressions5352); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA882_tree = 
            	    cast(Object)adaptor.create(COMMA882)
            	    ;
            	    adaptor.addChild(root_0, COMMA882_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_plsql_expressions5354);
            	    plsql_expression883=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression883.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_expressions"," ",150);
            if ( state.backtracking>0 ) { memoize(input, 150, plsql_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_expressions"


    public static class plsql_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1212:1: plsql_expression : expr_bool ;
    public final PLSQL3_2_DParser.plsql_expression_return plsql_expression()  {
        debug(trace_rules) writeln("Entering rule:","plsql_expression"," ",151);
        PLSQL3_2_DParser.plsql_expression_return retval = new PLSQL3_2_DParser.plsql_expression_return();
        retval.start = input.LT(1);

        int plsql_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.expr_bool_return expr_bool884 =null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1214:2: ( expr_bool )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1214:4: expr_bool
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_bool_in_plsql_expression5375);
            expr_bool884=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool884.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","plsql_expression"," ",151);
            if ( state.backtracking>0 ) { memoize(input, 151, plsql_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_expression"


    public static class expr_bool_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_bool"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1218:1: expr_bool : expr_or ( 'OR' expr_or )* ;
    public final PLSQL3_2_DParser.expr_bool_return expr_bool()  {
        debug(trace_rules) writeln("Entering rule:","expr_bool"," ",152);
        PLSQL3_2_DParser.expr_bool_return retval = new PLSQL3_2_DParser.expr_bool_return();
        retval.start = input.LT(1);

        int expr_bool_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal886=null;
        PLSQL3_2_DParser.expr_or_return expr_or885 =null;

        PLSQL3_2_DParser.expr_or_return expr_or887 =null;


        Object string_literal886_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:2: ( expr_or ( 'OR' expr_or )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:4: expr_or ( 'OR' expr_or )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_in_expr_bool5387);
            expr_or885=expr_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or885.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:12: ( 'OR' expr_or )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==144) ) {
                    int LA233_2 = input.LA(2);

                    if ( (synpred376_PLSQL3_2_D()) ) {
                        alt233=1;
                    }


                }


                switch (alt233) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:14: 'OR' expr_or
            	    {
            	    string_literal886=cast(Token)match(input,144,FOLLOW_144_in_expr_bool5391); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal886_tree = 
            	    cast(Object)adaptor.create(string_literal886)
            	    ;
            	    adaptor.addChild(root_0, string_literal886_tree);
            	    }

            	    pushFollow(FOLLOW_expr_or_in_expr_bool5393);
            	    expr_or887=expr_or();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or887.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_bool"," ",152);
            if ( state.backtracking>0 ) { memoize(input, 152, expr_bool_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_bool"


    public static class expr_or_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1221:1: expr_or : expr_and ( 'AND' expr_and )* ;
    public final PLSQL3_2_DParser.expr_or_return expr_or()  {
        debug(trace_rules) writeln("Entering rule:","expr_or"," ",153);
        PLSQL3_2_DParser.expr_or_return retval = new PLSQL3_2_DParser.expr_or_return();
        retval.start = input.LT(1);

        int expr_or_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal889=null;
        PLSQL3_2_DParser.expr_and_return expr_and888 =null;

        PLSQL3_2_DParser.expr_and_return expr_and890 =null;


        Object string_literal889_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:2: ( expr_and ( 'AND' expr_and )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:4: expr_and ( 'AND' expr_and )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_in_expr_or5406);
            expr_and888=expr_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and888.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:13: ( 'AND' expr_and )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==62) ) {
                    int LA234_2 = input.LA(2);

                    if ( (synpred377_PLSQL3_2_D()) ) {
                        alt234=1;
                    }


                }


                switch (alt234) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:15: 'AND' expr_and
            	    {
            	    string_literal889=cast(Token)match(input,62,FOLLOW_62_in_expr_or5410); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal889_tree = 
            	    cast(Object)adaptor.create(string_literal889)
            	    ;
            	    adaptor.addChild(root_0, string_literal889_tree);
            	    }

            	    pushFollow(FOLLOW_expr_and_in_expr_or5412);
            	    expr_and890=expr_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and890.getTree());

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_or"," ",153);
            if ( state.backtracking>0 ) { memoize(input, 153, expr_or_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_and_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1224:1: expr_and : ( 'NOT' )? expr_not ;
    public final PLSQL3_2_DParser.expr_and_return expr_and()  {
        debug(trace_rules) writeln("Entering rule:","expr_and"," ",154);
        PLSQL3_2_DParser.expr_and_return retval = new PLSQL3_2_DParser.expr_and_return();
        retval.start = input.LT(1);

        int expr_and_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal891=null;
        PLSQL3_2_DParser.expr_not_return expr_not892 =null;


        Object string_literal891_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1225:2: ( ( 'NOT' )? expr_not )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1225:4: ( 'NOT' )? expr_not
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1225:4: ( 'NOT' )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==134) ) {
                alt235=1;
            }
            switch (alt235) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1225:6: 'NOT'
                   {
                   string_literal891=cast(Token)match(input,134,FOLLOW_134_in_expr_and5427); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal891_tree = 
                   cast(Object)adaptor.create(string_literal891)
                   ;
                   adaptor.addChild(root_0, string_literal891_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_expr_not_in_expr_and5432);
            expr_not892=expr_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_not892.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_and"," ",154);
            if ( state.backtracking>0 ) { memoize(input, 154, expr_and_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_not_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1227:1: expr_not : expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* ;
    public final PLSQL3_2_DParser.expr_not_return expr_not()  {
        debug(trace_rules) writeln("Entering rule:","expr_not"," ",155);
        PLSQL3_2_DParser.expr_not_return retval = new PLSQL3_2_DParser.expr_not_return();
        retval.start = input.LT(1);

        int expr_not_StartIndex = input.index();

        Object root_0 = null;

        Token FOUND_ATTR896=null;
        Token NOTFOUND_ATTR897=null;
        Token ISOPEN_ATTR898=null;
        Token ROWCOUNT_ATTR899=null;
        Token BULK_ROWCOUNT_ATTR900=null;
        Token string_literal901=null;
        Token string_literal902=null;
        Token string_literal903=null;
        Token string_literal904=null;
        Token string_literal905=null;
        Token string_literal907=null;
        Token string_literal908=null;
        Token string_literal910=null;
        Token string_literal912=null;
        Token string_literal913=null;
        Token LPAREN914=null;
        Token RPAREN916=null;
        PLSQL3_2_DParser.expr_add_return expr_add893 =null;

        PLSQL3_2_DParser.relational_op_return relational_op894 =null;

        PLSQL3_2_DParser.expr_add_return expr_add895 =null;

        PLSQL3_2_DParser.expr_add_return expr_add906 =null;

        PLSQL3_2_DParser.expr_add_return expr_add909 =null;

        PLSQL3_2_DParser.expr_add_return expr_add911 =null;

        PLSQL3_2_DParser.nested_expressions_return nested_expressions915 =null;


        Object FOUND_ATTR896_tree=null;
        Object NOTFOUND_ATTR897_tree=null;
        Object ISOPEN_ATTR898_tree=null;
        Object ROWCOUNT_ATTR899_tree=null;
        Object BULK_ROWCOUNT_ATTR900_tree=null;
        Object string_literal901_tree=null;
        Object string_literal902_tree=null;
        Object string_literal903_tree=null;
        Object string_literal904_tree=null;
        Object string_literal905_tree=null;
        Object string_literal907_tree=null;
        Object string_literal908_tree=null;
        Object string_literal910_tree=null;
        Object string_literal912_tree=null;
        Object string_literal913_tree=null;
        Object LPAREN914_tree=null;
        Object RPAREN916_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1228:2: ( expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1228:4: expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_in_expr_not5442);
            expr_add893=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add893.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1229:3: ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            loop240:
            do {
                int alt240=11;
                switch ( input.LA(1) ) {
                case EQ:
                    {
                    int LA240_2 = input.LA(2);

                    if ( (synpred379_PLSQL3_2_D()) ) {
                        alt240=1;
                    }


                    }
                    break;
                case FOUND_ATTR:
                    {
                    int LA240_3 = input.LA(2);

                    if ( (synpred380_PLSQL3_2_D()) ) {
                        alt240=2;
                    }


                    }
                    break;
                case NOTFOUND_ATTR:
                    {
                    int LA240_4 = input.LA(2);

                    if ( (synpred381_PLSQL3_2_D()) ) {
                        alt240=3;
                    }


                    }
                    break;
                case ISOPEN_ATTR:
                    {
                    int LA240_5 = input.LA(2);

                    if ( (synpred382_PLSQL3_2_D()) ) {
                        alt240=4;
                    }


                    }
                    break;
                case ROWCOUNT_ATTR:
                    {
                    int LA240_6 = input.LA(2);

                    if ( (synpred383_PLSQL3_2_D()) ) {
                        alt240=5;
                    }


                    }
                    break;
                case BULK_ROWCOUNT_ATTR:
                    {
                    int LA240_7 = input.LA(2);

                    if ( (synpred384_PLSQL3_2_D()) ) {
                        alt240=6;
                    }


                    }
                    break;
                case 120:
                    {
                    int LA240_8 = input.LA(2);

                    if ( (synpred386_PLSQL3_2_D()) ) {
                        alt240=7;
                    }


                    }
                    break;
                case 134:
                    {
                    int LA240_9 = input.LA(2);

                    if ( (synpred388_PLSQL3_2_D()) ) {
                        alt240=8;
                    }
                    else if ( (synpred390_PLSQL3_2_D()) ) {
                        alt240=9;
                    }
                    else if ( (synpred392_PLSQL3_2_D()) ) {
                        alt240=10;
                    }


                    }
                    break;
                case 121:
                    {
                    int LA240_10 = input.LA(2);

                    if ( (synpred388_PLSQL3_2_D()) ) {
                        alt240=8;
                    }


                    }
                    break;
                case 68:
                    {
                    int LA240_11 = input.LA(2);

                    if ( (synpred390_PLSQL3_2_D()) ) {
                        alt240=9;
                    }


                    }
                    break;
                case 113:
                    {
                    int LA240_12 = input.LA(2);

                    if ( (synpred392_PLSQL3_2_D()) ) {
                        alt240=10;
                    }


                    }
                    break;
                case GEQ:
                case GTH:
                case LEQ:
                case LTH:
                case NOT_EQ:
                    {
                    int LA240_13 = input.LA(2);

                    if ( (synpred379_PLSQL3_2_D()) ) {
                        alt240=1;
                    }


                    }
                    break;

                default:
                }

                switch (alt240) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1229:5: relational_op expr_add
            	    {
            	    pushFollow(FOLLOW_relational_op_in_expr_not5449);
            	    relational_op894=relational_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op894.getTree());

            	    pushFollow(FOLLOW_expr_add_in_expr_not5451);
            	    expr_add895=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add895.getTree());

            	    }
            	    break;
            	case 2 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:5: FOUND_ATTR
            	    {
            	    FOUND_ATTR896=cast(Token)match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_expr_not5457); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOUND_ATTR896_tree = 
            	    cast(Object)adaptor.create(FOUND_ATTR896)
            	    ;
            	    adaptor.addChild(root_0, FOUND_ATTR896_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:18: NOTFOUND_ATTR
            	    {
            	    NOTFOUND_ATTR897=cast(Token)match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_expr_not5461); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOTFOUND_ATTR897_tree = 
            	    cast(Object)adaptor.create(NOTFOUND_ATTR897)
            	    ;
            	    adaptor.addChild(root_0, NOTFOUND_ATTR897_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:34: ISOPEN_ATTR
            	    {
            	    ISOPEN_ATTR898=cast(Token)match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_expr_not5465); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ISOPEN_ATTR898_tree = 
            	    cast(Object)adaptor.create(ISOPEN_ATTR898)
            	    ;
            	    adaptor.addChild(root_0, ISOPEN_ATTR898_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:48: ROWCOUNT_ATTR
            	    {
            	    ROWCOUNT_ATTR899=cast(Token)match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_expr_not5469); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ROWCOUNT_ATTR899_tree = 
            	    cast(Object)adaptor.create(ROWCOUNT_ATTR899)
            	    ;
            	    adaptor.addChild(root_0, ROWCOUNT_ATTR899_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:64: BULK_ROWCOUNT_ATTR
            	    {
            	    BULK_ROWCOUNT_ATTR900=cast(Token)match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5473); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BULK_ROWCOUNT_ATTR900_tree = 
            	    cast(Object)adaptor.create(BULK_ROWCOUNT_ATTR900)
            	    ;
            	    adaptor.addChild(root_0, BULK_ROWCOUNT_ATTR900_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:5: 'IS' ( 'NOT' )? 'NULL'
            	    {
            	    string_literal901=cast(Token)match(input,120,FOLLOW_120_in_expr_not5479); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal901_tree = 
            	    cast(Object)adaptor.create(string_literal901)
            	    ;
            	    adaptor.addChild(root_0, string_literal901_tree);
            	    }

            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:10: ( 'NOT' )?
            	    int alt236=2;
            	    int LA236_0 = input.LA(1);

            	    if ( (LA236_0==134) ) {
            	        alt236=1;
            	    }
            	    switch (alt236) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:12: 'NOT'
            	           {
            	           string_literal902=cast(Token)match(input,134,FOLLOW_134_in_expr_not5483); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           string_literal902_tree = 
            	           cast(Object)adaptor.create(string_literal902)
            	           ;
            	           adaptor.addChild(root_0, string_literal902_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    string_literal903=cast(Token)match(input,136,FOLLOW_136_in_expr_not5488); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal903_tree = 
            	    cast(Object)adaptor.create(string_literal903)
            	    ;
            	    adaptor.addChild(root_0, string_literal903_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:5: ( 'NOT' )? 'LIKE' expr_add
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:5: ( 'NOT' )?
            	    int alt237=2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0==134) ) {
            	        alt237=1;
            	    }
            	    switch (alt237) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:7: 'NOT'
            	           {
            	           string_literal904=cast(Token)match(input,134,FOLLOW_134_in_expr_not5496); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           string_literal904_tree = 
            	           cast(Object)adaptor.create(string_literal904)
            	           ;
            	           adaptor.addChild(root_0, string_literal904_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    string_literal905=cast(Token)match(input,121,FOLLOW_121_in_expr_not5501); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal905_tree = 
            	    cast(Object)adaptor.create(string_literal905)
            	    ;
            	    adaptor.addChild(root_0, string_literal905_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5503);
            	    expr_add906=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add906.getTree());

            	    }
            	    break;
            	case 9 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:5: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:5: ( 'NOT' )?
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==134) ) {
            	        alt238=1;
            	    }
            	    switch (alt238) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:7: 'NOT'
            	           {
            	           string_literal907=cast(Token)match(input,134,FOLLOW_134_in_expr_not5511); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           string_literal907_tree = 
            	           cast(Object)adaptor.create(string_literal907)
            	           ;
            	           adaptor.addChild(root_0, string_literal907_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    string_literal908=cast(Token)match(input,68,FOLLOW_68_in_expr_not5516); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal908_tree = 
            	    cast(Object)adaptor.create(string_literal908)
            	    ;
            	    adaptor.addChild(root_0, string_literal908_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5518);
            	    expr_add909=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add909.getTree());

            	    string_literal910=cast(Token)match(input,62,FOLLOW_62_in_expr_not5520); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal910_tree = 
            	    cast(Object)adaptor.create(string_literal910)
            	    ;
            	    adaptor.addChild(root_0, string_literal910_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5522);
            	    expr_add911=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add911.getTree());

            	    }
            	    break;
            	case 10 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:5: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
            	    {
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:5: ( 'NOT' )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==134) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	       case 1 :
            	           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:7: 'NOT'
            	           {
            	           string_literal912=cast(Token)match(input,134,FOLLOW_134_in_expr_not5530); if (state.failed) return retval;
            	           if ( state.backtracking==0 ) {
            	           string_literal912_tree = 
            	           cast(Object)adaptor.create(string_literal912)
            	           ;
            	           adaptor.addChild(root_0, string_literal912_tree);
            	           }

            	           }
            	           break;

            	        default:
            	    }


            	    string_literal913=cast(Token)match(input,113,FOLLOW_113_in_expr_not5535); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal913_tree = 
            	    cast(Object)adaptor.create(string_literal913)
            	    ;
            	    adaptor.addChild(root_0, string_literal913_tree);
            	    }

            	    LPAREN914=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_not5537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN914_tree = 
            	    cast(Object)adaptor.create(LPAREN914)
            	    ;
            	    adaptor.addChild(root_0, LPAREN914_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expressions_in_expr_not5539);
            	    nested_expressions915=nested_expressions();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expressions915.getTree());

            	    RPAREN916=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_not5541); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN916_tree = 
            	    cast(Object)adaptor.create(RPAREN916)
            	    ;
            	    adaptor.addChild(root_0, RPAREN916_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_not"," ",155);
            if ( state.backtracking>0 ) { memoize(input, 155, expr_not_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class boolean_literal_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolean_literal"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1238:1: boolean_literal : ( 'TRUE' | 'FALSE' );
    public final PLSQL3_2_DParser.boolean_literal_return boolean_literal()  {
        debug(trace_rules) writeln("Entering rule:","boolean_literal"," ",156);
        PLSQL3_2_DParser.boolean_literal_return retval = new PLSQL3_2_DParser.boolean_literal_return();
        retval.start = input.LT(1);

        int boolean_literal_StartIndex = input.index();

        Object root_0 = null;

        Token set917=null;

        Object set917_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1239:2: ( 'TRUE' | 'FALSE' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
            {
            root_0 = cast(Object)adaptor.nil();


            set917=cast(Token)input.LT(1);

            if ( input.LA(1)==101||input.LA(1)==174 ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set917)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","boolean_literal"," ",156);
            if ( state.backtracking>0 ) { memoize(input, 156, boolean_literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolean_literal"


    public static class sql_expressions_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_expressions"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1242:1: sql_expressions : sql_expression ( COMMA sql_expression )* ;
    public final PLSQL3_2_DParser.sql_expressions_return sql_expressions()  {
        debug(trace_rules) writeln("Entering rule:","sql_expressions"," ",157);
        PLSQL3_2_DParser.sql_expressions_return retval = new PLSQL3_2_DParser.sql_expressions_return();
        retval.start = input.LT(1);

        int sql_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA919=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression918 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression920 =null;


        Object COMMA919_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:2: ( sql_expression ( COMMA sql_expression )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:4: sql_expression ( COMMA sql_expression )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_sql_expressions5572);
            sql_expression918=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression918.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:19: ( COMMA sql_expression )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    int LA241_2 = input.LA(2);

                    if ( (synpred394_PLSQL3_2_D()) ) {
                        alt241=1;
                    }


                }


                switch (alt241) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:21: COMMA sql_expression
            	    {
            	    COMMA919=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_expressions5576); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA919_tree = 
            	    cast(Object)adaptor.create(COMMA919)
            	    ;
            	    adaptor.addChild(root_0, COMMA919_tree);
            	    }

            	    pushFollow(FOLLOW_sql_expression_in_sql_expressions5578);
            	    sql_expression920=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression920.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_expressions"," ",157);
            if ( state.backtracking>0 ) { memoize(input, 157, sql_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_expressions"


    public static class sql_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1245:1: sql_expression : expr_add ;
    public final PLSQL3_2_DParser.sql_expression_return sql_expression()  {
        debug(trace_rules) writeln("Entering rule:","sql_expression"," ",158);
        PLSQL3_2_DParser.sql_expression_return retval = new PLSQL3_2_DParser.sql_expression_return();
        retval.start = input.LT(1);

        int sql_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.expr_add_return expr_add921 =null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1247:2: ( expr_add )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1247:4: expr_add
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_in_sql_expression5598);
            expr_add921=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add921.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_expression"," ",158);
            if ( state.backtracking>0 ) { memoize(input, 158, sql_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_expression"


    public static class expr_add_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1249:1: expr_add : expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* ;
    public final PLSQL3_2_DParser.expr_add_return expr_add()  {
        debug(trace_rules) writeln("Entering rule:","expr_add"," ",159);
        PLSQL3_2_DParser.expr_add_return retval = new PLSQL3_2_DParser.expr_add_return();
        retval.start = input.LT(1);

        int expr_add_StartIndex = input.index();

        Object root_0 = null;

        Token set923=null;
        PLSQL3_2_DParser.expr_mul_return expr_mul922 =null;

        PLSQL3_2_DParser.expr_mul_return expr_mul924 =null;


        Object set923_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:2: ( expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:4: expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mul_in_expr_add5608);
            expr_mul922=expr_mul();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul922.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:13: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==MINUS||LA242_0==PLUS) ) {
                    int LA242_2 = input.LA(2);

                    if ( (synpred397_PLSQL3_2_D()) ) {
                        alt242=1;
                    }


                }
                else if ( (LA242_0==DOUBLEVERTBAR) ) {
                    int LA242_3 = input.LA(2);

                    if ( (synpred397_PLSQL3_2_D()) ) {
                        alt242=1;
                    }


                }


                switch (alt242) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:15: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
            	    {
            	    set923=cast(Token)input.LT(1);

            	    if ( input.LA(1)==DOUBLEVERTBAR||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        cast(Object)adaptor.create(set923)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_mul_in_expr_add5626);
            	    expr_mul924=expr_mul();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul924.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_add"," ",159);
            if ( state.backtracking>0 ) { memoize(input, 159, expr_add_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mul_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mul"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1252:1: expr_mul : expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )* ;
    public final PLSQL3_2_DParser.expr_mul_return expr_mul()  {
        debug(trace_rules) writeln("Entering rule:","expr_mul"," ",160);
        PLSQL3_2_DParser.expr_mul_return retval = new PLSQL3_2_DParser.expr_mul_return();
        retval.start = input.LT(1);

        int expr_mul_StartIndex = input.index();

        Object root_0 = null;

        Token set926=null;
        PLSQL3_2_DParser.expr_sign_return expr_sign925 =null;

        PLSQL3_2_DParser.expr_sign_return expr_sign927 =null;


        Object set926_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:2: ( expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:4: expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_sign_in_expr_mul5639);
            expr_sign925=expr_sign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign925.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:14: ( ( ASTERISK | DIVIDE ) expr_sign )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==ASTERISK||LA243_0==DIVIDE) ) {
                    int LA243_2 = input.LA(2);

                    if ( (synpred399_PLSQL3_2_D()) ) {
                        alt243=1;
                    }


                }


                switch (alt243) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:16: ( ASTERISK | DIVIDE ) expr_sign
            	    {
            	    set926=cast(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
            	        input.consume();
            	        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        cast(Object)adaptor.create(set926)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_sign_in_expr_mul5653);
            	    expr_sign927=expr_sign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign927.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_mul"," ",160);
            if ( state.backtracking>0 ) { memoize(input, 160, expr_mul_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_mul"


    public static class expr_sign_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1255:1: expr_sign : ( PLUS | MINUS )? expr_pow ;
    public final PLSQL3_2_DParser.expr_sign_return expr_sign()  {
        debug(trace_rules) writeln("Entering rule:","expr_sign"," ",161);
        PLSQL3_2_DParser.expr_sign_return retval = new PLSQL3_2_DParser.expr_sign_return();
        retval.start = input.LT(1);

        int expr_sign_StartIndex = input.index();

        Object root_0 = null;

        Token set928=null;
        PLSQL3_2_DParser.expr_pow_return expr_pow929 =null;


        Object set928_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1256:2: ( ( PLUS | MINUS )? expr_pow )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1256:4: ( PLUS | MINUS )? expr_pow
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1256:4: ( PLUS | MINUS )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==MINUS||LA244_0==PLUS) ) {
                alt244=1;
            }
            switch (alt244) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                   {
                   set928=cast(Token)input.LT(1);

                   if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set928)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_expr_pow_in_expr_sign5677);
            expr_pow929=expr_pow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_pow929.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_sign"," ",161);
            if ( state.backtracking>0 ) { memoize(input, 161, expr_sign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_pow_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_pow"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1258:1: expr_pow : expr_expr ( EXPONENT expr_expr )* ;
    public final PLSQL3_2_DParser.expr_pow_return expr_pow()  {
        debug(trace_rules) writeln("Entering rule:","expr_pow"," ",162);
        PLSQL3_2_DParser.expr_pow_return retval = new PLSQL3_2_DParser.expr_pow_return();
        retval.start = input.LT(1);

        int expr_pow_StartIndex = input.index();

        Object root_0 = null;

        Token EXPONENT931=null;
        PLSQL3_2_DParser.expr_expr_return expr_expr930 =null;

        PLSQL3_2_DParser.expr_expr_return expr_expr932 =null;


        Object EXPONENT931_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:2: ( expr_expr ( EXPONENT expr_expr )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:4: expr_expr ( EXPONENT expr_expr )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_expr_in_expr_pow5687);
            expr_expr930=expr_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr930.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:14: ( EXPONENT expr_expr )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==EXPONENT) ) {
                    int LA245_2 = input.LA(2);

                    if ( (synpred402_PLSQL3_2_D()) ) {
                        alt245=1;
                    }


                }


                switch (alt245) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:16: EXPONENT expr_expr
            	    {
            	    EXPONENT931=cast(Token)match(input,EXPONENT,FOLLOW_EXPONENT_in_expr_pow5691); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EXPONENT931_tree = 
            	    cast(Object)adaptor.create(EXPONENT931)
            	    ;
            	    adaptor.addChild(root_0, EXPONENT931_tree);
            	    }

            	    pushFollow(FOLLOW_expr_expr_in_expr_pow5693);
            	    expr_expr932=expr_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr932.getTree());

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_pow"," ",162);
            if ( state.backtracking>0 ) { memoize(input, 162, expr_pow_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_pow"


    public static class expr_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1261:1: expr_expr : ( ( expr_paren )=> expr_paren | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( function_expression )=> function_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression );
    public final PLSQL3_2_DParser.expr_expr_return expr_expr()  {
        debug(trace_rules) writeln("Entering rule:","expr_expr"," ",163);
        PLSQL3_2_DParser.expr_expr_return retval = new PLSQL3_2_DParser.expr_expr_return();
        retval.start = input.LT(1);

        int expr_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.expr_paren_return expr_paren933 =null;

        PLSQL3_2_DParser.case_expression_return case_expression934 =null;

        PLSQL3_2_DParser.cursor_expression_return cursor_expression935 =null;

        PLSQL3_2_DParser.function_expression_return function_expression936 =null;

        PLSQL3_2_DParser.simple_expression_return simple_expression937 =null;

        PLSQL3_2_DParser.select_expression_return select_expression938 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1262:2: ( ( expr_paren )=> expr_paren | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( function_expression )=> function_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression )
            int alt246=6;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==LPAREN) && (synpred403_PLSQL3_2_D())) {
                alt246=1;
            }
            else if ( (LA246_0==76) && (synpred404_PLSQL3_2_D())) {
                alt246=2;
            }
            else if ( (LA246_0==ID) ) {
                int LA246_3 = input.LA(2);

                if ( (LA246_3==LPAREN) && (synpred405_PLSQL3_2_D())) {
                    alt246=3;
                }
                else if ( (synpred406_PLSQL3_2_D()) ) {
                    alt246=4;
                }
                else if ( (synpred407_PLSQL3_2_D()) ) {
                    alt246=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA246_0==93) && (synpred406_PLSQL3_2_D())) {
                alt246=4;
            }
            else if ( (LA246_0==DOUBLEQUOTED_STRING) ) {
                int LA246_5 = input.LA(2);

                if ( (synpred406_PLSQL3_2_D()) ) {
                    alt246=4;
                }
                else if ( (synpred407_PLSQL3_2_D()) ) {
                    alt246=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA246_0==162) ) {
                int LA246_6 = input.LA(2);

                if ( (synpred406_PLSQL3_2_D()) ) {
                    alt246=4;
                }
                else if ( (synpred407_PLSQL3_2_D()) ) {
                    alt246=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA246_0==101||LA246_0==174) && (synpred407_PLSQL3_2_D())) {
                alt246=5;
            }
            else if ( (LA246_0==169) && (synpred407_PLSQL3_2_D())) {
                alt246=5;
            }
            else if ( (LA246_0==QUOTED_STRING) && (synpred407_PLSQL3_2_D())) {
                alt246=5;
            }
            else if ( (LA246_0==NUMBER) && (synpred407_PLSQL3_2_D())) {
                alt246=5;
            }
            else if ( (LA246_0==136) && (synpred407_PLSQL3_2_D())) {
                alt246=5;
            }
            else if ( (LA246_0==165) && (synpred408_PLSQL3_2_D())) {
                alt246=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;

            }
            switch (alt246) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1262:4: ( expr_paren )=> expr_paren
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_paren_in_expr_expr5714);
                    expr_paren933=expr_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_paren933.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1265:4: ( case_expression )=> case_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_case_expression_in_expr_expr5730);
                    case_expression934=case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_expression934.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1266:4: ( cursor_expression )=> cursor_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_expression_in_expr_expr5743);
                    cursor_expression935=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_expression935.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1267:4: ( function_expression )=> function_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_expression_in_expr_expr5756);
                    function_expression936=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_expression936.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1268:4: ( simple_expression )=> simple_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_in_expr_expr5769);
                    simple_expression937=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression937.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1269:4: ( select_expression )=> select_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_select_expression_in_expr_expr5782);
                    select_expression938=select_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression938.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_expr"," ",163);
            if ( state.backtracking>0 ) { memoize(input, 163, expr_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_expr"


    public static class simple_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1281:1: simple_expression : ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | QUOTED_STRING | ( column_spec )=> column_spec | NUMBER | 'NULL' );
    public final PLSQL3_2_DParser.simple_expression_return simple_expression()  {
        debug(trace_rules) writeln("Entering rule:","simple_expression"," ",164);
        PLSQL3_2_DParser.simple_expression_return retval = new PLSQL3_2_DParser.simple_expression_return();
        retval.start = input.LT(1);

        int simple_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal940=null;
        Token set941=null;
        Token QUOTED_STRING942=null;
        Token NUMBER944=null;
        Token string_literal945=null;
        PLSQL3_2_DParser.boolean_literal_return boolean_literal939 =null;

        PLSQL3_2_DParser.column_spec_return column_spec943 =null;


        Object string_literal940_tree=null;
        Object set941_tree=null;
        Object QUOTED_STRING942_tree=null;
        Object NUMBER944_tree=null;
        Object string_literal945_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1282:2: ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | QUOTED_STRING | ( column_spec )=> column_spec | NUMBER | 'NULL' )
            int alt247=6;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==101||LA247_0==174) ) {
                alt247=1;
            }
            else if ( (LA247_0==169) ) {
                alt247=2;
            }
            else if ( (LA247_0==QUOTED_STRING) ) {
                alt247=3;
            }
            else if ( (LA247_0==DOUBLEQUOTED_STRING||LA247_0==ID) && (synpred416_PLSQL3_2_D())) {
                alt247=4;
            }
            else if ( (LA247_0==162) && (synpred416_PLSQL3_2_D())) {
                alt247=4;
            }
            else if ( (LA247_0==NUMBER) ) {
                alt247=5;
            }
            else if ( (LA247_0==136) ) {
                alt247=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;

            }
            switch (alt247) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1282:4: boolean_literal
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_boolean_literal_in_simple_expression5803);
                    boolean_literal939=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal939.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1283:4: 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal940=cast(Token)match(input,169,FOLLOW_169_in_simple_expression5808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal940_tree = 
                    cast(Object)adaptor.create(string_literal940)
                    ;
                    adaptor.addChild(root_0, string_literal940_tree);
                    }

                    set941=cast(Token)input.LT(1);

                    if ( input.LA(1)==BULK_ROWCOUNT_ATTR||input.LA(1)==FOUND_ATTR||input.LA(1)==ISOPEN_ATTR||input.LA(1)==NOTFOUND_ATTR||input.LA(1)==ROWCOUNT_ATTR ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set941)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1284:4: QUOTED_STRING
                    {
                    root_0 = cast(Object)adaptor.nil();


                    QUOTED_STRING942=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_simple_expression5835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING942_tree = 
                    cast(Object)adaptor.create(QUOTED_STRING942)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING942_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1285:4: ( column_spec )=> column_spec
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_column_spec_in_simple_expression5848);
                    column_spec943=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec943.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1286:4: NUMBER
                    {
                    root_0 = cast(Object)adaptor.nil();


                    NUMBER944=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_simple_expression5853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER944_tree = 
                    cast(Object)adaptor.create(NUMBER944)
                    ;
                    adaptor.addChild(root_0, NUMBER944_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1290:4: 'NULL'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal945=cast(Token)match(input,136,FOLLOW_136_in_simple_expression5861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal945_tree = 
                    cast(Object)adaptor.create(string_literal945)
                    ;
                    adaptor.addChild(root_0, string_literal945_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","simple_expression"," ",164);
            if ( state.backtracking>0 ) { memoize(input, 164, simple_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class compound_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1292:1: compound_expression : expr_prior ;
    public final PLSQL3_2_DParser.compound_expression_return compound_expression()  {
        debug(trace_rules) writeln("Entering rule:","compound_expression"," ",165);
        PLSQL3_2_DParser.compound_expression_return retval = new PLSQL3_2_DParser.compound_expression_return();
        retval.start = input.LT(1);

        int compound_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.expr_prior_return expr_prior946 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1295:2: ( expr_prior )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1295:4: expr_prior
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expr_prior_in_compound_expression5873);
            expr_prior946=expr_prior();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_prior946.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","compound_expression"," ",165);
            if ( state.backtracking>0 ) { memoize(input, 165, compound_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compound_expression"


    public static class expr_paren_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_paren"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1299:1: expr_paren : LPAREN nested_expression RPAREN ;
    public final PLSQL3_2_DParser.expr_paren_return expr_paren()  {
        debug(trace_rules) writeln("Entering rule:","expr_paren"," ",166);
        PLSQL3_2_DParser.expr_paren_return retval = new PLSQL3_2_DParser.expr_paren_return();
        retval.start = input.LT(1);

        int expr_paren_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN947=null;
        Token RPAREN949=null;
        PLSQL3_2_DParser.nested_expression_return nested_expression948 =null;


        Object LPAREN947_tree=null;
        Object RPAREN949_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1300:2: ( LPAREN nested_expression RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1300:4: LPAREN nested_expression RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN947=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_paren5885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN947_tree = 
            cast(Object)adaptor.create(LPAREN947)
            ;
            adaptor.addChild(root_0, LPAREN947_tree);
            }

            pushFollow(FOLLOW_nested_expression_in_expr_paren5887);
            nested_expression948=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression948.getTree());

            RPAREN949=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_paren5889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN949_tree = 
            cast(Object)adaptor.create(RPAREN949)
            ;
            adaptor.addChild(root_0, RPAREN949_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_paren"," ",166);
            if ( state.backtracking>0 ) { memoize(input, 166, expr_paren_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_paren"


    public static class expr_prior_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_prior"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1302:1: expr_prior : 'PRIOR' expr_add ;
    public final PLSQL3_2_DParser.expr_prior_return expr_prior()  {
        debug(trace_rules) writeln("Entering rule:","expr_prior"," ",167);
        PLSQL3_2_DParser.expr_prior_return retval = new PLSQL3_2_DParser.expr_prior_return();
        retval.start = input.LT(1);

        int expr_prior_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal950=null;
        PLSQL3_2_DParser.expr_add_return expr_add951 =null;


        Object string_literal950_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1303:2: ( 'PRIOR' expr_add )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1303:4: 'PRIOR' expr_add
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal950=cast(Token)match(input,151,FOLLOW_151_in_expr_prior5899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal950_tree = 
            cast(Object)adaptor.create(string_literal950)
            ;
            adaptor.addChild(root_0, string_literal950_tree);
            }

            pushFollow(FOLLOW_expr_add_in_expr_prior5901);
            expr_add951=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add951.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expr_prior"," ",167);
            if ( state.backtracking>0 ) { memoize(input, 167, expr_prior_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_prior"


    public static class case_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1305:1: case_expression : 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' ;
    public final PLSQL3_2_DParser.case_expression_return case_expression()  {
        debug(trace_rules) writeln("Entering rule:","case_expression"," ",168);
        PLSQL3_2_DParser.case_expression_return retval = new PLSQL3_2_DParser.case_expression_return();
        retval.start = input.LT(1);

        int case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal952=null;
        Token string_literal956=null;
        PLSQL3_2_DParser.simple_case_expression_return simple_case_expression953 =null;

        PLSQL3_2_DParser.searched_case_expression_return searched_case_expression954 =null;

        PLSQL3_2_DParser.else_case_expression_return else_case_expression955 =null;


        Object string_literal952_tree=null;
        Object string_literal956_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:2: ( 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:4: 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal952=cast(Token)match(input,76,FOLLOW_76_in_case_expression5911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal952_tree = 
            cast(Object)adaptor.create(string_literal952)
            ;
            adaptor.addChild(root_0, string_literal952_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:11: ( simple_case_expression | searched_case_expression )
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==DOUBLEQUOTED_STRING||LA248_0==ID||LA248_0==LPAREN||LA248_0==MINUS||LA248_0==NUMBER||LA248_0==PLUS||LA248_0==QUOTED_STRING||LA248_0==76||LA248_0==93||LA248_0==101||LA248_0==134||LA248_0==136||LA248_0==162||LA248_0==165||LA248_0==169||LA248_0==174) ) {
                alt248=1;
            }
            else if ( (LA248_0==182) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }
            switch (alt248) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:13: simple_case_expression
                   {
                   pushFollow(FOLLOW_simple_case_expression_in_case_expression5915);
                   simple_case_expression953=simple_case_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_expression953.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:38: searched_case_expression
                   {
                   pushFollow(FOLLOW_searched_case_expression_in_case_expression5919);
                   searched_case_expression954=searched_case_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_expression954.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:65: ( else_case_expression )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==95) ) {
                alt249=1;
            }
            switch (alt249) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1306:67: else_case_expression
                   {
                   pushFollow(FOLLOW_else_case_expression_in_case_expression5925);
                   else_case_expression955=else_case_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_expression955.getTree());

                   }
                   break;

                default:
            }


            string_literal956=cast(Token)match(input,97,FOLLOW_97_in_case_expression5930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal956_tree = 
            cast(Object)adaptor.create(string_literal956)
            ;
            adaptor.addChild(root_0, string_literal956_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","case_expression"," ",168);
            if ( state.backtracking>0 ) { memoize(input, 168, case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "case_expression"


    public static class simple_case_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1308:1: simple_case_expression : nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ ;
    public final PLSQL3_2_DParser.simple_case_expression_return simple_case_expression()  {
        debug(trace_rules) writeln("Entering rule:","simple_case_expression"," ",169);
        PLSQL3_2_DParser.simple_case_expression_return retval = new PLSQL3_2_DParser.simple_case_expression_return();
        retval.start = input.LT(1);

        int simple_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal958=null;
        Token string_literal960=null;
        PLSQL3_2_DParser.nested_expression_return nested_expression957 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression959 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression961 =null;


        Object string_literal958_tree=null;
        Object string_literal960_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1309:2: ( nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1309:4: nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_nested_expression_in_simple_case_expression5940);
            nested_expression957=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression957.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1309:22: ( 'WHEN' nested_expression 'THEN' nested_expression )+
            int cnt250=0;
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==182) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1309:24: 'WHEN' nested_expression 'THEN' nested_expression
            	    {
            	    string_literal958=cast(Token)match(input,182,FOLLOW_182_in_simple_case_expression5944); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal958_tree = 
            	    cast(Object)adaptor.create(string_literal958)
            	    ;
            	    adaptor.addChild(root_0, string_literal958_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression5946);
            	    nested_expression959=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression959.getTree());

            	    string_literal960=cast(Token)match(input,172,FOLLOW_172_in_simple_case_expression5948); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal960_tree = 
            	    cast(Object)adaptor.create(string_literal960)
            	    ;
            	    adaptor.addChild(root_0, string_literal960_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression5950);
            	    nested_expression961=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression961.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt250 >= 1 ) break loop250;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(250, input);
                        throw eee;
                }
                cnt250++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","simple_case_expression"," ",169);
            if ( state.backtracking>0 ) { memoize(input, 169, simple_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_case_expression"


    public static class searched_case_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1311:1: searched_case_expression : ( 'WHEN' nested_condition 'THEN' nested_expression )+ ;
    public final PLSQL3_2_DParser.searched_case_expression_return searched_case_expression()  {
        debug(trace_rules) writeln("Entering rule:","searched_case_expression"," ",170);
        PLSQL3_2_DParser.searched_case_expression_return retval = new PLSQL3_2_DParser.searched_case_expression_return();
        retval.start = input.LT(1);

        int searched_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal962=null;
        Token string_literal964=null;
        PLSQL3_2_DParser.nested_condition_return nested_condition963 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression965 =null;


        Object string_literal962_tree=null;
        Object string_literal964_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1312:2: ( ( 'WHEN' nested_condition 'THEN' nested_expression )+ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1312:4: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1312:4: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            int cnt251=0;
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==182) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1312:6: 'WHEN' nested_condition 'THEN' nested_expression
            	    {
            	    string_literal962=cast(Token)match(input,182,FOLLOW_182_in_searched_case_expression5965); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal962_tree = 
            	    cast(Object)adaptor.create(string_literal962)
            	    ;
            	    adaptor.addChild(root_0, string_literal962_tree);
            	    }

            	    pushFollow(FOLLOW_nested_condition_in_searched_case_expression5967);
            	    nested_condition963=nested_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_condition963.getTree());

            	    string_literal964=cast(Token)match(input,172,FOLLOW_172_in_searched_case_expression5969); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal964_tree = 
            	    cast(Object)adaptor.create(string_literal964)
            	    ;
            	    adaptor.addChild(root_0, string_literal964_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_searched_case_expression5971);
            	    nested_expression965=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression965.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt251 >= 1 ) break loop251;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(251, input);
                        throw eee;
                }
                cnt251++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","searched_case_expression"," ",170);
            if ( state.backtracking>0 ) { memoize(input, 170, searched_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "searched_case_expression"


    public static class else_case_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_case_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1314:1: else_case_expression : 'ELSE' nested_expression ;
    public final PLSQL3_2_DParser.else_case_expression_return else_case_expression()  {
        debug(trace_rules) writeln("Entering rule:","else_case_expression"," ",171);
        PLSQL3_2_DParser.else_case_expression_return retval = new PLSQL3_2_DParser.else_case_expression_return();
        retval.start = input.LT(1);

        int else_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal966=null;
        PLSQL3_2_DParser.nested_expression_return nested_expression967 =null;


        Object string_literal966_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1315:2: ( 'ELSE' nested_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1315:4: 'ELSE' nested_expression
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal966=cast(Token)match(input,95,FOLLOW_95_in_else_case_expression5984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal966_tree = 
            cast(Object)adaptor.create(string_literal966)
            ;
            adaptor.addChild(root_0, string_literal966_tree);
            }

            pushFollow(FOLLOW_nested_expression_in_else_case_expression5986);
            nested_expression967=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression967.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","else_case_expression"," ",171);
            if ( state.backtracking>0 ) { memoize(input, 171, else_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "else_case_expression"


    public static class case_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1317:1: case_statement : ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? ;
    public final PLSQL3_2_DParser.case_statement_return case_statement()  {
        debug(trace_rules) writeln("Entering rule:","case_statement"," ",172);
        PLSQL3_2_DParser.case_statement_return retval = new PLSQL3_2_DParser.case_statement_return();
        retval.start = input.LT(1);

        int case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal969=null;
        Token string_literal973=null;
        Token string_literal974=null;
        PLSQL3_2_DParser.label_name_return label_name968 =null;

        PLSQL3_2_DParser.simple_case_statement_return simple_case_statement970 =null;

        PLSQL3_2_DParser.searched_case_statement_return searched_case_statement971 =null;

        PLSQL3_2_DParser.else_case_statement_return else_case_statement972 =null;

        PLSQL3_2_DParser.label_name_return label_name975 =null;


        Object string_literal969_tree=null;
        Object string_literal973_tree=null;
        Object string_literal974_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:2: ( ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:4: ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:4: ( label_name )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==DOUBLEQUOTED_STRING||LA252_0==ID) ) {
                alt252=1;
            }
            switch (alt252) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:6: label_name
                   {
                   pushFollow(FOLLOW_label_name_in_case_statement5998);
                   label_name968=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name968.getTree());

                   }
                   break;

                default:
            }


            string_literal969=cast(Token)match(input,76,FOLLOW_76_in_case_statement6003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal969_tree = 
            cast(Object)adaptor.create(string_literal969)
            ;
            root_0 = cast(Object)adaptor.becomeRoot(string_literal969_tree, root_0);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:28: ( simple_case_statement | searched_case_statement )
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==DOUBLEQUOTED_STRING||LA253_0==ID||LA253_0==LPAREN||LA253_0==MINUS||LA253_0==NUMBER||LA253_0==PLUS||LA253_0==QUOTED_STRING||LA253_0==76||LA253_0==93||LA253_0==101||LA253_0==134||LA253_0==136||LA253_0==162||LA253_0==165||LA253_0==169||LA253_0==174) ) {
                alt253=1;
            }
            else if ( (LA253_0==182) ) {
                alt253=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;

            }
            switch (alt253) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:30: simple_case_statement
                   {
                   pushFollow(FOLLOW_simple_case_statement_in_case_statement6008);
                   simple_case_statement970=simple_case_statement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement970.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:54: searched_case_statement
                   {
                   pushFollow(FOLLOW_searched_case_statement_in_case_statement6012);
                   searched_case_statement971=searched_case_statement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement971.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:80: ( else_case_statement )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==95) ) {
                alt254=1;
            }
            switch (alt254) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:82: else_case_statement
                   {
                   pushFollow(FOLLOW_else_case_statement_in_case_statement6018);
                   else_case_statement972=else_case_statement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_statement972.getTree());

                   }
                   break;

                default:
            }


            string_literal973=cast(Token)match(input,97,FOLLOW_97_in_case_statement6023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal973_tree = 
            cast(Object)adaptor.create(string_literal973)
            ;
            adaptor.addChild(root_0, string_literal973_tree);
            }

            string_literal974=cast(Token)match(input,76,FOLLOW_76_in_case_statement6025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal974_tree = 
            cast(Object)adaptor.create(string_literal974)
            ;
            adaptor.addChild(root_0, string_literal974_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:118: ( label_name )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==DOUBLEQUOTED_STRING||LA255_0==ID) ) {
                alt255=1;
            }
            switch (alt255) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1318:120: label_name
                   {
                   pushFollow(FOLLOW_label_name_in_case_statement6029);
                   label_name975=label_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name975.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","case_statement"," ",172);
            if ( state.backtracking>0 ) { memoize(input, 172, case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "case_statement"


    public static class simple_case_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1320:1: simple_case_statement : plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final PLSQL3_2_DParser.simple_case_statement_return simple_case_statement()  {
        debug(trace_rules) writeln("Entering rule:","simple_case_statement"," ",173);
        PLSQL3_2_DParser.simple_case_statement_return retval = new PLSQL3_2_DParser.simple_case_statement_return();
        retval.start = input.LT(1);

        int simple_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal977=null;
        Token string_literal979=null;
        PLSQL3_2_DParser.plsql_expression_return plsql_expression976 =null;

        PLSQL3_2_DParser.plsql_expression_return plsql_expression978 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements980 =null;


        Object string_literal977_tree=null;
        Object string_literal979_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1321:2: ( plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1321:4: plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_simple_case_statement6042);
            plsql_expression976=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression976.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1321:21: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt256=0;
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);

                if ( (LA256_0==182) ) {
                    alt256=1;
                }


                switch (alt256) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1321:23: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal977=cast(Token)match(input,182,FOLLOW_182_in_simple_case_statement6046); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal977_tree = 
            	    cast(Object)adaptor.create(string_literal977)
            	    ;
            	    adaptor.addChild(root_0, string_literal977_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_simple_case_statement6048);
            	    plsql_expression978=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression978.getTree());

            	    string_literal979=cast(Token)match(input,172,FOLLOW_172_in_simple_case_statement6050); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal979_tree = 
            	    cast(Object)adaptor.create(string_literal979)
            	    ;
            	    adaptor.addChild(root_0, string_literal979_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_simple_case_statement6052);
            	    seq_of_statements980=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements980.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt256 >= 1 ) break loop256;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(256, input);
                        throw eee;
                }
                cnt256++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","simple_case_statement"," ",173);
            if ( state.backtracking>0 ) { memoize(input, 173, simple_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"


    public static class searched_case_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1323:1: searched_case_statement : ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final PLSQL3_2_DParser.searched_case_statement_return searched_case_statement()  {
        debug(trace_rules) writeln("Entering rule:","searched_case_statement"," ",174);
        PLSQL3_2_DParser.searched_case_statement_return retval = new PLSQL3_2_DParser.searched_case_statement_return();
        retval.start = input.LT(1);

        int searched_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal981=null;
        Token string_literal983=null;
        PLSQL3_2_DParser.plsql_expression_return plsql_expression982 =null;

        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements984 =null;


        Object string_literal981_tree=null;
        Object string_literal983_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1324:2: ( ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1324:4: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1324:4: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt257=0;
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==182) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1324:6: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal981=cast(Token)match(input,182,FOLLOW_182_in_searched_case_statement6067); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal981_tree = 
            	    cast(Object)adaptor.create(string_literal981)
            	    ;
            	    adaptor.addChild(root_0, string_literal981_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_searched_case_statement6069);
            	    plsql_expression982=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression982.getTree());

            	    string_literal983=cast(Token)match(input,172,FOLLOW_172_in_searched_case_statement6071); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal983_tree = 
            	    cast(Object)adaptor.create(string_literal983)
            	    ;
            	    adaptor.addChild(root_0, string_literal983_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_searched_case_statement6073);
            	    seq_of_statements984=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements984.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt257 >= 1 ) break loop257;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(257, input);
                        throw eee;
                }
                cnt257++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","searched_case_statement"," ",174);
            if ( state.backtracking>0 ) { memoize(input, 174, searched_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"


    public static class else_case_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_case_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1326:1: else_case_statement : 'ELSE' seq_of_statements ;
    public final PLSQL3_2_DParser.else_case_statement_return else_case_statement()  {
        debug(trace_rules) writeln("Entering rule:","else_case_statement"," ",175);
        PLSQL3_2_DParser.else_case_statement_return retval = new PLSQL3_2_DParser.else_case_statement_return();
        retval.start = input.LT(1);

        int else_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal985=null;
        PLSQL3_2_DParser.seq_of_statements_return seq_of_statements986 =null;


        Object string_literal985_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1327:2: ( 'ELSE' seq_of_statements )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1327:4: 'ELSE' seq_of_statements
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal985=cast(Token)match(input,95,FOLLOW_95_in_else_case_statement6086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal985_tree = 
            cast(Object)adaptor.create(string_literal985)
            ;
            adaptor.addChild(root_0, string_literal985_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_else_case_statement6088);
            seq_of_statements986=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements986.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","else_case_statement"," ",175);
            if ( state.backtracking>0 ) { memoize(input, 175, else_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "else_case_statement"


    public static class cursor_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1329:1: cursor_expression : keyCURSOR LPAREN subquery RPAREN ;
    public final PLSQL3_2_DParser.cursor_expression_return cursor_expression()  {
        debug(trace_rules) writeln("Entering rule:","cursor_expression"," ",176);
        PLSQL3_2_DParser.cursor_expression_return retval = new PLSQL3_2_DParser.cursor_expression_return();
        retval.start = input.LT(1);

        int cursor_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN988=null;
        Token RPAREN990=null;
        PLSQL3_2_DParser.keyCURSOR_return keyCURSOR987 =null;

        PLSQL3_2_DParser.subquery_return subquery989 =null;


        Object LPAREN988_tree=null;
        Object RPAREN990_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1330:2: ( keyCURSOR LPAREN subquery RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1330:4: keyCURSOR LPAREN subquery RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_expression6098);
            keyCURSOR987=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR987.getTree());

            LPAREN988=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_expression6100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN988_tree = 
            cast(Object)adaptor.create(LPAREN988)
            ;
            adaptor.addChild(root_0, LPAREN988_tree);
            }

            pushFollow(FOLLOW_subquery_in_cursor_expression6102);
            subquery989=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery989.getTree());

            RPAREN990=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_expression6104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN990_tree = 
            cast(Object)adaptor.create(RPAREN990)
            ;
            adaptor.addChild(root_0, RPAREN990_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cursor_expression"," ",176);
            if ( state.backtracking>0 ) { memoize(input, 176, cursor_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_expression"


    public static class datetime_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datetime_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1332:1: datetime_expression : sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) ;
    public final PLSQL3_2_DParser.datetime_expression_return datetime_expression()  {
        debug(trace_rules) writeln("Entering rule:","datetime_expression"," ",177);
        PLSQL3_2_DParser.datetime_expression_return retval = new PLSQL3_2_DParser.datetime_expression_return();
        retval.start = input.LT(1);

        int datetime_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal992=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression991 =null;

        PLSQL3_2_DParser.keyLOCAL_return keyLOCAL993 =null;

        PLSQL3_2_DParser.keyTIME_return keyTIME994 =null;

        PLSQL3_2_DParser.keyZONE_return keyZONE995 =null;

        PLSQL3_2_DParser.keyDBTIMEZONE_return keyDBTIMEZONE996 =null;

        PLSQL3_2_DParser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE997 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression998 =null;


        Object string_literal992_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1333:2: ( sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1333:4: sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_datetime_expression6114);
            sql_expression991=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression991.getTree());

            string_literal992=cast(Token)match(input,66,FOLLOW_66_in_datetime_expression6116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal992_tree = 
            cast(Object)adaptor.create(string_literal992)
            ;
            adaptor.addChild(root_0, string_literal992_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1334:3: ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==ID) ) {
                int LA259_1 = input.LA(2);

                if ( (LA259_1==EOF) ) {
                    alt259=1;
                }
                else if ( (LA259_1==ID) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;

            }
            switch (alt259) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1334:5: keyLOCAL
                   {
                   pushFollow(FOLLOW_keyLOCAL_in_datetime_expression6122);
                   keyLOCAL993=keyLOCAL();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL993.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:5: keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                   {
                   pushFollow(FOLLOW_keyTIME_in_datetime_expression6128);
                   keyTIME994=keyTIME();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME994.getTree());

                   pushFollow(FOLLOW_keyZONE_in_datetime_expression6130);
                   keyZONE995=keyZONE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE995.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:21: ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                   int alt258=3;
                   int LA258_0 = input.LA(1);

                   if ( (LA258_0==ID) ) {
                       int LA258_1 = input.LA(2);

                       if ( ((((toUpper(input.LT(1).getText)== "DBTIMEZONE")&&(toUpper(input.LT(1).getText)== "DBTIMEZONE"))&&synpred429_PLSQL3_2_D())) ) {
                           alt258=1;
                       }
                       else if ( (((synpred430_PLSQL3_2_D()&&synpred430_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "SESSIONTIMEZONE"))) ) {
                           alt258=2;
                       }
                       else if ( (true) ) {
                           alt258=3;
                       }
                       else {
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae =
                               new NoViableAltException("", 258, 1, input);

                           throw nvae;

                       }
                   }
                   else if ( (LA258_0==DOUBLEQUOTED_STRING||LA258_0==LPAREN||LA258_0==MINUS||LA258_0==NUMBER||LA258_0==PLUS||LA258_0==QUOTED_STRING||LA258_0==76||LA258_0==93||LA258_0==101||LA258_0==136||LA258_0==162||LA258_0==165||LA258_0==169||LA258_0==174) ) {
                       alt258=3;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 258, 0, input);

                       throw nvae;

                   }
                   switch (alt258) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:23: keyDBTIMEZONE
                          {
                          pushFollow(FOLLOW_keyDBTIMEZONE_in_datetime_expression6134);
                          keyDBTIMEZONE996=keyDBTIMEZONE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDBTIMEZONE996.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:39: keySESSIONTIMEZONE
                          {
                          pushFollow(FOLLOW_keySESSIONTIMEZONE_in_datetime_expression6138);
                          keySESSIONTIMEZONE997=keySESSIONTIMEZONE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keySESSIONTIMEZONE997.getTree());

                          }
                          break;
                      case 3 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:60: sql_expression
                          {
                          pushFollow(FOLLOW_sql_expression_in_datetime_expression6142);
                          sql_expression998=sql_expression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression998.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","datetime_expression"," ",177);
            if ( state.backtracking>0 ) { memoize(input, 177, datetime_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "datetime_expression"


    public static class function_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1338:1: function_expression : ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? ) | function_call ( DOT nested_expression )? );
    public final PLSQL3_2_DParser.function_expression_return function_expression()  {
        debug(trace_rules) writeln("Entering rule:","function_expression"," ",178);
        PLSQL3_2_DParser.function_expression_return retval = new PLSQL3_2_DParser.function_expression_return();
        retval.start = input.LT(1);

        int function_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1000=null;
        Token ASTERISK1001=null;
        Token RPAREN1003=null;
        Token string_literal1004=null;
        Token LPAREN1005=null;
        Token RPAREN1007=null;
        Token DOT1010=null;
        Token DOT1013=null;
        PLSQL3_2_DParser.keyCOUNT_return keyCOUNT999 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1002 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1006 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1008 =null;

        PLSQL3_2_DParser.function_call_return function_call1009 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1011 =null;

        PLSQL3_2_DParser.function_call_return function_call1012 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1014 =null;


        Object LPAREN1000_tree=null;
        Object ASTERISK1001_tree=null;
        Object RPAREN1003_tree=null;
        Object string_literal1004_tree=null;
        Object LPAREN1005_tree=null;
        Object RPAREN1007_tree=null;
        Object DOT1010_tree=null;
        Object DOT1013_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1339:2: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? ) | function_call ( DOT nested_expression )? )
            int alt265=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA265_1 = input.LA(2);

                if ( (((synpred436_PLSQL3_2_D()&&synpred436_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt265=1;
                }
                else if ( (true) ) {
                    alt265=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 265, 1, input);

                    throw nvae;

                }
                }
                break;
            case 93:
                {
                alt265=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA265_3 = input.LA(2);

                if ( (((synpred436_PLSQL3_2_D()&&synpred436_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt265=1;
                }
                else if ( (true) ) {
                    alt265=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 265, 3, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA265_4 = input.LA(2);

                if ( (((synpred436_PLSQL3_2_D()&&synpred436_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt265=1;
                }
                else if ( (true) ) {
                    alt265=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 265, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 265, 0, input);

                throw nvae;

            }

            switch (alt265) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1340:3: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? )
                    {
                    root_0 = cast(Object)adaptor.nil();


                    if ( !(( is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_expression", " is_sql ");
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:3: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? )
                    int alt263=3;
                    switch ( input.LA(1) ) {
                    case ID:
                        {
                        int LA263_1 = input.LA(2);

                        if ( (((synpred432_PLSQL3_2_D()&&synpred432_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "COUNT"))) ) {
                            alt263=1;
                        }
                        else if ( (true) ) {
                            alt263=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 93:
                        {
                        alt263=2;
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                    case 162:
                        {
                        alt263=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 263, 0, input);

                        throw nvae;

                    }

                    switch (alt263) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                           {
                           pushFollow(FOLLOW_keyCOUNT_in_function_expression6167);
                           keyCOUNT999=keyCOUNT();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOUNT999.getTree());

                           LPAREN1000=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression6169); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN1000_tree = 
                           cast(Object)adaptor.create(LPAREN1000)
                           ;
                           adaptor.addChild(root_0, LPAREN1000_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:21: ( ASTERISK | nested_expression )
                           int alt260=2;
                           int LA260_0 = input.LA(1);

                           if ( (LA260_0==ASTERISK) ) {
                               alt260=1;
                           }
                           else if ( (LA260_0==DOUBLEQUOTED_STRING||LA260_0==ID||LA260_0==LPAREN||LA260_0==MINUS||LA260_0==NUMBER||LA260_0==PLUS||LA260_0==QUOTED_STRING||LA260_0==76||LA260_0==93||LA260_0==101||LA260_0==134||LA260_0==136||LA260_0==162||LA260_0==165||LA260_0==169||LA260_0==174) ) {
                               alt260=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 260, 0, input);

                               throw nvae;

                           }
                           switch (alt260) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:23: ASTERISK
                                  {
                                  ASTERISK1001=cast(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_function_expression6173); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  ASTERISK1001_tree = 
                                  cast(Object)adaptor.create(ASTERISK1001)
                                  ;
                                  adaptor.addChild(root_0, ASTERISK1001_tree);
                                  }

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:34: nested_expression
                                  {
                                  pushFollow(FOLLOW_nested_expression_in_function_expression6177);
                                  nested_expression1002=nested_expression();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1002.getTree());

                                  }
                                  break;

                               default:
                           }


                           RPAREN1003=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression6181); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN1003_tree = 
                           cast(Object)adaptor.create(RPAREN1003)
                           ;
                           adaptor.addChild(root_0, RPAREN1003_tree);
                           }

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:5: 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression )
                           {
                           string_literal1004=cast(Token)match(input,93,FOLLOW_93_in_function_expression6187); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1004_tree = 
                           cast(Object)adaptor.create(string_literal1004)
                           ;
                           adaptor.addChild(root_0, string_literal1004_tree);
                           }

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:16: ( LPAREN nested_expression RPAREN | nested_expression )
                           int alt261=2;
                           int LA261_0 = input.LA(1);

                           if ( (LA261_0==LPAREN) ) {
                               int LA261_1 = input.LA(2);

                               if ( (synpred433_PLSQL3_2_D()) ) {
                                   alt261=1;
                               }
                               else if ( ((( !is_sql )||(  is_sql ))) ) {
                                   alt261=2;
                               }
                               else {
                                   if (state.backtracking>0) {state.failed=true; return retval;}
                                   NoViableAltException nvae =
                                       new NoViableAltException("", 261, 1, input);

                                   throw nvae;

                               }
                           }
                           else if ( (LA261_0==DOUBLEQUOTED_STRING||LA261_0==ID||LA261_0==MINUS||LA261_0==NUMBER||LA261_0==PLUS||LA261_0==QUOTED_STRING||LA261_0==76||LA261_0==93||LA261_0==101||LA261_0==134||LA261_0==136||LA261_0==162||LA261_0==165||LA261_0==169||LA261_0==174) ) {
                               alt261=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 261, 0, input);

                               throw nvae;

                           }
                           switch (alt261) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:18: LPAREN nested_expression RPAREN
                                  {
                                  LPAREN1005=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression6191); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  LPAREN1005_tree = 
                                  cast(Object)adaptor.create(LPAREN1005)
                                  ;
                                  adaptor.addChild(root_0, LPAREN1005_tree);
                                  }

                                  pushFollow(FOLLOW_nested_expression_in_function_expression6193);
                                  nested_expression1006=nested_expression();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1006.getTree());

                                  RPAREN1007=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression6195); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  RPAREN1007_tree = 
                                  cast(Object)adaptor.create(RPAREN1007)
                                  ;
                                  adaptor.addChild(root_0, RPAREN1007_tree);
                                  }

                                  }
                                  break;
                              case 2 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:52: nested_expression
                                  {
                                  pushFollow(FOLLOW_nested_expression_in_function_expression6199);
                                  nested_expression1008=nested_expression();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1008.getTree());

                                  }
                                  break;

                               default:
                           }


                           }
                           break;
                       case 3 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:11: function_call ( DOT nested_expression )?
                           {
                           pushFollow(FOLLOW_function_call_in_function_expression6213);
                           function_call1009=function_call();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call1009.getTree());

                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:25: ( DOT nested_expression )?
                           int alt262=2;
                           int LA262_0 = input.LA(1);

                           if ( (LA262_0==DOT) ) {
                               alt262=1;
                           }
                           switch (alt262) {
                              case 1 :
                                  // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:27: DOT nested_expression
                                  {
                                  DOT1010=cast(Token)match(input,DOT,FOLLOW_DOT_in_function_expression6217); if (state.failed) return retval;
                                  if ( state.backtracking==0 ) {
                                  DOT1010_tree = 
                                  cast(Object)adaptor.create(DOT1010)
                                  ;
                                  adaptor.addChild(root_0, DOT1010_tree);
                                  }

                                  pushFollow(FOLLOW_nested_expression_in_function_expression6219);
                                  nested_expression1011=nested_expression();

                                  state._fsp--;
                                  if (state.failed) return retval;
                                  if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1011.getTree());

                                  }
                                  break;

                               default:
                           }


                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1346:3: function_call ( DOT nested_expression )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_function_call_in_function_expression6234);
                    function_call1012=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call1012.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1346:17: ( DOT nested_expression )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==DOT) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1346:19: DOT nested_expression
                           {
                           DOT1013=cast(Token)match(input,DOT,FOLLOW_DOT_in_function_expression6238); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           DOT1013_tree = 
                           cast(Object)adaptor.create(DOT1013)
                           ;
                           adaptor.addChild(root_0, DOT1013_tree);
                           }

                           pushFollow(FOLLOW_nested_expression_in_function_expression6240);
                           nested_expression1014=nested_expression();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1014.getTree());

                           }
                           break;

                        default:
                    }


                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","function_expression"," ",178);
            if ( state.backtracking>0 ) { memoize(input, 178, function_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_expression"


    public static class special_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "special_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1348:1: special_expression :{...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) ;
    public final PLSQL3_2_DParser.special_expression_return special_expression()  {
        debug(trace_rules) writeln("Entering rule:","special_expression"," ",179);
        PLSQL3_2_DParser.special_expression_return retval = new PLSQL3_2_DParser.special_expression_return();
        retval.start = input.LT(1);

        int special_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1016=null;
        Token ASTERISK1017=null;
        Token RPAREN1019=null;
        Token string_literal1020=null;
        Token LPAREN1021=null;
        Token RPAREN1023=null;
        PLSQL3_2_DParser.keyCOUNT_return keyCOUNT1015 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1018 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1022 =null;


        Object LPAREN1016_tree=null;
        Object ASTERISK1017_tree=null;
        Object RPAREN1019_tree=null;
        Object string_literal1020_tree=null;
        Object LPAREN1021_tree=null;
        Object RPAREN1023_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1349:2: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1349:4: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !(( is_sql )) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "special_expression", " is_sql ");
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1350:3: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==ID) ) {
                alt267=1;
            }
            else if ( (LA267_0==93) ) {
                alt267=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }
            switch (alt267) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1350:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                   {
                   pushFollow(FOLLOW_keyCOUNT_in_special_expression6259);
                   keyCOUNT1015=keyCOUNT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOUNT1015.getTree());

                   LPAREN1016=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression6261); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN1016_tree = 
                   cast(Object)adaptor.create(LPAREN1016)
                   ;
                   adaptor.addChild(root_0, LPAREN1016_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1350:21: ( ASTERISK | nested_expression )
                   int alt266=2;
                   int LA266_0 = input.LA(1);

                   if ( (LA266_0==ASTERISK) ) {
                       alt266=1;
                   }
                   else if ( (LA266_0==DOUBLEQUOTED_STRING||LA266_0==ID||LA266_0==LPAREN||LA266_0==MINUS||LA266_0==NUMBER||LA266_0==PLUS||LA266_0==QUOTED_STRING||LA266_0==76||LA266_0==93||LA266_0==101||LA266_0==134||LA266_0==136||LA266_0==162||LA266_0==165||LA266_0==169||LA266_0==174) ) {
                       alt266=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 266, 0, input);

                       throw nvae;

                   }
                   switch (alt266) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1350:23: ASTERISK
                          {
                          ASTERISK1017=cast(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_special_expression6265); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          ASTERISK1017_tree = 
                          cast(Object)adaptor.create(ASTERISK1017)
                          ;
                          adaptor.addChild(root_0, ASTERISK1017_tree);
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1350:34: nested_expression
                          {
                          pushFollow(FOLLOW_nested_expression_in_special_expression6269);
                          nested_expression1018=nested_expression();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1018.getTree());

                          }
                          break;

                       default:
                   }


                   RPAREN1019=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression6273); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN1019_tree = 
                   cast(Object)adaptor.create(RPAREN1019)
                   ;
                   adaptor.addChild(root_0, RPAREN1019_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1351:5: 'DISTINCT' LPAREN nested_expression RPAREN
                   {
                   string_literal1020=cast(Token)match(input,93,FOLLOW_93_in_special_expression6279); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1020_tree = 
                   cast(Object)adaptor.create(string_literal1020)
                   ;
                   adaptor.addChild(root_0, string_literal1020_tree);
                   }

                   LPAREN1021=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression6281); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN1021_tree = 
                   cast(Object)adaptor.create(LPAREN1021)
                   ;
                   adaptor.addChild(root_0, LPAREN1021_tree);
                   }

                   pushFollow(FOLLOW_nested_expression_in_special_expression6283);
                   nested_expression1022=nested_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1022.getTree());

                   RPAREN1023=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression6285); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN1023_tree = 
                   cast(Object)adaptor.create(RPAREN1023)
                   ;
                   adaptor.addChild(root_0, RPAREN1023_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","special_expression"," ",179);
            if ( state.backtracking>0 ) { memoize(input, 179, special_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "special_expression"


    public static class interval_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interval_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1354:1: interval_expression : sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) ;
    public final PLSQL3_2_DParser.interval_expression_return interval_expression()  {
        debug(trace_rules) writeln("Entering rule:","interval_expression"," ",180);
        PLSQL3_2_DParser.interval_expression_return retval = new PLSQL3_2_DParser.interval_expression_return();
        retval.start = input.LT(1);

        int interval_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1026=null;
        Token RPAREN1028=null;
        Token string_literal1029=null;
        Token LPAREN1031=null;
        Token RPAREN1033=null;
        Token LPAREN1035=null;
        Token RPAREN1037=null;
        Token string_literal1038=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1024 =null;

        PLSQL3_2_DParser.keyDAY_return keyDAY1025 =null;

        PLSQL3_2_DParser.leading_field_precision_return leading_field_precision1027 =null;

        PLSQL3_2_DParser.keySECOND_return keySECOND1030 =null;

        PLSQL3_2_DParser.fractional_second_precision_return fractional_second_precision1032 =null;

        PLSQL3_2_DParser.keyYEAR_return keyYEAR1034 =null;

        PLSQL3_2_DParser.leading_field_precision_return leading_field_precision1036 =null;

        PLSQL3_2_DParser.keyMONTH_return keyMONTH1039 =null;


        Object LPAREN1026_tree=null;
        Object RPAREN1028_tree=null;
        Object string_literal1029_tree=null;
        Object LPAREN1031_tree=null;
        Object RPAREN1033_tree=null;
        Object LPAREN1035_tree=null;
        Object RPAREN1037_tree=null;
        Object string_literal1038_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1355:2: ( sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1355:4: sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_interval_expression6299);
            sql_expression1024=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1024.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:3: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==ID) ) {
                int LA271_1 = input.LA(2);

                if ( (LA271_1==LPAREN) ) {
                    int LA271_2 = input.LA(3);

                    if ( (LA271_2==NUMBER) ) {
                        int LA271_4 = input.LA(4);

                        if ( (LA271_4==RPAREN) ) {
                            int LA271_6 = input.LA(5);

                            if ( (LA271_6==173) ) {
                                int LA271_3 = input.LA(6);

                                if ( (LA271_3==ID) ) {
                                    int LA271_5 = input.LA(7);

                                    if ( (((synpred442_PLSQL3_2_D()&&synpred442_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "DAY"))) ) {
                                        alt271=1;
                                    }
                                    else if ( ((toUpper(input.LT(1).getText)== "YEAR")) ) {
                                        alt271=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 271, 5, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 271, 3, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 271, 6, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 271, 4, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 271, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA271_1==173) ) {
                    int LA271_3 = input.LA(3);

                    if ( (LA271_3==ID) ) {
                        int LA271_5 = input.LA(4);

                        if ( (((synpred442_PLSQL3_2_D()&&synpred442_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "DAY"))) ) {
                            alt271=1;
                        }
                        else if ( ((toUpper(input.LT(1).getText)== "YEAR")) ) {
                            alt271=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 271, 5, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 271, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;

            }
            switch (alt271) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:5: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
                   {
                   pushFollow(FOLLOW_keyDAY_in_interval_expression6305);
                   keyDAY1025=keyDAY();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY1025.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:12: ( LPAREN leading_field_precision RPAREN )?
                   int alt268=2;
                   int LA268_0 = input.LA(1);

                   if ( (LA268_0==LPAREN) ) {
                       alt268=1;
                   }
                   switch (alt268) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:14: LPAREN leading_field_precision RPAREN
                          {
                          LPAREN1026=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression6309); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN1026_tree = 
                          cast(Object)adaptor.create(LPAREN1026)
                          ;
                          adaptor.addChild(root_0, LPAREN1026_tree);
                          }

                          pushFollow(FOLLOW_leading_field_precision_in_interval_expression6311);
                          leading_field_precision1027=leading_field_precision();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1027.getTree());

                          RPAREN1028=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression6313); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN1028_tree = 
                          cast(Object)adaptor.create(RPAREN1028)
                          ;
                          adaptor.addChild(root_0, RPAREN1028_tree);
                          }

                          }
                          break;

                       default:
                   }


                   string_literal1029=cast(Token)match(input,173,FOLLOW_173_in_interval_expression6318); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1029_tree = 
                   cast(Object)adaptor.create(string_literal1029)
                   ;
                   adaptor.addChild(root_0, string_literal1029_tree);
                   }

                   pushFollow(FOLLOW_keySECOND_in_interval_expression6320);
                   keySECOND1030=keySECOND();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND1030.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:70: ( LPAREN fractional_second_precision RPAREN )?
                   int alt269=2;
                   int LA269_0 = input.LA(1);

                   if ( (LA269_0==LPAREN) ) {
                       alt269=1;
                   }
                   switch (alt269) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:72: LPAREN fractional_second_precision RPAREN
                          {
                          LPAREN1031=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression6324); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN1031_tree = 
                          cast(Object)adaptor.create(LPAREN1031)
                          ;
                          adaptor.addChild(root_0, LPAREN1031_tree);
                          }

                          pushFollow(FOLLOW_fractional_second_precision_in_interval_expression6326);
                          fractional_second_precision1032=fractional_second_precision();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, fractional_second_precision1032.getTree());

                          RPAREN1033=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression6328); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN1033_tree = 
                          cast(Object)adaptor.create(RPAREN1033)
                          ;
                          adaptor.addChild(root_0, RPAREN1033_tree);
                          }

                          }
                          break;

                       default:
                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1357:5: keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH
                   {
                   pushFollow(FOLLOW_keyYEAR_in_interval_expression6337);
                   keyYEAR1034=keyYEAR();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR1034.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1357:13: ( LPAREN leading_field_precision RPAREN )?
                   int alt270=2;
                   int LA270_0 = input.LA(1);

                   if ( (LA270_0==LPAREN) ) {
                       alt270=1;
                   }
                   switch (alt270) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1357:15: LPAREN leading_field_precision RPAREN
                          {
                          LPAREN1035=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression6341); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          LPAREN1035_tree = 
                          cast(Object)adaptor.create(LPAREN1035)
                          ;
                          adaptor.addChild(root_0, LPAREN1035_tree);
                          }

                          pushFollow(FOLLOW_leading_field_precision_in_interval_expression6343);
                          leading_field_precision1036=leading_field_precision();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1036.getTree());

                          RPAREN1037=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression6345); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          RPAREN1037_tree = 
                          cast(Object)adaptor.create(RPAREN1037)
                          ;
                          adaptor.addChild(root_0, RPAREN1037_tree);
                          }

                          }
                          break;

                       default:
                   }


                   string_literal1038=cast(Token)match(input,173,FOLLOW_173_in_interval_expression6350); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1038_tree = 
                   cast(Object)adaptor.create(string_literal1038)
                   ;
                   adaptor.addChild(root_0, string_literal1038_tree);
                   }

                   pushFollow(FOLLOW_keyMONTH_in_interval_expression6352);
                   keyMONTH1039=keyMONTH();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH1039.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","interval_expression"," ",180);
            if ( state.backtracking>0 ) { memoize(input, 180, interval_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interval_expression"


    public static class leading_field_precision_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "leading_field_precision"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1360:1: leading_field_precision : integer ;
    public final PLSQL3_2_DParser.leading_field_precision_return leading_field_precision()  {
        debug(trace_rules) writeln("Entering rule:","leading_field_precision"," ",181);
        PLSQL3_2_DParser.leading_field_precision_return retval = new PLSQL3_2_DParser.leading_field_precision_return();
        retval.start = input.LT(1);

        int leading_field_precision_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.integer_return integer1040 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1361:2: ( integer )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1361:4: integer
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_leading_field_precision6366);
            integer1040=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1040.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","leading_field_precision"," ",181);
            if ( state.backtracking>0 ) { memoize(input, 181, leading_field_precision_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "leading_field_precision"


    public static class fractional_second_precision_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fractional_second_precision"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1363:1: fractional_second_precision : integer ;
    public final PLSQL3_2_DParser.fractional_second_precision_return fractional_second_precision()  {
        debug(trace_rules) writeln("Entering rule:","fractional_second_precision"," ",182);
        PLSQL3_2_DParser.fractional_second_precision_return retval = new PLSQL3_2_DParser.fractional_second_precision_return();
        retval.start = input.LT(1);

        int fractional_second_precision_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.integer_return integer1041 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1364:2: ( integer )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1364:4: integer
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_fractional_second_precision6377);
            integer1041=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1041.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","fractional_second_precision"," ",182);
            if ( state.backtracking>0 ) { memoize(input, 182, fractional_second_precision_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fractional_second_precision"


    public static class object_access_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1366:1: object_access_expression :;
    public final PLSQL3_2_DParser.object_access_expression_return object_access_expression()  {
        debug(trace_rules) writeln("Entering rule:","object_access_expression"," ",183);
        PLSQL3_2_DParser.object_access_expression_return retval = new PLSQL3_2_DParser.object_access_expression_return();
        retval.start = input.LT(1);

        int object_access_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1367:2: ()
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1368:2: 
            {
            root_0 = cast(Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","object_access_expression"," ",183);
            if ( state.backtracking>0 ) { memoize(input, 183, object_access_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_access_expression"


    public static class scalar_subquery_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar_subquery_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1369:1: scalar_subquery_expression :;
    public final PLSQL3_2_DParser.scalar_subquery_expression_return scalar_subquery_expression()  {
        debug(trace_rules) writeln("Entering rule:","scalar_subquery_expression"," ",184);
        PLSQL3_2_DParser.scalar_subquery_expression_return retval = new PLSQL3_2_DParser.scalar_subquery_expression_return();
        retval.start = input.LT(1);

        int scalar_subquery_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1370:2: ()
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1371:2: 
            {
            root_0 = cast(Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","scalar_subquery_expression"," ",184);
            if ( state.backtracking>0 ) { memoize(input, 184, scalar_subquery_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "scalar_subquery_expression"


    public static class model_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1372:1: model_expression :;
    public final PLSQL3_2_DParser.model_expression_return model_expression()  {
        debug(trace_rules) writeln("Entering rule:","model_expression"," ",185);
        PLSQL3_2_DParser.model_expression_return retval = new PLSQL3_2_DParser.model_expression_return();
        retval.start = input.LT(1);

        int model_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1373:2: ()
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1374:2: 
            {
            root_0 = cast(Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","model_expression"," ",185);
            if ( state.backtracking>0 ) { memoize(input, 185, model_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_expression"


    public static class type_constructor_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_constructor_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1375:1: type_constructor_expression :;
    public final PLSQL3_2_DParser.type_constructor_expression_return type_constructor_expression()  {
        debug(trace_rules) writeln("Entering rule:","type_constructor_expression"," ",186);
        PLSQL3_2_DParser.type_constructor_expression_return retval = new PLSQL3_2_DParser.type_constructor_expression_return();
        retval.start = input.LT(1);

        int type_constructor_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1376:2: ()
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1377:2: 
            {
            root_0 = cast(Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","type_constructor_expression"," ",186);
            if ( state.backtracking>0 ) { memoize(input, 186, type_constructor_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_constructor_expression"


    public static class variable_expression_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_expression"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1378:1: variable_expression :;
    public final PLSQL3_2_DParser.variable_expression_return variable_expression()  {
        debug(trace_rules) writeln("Entering rule:","variable_expression"," ",187);
        PLSQL3_2_DParser.variable_expression_return retval = new PLSQL3_2_DParser.variable_expression_return();
        retval.start = input.LT(1);

        int variable_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1379:2: ()
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1380:2: 
            {
            root_0 = cast(Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","variable_expression"," ",187);
            if ( state.backtracking>0 ) { memoize(input, 187, variable_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_expression"


    public static class sequence_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequence_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1381:1: sequence_name : identifier ;
    public final PLSQL3_2_DParser.sequence_name_return sequence_name()  {
        debug(trace_rules) writeln("Entering rule:","sequence_name"," ",188);
        PLSQL3_2_DParser.sequence_name_return retval = new PLSQL3_2_DParser.sequence_name_return();
        retval.start = input.LT(1);

        int sequence_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier1042 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1382:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1382:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_sequence_name6428);
            identifier1042=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1042.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sequence_name"," ",188);
            if ( state.backtracking>0 ) { memoize(input, 188, sequence_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sequence_name"


    public static class integer_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1384:1: integer : NUMBER ;
    public final PLSQL3_2_DParser.integer_return integer()  {
        debug(trace_rules) writeln("Entering rule:","integer"," ",189);
        PLSQL3_2_DParser.integer_return retval = new PLSQL3_2_DParser.integer_return();
        retval.start = input.LT(1);

        int integer_StartIndex = input.index();

        Object root_0 = null;

        Token NUMBER1043=null;

        Object NUMBER1043_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1385:2: ( NUMBER )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1385:4: NUMBER
            {
            root_0 = cast(Object)adaptor.nil();


            NUMBER1043=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_integer6438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER1043_tree = 
            cast(Object)adaptor.create(NUMBER1043)
            ;
            adaptor.addChild(root_0, NUMBER1043_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","integer"," ",189);
            if ( state.backtracking>0 ) { memoize(input, 189, integer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integer"


    public static class alias__return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1389:1: alias_ : ( 'AS' )? sql_identifier ;
    public final PLSQL3_2_DParser.alias__return alias_()  {
        debug(trace_rules) writeln("Entering rule:","alias_"," ",190);
        PLSQL3_2_DParser.alias__return retval = new PLSQL3_2_DParser.alias__return();
        retval.start = input.LT(1);

        int alias__StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1044=null;
        PLSQL3_2_DParser.sql_identifier_return sql_identifier1045 =null;


        Object string_literal1044_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1390:2: ( ( 'AS' )? sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1390:4: ( 'AS' )? sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1390:4: ( 'AS' )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==64) ) {
                alt272=1;
            }
            switch (alt272) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1390:6: 'AS'
                   {
                   string_literal1044=cast(Token)match(input,64,FOLLOW_64_in_alias_6452); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1044_tree = 
                   cast(Object)adaptor.create(string_literal1044)
                   ;
                   adaptor.addChild(root_0, string_literal1044_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_sql_identifier_in_alias_6457);
            sql_identifier1045=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1045.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","alias_"," ",190);
            if ( state.backtracking>0 ) { memoize(input, 190, alias__StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "alias_"


    public static class column_specs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_specs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1393:1: column_specs : column_spec ( COMMA column_spec )* ;
    public final PLSQL3_2_DParser.column_specs_return column_specs()  {
        debug(trace_rules) writeln("Entering rule:","column_specs"," ",191);
        PLSQL3_2_DParser.column_specs_return retval = new PLSQL3_2_DParser.column_specs_return();
        retval.start = input.LT(1);

        int column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1047=null;
        PLSQL3_2_DParser.column_spec_return column_spec1046 =null;

        PLSQL3_2_DParser.column_spec_return column_spec1048 =null;


        Object COMMA1047_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1394:2: ( column_spec ( COMMA column_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1394:4: column_spec ( COMMA column_spec )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_column_spec_in_column_specs6468);
            column_spec1046=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1046.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1394:16: ( COMMA column_spec )*
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==COMMA) ) {
                    alt273=1;
                }


                switch (alt273) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1394:18: COMMA column_spec
            	    {
            	    COMMA1047=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_column_specs6472); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1047_tree = 
            	    cast(Object)adaptor.create(COMMA1047)
            	    ;
            	    adaptor.addChild(root_0, COMMA1047_tree);
            	    }

            	    pushFollow(FOLLOW_column_spec_in_column_specs6474);
            	    column_spec1048=column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1048.getTree());

            	    }
            	    break;

            	default :
            	    break loop273;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","column_specs"," ",191);
            if ( state.backtracking>0 ) { memoize(input, 191, column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_specs"


    public static class column_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1397:1: column_spec : sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? ;
    public final PLSQL3_2_DParser.column_spec_return column_spec()  {
        debug(trace_rules) writeln("Entering rule:","column_spec"," ",192);
        PLSQL3_2_DParser.column_spec_return retval = new PLSQL3_2_DParser.column_spec_return();
        retval.start = input.LT(1);

        int column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1050=null;
        Token DOT1052=null;
        PLSQL3_2_DParser.sql_identifier_return sql_identifier1049 =null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1051 =null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1053 =null;


        Object DOT1050_tree=null;
        Object DOT1052_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:2: ( sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:4: sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_column_spec6488);
            sql_identifier1049=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1049.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:19: ( DOT sql_identifier ( DOT sql_identifier )? )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==DOT) ) {
                int LA275_1 = input.LA(2);

                if ( (LA275_1==DOUBLEQUOTED_STRING||LA275_1==ID||LA275_1==162) ) {
                    alt275=1;
                }
            }
            switch (alt275) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:21: DOT sql_identifier ( DOT sql_identifier )?
                   {
                   DOT1050=cast(Token)match(input,DOT,FOLLOW_DOT_in_column_spec6492); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT1050_tree = 
                   cast(Object)adaptor.create(DOT1050)
                   ;
                   adaptor.addChild(root_0, DOT1050_tree);
                   }

                   pushFollow(FOLLOW_sql_identifier_in_column_spec6494);
                   sql_identifier1051=sql_identifier();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1051.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:40: ( DOT sql_identifier )?
                   int alt274=2;
                   int LA274_0 = input.LA(1);

                   if ( (LA274_0==DOT) ) {
                       int LA274_1 = input.LA(2);

                       if ( (LA274_1==DOUBLEQUOTED_STRING||LA274_1==ID||LA274_1==162) ) {
                           alt274=1;
                       }
                   }
                   switch (alt274) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1398:42: DOT sql_identifier
                          {
                          DOT1052=cast(Token)match(input,DOT,FOLLOW_DOT_in_column_spec6498); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          DOT1052_tree = 
                          cast(Object)adaptor.create(DOT1052)
                          ;
                          adaptor.addChild(root_0, DOT1052_tree);
                          }

                          pushFollow(FOLLOW_sql_identifier_in_column_spec6500);
                          sql_identifier1053=sql_identifier();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1053.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","column_spec"," ",192);
            if ( state.backtracking>0 ) { memoize(input, 192, column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_spec"


    public static class column_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1406:1: column_name : sql_identifier ;
    public final PLSQL3_2_DParser.column_name_return column_name()  {
        debug(trace_rules) writeln("Entering rule:","column_name"," ",193);
        PLSQL3_2_DParser.column_name_return retval = new PLSQL3_2_DParser.column_name_return();
        retval.start = input.LT(1);

        int column_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1054 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1407:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1407:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_column_name6522);
            sql_identifier1054=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1054.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","column_name"," ",193);
            if ( state.backtracking>0 ) { memoize(input, 193, column_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_name"


    public static class nested_table_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_table"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1409:1: nested_table : sql_identifier ;
    public final PLSQL3_2_DParser.nested_table_return nested_table()  {
        debug(trace_rules) writeln("Entering rule:","nested_table"," ",194);
        PLSQL3_2_DParser.nested_table_return retval = new PLSQL3_2_DParser.nested_table_return();
        retval.start = input.LT(1);

        int nested_table_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1055 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1410:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1410:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_nested_table6532);
            sql_identifier1055=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1055.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nested_table"," ",194);
            if ( state.backtracking>0 ) { memoize(input, 194, nested_table_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_table"


    public static class nested_table_column_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_table_column_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1412:1: nested_table_column_name : ( schema_name DOT )? table_name DOT nested_table DOT column_name ;
    public final PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name()  {
        debug(trace_rules) writeln("Entering rule:","nested_table_column_name"," ",195);
        PLSQL3_2_DParser.nested_table_column_name_return retval = new PLSQL3_2_DParser.nested_table_column_name_return();
        retval.start = input.LT(1);

        int nested_table_column_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1057=null;
        Token DOT1059=null;
        Token DOT1061=null;
        PLSQL3_2_DParser.schema_name_return schema_name1056 =null;

        PLSQL3_2_DParser.table_name_return table_name1058 =null;

        PLSQL3_2_DParser.nested_table_return nested_table1060 =null;

        PLSQL3_2_DParser.column_name_return column_name1062 =null;


        Object DOT1057_tree=null;
        Object DOT1059_tree=null;
        Object DOT1061_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1413:2: ( ( schema_name DOT )? table_name DOT nested_table DOT column_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1413:4: ( schema_name DOT )? table_name DOT nested_table DOT column_name
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1413:4: ( schema_name DOT )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==DOUBLEQUOTED_STRING||LA276_0==ID) ) {
                int LA276_1 = input.LA(2);

                if ( (LA276_1==DOT) ) {
                    int LA276_3 = input.LA(3);

                    if ( (LA276_3==DOUBLEQUOTED_STRING||LA276_3==ID) ) {
                        int LA276_4 = input.LA(4);

                        if ( (LA276_4==DOT) ) {
                            int LA276_6 = input.LA(5);

                            if ( (LA276_6==DOUBLEQUOTED_STRING||LA276_6==ID) ) {
                                int LA276_7 = input.LA(6);

                                if ( (LA276_7==DOT) ) {
                                    alt276=1;
                                }
                            }
                            else if ( (LA276_6==162) ) {
                                int LA276_8 = input.LA(6);

                                if ( (LA276_8==DOT) ) {
                                    alt276=1;
                                }
                            }
                        }
                    }
                    else if ( (LA276_3==162) ) {
                        int LA276_5 = input.LA(4);

                        if ( (LA276_5==DOT) ) {
                            int LA276_6 = input.LA(5);

                            if ( (LA276_6==DOUBLEQUOTED_STRING||LA276_6==ID) ) {
                                int LA276_7 = input.LA(6);

                                if ( (LA276_7==DOT) ) {
                                    alt276=1;
                                }
                            }
                            else if ( (LA276_6==162) ) {
                                int LA276_8 = input.LA(6);

                                if ( (LA276_8==DOT) ) {
                                    alt276=1;
                                }
                            }
                        }
                    }
                }
            }
            else if ( (LA276_0==162) ) {
                int LA276_2 = input.LA(2);

                if ( (LA276_2==DOT) ) {
                    int LA276_3 = input.LA(3);

                    if ( (LA276_3==DOUBLEQUOTED_STRING||LA276_3==ID) ) {
                        int LA276_4 = input.LA(4);

                        if ( (LA276_4==DOT) ) {
                            int LA276_6 = input.LA(5);

                            if ( (LA276_6==DOUBLEQUOTED_STRING||LA276_6==ID) ) {
                                int LA276_7 = input.LA(6);

                                if ( (LA276_7==DOT) ) {
                                    alt276=1;
                                }
                            }
                            else if ( (LA276_6==162) ) {
                                int LA276_8 = input.LA(6);

                                if ( (LA276_8==DOT) ) {
                                    alt276=1;
                                }
                            }
                        }
                    }
                    else if ( (LA276_3==162) ) {
                        int LA276_5 = input.LA(4);

                        if ( (LA276_5==DOT) ) {
                            int LA276_6 = input.LA(5);

                            if ( (LA276_6==DOUBLEQUOTED_STRING||LA276_6==ID) ) {
                                int LA276_7 = input.LA(6);

                                if ( (LA276_7==DOT) ) {
                                    alt276=1;
                                }
                            }
                            else if ( (LA276_6==162) ) {
                                int LA276_8 = input.LA(6);

                                if ( (LA276_8==DOT) ) {
                                    alt276=1;
                                }
                            }
                        }
                    }
                }
            }
            switch (alt276) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1413:6: schema_name DOT
                   {
                   pushFollow(FOLLOW_schema_name_in_nested_table_column_name6544);
                   schema_name1056=schema_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1056.getTree());

                   DOT1057=cast(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6546); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT1057_tree = 
                   cast(Object)adaptor.create(DOT1057)
                   ;
                   adaptor.addChild(root_0, DOT1057_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_table_name_in_nested_table_column_name6551);
            table_name1058=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1058.getTree());

            DOT1059=cast(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1059_tree = 
            cast(Object)adaptor.create(DOT1059)
            ;
            adaptor.addChild(root_0, DOT1059_tree);
            }

            pushFollow(FOLLOW_nested_table_in_nested_table_column_name6555);
            nested_table1060=nested_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table1060.getTree());

            DOT1061=cast(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1061_tree = 
            cast(Object)adaptor.create(DOT1061)
            ;
            adaptor.addChild(root_0, DOT1061_tree);
            }

            pushFollow(FOLLOW_column_name_in_nested_table_column_name6559);
            column_name1062=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1062.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nested_table_column_name"," ",195);
            if ( state.backtracking>0 ) { memoize(input, 195, nested_table_column_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_table_column_name"


    public static class user_defined_function_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "user_defined_function"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1416:1: user_defined_function : sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? ;
    public final PLSQL3_2_DParser.user_defined_function_return user_defined_function()  {
        debug(trace_rules) writeln("Entering rule:","user_defined_function"," ",196);
        PLSQL3_2_DParser.user_defined_function_return retval = new PLSQL3_2_DParser.user_defined_function_return();
        retval.start = input.LT(1);

        int user_defined_function_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1064=null;
        Token DOT1066=null;
        Token set1067=null;
        PLSQL3_2_DParser.sql_identifier_return sql_identifier1063 =null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1065 =null;


        Object DOT1064_tree=null;
        Object DOT1066_tree=null;
        Object set1067_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:2: ( sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:4: sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_user_defined_function6570);
            sql_identifier1063=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1063.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:19: ( DOT sql_identifier )*
            loop277:
            do {
                int alt277=2;
                int LA277_0 = input.LA(1);

                if ( (LA277_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case ID:
                        {
                        int LA277_3 = input.LA(3);

                        if ( (synpred449_PLSQL3_2_D()) ) {
                            alt277=1;
                        }


                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA277_4 = input.LA(3);

                        if ( (synpred449_PLSQL3_2_D()) ) {
                            alt277=1;
                        }


                        }
                        break;
                    case 162:
                        {
                        int LA277_5 = input.LA(3);

                        if ( (synpred449_PLSQL3_2_D()) ) {
                            alt277=1;
                        }


                        }
                        break;

                    default:
                    }

                }


                switch (alt277) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:21: DOT sql_identifier
            	    {
            	    DOT1064=cast(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function6574); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT1064_tree = 
            	    cast(Object)adaptor.create(DOT1064)
            	    ;
            	    adaptor.addChild(root_0, DOT1064_tree);
            	    }

            	    pushFollow(FOLLOW_sql_identifier_in_user_defined_function6576);
            	    sql_identifier1065=sql_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1065.getTree());

            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:43: ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==DOT) ) {
                int LA278_1 = input.LA(2);

                if ( (LA278_1==91||LA278_1==100||LA278_1==151) ) {
                    alt278=1;
                }
            }
            switch (alt278) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:45: DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' )
                   {
                   DOT1066=cast(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function6583); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT1066_tree = 
                   cast(Object)adaptor.create(DOT1066)
                   ;
                   adaptor.addChild(root_0, DOT1066_tree);
                   }

                   set1067=cast(Token)input.LT(1);

                   if ( input.LA(1)==91||input.LA(1)==100||input.LA(1)==151 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set1067)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","user_defined_function"," ",196);
            if ( state.backtracking>0 ) { memoize(input, 196, user_defined_function_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "user_defined_function"


    public static class selected_table_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selected_table"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1429:1: selected_table : ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias_ )? ;
    public final PLSQL3_2_DParser.selected_table_return selected_table()  {
        debug(trace_rules) writeln("Entering rule:","selected_table"," ",197);
        PLSQL3_2_DParser.selected_table_return retval = new PLSQL3_2_DParser.selected_table_return();
        retval.start = input.LT(1);

        int selected_table_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1069=null;
        PLSQL3_2_DParser.table_spec_return table_spec1068 =null;

        PLSQL3_2_DParser.keyTHE_return keyTHE1070 =null;

        PLSQL3_2_DParser.subquery_return subquery1071 =null;

        PLSQL3_2_DParser.alias__return alias_1072 =null;


        Object string_literal1069_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:2: ( ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias_ )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:4: ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias_ )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:4: ( table_spec | ( 'TABLE' | keyTHE )? subquery )
            int alt280=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA280_1 = input.LA(2);

                if ( (synpred453_PLSQL3_2_D()) ) {
                    alt280=1;
                }
                else if ( ((toUpper(input.LT(1).getText)== "THE")) ) {
                    alt280=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 1, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 162:
                {
                alt280=1;
                }
                break;
            case LPAREN:
            case 171:
                {
                alt280=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 280, 0, input);

                throw nvae;

            }

            switch (alt280) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:6: table_spec
                   {
                   pushFollow(FOLLOW_table_spec_in_selected_table6623);
                   table_spec1068=table_spec();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec1068.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:19: ( 'TABLE' | keyTHE )? subquery
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:19: ( 'TABLE' | keyTHE )?
                   int alt279=3;
                   int LA279_0 = input.LA(1);

                   if ( (LA279_0==171) ) {
                       alt279=1;
                   }
                   else if ( (LA279_0==ID) ) {
                       alt279=2;
                   }
                   switch (alt279) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:21: 'TABLE'
                          {
                          string_literal1069=cast(Token)match(input,171,FOLLOW_171_in_selected_table6629); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal1069_tree = 
                          cast(Object)adaptor.create(string_literal1069)
                          ;
                          adaptor.addChild(root_0, string_literal1069_tree);
                          }

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:31: keyTHE
                          {
                          pushFollow(FOLLOW_keyTHE_in_selected_table6633);
                          keyTHE1070=keyTHE();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTHE1070.getTree());

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_subquery_in_selected_table6638);
                   subquery1071=subquery();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1071.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:52: ( alias_ )?
            int alt281=2;
            switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA281_1 = input.LA(2);

                    if ( (LA281_1==DOUBLEQUOTED_STRING||LA281_1==ID) ) {
                        int LA281_6 = input.LA(3);

                        if ( (synpred456_PLSQL3_2_D()) ) {
                            alt281=1;
                        }
                    }
                    else if ( (LA281_1==162) ) {
                        int LA281_7 = input.LA(3);

                        if ( (synpred456_PLSQL3_2_D()) ) {
                            alt281=1;
                        }
                    }
                    }
                    break;
                case ID:
                    {
                    int LA281_2 = input.LA(2);

                    if ( (synpred456_PLSQL3_2_D()) ) {
                        alt281=1;
                    }
                    }
                    break;
                case 162:
                    {
                    int LA281_3 = input.LA(2);

                    if ( (synpred456_PLSQL3_2_D()) ) {
                        alt281=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA281_5 = input.LA(2);

                    if ( (synpred456_PLSQL3_2_D()) ) {
                        alt281=1;
                    }
                    }
                    break;
                default:
            }

            switch (alt281) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:54: alias_
                   {
                   pushFollow(FOLLOW_alias__in_selected_table6644);
                   alias_1072=alias_();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_1072.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","selected_table"," ",197);
            if ( state.backtracking>0 ) { memoize(input, 197, selected_table_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "selected_table"


    public static class table_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1433:1: table_spec : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ;
    public final PLSQL3_2_DParser.table_spec_return table_spec()  {
        debug(trace_rules) writeln("Entering rule:","table_spec"," ",198);
        PLSQL3_2_DParser.table_spec_return retval = new PLSQL3_2_DParser.table_spec_return();
        retval.start = input.LT(1);

        int table_spec_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1074=null;
        Token AT_SIGN1076=null;
        PLSQL3_2_DParser.schema_name_return schema_name1073 =null;

        PLSQL3_2_DParser.table_name_return table_name1075 =null;

        PLSQL3_2_DParser.link_name_return link_name1077 =null;


        Object DOT1074_tree=null;
        Object AT_SIGN1076_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:2: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:4: ( schema_name DOT )? table_name ( AT_SIGN link_name )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:4: ( schema_name DOT )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==DOUBLEQUOTED_STRING||LA282_0==ID) ) {
                int LA282_1 = input.LA(2);

                if ( (LA282_1==DOT) ) {
                    alt282=1;
                }
            }
            else if ( (LA282_0==162) ) {
                int LA282_2 = input.LA(2);

                if ( (LA282_2==DOT) ) {
                    alt282=1;
                }
            }
            switch (alt282) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:6: schema_name DOT
                   {
                   pushFollow(FOLLOW_schema_name_in_table_spec6660);
                   schema_name1073=schema_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1073.getTree());

                   DOT1074=cast(Token)match(input,DOT,FOLLOW_DOT_in_table_spec6662); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT1074_tree = 
                   cast(Object)adaptor.create(DOT1074)
                   ;
                   adaptor.addChild(root_0, DOT1074_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_table_name_in_table_spec6667);
            table_name1075=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1075.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:36: ( AT_SIGN link_name )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==AT_SIGN) ) {
                alt283=1;
            }
            switch (alt283) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1434:38: AT_SIGN link_name
                   {
                   AT_SIGN1076=cast(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_spec6671); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   AT_SIGN1076_tree = 
                   cast(Object)adaptor.create(AT_SIGN1076)
                   ;
                   adaptor.addChild(root_0, AT_SIGN1076_tree);
                   }

                   pushFollow(FOLLOW_link_name_in_table_spec6673);
                   link_name1077=link_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1077.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_spec"," ",198);
            if ( state.backtracking>0 ) { memoize(input, 198, table_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_spec"


    public static class table_alias_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_alias"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1437:1: table_alias : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias_ )? ;
    public final PLSQL3_2_DParser.table_alias_return table_alias()  {
        debug(trace_rules) writeln("Entering rule:","table_alias"," ",199);
        PLSQL3_2_DParser.table_alias_return retval = new PLSQL3_2_DParser.table_alias_return();
        retval.start = input.LT(1);

        int table_alias_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1079=null;
        Token AT_SIGN1081=null;
        PLSQL3_2_DParser.schema_name_return schema_name1078 =null;

        PLSQL3_2_DParser.table_name_return table_name1080 =null;

        PLSQL3_2_DParser.link_name_return link_name1082 =null;

        PLSQL3_2_DParser.alias__return alias_1083 =null;


        Object DOT1079_tree=null;
        Object AT_SIGN1081_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:2: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias_ )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:4: ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias_ )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:4: ( schema_name DOT )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==DOUBLEQUOTED_STRING||LA284_0==ID) ) {
                int LA284_1 = input.LA(2);

                if ( (LA284_1==DOT) ) {
                    alt284=1;
                }
            }
            else if ( (LA284_0==162) ) {
                int LA284_2 = input.LA(2);

                if ( (LA284_2==DOT) ) {
                    alt284=1;
                }
            }
            switch (alt284) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:6: schema_name DOT
                   {
                   pushFollow(FOLLOW_schema_name_in_table_alias6689);
                   schema_name1078=schema_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1078.getTree());

                   DOT1079=cast(Token)match(input,DOT,FOLLOW_DOT_in_table_alias6691); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   DOT1079_tree = 
                   cast(Object)adaptor.create(DOT1079)
                   ;
                   adaptor.addChild(root_0, DOT1079_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_table_name_in_table_alias6696);
            table_name1080=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1080.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:36: ( AT_SIGN link_name )?
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==AT_SIGN) ) {
                alt285=1;
            }
            switch (alt285) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:38: AT_SIGN link_name
                   {
                   AT_SIGN1081=cast(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_alias6700); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   AT_SIGN1081_tree = 
                   cast(Object)adaptor.create(AT_SIGN1081)
                   ;
                   adaptor.addChild(root_0, AT_SIGN1081_tree);
                   }

                   pushFollow(FOLLOW_link_name_in_table_alias6702);
                   link_name1082=link_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1082.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:59: ( alias_ )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==DOUBLEQUOTED_STRING||LA286_0==ID||LA286_0==64||LA286_0==162) ) {
                alt286=1;
            }
            switch (alt286) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1438:61: alias_
                   {
                   pushFollow(FOLLOW_alias__in_table_alias6709);
                   alias_1083=alias_();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_1083.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","table_alias"," ",199);
            if ( state.backtracking>0 ) { memoize(input, 199, table_alias_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_alias"


    public static class link_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "link_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1441:1: link_name : sql_identifier ;
    public final PLSQL3_2_DParser.link_name_return link_name()  {
        debug(trace_rules) writeln("Entering rule:","link_name"," ",200);
        PLSQL3_2_DParser.link_name_return retval = new PLSQL3_2_DParser.link_name_return();
        retval.start = input.LT(1);

        int link_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1084 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1442:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1442:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_link_name6723);
            sql_identifier1084=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1084.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","link_name"," ",200);
            if ( state.backtracking>0 ) { memoize(input, 200, link_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "link_name"


    public static class nested_condition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_condition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1444:1: nested_condition : ({...}? condition_or |{...}? expr_bool );
    public final PLSQL3_2_DParser.nested_condition_return nested_condition()  {
        debug(trace_rules) writeln("Entering rule:","nested_condition"," ",201);
        PLSQL3_2_DParser.nested_condition_return retval = new PLSQL3_2_DParser.nested_condition_return();
        retval.start = input.LT(1);

        int nested_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.condition_or_return condition_or1085 =null;

        PLSQL3_2_DParser.expr_bool_return expr_bool1086 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1445:2: ({...}? condition_or |{...}? expr_bool )
            int alt287=2;
            switch ( input.LA(1) ) {
            case 134:
                {
                int LA287_1 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);

                    throw nvae;

                }
                }
                break;
            case 63:
            case 100:
            case 151:
                {
                alt287=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA287_3 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 3, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA287_4 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 4, input);

                    throw nvae;

                }
                }
                break;
            case 76:
                {
                int LA287_5 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 5, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA287_6 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 6, input);

                    throw nvae;

                }
                }
                break;
            case 93:
                {
                int LA287_7 = input.LA(2);

                if ( ((((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&( is_sql ))&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&( !is_sql ))) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 7, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA287_8 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 8, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA287_9 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 9, input);

                    throw nvae;

                }
                }
                break;
            case 101:
            case 174:
                {
                int LA287_10 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 10, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA287_11 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 11, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA287_12 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 12, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA287_13 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 13, input);

                    throw nvae;

                }
                }
                break;
            case 136:
                {
                int LA287_14 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 14, input);

                    throw nvae;

                }
                }
                break;
            case 165:
                {
                int LA287_15 = input.LA(2);

                if ( (((synpred462_PLSQL3_2_D()&&synpred462_PLSQL3_2_D())&&(  is_sql ))) ) {
                    alt287=1;
                }
                else if ( (( !is_sql )) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 15, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 287, 0, input);

                throw nvae;

            }

            switch (alt287) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1445:4: {...}? condition_or
                    {
                    root_0 = cast(Object)adaptor.nil();


                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", "  is_sql ");
                    }

                    pushFollow(FOLLOW_condition_or_in_nested_condition6735);
                    condition_or1085=condition_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1085.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1446:4: {...}? expr_bool
                    {
                    root_0 = cast(Object)adaptor.nil();


                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", " !is_sql ");
                    }

                    pushFollow(FOLLOW_expr_bool_in_nested_condition6742);
                    expr_bool1086=expr_bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool1086.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","nested_condition"," ",201);
            if ( state.backtracking>0 ) { memoize(input, 201, nested_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_condition"


    public static class sql_condition_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_condition"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1448:1: sql_condition : condition_or ;
    public final PLSQL3_2_DParser.sql_condition_return sql_condition()  {
        debug(trace_rules) writeln("Entering rule:","sql_condition"," ",202);
        PLSQL3_2_DParser.sql_condition_return retval = new PLSQL3_2_DParser.sql_condition_return();
        retval.start = input.LT(1);

        int sql_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.condition_or_return condition_or1087 =null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1450:2: ( condition_or )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1450:4: condition_or
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_condition_or_in_sql_condition6759);
            condition_or1087=condition_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1087.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_condition"," ",202);
            if ( state.backtracking>0 ) { memoize(input, 202, sql_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_condition"


    public static class condition_paren_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_paren"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1453:1: condition_paren : LPAREN sql_condition RPAREN ;
    public final PLSQL3_2_DParser.condition_paren_return condition_paren()  {
        debug(trace_rules) writeln("Entering rule:","condition_paren"," ",203);
        PLSQL3_2_DParser.condition_paren_return retval = new PLSQL3_2_DParser.condition_paren_return();
        retval.start = input.LT(1);

        int condition_paren_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1088=null;
        Token RPAREN1090=null;
        PLSQL3_2_DParser.sql_condition_return sql_condition1089 =null;


        Object LPAREN1088_tree=null;
        Object RPAREN1090_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1454:2: ( LPAREN sql_condition RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1454:4: LPAREN sql_condition RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN1088=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_paren6770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1088_tree = 
            cast(Object)adaptor.create(LPAREN1088)
            ;
            adaptor.addChild(root_0, LPAREN1088_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_condition_paren6772);
            sql_condition1089=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1089.getTree());

            RPAREN1090=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_paren6774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1090_tree = 
            cast(Object)adaptor.create(RPAREN1090)
            ;
            adaptor.addChild(root_0, RPAREN1090_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_paren"," ",203);
            if ( state.backtracking>0 ) { memoize(input, 203, condition_paren_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_paren"


    public static class condition_or_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_or"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1456:1: condition_or : condition_and ( 'OR' condition_and )* ;
    public final PLSQL3_2_DParser.condition_or_return condition_or()  {
        debug(trace_rules) writeln("Entering rule:","condition_or"," ",204);
        PLSQL3_2_DParser.condition_or_return retval = new PLSQL3_2_DParser.condition_or_return();
        retval.start = input.LT(1);

        int condition_or_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1092=null;
        PLSQL3_2_DParser.condition_and_return condition_and1091 =null;

        PLSQL3_2_DParser.condition_and_return condition_and1093 =null;


        Object string_literal1092_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:2: ( condition_and ( 'OR' condition_and )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:4: condition_and ( 'OR' condition_and )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_condition_and_in_condition_or6784);
            condition_and1091=condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1091.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:18: ( 'OR' condition_and )*
            loop288:
            do {
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==144) ) {
                    int LA288_2 = input.LA(2);

                    if ( (synpred463_PLSQL3_2_D()) ) {
                        alt288=1;
                    }


                }


                switch (alt288) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:20: 'OR' condition_and
            	    {
            	    string_literal1092=cast(Token)match(input,144,FOLLOW_144_in_condition_or6788); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1092_tree = 
            	    cast(Object)adaptor.create(string_literal1092)
            	    ;
            	    adaptor.addChild(root_0, string_literal1092_tree);
            	    }

            	    pushFollow(FOLLOW_condition_and_in_condition_or6790);
            	    condition_and1093=condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1093.getTree());

            	    }
            	    break;

            	default :
            	    break loop288;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_or"," ",204);
            if ( state.backtracking>0 ) { memoize(input, 204, condition_or_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_or"


    public static class condition_and_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_and"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1459:1: condition_and : condition_not ( 'AND' condition_not )* ;
    public final PLSQL3_2_DParser.condition_and_return condition_and()  {
        debug(trace_rules) writeln("Entering rule:","condition_and"," ",205);
        PLSQL3_2_DParser.condition_and_return retval = new PLSQL3_2_DParser.condition_and_return();
        retval.start = input.LT(1);

        int condition_and_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1095=null;
        PLSQL3_2_DParser.condition_not_return condition_not1094 =null;

        PLSQL3_2_DParser.condition_not_return condition_not1096 =null;


        Object string_literal1095_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:2: ( condition_not ( 'AND' condition_not )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:4: condition_not ( 'AND' condition_not )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_condition_not_in_condition_and6803);
            condition_not1094=condition_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1094.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:18: ( 'AND' condition_not )*
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==62) ) {
                    int LA289_2 = input.LA(2);

                    if ( (synpred464_PLSQL3_2_D()) ) {
                        alt289=1;
                    }


                }


                switch (alt289) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:20: 'AND' condition_not
            	    {
            	    string_literal1095=cast(Token)match(input,62,FOLLOW_62_in_condition_and6807); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1095_tree = 
            	    cast(Object)adaptor.create(string_literal1095)
            	    ;
            	    adaptor.addChild(root_0, string_literal1095_tree);
            	    }

            	    pushFollow(FOLLOW_condition_not_in_condition_and6809);
            	    condition_not1096=condition_not();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1096.getTree());

            	    }
            	    break;

            	default :
            	    break loop289;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_and"," ",205);
            if ( state.backtracking>0 ) { memoize(input, 205, condition_and_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_and"


    public static class condition_not_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_not"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1462:1: condition_not : ( 'NOT' condition_expr | condition_expr );
    public final PLSQL3_2_DParser.condition_not_return condition_not()  {
        debug(trace_rules) writeln("Entering rule:","condition_not"," ",206);
        PLSQL3_2_DParser.condition_not_return retval = new PLSQL3_2_DParser.condition_not_return();
        retval.start = input.LT(1);

        int condition_not_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1097=null;
        PLSQL3_2_DParser.condition_expr_return condition_expr1098 =null;

        PLSQL3_2_DParser.condition_expr_return condition_expr1099 =null;


        Object string_literal1097_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1463:2: ( 'NOT' condition_expr | condition_expr )
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==134) ) {
                alt290=1;
            }
            else if ( (LA290_0==DOUBLEQUOTED_STRING||LA290_0==ID||LA290_0==LPAREN||LA290_0==MINUS||LA290_0==NUMBER||LA290_0==PLUS||LA290_0==QUOTED_STRING||LA290_0==63||LA290_0==76||LA290_0==93||(LA290_0 >=100  && LA290_0<=101)||LA290_0==136||LA290_0==151||LA290_0==162||LA290_0==165||LA290_0==169||LA290_0==174) ) {
                alt290=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;

            }
            switch (alt290) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1463:4: 'NOT' condition_expr
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1097=cast(Token)match(input,134,FOLLOW_134_in_condition_not6822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1097_tree = 
                    cast(Object)adaptor.create(string_literal1097)
                    ;
                    adaptor.addChild(root_0, string_literal1097_tree);
                    }

                    pushFollow(FOLLOW_condition_expr_in_condition_not6824);
                    condition_expr1098=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1098.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1464:4: condition_expr
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_expr_in_condition_not6829);
                    condition_expr1099=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1099.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_not"," ",206);
            if ( state.backtracking>0 ) { memoize(input, 206, condition_not_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_not"


    public static class condition_expr_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_expr"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1466:1: condition_expr : ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren );
    public final PLSQL3_2_DParser.condition_expr_return condition_expr()  {
        debug(trace_rules) writeln("Entering rule:","condition_expr"," ",207);
        PLSQL3_2_DParser.condition_expr_return retval = new PLSQL3_2_DParser.condition_expr_return();
        retval.start = input.LT(1);

        int condition_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.condition_exists_return condition_exists1100 =null;

        PLSQL3_2_DParser.condition_is_return condition_is1101 =null;

        PLSQL3_2_DParser.condition_comparison_return condition_comparison1102 =null;

        PLSQL3_2_DParser.condition_group_comparison_return condition_group_comparison1103 =null;

        PLSQL3_2_DParser.condition_in_return condition_in1104 =null;

        PLSQL3_2_DParser.condition_is_a_set_return condition_is_a_set1105 =null;

        PLSQL3_2_DParser.condition_is_any_return condition_is_any1106 =null;

        PLSQL3_2_DParser.condition_is_empty_return condition_is_empty1107 =null;

        PLSQL3_2_DParser.condition_is_of_type_return condition_is_of_type1108 =null;

        PLSQL3_2_DParser.condition_is_present_return condition_is_present1109 =null;

        PLSQL3_2_DParser.condition_like_return condition_like1110 =null;

        PLSQL3_2_DParser.condition_memeber_return condition_memeber1111 =null;

        PLSQL3_2_DParser.condition_between_return condition_between1112 =null;

        PLSQL3_2_DParser.condition_regexp_like_return condition_regexp_like1113 =null;

        PLSQL3_2_DParser.condition_submultiset_return condition_submultiset1114 =null;

        PLSQL3_2_DParser.condition_equals_path_return condition_equals_path1115 =null;

        PLSQL3_2_DParser.condition_under_path_return condition_under_path1116 =null;

        PLSQL3_2_DParser.condition_paren_return condition_paren1117 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1467:2: ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren )
            int alt291=18;
            switch ( input.LA(1) ) {
            case 100:
                {
                alt291=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA291_2 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 2, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA291_3 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else if ( (true) ) {
                    alt291=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 3, input);

                    throw nvae;

                }
                }
                break;
            case 76:
                {
                int LA291_4 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 4, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA291_5 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred471_PLSQL3_2_D()) ) {
                    alt291=6;
                }
                else if ( (synpred472_PLSQL3_2_D()) ) {
                    alt291=7;
                }
                else if ( (synpred473_PLSQL3_2_D()) ) {
                    alt291=8;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred475_PLSQL3_2_D()) ) {
                    alt291=10;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else if ( ((((toUpper(input.LT(1).getText)== "REGEXP_LIKE")&&(toUpper(input.LT(1).getText)== "REGEXP_LIKE"))&&synpred479_PLSQL3_2_D())) ) {
                    alt291=14;
                }
                else if ( (synpred480_PLSQL3_2_D()) ) {
                    alt291=15;
                }
                else if ( (((synpred481_PLSQL3_2_D()&&synpred481_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "EQUALS_PATH"))) ) {
                    alt291=16;
                }
                else if ( (((synpred482_PLSQL3_2_D()&&synpred482_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "UNDER_PATH"))) ) {
                    alt291=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 5, input);

                    throw nvae;

                }
                }
                break;
            case 93:
                {
                int LA291_6 = input.LA(2);

                if ( (((synpred467_PLSQL3_2_D()&&synpred467_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt291=2;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred468_PLSQL3_2_D())) ) {
                    alt291=3;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred469_PLSQL3_2_D())) ) {
                    alt291=4;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred470_PLSQL3_2_D())) ) {
                    alt291=5;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred474_PLSQL3_2_D())) ) {
                    alt291=9;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred476_PLSQL3_2_D())) ) {
                    alt291=11;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred477_PLSQL3_2_D())) ) {
                    alt291=12;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred478_PLSQL3_2_D())) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA291_7 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred471_PLSQL3_2_D()) ) {
                    alt291=6;
                }
                else if ( (synpred472_PLSQL3_2_D()) ) {
                    alt291=7;
                }
                else if ( (synpred473_PLSQL3_2_D()) ) {
                    alt291=8;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred475_PLSQL3_2_D()) ) {
                    alt291=10;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else if ( (synpred480_PLSQL3_2_D()) ) {
                    alt291=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 7, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA291_8 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred471_PLSQL3_2_D()) ) {
                    alt291=6;
                }
                else if ( (synpred472_PLSQL3_2_D()) ) {
                    alt291=7;
                }
                else if ( (synpred473_PLSQL3_2_D()) ) {
                    alt291=8;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred475_PLSQL3_2_D()) ) {
                    alt291=10;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else if ( (synpred480_PLSQL3_2_D()) ) {
                    alt291=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 8, input);

                    throw nvae;

                }
                }
                break;
            case 101:
            case 174:
                {
                int LA291_9 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 9, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA291_10 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 10, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA291_11 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 11, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA291_12 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 12, input);

                    throw nvae;

                }
                }
                break;
            case 136:
                {
                int LA291_13 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 13, input);

                    throw nvae;

                }
                }
                break;
            case 165:
                {
                int LA291_14 = input.LA(2);

                if ( (synpred467_PLSQL3_2_D()) ) {
                    alt291=2;
                }
                else if ( (synpred468_PLSQL3_2_D()) ) {
                    alt291=3;
                }
                else if ( (synpred469_PLSQL3_2_D()) ) {
                    alt291=4;
                }
                else if ( (synpred470_PLSQL3_2_D()) ) {
                    alt291=5;
                }
                else if ( (synpred474_PLSQL3_2_D()) ) {
                    alt291=9;
                }
                else if ( (synpred476_PLSQL3_2_D()) ) {
                    alt291=11;
                }
                else if ( (synpred477_PLSQL3_2_D()) ) {
                    alt291=12;
                }
                else if ( (synpred478_PLSQL3_2_D()) ) {
                    alt291=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 14, input);

                    throw nvae;

                }
                }
                break;
            case 151:
                {
                alt291=3;
                }
                break;
            case 63:
                {
                alt291=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 291, 0, input);

                throw nvae;

            }

            switch (alt291) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1467:4: condition_exists
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_exists_in_condition_expr6839);
                    condition_exists1100=condition_exists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_exists1100.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1468:4: condition_is
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_in_condition_expr6844);
                    condition_is1101=condition_is();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is1101.getTree());

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1469:4: condition_comparison
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_comparison_in_condition_expr6849);
                    condition_comparison1102=condition_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_comparison1102.getTree());

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1470:4: condition_group_comparison
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_group_comparison_in_condition_expr6854);
                    condition_group_comparison1103=condition_group_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_group_comparison1103.getTree());

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1471:4: condition_in
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_in_in_condition_expr6859);
                    condition_in1104=condition_in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_in1104.getTree());

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1472:4: condition_is_a_set
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_a_set_in_condition_expr6864);
                    condition_is_a_set1105=condition_is_a_set();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_a_set1105.getTree());

                    }
                    break;
                case 7 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1473:4: condition_is_any
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_any_in_condition_expr6869);
                    condition_is_any1106=condition_is_any();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_any1106.getTree());

                    }
                    break;
                case 8 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1474:4: condition_is_empty
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_empty_in_condition_expr6874);
                    condition_is_empty1107=condition_is_empty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_empty1107.getTree());

                    }
                    break;
                case 9 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1475:4: condition_is_of_type
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_of_type_in_condition_expr6879);
                    condition_is_of_type1108=condition_is_of_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type1108.getTree());

                    }
                    break;
                case 10 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1476:4: condition_is_present
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_present_in_condition_expr6884);
                    condition_is_present1109=condition_is_present();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_present1109.getTree());

                    }
                    break;
                case 11 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1477:4: condition_like
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_like_in_condition_expr6889);
                    condition_like1110=condition_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_like1110.getTree());

                    }
                    break;
                case 12 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1478:4: condition_memeber
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_memeber_in_condition_expr6894);
                    condition_memeber1111=condition_memeber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_memeber1111.getTree());

                    }
                    break;
                case 13 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1479:4: condition_between
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_between_in_condition_expr6899);
                    condition_between1112=condition_between();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_between1112.getTree());

                    }
                    break;
                case 14 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1480:4: condition_regexp_like
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_regexp_like_in_condition_expr6904);
                    condition_regexp_like1113=condition_regexp_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_regexp_like1113.getTree());

                    }
                    break;
                case 15 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1481:4: condition_submultiset
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_submultiset_in_condition_expr6909);
                    condition_submultiset1114=condition_submultiset();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_submultiset1114.getTree());

                    }
                    break;
                case 16 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1482:4: condition_equals_path
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_equals_path_in_condition_expr6914);
                    condition_equals_path1115=condition_equals_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_equals_path1115.getTree());

                    }
                    break;
                case 17 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1483:4: condition_under_path
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_under_path_in_condition_expr6919);
                    condition_under_path1116=condition_under_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_under_path1116.getTree());

                    }
                    break;
                case 18 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1484:4: condition_paren
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_paren_in_condition_expr6924);
                    condition_paren1117=condition_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_paren1117.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_expr"," ",207);
            if ( state.backtracking>0 ) { memoize(input, 207, condition_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_expr"


    public static class condition_exists_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_exists"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1486:1: condition_exists : 'EXISTS' LPAREN select_command RPAREN ;
    public final PLSQL3_2_DParser.condition_exists_return condition_exists()  {
        debug(trace_rules) writeln("Entering rule:","condition_exists"," ",208);
        PLSQL3_2_DParser.condition_exists_return retval = new PLSQL3_2_DParser.condition_exists_return();
        retval.start = input.LT(1);

        int condition_exists_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1118=null;
        Token LPAREN1119=null;
        Token RPAREN1121=null;
        PLSQL3_2_DParser.select_command_return select_command1120 =null;


        Object string_literal1118_tree=null;
        Object LPAREN1119_tree=null;
        Object RPAREN1121_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1487:2: ( 'EXISTS' LPAREN select_command RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1487:4: 'EXISTS' LPAREN select_command RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1118=cast(Token)match(input,100,FOLLOW_100_in_condition_exists6934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1118_tree = 
            cast(Object)adaptor.create(string_literal1118)
            ;
            adaptor.addChild(root_0, string_literal1118_tree);
            }

            LPAREN1119=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_exists6936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1119_tree = 
            cast(Object)adaptor.create(LPAREN1119)
            ;
            adaptor.addChild(root_0, LPAREN1119_tree);
            }

            pushFollow(FOLLOW_select_command_in_condition_exists6938);
            select_command1120=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1120.getTree());

            RPAREN1121=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_exists6940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1121_tree = 
            cast(Object)adaptor.create(RPAREN1121)
            ;
            adaptor.addChild(root_0, RPAREN1121_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_exists"," ",208);
            if ( state.backtracking>0 ) { memoize(input, 208, condition_exists_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_exists"


    public static class condition_is_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1489:1: condition_is : sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) ;
    public final PLSQL3_2_DParser.condition_is_return condition_is()  {
        debug(trace_rules) writeln("Entering rule:","condition_is"," ",209);
        PLSQL3_2_DParser.condition_is_return retval = new PLSQL3_2_DParser.condition_is_return();
        retval.start = input.LT(1);

        int condition_is_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1123=null;
        Token string_literal1124=null;
        Token string_literal1127=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1122 =null;

        PLSQL3_2_DParser.keyNAN_return keyNAN1125 =null;

        PLSQL3_2_DParser.keyINFINITE_return keyINFINITE1126 =null;


        Object string_literal1123_tree=null;
        Object string_literal1124_tree=null;
        Object string_literal1127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:2: ( sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:4: sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' )
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_is6950);
            sql_expression1122=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1122.getTree());

            string_literal1123=cast(Token)match(input,120,FOLLOW_120_in_condition_is6952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1123_tree = 
            cast(Object)adaptor.create(string_literal1123)
            ;
            adaptor.addChild(root_0, string_literal1123_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:24: ( 'NOT' )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==134) ) {
                alt292=1;
            }
            switch (alt292) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:26: 'NOT'
                   {
                   string_literal1124=cast(Token)match(input,134,FOLLOW_134_in_condition_is6956); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1124_tree = 
                   cast(Object)adaptor.create(string_literal1124)
                   ;
                   adaptor.addChild(root_0, string_literal1124_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:35: ( keyNAN | keyINFINITE | 'NULL' )
            int alt293=3;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==ID) ) {
                int LA293_1 = input.LA(2);

                if ( (((synpred484_PLSQL3_2_D()&&synpred484_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "NAN"))) ) {
                    alt293=1;
                }
                else if ( (((synpred485_PLSQL3_2_D()&&synpred485_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "INFINITE"))) ) {
                    alt293=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 293, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA293_0==136) ) {
                alt293=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;

            }
            switch (alt293) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:37: keyNAN
                   {
                   pushFollow(FOLLOW_keyNAN_in_condition_is6963);
                   keyNAN1125=keyNAN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAN1125.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:46: keyINFINITE
                   {
                   pushFollow(FOLLOW_keyINFINITE_in_condition_is6967);
                   keyINFINITE1126=keyINFINITE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINFINITE1126.getTree());

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:60: 'NULL'
                   {
                   string_literal1127=cast(Token)match(input,136,FOLLOW_136_in_condition_is6971); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1127_tree = 
                   cast(Object)adaptor.create(string_literal1127)
                   ;
                   adaptor.addChild(root_0, string_literal1127_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is"," ",209);
            if ( state.backtracking>0 ) { memoize(input, 209, condition_is_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is"


    public static class condition_comparison_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_comparison"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1492:1: condition_comparison : ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? );
    public final PLSQL3_2_DParser.condition_comparison_return condition_comparison()  {
        debug(trace_rules) writeln("Entering rule:","condition_comparison"," ",210);
        PLSQL3_2_DParser.condition_comparison_return retval = new PLSQL3_2_DParser.condition_comparison_return();
        retval.start = input.LT(1);

        int condition_comparison_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1128=null;
        Token RPAREN1130=null;
        Token set1132=null;
        Token LPAREN1133=null;
        Token RPAREN1135=null;
        Token string_literal1137=null;
        Token set1140=null;
        Token string_literal1141=null;
        Token LPAREN1143=null;
        Token RPAREN1145=null;
        PLSQL3_2_DParser.sql_expressions_return sql_expressions1129 =null;

        PLSQL3_2_DParser.outer_join_sign_return outer_join_sign1131 =null;

        PLSQL3_2_DParser.select_command_return select_command1134 =null;

        PLSQL3_2_DParser.outer_join_sign_return outer_join_sign1136 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1138 =null;

        PLSQL3_2_DParser.outer_join_sign_return outer_join_sign1139 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1142 =null;

        PLSQL3_2_DParser.select_command_return select_command1144 =null;

        PLSQL3_2_DParser.outer_join_sign_return outer_join_sign1146 =null;


        Object LPAREN1128_tree=null;
        Object RPAREN1130_tree=null;
        Object set1132_tree=null;
        Object LPAREN1133_tree=null;
        Object RPAREN1135_tree=null;
        Object string_literal1137_tree=null;
        Object set1140_tree=null;
        Object string_literal1141_tree=null;
        Object LPAREN1143_tree=null;
        Object RPAREN1145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:2: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? )
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==LPAREN) ) {
                int LA301_1 = input.LA(2);

                if ( (synpred489_PLSQL3_2_D()) ) {
                    alt301=1;
                }
                else if ( (true) ) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA301_0==DOUBLEQUOTED_STRING||LA301_0==ID||LA301_0==MINUS||LA301_0==NUMBER||LA301_0==PLUS||LA301_0==QUOTED_STRING||LA301_0==76||LA301_0==93||LA301_0==101||LA301_0==136||LA301_0==151||LA301_0==162||LA301_0==165||LA301_0==169||LA301_0==174) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;

            }
            switch (alt301) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:4: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    LPAREN1128=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison6983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1128_tree = 
                    cast(Object)adaptor.create(LPAREN1128)
                    ;
                    adaptor.addChild(root_0, LPAREN1128_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_comparison6985);
                    sql_expressions1129=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1129.getTree());

                    RPAREN1130=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison6987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1130_tree = 
                    cast(Object)adaptor.create(RPAREN1130)
                    ;
                    adaptor.addChild(root_0, RPAREN1130_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:34: ( outer_join_sign )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==LPAREN) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:36: outer_join_sign
                           {
                           pushFollow(FOLLOW_outer_join_sign_in_condition_comparison6991);
                           outer_join_sign1131=outer_join_sign();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1131.getTree());

                           }
                           break;

                        default:
                    }


                    set1132=cast(Token)input.LT(1);

                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set1132)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    LPAREN1133=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison7006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1133_tree = 
                    cast(Object)adaptor.create(LPAREN1133)
                    ;
                    adaptor.addChild(root_0, LPAREN1133_tree);
                    }

                    pushFollow(FOLLOW_select_command_in_condition_comparison7008);
                    select_command1134=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1134.getTree());

                    RPAREN1135=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison7010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1135_tree = 
                    cast(Object)adaptor.create(RPAREN1135)
                    ;
                    adaptor.addChild(root_0, RPAREN1135_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:100: ( outer_join_sign )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==LPAREN) ) {
                        int LA295_1 = input.LA(2);

                        if ( (LA295_1==PLUS) ) {
                            int LA295_3 = input.LA(3);

                            if ( (LA295_3==RPAREN) ) {
                                int LA295_4 = input.LA(4);

                                if ( (synpred488_PLSQL3_2_D()) ) {
                                    alt295=1;
                                }
                            }
                        }
                    }
                    switch (alt295) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:102: outer_join_sign
                           {
                           pushFollow(FOLLOW_outer_join_sign_in_condition_comparison7014);
                           outer_join_sign1136=outer_join_sign();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1136.getTree());

                           }
                           break;

                        default:
                    }


                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:4: ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )?
                    {
                    root_0 = cast(Object)adaptor.nil();


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:4: ( 'PRIOR' )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==151) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:6: 'PRIOR'
                           {
                           string_literal1137=cast(Token)match(input,151,FOLLOW_151_in_condition_comparison7024); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1137_tree = 
                           cast(Object)adaptor.create(string_literal1137)
                           ;
                           adaptor.addChild(root_0, string_literal1137_tree);
                           }

                           }
                           break;

                        default:
                    }


                    pushFollow(FOLLOW_sql_expression_in_condition_comparison7029);
                    sql_expression1138=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1138.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:32: ( outer_join_sign )?
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==LPAREN) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:34: outer_join_sign
                           {
                           pushFollow(FOLLOW_outer_join_sign_in_condition_comparison7033);
                           outer_join_sign1139=outer_join_sign();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1139.getTree());

                           }
                           break;

                        default:
                    }


                    set1140=cast(Token)input.LT(1);

                    if ( input.LA(1)==EQ||(input.LA(1) >=20 && input.LA(1)<=21)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set1140)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:93: ( 'PRIOR' )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==151) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:95: 'PRIOR'
                           {
                           string_literal1141=cast(Token)match(input,151,FOLLOW_151_in_condition_comparison7066); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1141_tree = 
                           cast(Object)adaptor.create(string_literal1141)
                           ;
                           adaptor.addChild(root_0, string_literal1141_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:106: ( sql_expression | LPAREN select_command RPAREN )
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==DOUBLEQUOTED_STRING||LA299_0==ID||LA299_0==MINUS||LA299_0==NUMBER||LA299_0==PLUS||LA299_0==QUOTED_STRING||LA299_0==76||LA299_0==93||LA299_0==101||LA299_0==136||LA299_0==162||LA299_0==165||LA299_0==169||LA299_0==174) ) {
                        alt299=1;
                    }
                    else if ( (LA299_0==LPAREN) ) {
                        int LA299_2 = input.LA(2);

                        if ( (synpred498_PLSQL3_2_D()) ) {
                            alt299=1;
                        }
                        else if ( (true) ) {
                            alt299=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 299, 2, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 299, 0, input);

                        throw nvae;

                    }
                    switch (alt299) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:108: sql_expression
                           {
                           pushFollow(FOLLOW_sql_expression_in_condition_comparison7073);
                           sql_expression1142=sql_expression();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1142.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:125: LPAREN select_command RPAREN
                           {
                           LPAREN1143=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison7077); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           LPAREN1143_tree = 
                           cast(Object)adaptor.create(LPAREN1143)
                           ;
                           adaptor.addChild(root_0, LPAREN1143_tree);
                           }

                           pushFollow(FOLLOW_select_command_in_condition_comparison7079);
                           select_command1144=select_command();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1144.getTree());

                           RPAREN1145=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison7081); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           RPAREN1145_tree = 
                           cast(Object)adaptor.create(RPAREN1145)
                           ;
                           adaptor.addChild(root_0, RPAREN1145_tree);
                           }

                           }
                           break;

                        default:
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:156: ( outer_join_sign )?
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==LPAREN) ) {
                        int LA300_1 = input.LA(2);

                        if ( (synpred499_PLSQL3_2_D()) ) {
                            alt300=1;
                        }
                    }
                    switch (alt300) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:158: outer_join_sign
                           {
                           pushFollow(FOLLOW_outer_join_sign_in_condition_comparison7087);
                           outer_join_sign1146=outer_join_sign();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1146.getTree());

                           }
                           break;

                        default:
                    }


                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_comparison"," ",210);
            if ( state.backtracking>0 ) { memoize(input, 210, condition_comparison_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_comparison"


    public static class condition_group_comparison_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_group_comparison"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1496:1: condition_group_comparison : ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN );
    public final PLSQL3_2_DParser.condition_group_comparison_return condition_group_comparison()  {
        debug(trace_rules) writeln("Entering rule:","condition_group_comparison"," ",211);
        PLSQL3_2_DParser.condition_group_comparison_return retval = new PLSQL3_2_DParser.condition_group_comparison_return();
        retval.start = input.LT(1);

        int condition_group_comparison_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1147=null;
        Token RPAREN1149=null;
        Token set1150=null;
        Token string_literal1151=null;
        Token string_literal1153=null;
        Token LPAREN1154=null;
        Token RPAREN1157=null;
        Token set1159=null;
        Token string_literal1160=null;
        Token string_literal1162=null;
        Token LPAREN1163=null;
        Token RPAREN1166=null;
        PLSQL3_2_DParser.sql_expressions_return sql_expressions1148 =null;

        PLSQL3_2_DParser.keySOME_return keySOME1152 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list1155 =null;

        PLSQL3_2_DParser.select_command_return select_command1156 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1158 =null;

        PLSQL3_2_DParser.keySOME_return keySOME1161 =null;

        PLSQL3_2_DParser.sql_expressions_return sql_expressions1164 =null;

        PLSQL3_2_DParser.select_command_return select_command1165 =null;


        Object LPAREN1147_tree=null;
        Object RPAREN1149_tree=null;
        Object set1150_tree=null;
        Object string_literal1151_tree=null;
        Object string_literal1153_tree=null;
        Object LPAREN1154_tree=null;
        Object RPAREN1157_tree=null;
        Object set1159_tree=null;
        Object string_literal1160_tree=null;
        Object string_literal1162_tree=null;
        Object LPAREN1163_tree=null;
        Object RPAREN1166_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:2: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN )
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==LPAREN) ) {
                int LA306_1 = input.LA(2);

                if ( (synpred504_PLSQL3_2_D()) ) {
                    alt306=1;
                }
                else if ( (true) ) {
                    alt306=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA306_0==DOUBLEQUOTED_STRING||LA306_0==ID||LA306_0==MINUS||LA306_0==NUMBER||LA306_0==PLUS||LA306_0==QUOTED_STRING||LA306_0==76||LA306_0==93||LA306_0==101||LA306_0==136||LA306_0==162||LA306_0==165||LA306_0==169||LA306_0==174) ) {
                alt306=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                throw nvae;

            }
            switch (alt306) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:4: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = cast(Object)adaptor.nil();


                    LPAREN1147=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison7100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1147_tree = 
                    cast(Object)adaptor.create(LPAREN1147)
                    ;
                    adaptor.addChild(root_0, LPAREN1147_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison7102);
                    sql_expressions1148=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1148.getTree());

                    RPAREN1149=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison7104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1149_tree = 
                    cast(Object)adaptor.create(RPAREN1149)
                    ;
                    adaptor.addChild(root_0, RPAREN1149_tree);
                    }

                    set1150=cast(Token)input.LT(1);

                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set1150)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:50: ( 'ANY' | keySOME | 'ALL' )
                    int alt302=3;
                    switch ( input.LA(1) ) {
                    case 63:
                        {
                        alt302=1;
                        }
                        break;
                    case ID:
                        {
                        alt302=2;
                        }
                        break;
                    case 61:
                        {
                        alt302=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 302, 0, input);

                        throw nvae;

                    }

                    switch (alt302) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:52: 'ANY'
                           {
                           string_literal1151=cast(Token)match(input,63,FOLLOW_63_in_condition_group_comparison7118); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1151_tree = 
                           cast(Object)adaptor.create(string_literal1151)
                           ;
                           adaptor.addChild(root_0, string_literal1151_tree);
                           }

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:60: keySOME
                           {
                           pushFollow(FOLLOW_keySOME_in_condition_group_comparison7122);
                           keySOME1152=keySOME();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1152.getTree());

                           }
                           break;
                       case 3 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:70: 'ALL'
                           {
                           string_literal1153=cast(Token)match(input,61,FOLLOW_61_in_condition_group_comparison7126); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1153_tree = 
                           cast(Object)adaptor.create(string_literal1153)
                           ;
                           adaptor.addChild(root_0, string_literal1153_tree);
                           }

                           }
                           break;

                        default:
                    }


                    LPAREN1154=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison7130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1154_tree = 
                    cast(Object)adaptor.create(LPAREN1154)
                    ;
                    adaptor.addChild(root_0, LPAREN1154_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:85: ( grouping_expression_list | select_command )
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==DOUBLEQUOTED_STRING||LA303_0==ID||LA303_0==LPAREN||LA303_0==MINUS||LA303_0==NUMBER||LA303_0==PLUS||LA303_0==QUOTED_STRING||LA303_0==76||LA303_0==93||LA303_0==101||LA303_0==136||LA303_0==162||LA303_0==169||LA303_0==174) ) {
                        alt303=1;
                    }
                    else if ( (LA303_0==165) ) {
                        int LA303_13 = input.LA(2);

                        if ( (synpred503_PLSQL3_2_D()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 303, 0, input);

                        throw nvae;

                    }
                    switch (alt303) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:87: grouping_expression_list
                           {
                           pushFollow(FOLLOW_grouping_expression_list_in_condition_group_comparison7134);
                           grouping_expression_list1155=grouping_expression_list();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1155.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:114: select_command
                           {
                           pushFollow(FOLLOW_select_command_in_condition_group_comparison7138);
                           select_command1156=select_command();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1156.getTree());

                           }
                           break;

                        default:
                    }


                    RPAREN1157=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison7142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1157_tree = 
                    cast(Object)adaptor.create(RPAREN1157)
                    ;
                    adaptor.addChild(root_0, RPAREN1157_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:4: sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_condition_group_comparison7147);
                    sql_expression1158=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1158.getTree());

                    set1159=cast(Token)input.LT(1);

                    if ( input.LA(1)==EQ||(input.LA(1) >=20 && input.LA(1)<=21)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        cast(Object)adaptor.create(set1159)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:59: ( 'ANY' | keySOME | 'ALL' )
                    int alt304=3;
                    switch ( input.LA(1) ) {
                    case 63:
                        {
                        alt304=1;
                        }
                        break;
                    case ID:
                        {
                        alt304=2;
                        }
                        break;
                    case 61:
                        {
                        alt304=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae = 
                            new NoViableAltException("", 304, 0, input);

                        throw nvae;

                    }

                    switch (alt304) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:61: 'ANY'
                           {
                           string_literal1160=cast(Token)match(input,63,FOLLOW_63_in_condition_group_comparison7177); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1160_tree = 
                           cast(Object)adaptor.create(string_literal1160)
                           ;
                           adaptor.addChild(root_0, string_literal1160_tree);
                           }

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:69: keySOME
                           {
                           pushFollow(FOLLOW_keySOME_in_condition_group_comparison7181);
                           keySOME1161=keySOME();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1161.getTree());

                           }
                           break;
                       case 3 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:79: 'ALL'
                           {
                           string_literal1162=cast(Token)match(input,61,FOLLOW_61_in_condition_group_comparison7185); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1162_tree = 
                           cast(Object)adaptor.create(string_literal1162)
                           ;
                           adaptor.addChild(root_0, string_literal1162_tree);
                           }

                           }
                           break;

                        default:
                    }


                    LPAREN1163=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison7189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1163_tree = 
                    cast(Object)adaptor.create(LPAREN1163)
                    ;
                    adaptor.addChild(root_0, LPAREN1163_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:94: ( sql_expressions | select_command )
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==DOUBLEQUOTED_STRING||LA305_0==ID||LA305_0==LPAREN||LA305_0==MINUS||LA305_0==NUMBER||LA305_0==PLUS||LA305_0==QUOTED_STRING||LA305_0==76||LA305_0==93||LA305_0==101||LA305_0==136||LA305_0==162||LA305_0==169||LA305_0==174) ) {
                        alt305=1;
                    }
                    else if ( (LA305_0==165) ) {
                        int LA305_13 = input.LA(2);

                        if ( (synpred512_PLSQL3_2_D()) ) {
                            alt305=1;
                        }
                        else if ( (true) ) {
                            alt305=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 305, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 305, 0, input);

                        throw nvae;

                    }
                    switch (alt305) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:96: sql_expressions
                           {
                           pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison7193);
                           sql_expressions1164=sql_expressions();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1164.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:114: select_command
                           {
                           pushFollow(FOLLOW_select_command_in_condition_group_comparison7197);
                           select_command1165=select_command();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1165.getTree());

                           }
                           break;

                        default:
                    }


                    RPAREN1166=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison7201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1166_tree = 
                    cast(Object)adaptor.create(RPAREN1166)
                    ;
                    adaptor.addChild(root_0, RPAREN1166_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_group_comparison"," ",211);
            if ( state.backtracking>0 ) { memoize(input, 211, condition_group_comparison_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_group_comparison"


    public static class condition_in_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_in"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1500:1: condition_in : ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN );
    public final PLSQL3_2_DParser.condition_in_return condition_in()  {
        debug(trace_rules) writeln("Entering rule:","condition_in"," ",212);
        PLSQL3_2_DParser.condition_in_return retval = new PLSQL3_2_DParser.condition_in_return();
        retval.start = input.LT(1);

        int condition_in_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1167=null;
        Token RPAREN1169=null;
        Token string_literal1170=null;
        Token string_literal1171=null;
        Token LPAREN1172=null;
        Token RPAREN1175=null;
        Token string_literal1177=null;
        Token string_literal1178=null;
        Token LPAREN1179=null;
        Token RPAREN1182=null;
        PLSQL3_2_DParser.sql_expressions_return sql_expressions1168 =null;

        PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list1173 =null;

        PLSQL3_2_DParser.select_command_return select_command1174 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1176 =null;

        PLSQL3_2_DParser.expression_list_return expression_list1180 =null;

        PLSQL3_2_DParser.select_command_return select_command1181 =null;


        Object LPAREN1167_tree=null;
        Object RPAREN1169_tree=null;
        Object string_literal1170_tree=null;
        Object string_literal1171_tree=null;
        Object LPAREN1172_tree=null;
        Object RPAREN1175_tree=null;
        Object string_literal1177_tree=null;
        Object string_literal1178_tree=null;
        Object LPAREN1179_tree=null;
        Object RPAREN1182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:2: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN )
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==LPAREN) ) {
                int LA311_1 = input.LA(2);

                if ( (synpred515_PLSQL3_2_D()) ) {
                    alt311=1;
                }
                else if ( (true) ) {
                    alt311=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA311_0==DOUBLEQUOTED_STRING||LA311_0==ID||LA311_0==MINUS||LA311_0==NUMBER||LA311_0==PLUS||LA311_0==QUOTED_STRING||LA311_0==76||LA311_0==93||LA311_0==101||LA311_0==136||LA311_0==162||LA311_0==165||LA311_0==169||LA311_0==174) ) {
                alt311=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);

                throw nvae;

            }
            switch (alt311) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:4: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = cast(Object)adaptor.nil();


                    LPAREN1167=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in7211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1167_tree = 
                    cast(Object)adaptor.create(LPAREN1167)
                    ;
                    adaptor.addChild(root_0, LPAREN1167_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_in7213);
                    sql_expressions1168=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1168.getTree());

                    RPAREN1169=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in7215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1169_tree = 
                    cast(Object)adaptor.create(RPAREN1169)
                    ;
                    adaptor.addChild(root_0, RPAREN1169_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:34: ( 'NOT' )?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==134) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:36: 'NOT'
                           {
                           string_literal1170=cast(Token)match(input,134,FOLLOW_134_in_condition_in7219); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1170_tree = 
                           cast(Object)adaptor.create(string_literal1170)
                           ;
                           adaptor.addChild(root_0, string_literal1170_tree);
                           }

                           }
                           break;

                        default:
                    }


                    string_literal1171=cast(Token)match(input,113,FOLLOW_113_in_condition_in7224); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1171_tree = 
                    cast(Object)adaptor.create(string_literal1171)
                    ;
                    adaptor.addChild(root_0, string_literal1171_tree);
                    }

                    LPAREN1172=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in7226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1172_tree = 
                    cast(Object)adaptor.create(LPAREN1172)
                    ;
                    adaptor.addChild(root_0, LPAREN1172_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:57: ( grouping_expression_list | select_command )
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==DOUBLEQUOTED_STRING||LA308_0==ID||LA308_0==LPAREN||LA308_0==MINUS||LA308_0==NUMBER||LA308_0==PLUS||LA308_0==QUOTED_STRING||LA308_0==76||LA308_0==93||LA308_0==101||LA308_0==136||LA308_0==162||LA308_0==169||LA308_0==174) ) {
                        alt308=1;
                    }
                    else if ( (LA308_0==165) ) {
                        int LA308_13 = input.LA(2);

                        if ( (synpred514_PLSQL3_2_D()) ) {
                            alt308=1;
                        }
                        else if ( (true) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 0, input);

                        throw nvae;

                    }
                    switch (alt308) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:59: grouping_expression_list
                           {
                           pushFollow(FOLLOW_grouping_expression_list_in_condition_in7230);
                           grouping_expression_list1173=grouping_expression_list();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1173.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:86: select_command
                           {
                           pushFollow(FOLLOW_select_command_in_condition_in7234);
                           select_command1174=select_command();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1174.getTree());

                           }
                           break;

                        default:
                    }


                    RPAREN1175=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in7238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1175_tree = 
                    cast(Object)adaptor.create(RPAREN1175)
                    ;
                    adaptor.addChild(root_0, RPAREN1175_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:4: sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_condition_in7243);
                    sql_expression1176=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1176.getTree());

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:19: ( 'NOT' )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==134) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:21: 'NOT'
                           {
                           string_literal1177=cast(Token)match(input,134,FOLLOW_134_in_condition_in7247); if (state.failed) return retval;
                           if ( state.backtracking==0 ) {
                           string_literal1177_tree = 
                           cast(Object)adaptor.create(string_literal1177)
                           ;
                           adaptor.addChild(root_0, string_literal1177_tree);
                           }

                           }
                           break;

                        default:
                    }


                    string_literal1178=cast(Token)match(input,113,FOLLOW_113_in_condition_in7252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1178_tree = 
                    cast(Object)adaptor.create(string_literal1178)
                    ;
                    adaptor.addChild(root_0, string_literal1178_tree);
                    }

                    LPAREN1179=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in7254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1179_tree = 
                    cast(Object)adaptor.create(LPAREN1179)
                    ;
                    adaptor.addChild(root_0, LPAREN1179_tree);
                    }

                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:42: ( expression_list | select_command )
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==DOUBLEQUOTED_STRING||LA310_0==ID||LA310_0==LPAREN||LA310_0==MINUS||LA310_0==NUMBER||LA310_0==PLUS||LA310_0==QUOTED_STRING||LA310_0==76||LA310_0==93||LA310_0==101||LA310_0==136||LA310_0==162||LA310_0==169||LA310_0==174) ) {
                        alt310=1;
                    }
                    else if ( (LA310_0==165) ) {
                        int LA310_13 = input.LA(2);

                        if ( (synpred517_PLSQL3_2_D()) ) {
                            alt310=1;
                        }
                        else if ( (true) ) {
                            alt310=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 310, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 310, 0, input);

                        throw nvae;

                    }
                    switch (alt310) {
                       case 1 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:44: expression_list
                           {
                           pushFollow(FOLLOW_expression_list_in_condition_in7258);
                           expression_list1180=expression_list();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1180.getTree());

                           }
                           break;
                       case 2 :
                           // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:62: select_command
                           {
                           pushFollow(FOLLOW_select_command_in_condition_in7262);
                           select_command1181=select_command();

                           state._fsp--;
                           if (state.failed) return retval;
                           if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1181.getTree());

                           }
                           break;

                        default:
                    }


                    RPAREN1182=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in7266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1182_tree = 
                    cast(Object)adaptor.create(RPAREN1182)
                    ;
                    adaptor.addChild(root_0, RPAREN1182_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_in"," ",212);
            if ( state.backtracking>0 ) { memoize(input, 212, condition_in_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_in"


    public static class condition_is_a_set_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_a_set"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1504:1: condition_is_a_set : nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' ;
    public final PLSQL3_2_DParser.condition_is_a_set_return condition_is_a_set()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_a_set"," ",213);
        PLSQL3_2_DParser.condition_is_a_set_return retval = new PLSQL3_2_DParser.condition_is_a_set_return();
        retval.start = input.LT(1);

        int condition_is_a_set_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1184=null;
        Token string_literal1185=null;
        Token string_literal1187=null;
        PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name1183 =null;

        PLSQL3_2_DParser.keyA_return keyA1186 =null;


        Object string_literal1184_tree=null;
        Object string_literal1185_tree=null;
        Object string_literal1187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1505:2: ( nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1505:4: nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET'
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_a_set7276);
            nested_table_column_name1183=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1183.getTree());

            string_literal1184=cast(Token)match(input,120,FOLLOW_120_in_condition_is_a_set7278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1184_tree = 
            cast(Object)adaptor.create(string_literal1184)
            ;
            adaptor.addChild(root_0, string_literal1184_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1505:34: ( 'NOT' )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==134) ) {
                alt312=1;
            }
            switch (alt312) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1505:36: 'NOT'
                   {
                   string_literal1185=cast(Token)match(input,134,FOLLOW_134_in_condition_is_a_set7282); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1185_tree = 
                   cast(Object)adaptor.create(string_literal1185)
                   ;
                   adaptor.addChild(root_0, string_literal1185_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyA_in_condition_is_a_set7287);
            keyA1186=keyA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyA1186.getTree());

            string_literal1187=cast(Token)match(input,166,FOLLOW_166_in_condition_is_a_set7289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1187_tree = 
            cast(Object)adaptor.create(string_literal1187)
            ;
            adaptor.addChild(root_0, string_literal1187_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_a_set"," ",213);
            if ( state.backtracking>0 ) { memoize(input, 213, condition_is_a_set_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_a_set"


    public static class condition_is_any_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_any"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1507:1: condition_is_any : ( column_name 'IS' )? 'ANY' ;
    public final PLSQL3_2_DParser.condition_is_any_return condition_is_any()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_any"," ",214);
        PLSQL3_2_DParser.condition_is_any_return retval = new PLSQL3_2_DParser.condition_is_any_return();
        retval.start = input.LT(1);

        int condition_is_any_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1189=null;
        Token string_literal1190=null;
        PLSQL3_2_DParser.column_name_return column_name1188 =null;


        Object string_literal1189_tree=null;
        Object string_literal1190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1508:2: ( ( column_name 'IS' )? 'ANY' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1508:4: ( column_name 'IS' )? 'ANY'
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1508:4: ( column_name 'IS' )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==DOUBLEQUOTED_STRING||LA313_0==ID||LA313_0==162) ) {
                alt313=1;
            }
            switch (alt313) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1508:6: column_name 'IS'
                   {
                   pushFollow(FOLLOW_column_name_in_condition_is_any7301);
                   column_name1188=column_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1188.getTree());

                   string_literal1189=cast(Token)match(input,120,FOLLOW_120_in_condition_is_any7303); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1189_tree = 
                   cast(Object)adaptor.create(string_literal1189)
                   ;
                   adaptor.addChild(root_0, string_literal1189_tree);
                   }

                   }
                   break;

                default:
            }


            string_literal1190=cast(Token)match(input,63,FOLLOW_63_in_condition_is_any7308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1190_tree = 
            cast(Object)adaptor.create(string_literal1190)
            ;
            adaptor.addChild(root_0, string_literal1190_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_any"," ",214);
            if ( state.backtracking>0 ) { memoize(input, 214, condition_is_any_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_any"


    public static class condition_is_empty_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_empty"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1510:1: condition_is_empty : nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY ;
    public final PLSQL3_2_DParser.condition_is_empty_return condition_is_empty()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_empty"," ",215);
        PLSQL3_2_DParser.condition_is_empty_return retval = new PLSQL3_2_DParser.condition_is_empty_return();
        retval.start = input.LT(1);

        int condition_is_empty_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1192=null;
        Token string_literal1193=null;
        PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name1191 =null;

        PLSQL3_2_DParser.keyEMPTY_return keyEMPTY1194 =null;


        Object string_literal1192_tree=null;
        Object string_literal1193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1511:2: ( nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1511:4: nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_empty7318);
            nested_table_column_name1191=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1191.getTree());

            string_literal1192=cast(Token)match(input,120,FOLLOW_120_in_condition_is_empty7320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1192_tree = 
            cast(Object)adaptor.create(string_literal1192)
            ;
            adaptor.addChild(root_0, string_literal1192_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1511:34: ( 'NOT' )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==134) ) {
                alt314=1;
            }
            switch (alt314) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1511:36: 'NOT'
                   {
                   string_literal1193=cast(Token)match(input,134,FOLLOW_134_in_condition_is_empty7324); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1193_tree = 
                   cast(Object)adaptor.create(string_literal1193)
                   ;
                   adaptor.addChild(root_0, string_literal1193_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyEMPTY_in_condition_is_empty7329);
            keyEMPTY1194=keyEMPTY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEMPTY1194.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_empty"," ",215);
            if ( state.backtracking>0 ) { memoize(input, 215, condition_is_empty_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_empty"


    public static class condition_is_of_type_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1513:1: condition_is_of_type : sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN ;
    public final PLSQL3_2_DParser.condition_is_of_type_return condition_is_of_type()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_of_type"," ",216);
        PLSQL3_2_DParser.condition_is_of_type_return retval = new PLSQL3_2_DParser.condition_is_of_type_return();
        retval.start = input.LT(1);

        int condition_is_of_type_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1196=null;
        Token string_literal1197=null;
        Token string_literal1198=null;
        Token LPAREN1200=null;
        Token RPAREN1202=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1195 =null;

        PLSQL3_2_DParser.keyTYPE_return keyTYPE1199 =null;

        PLSQL3_2_DParser.type_name_return type_name1201 =null;


        Object string_literal1196_tree=null;
        Object string_literal1197_tree=null;
        Object string_literal1198_tree=null;
        Object LPAREN1200_tree=null;
        Object RPAREN1202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:2: ( sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:4: sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_is_of_type7339);
            sql_expression1195=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1195.getTree());

            string_literal1196=cast(Token)match(input,120,FOLLOW_120_in_condition_is_of_type7341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1196_tree = 
            cast(Object)adaptor.create(string_literal1196)
            ;
            adaptor.addChild(root_0, string_literal1196_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:24: ( 'NOT' )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==134) ) {
                alt315=1;
            }
            switch (alt315) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:26: 'NOT'
                   {
                   string_literal1197=cast(Token)match(input,134,FOLLOW_134_in_condition_is_of_type7345); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1197_tree = 
                   cast(Object)adaptor.create(string_literal1197)
                   ;
                   adaptor.addChild(root_0, string_literal1197_tree);
                   }

                   }
                   break;

                default:
            }


            string_literal1198=cast(Token)match(input,142,FOLLOW_142_in_condition_is_of_type7350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1198_tree = 
            cast(Object)adaptor.create(string_literal1198)
            ;
            adaptor.addChild(root_0, string_literal1198_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:40: ( keyTYPE )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==ID) ) {
                alt316=1;
            }
            switch (alt316) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1514:42: keyTYPE
                   {
                   pushFollow(FOLLOW_keyTYPE_in_condition_is_of_type7354);
                   keyTYPE1199=keyTYPE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE1199.getTree());

                   }
                   break;

                default:
            }


            LPAREN1200=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_is_of_type7359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1200_tree = 
            cast(Object)adaptor.create(LPAREN1200)
            ;
            adaptor.addChild(root_0, LPAREN1200_tree);
            }

            pushFollow(FOLLOW_type_name_in_condition_is_of_type7361);
            type_name1201=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1201.getTree());

            RPAREN1202=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_is_of_type7363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1202_tree = 
            cast(Object)adaptor.create(RPAREN1202)
            ;
            adaptor.addChild(root_0, RPAREN1202_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_of_type"," ",216);
            if ( state.backtracking>0 ) { memoize(input, 216, condition_is_of_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type"


    public static class condition_is_of_type_names_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type_names"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1516:1: condition_is_of_type_names : condition_is_of_type_name ( COMMA condition_is_of_type_name )* ;
    public final PLSQL3_2_DParser.condition_is_of_type_names_return condition_is_of_type_names()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_of_type_names"," ",217);
        PLSQL3_2_DParser.condition_is_of_type_names_return retval = new PLSQL3_2_DParser.condition_is_of_type_names_return();
        retval.start = input.LT(1);

        int condition_is_of_type_names_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1204=null;
        PLSQL3_2_DParser.condition_is_of_type_name_return condition_is_of_type_name1203 =null;

        PLSQL3_2_DParser.condition_is_of_type_name_return condition_is_of_type_name1205 =null;


        Object COMMA1204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1517:2: ( condition_is_of_type_name ( COMMA condition_is_of_type_name )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1517:4: condition_is_of_type_name ( COMMA condition_is_of_type_name )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7373);
            condition_is_of_type_name1203=condition_is_of_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1203.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1517:30: ( COMMA condition_is_of_type_name )*
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);

                if ( (LA317_0==COMMA) ) {
                    alt317=1;
                }


                switch (alt317) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1517:32: COMMA condition_is_of_type_name
            	    {
            	    COMMA1204=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_is_of_type_names7377); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1204_tree = 
            	    cast(Object)adaptor.create(COMMA1204)
            	    ;
            	    adaptor.addChild(root_0, COMMA1204_tree);
            	    }

            	    pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7379);
            	    condition_is_of_type_name1205=condition_is_of_type_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1205.getTree());

            	    }
            	    break;

            	default :
            	    break loop317;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_of_type_names"," ",217);
            if ( state.backtracking>0 ) { memoize(input, 217, condition_is_of_type_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_names"


    public static class condition_is_of_type_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1519:1: condition_is_of_type_name : ( keyONLY )? type_name ;
    public final PLSQL3_2_DParser.condition_is_of_type_name_return condition_is_of_type_name()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_of_type_name"," ",218);
        PLSQL3_2_DParser.condition_is_of_type_name_return retval = new PLSQL3_2_DParser.condition_is_of_type_name_return();
        retval.start = input.LT(1);

        int condition_is_of_type_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyONLY_return keyONLY1206 =null;

        PLSQL3_2_DParser.type_name_return type_name1207 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1520:2: ( ( keyONLY )? type_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1520:4: ( keyONLY )? type_name
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1520:4: ( keyONLY )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==ID) ) {
                int LA318_1 = input.LA(2);

                if ( (LA318_1==DOUBLEQUOTED_STRING||LA318_1==ID) ) {
                    alt318=1;
                }
            }
            switch (alt318) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1520:6: keyONLY
                   {
                   pushFollow(FOLLOW_keyONLY_in_condition_is_of_type_name7394);
                   keyONLY1206=keyONLY();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1206.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_type_name_in_condition_is_of_type_name7399);
            type_name1207=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1207.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_of_type_name"," ",218);
            if ( state.backtracking>0 ) { memoize(input, 218, condition_is_of_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_name"


    public static class condition_is_present_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_present"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1522:1: condition_is_present : cell_reference 'IS' keyPRESENT ;
    public final PLSQL3_2_DParser.condition_is_present_return condition_is_present()  {
        debug(trace_rules) writeln("Entering rule:","condition_is_present"," ",219);
        PLSQL3_2_DParser.condition_is_present_return retval = new PLSQL3_2_DParser.condition_is_present_return();
        retval.start = input.LT(1);

        int condition_is_present_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1209=null;
        PLSQL3_2_DParser.cell_reference_return cell_reference1208 =null;

        PLSQL3_2_DParser.keyPRESENT_return keyPRESENT1210 =null;


        Object string_literal1209_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1523:2: ( cell_reference 'IS' keyPRESENT )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1523:4: cell_reference 'IS' keyPRESENT
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_cell_reference_in_condition_is_present7409);
            cell_reference1208=cell_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference1208.getTree());

            string_literal1209=cast(Token)match(input,120,FOLLOW_120_in_condition_is_present7411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1209_tree = 
            cast(Object)adaptor.create(string_literal1209)
            ;
            adaptor.addChild(root_0, string_literal1209_tree);
            }

            pushFollow(FOLLOW_keyPRESENT_in_condition_is_present7413);
            keyPRESENT1210=keyPRESENT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRESENT1210.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_is_present"," ",219);
            if ( state.backtracking>0 ) { memoize(input, 219, condition_is_present_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_present"


    public static class condition_like_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_like"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1525:1: condition_like : sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? ;
    public final PLSQL3_2_DParser.condition_like_return condition_like()  {
        debug(trace_rules) writeln("Entering rule:","condition_like"," ",220);
        PLSQL3_2_DParser.condition_like_return retval = new PLSQL3_2_DParser.condition_like_return();
        retval.start = input.LT(1);

        int condition_like_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1212=null;
        Token string_literal1213=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1211 =null;

        PLSQL3_2_DParser.keyLIKEC_return keyLIKEC1214 =null;

        PLSQL3_2_DParser.keyLIKE2_return keyLIKE21215 =null;

        PLSQL3_2_DParser.keyLIKE4_return keyLIKE41216 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1217 =null;

        PLSQL3_2_DParser.keyESCAPE_return keyESCAPE1218 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1219 =null;


        Object string_literal1212_tree=null;
        Object string_literal1213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:2: ( sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:4: sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_like7423);
            sql_expression1211=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1211.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:19: ( 'NOT' )?
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==134) ) {
                alt319=1;
            }
            switch (alt319) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:21: 'NOT'
                   {
                   string_literal1212=cast(Token)match(input,134,FOLLOW_134_in_condition_like7427); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1212_tree = 
                   cast(Object)adaptor.create(string_literal1212)
                   ;
                   adaptor.addChild(root_0, string_literal1212_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:30: ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 )
            int alt320=4;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==121) ) {
                alt320=1;
            }
            else if ( (LA320_0==ID) ) {
                int LA320_2 = input.LA(2);

                if ( ((((toUpper(input.LT(1).getText)== "LIKEC")&&(toUpper(input.LT(1).getText)== "LIKEC"))&&synpred527_PLSQL3_2_D())) ) {
                    alt320=2;
                }
                else if ( (((synpred528_PLSQL3_2_D()&&synpred528_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "LIKE2"))) ) {
                    alt320=3;
                }
                else if ( ((toUpper(input.LT(1).getText)== "LIKE4")) ) {
                    alt320=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 320, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;

            }
            switch (alt320) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:32: 'LIKE'
                   {
                   string_literal1213=cast(Token)match(input,121,FOLLOW_121_in_condition_like7434); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1213_tree = 
                   cast(Object)adaptor.create(string_literal1213)
                   ;
                   adaptor.addChild(root_0, string_literal1213_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:41: keyLIKEC
                   {
                   pushFollow(FOLLOW_keyLIKEC_in_condition_like7438);
                   keyLIKEC1214=keyLIKEC();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKEC1214.getTree());

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:52: keyLIKE2
                   {
                   pushFollow(FOLLOW_keyLIKE2_in_condition_like7442);
                   keyLIKE21215=keyLIKE2();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE21215.getTree());

                   }
                   break;
               case 4 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:63: keyLIKE4
                   {
                   pushFollow(FOLLOW_keyLIKE4_in_condition_like7446);
                   keyLIKE41216=keyLIKE4();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE41216.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_sql_expression_in_condition_like7450);
            sql_expression1217=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1217.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:89: ( keyESCAPE sql_expression )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==ID) ) {
                int LA321_1 = input.LA(2);

                if ( ((((toUpper(input.LT(1).getText)== "ESCAPE")&&(toUpper(input.LT(1).getText)== "ESCAPE"))&&synpred529_PLSQL3_2_D())) ) {
                    alt321=1;
                }
            }
            switch (alt321) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:91: keyESCAPE sql_expression
                   {
                   pushFollow(FOLLOW_keyESCAPE_in_condition_like7454);
                   keyESCAPE1218=keyESCAPE();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyESCAPE1218.getTree());

                   pushFollow(FOLLOW_sql_expression_in_condition_like7456);
                   sql_expression1219=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1219.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_like"," ",220);
            if ( state.backtracking>0 ) { memoize(input, 220, condition_like_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_like"


    public static class condition_memeber_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_memeber"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1528:1: condition_memeber : sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name ;
    public final PLSQL3_2_DParser.condition_memeber_return condition_memeber()  {
        debug(trace_rules) writeln("Entering rule:","condition_memeber"," ",221);
        PLSQL3_2_DParser.condition_memeber_return retval = new PLSQL3_2_DParser.condition_memeber_return();
        retval.start = input.LT(1);

        int condition_memeber_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1221=null;
        Token string_literal1223=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1220 =null;

        PLSQL3_2_DParser.keyMEMBER_return keyMEMBER1222 =null;

        PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name1224 =null;


        Object string_literal1221_tree=null;
        Object string_literal1223_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:2: ( sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:4: sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_memeber7469);
            sql_expression1220=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1220.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:19: ( 'NOT' )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==134) ) {
                alt322=1;
            }
            switch (alt322) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:21: 'NOT'
                   {
                   string_literal1221=cast(Token)match(input,134,FOLLOW_134_in_condition_memeber7473); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1221_tree = 
                   cast(Object)adaptor.create(string_literal1221)
                   ;
                   adaptor.addChild(root_0, string_literal1221_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keyMEMBER_in_condition_memeber7478);
            keyMEMBER1222=keyMEMBER();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEMBER1222.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:40: ( 'OF' )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==142) ) {
                alt323=1;
            }
            switch (alt323) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1529:42: 'OF'
                   {
                   string_literal1223=cast(Token)match(input,142,FOLLOW_142_in_condition_memeber7482); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1223_tree = 
                   cast(Object)adaptor.create(string_literal1223)
                   ;
                   adaptor.addChild(root_0, string_literal1223_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_nested_table_column_name_in_condition_memeber7487);
            nested_table_column_name1224=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1224.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_memeber"," ",221);
            if ( state.backtracking>0 ) { memoize(input, 221, condition_memeber_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_memeber"


    public static class condition_between_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_between"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1531:1: condition_between : sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression ;
    public final PLSQL3_2_DParser.condition_between_return condition_between()  {
        debug(trace_rules) writeln("Entering rule:","condition_between"," ",222);
        PLSQL3_2_DParser.condition_between_return retval = new PLSQL3_2_DParser.condition_between_return();
        retval.start = input.LT(1);

        int condition_between_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1226=null;
        Token string_literal1227=null;
        Token string_literal1229=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1225 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1228 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1230 =null;


        Object string_literal1226_tree=null;
        Object string_literal1227_tree=null;
        Object string_literal1229_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1532:2: ( sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1532:4: sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_between7497);
            sql_expression1225=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1225.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1532:19: ( 'NOT' )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==134) ) {
                alt324=1;
            }
            switch (alt324) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1532:21: 'NOT'
                   {
                   string_literal1226=cast(Token)match(input,134,FOLLOW_134_in_condition_between7501); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1226_tree = 
                   cast(Object)adaptor.create(string_literal1226)
                   ;
                   adaptor.addChild(root_0, string_literal1226_tree);
                   }

                   }
                   break;

                default:
            }


            string_literal1227=cast(Token)match(input,68,FOLLOW_68_in_condition_between7506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1227_tree = 
            cast(Object)adaptor.create(string_literal1227)
            ;
            adaptor.addChild(root_0, string_literal1227_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_condition_between7508);
            sql_expression1228=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1228.getTree());

            string_literal1229=cast(Token)match(input,62,FOLLOW_62_in_condition_between7510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1229_tree = 
            cast(Object)adaptor.create(string_literal1229)
            ;
            adaptor.addChild(root_0, string_literal1229_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_condition_between7512);
            sql_expression1230=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1230.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_between"," ",222);
            if ( state.backtracking>0 ) { memoize(input, 222, condition_between_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_between"


    public static class condition_regexp_like_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_regexp_like"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1534:1: condition_regexp_like : keyREGEXP_LIKE LPAREN call_parameters RPAREN ;
    public final PLSQL3_2_DParser.condition_regexp_like_return condition_regexp_like()  {
        debug(trace_rules) writeln("Entering rule:","condition_regexp_like"," ",223);
        PLSQL3_2_DParser.condition_regexp_like_return retval = new PLSQL3_2_DParser.condition_regexp_like_return();
        retval.start = input.LT(1);

        int condition_regexp_like_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1232=null;
        Token RPAREN1234=null;
        PLSQL3_2_DParser.keyREGEXP_LIKE_return keyREGEXP_LIKE1231 =null;

        PLSQL3_2_DParser.call_parameters_return call_parameters1233 =null;


        Object LPAREN1232_tree=null;
        Object RPAREN1234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1535:2: ( keyREGEXP_LIKE LPAREN call_parameters RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1535:4: keyREGEXP_LIKE LPAREN call_parameters RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7522);
            keyREGEXP_LIKE1231=keyREGEXP_LIKE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREGEXP_LIKE1231.getTree());

            LPAREN1232=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_regexp_like7524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1232_tree = 
            cast(Object)adaptor.create(LPAREN1232)
            ;
            adaptor.addChild(root_0, LPAREN1232_tree);
            }

            pushFollow(FOLLOW_call_parameters_in_condition_regexp_like7526);
            call_parameters1233=call_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters1233.getTree());

            RPAREN1234=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_regexp_like7528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1234_tree = 
            cast(Object)adaptor.create(RPAREN1234)
            ;
            adaptor.addChild(root_0, RPAREN1234_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_regexp_like"," ",223);
            if ( state.backtracking>0 ) { memoize(input, 223, condition_regexp_like_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_regexp_like"


    public static class condition_submultiset_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_submultiset"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1537:1: condition_submultiset : nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name ;
    public final PLSQL3_2_DParser.condition_submultiset_return condition_submultiset()  {
        debug(trace_rules) writeln("Entering rule:","condition_submultiset"," ",224);
        PLSQL3_2_DParser.condition_submultiset_return retval = new PLSQL3_2_DParser.condition_submultiset_return();
        retval.start = input.LT(1);

        int condition_submultiset_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1236=null;
        Token string_literal1238=null;
        PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name1235 =null;

        PLSQL3_2_DParser.keySUBMULTISET_return keySUBMULTISET1237 =null;

        PLSQL3_2_DParser.nested_table_column_name_return nested_table_column_name1239 =null;


        Object string_literal1236_tree=null;
        Object string_literal1238_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:2: ( nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:4: nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset7538);
            nested_table_column_name1235=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1235.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:29: ( 'NOT' )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==134) ) {
                alt325=1;
            }
            switch (alt325) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:31: 'NOT'
                   {
                   string_literal1236=cast(Token)match(input,134,FOLLOW_134_in_condition_submultiset7542); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1236_tree = 
                   cast(Object)adaptor.create(string_literal1236)
                   ;
                   adaptor.addChild(root_0, string_literal1236_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_keySUBMULTISET_in_condition_submultiset7547);
            keySUBMULTISET1237=keySUBMULTISET();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBMULTISET1237.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:55: ( 'OF' )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==142) ) {
                alt326=1;
            }
            switch (alt326) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1538:57: 'OF'
                   {
                   string_literal1238=cast(Token)match(input,142,FOLLOW_142_in_condition_submultiset7551); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1238_tree = 
                   cast(Object)adaptor.create(string_literal1238)
                   ;
                   adaptor.addChild(root_0, string_literal1238_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset7556);
            nested_table_column_name1239=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1239.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_submultiset"," ",224);
            if ( state.backtracking>0 ) { memoize(input, 224, condition_submultiset_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_submultiset"


    public static class condition_equals_path_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_equals_path"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1540:1: condition_equals_path : keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final PLSQL3_2_DParser.condition_equals_path_return condition_equals_path()  {
        debug(trace_rules) writeln("Entering rule:","condition_equals_path"," ",225);
        PLSQL3_2_DParser.condition_equals_path_return retval = new PLSQL3_2_DParser.condition_equals_path_return();
        retval.start = input.LT(1);

        int condition_equals_path_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1241=null;
        Token COMMA1243=null;
        Token COMMA1245=null;
        Token RPAREN1247=null;
        PLSQL3_2_DParser.keyEQUALS_PATH_return keyEQUALS_PATH1240 =null;

        PLSQL3_2_DParser.column_name_return column_name1242 =null;

        PLSQL3_2_DParser.path_string_return path_string1244 =null;

        PLSQL3_2_DParser.correlation_integer_return correlation_integer1246 =null;


        Object LPAREN1241_tree=null;
        Object COMMA1243_tree=null;
        Object COMMA1245_tree=null;
        Object RPAREN1247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1541:2: ( keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1541:4: keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyEQUALS_PATH_in_condition_equals_path7566);
            keyEQUALS_PATH1240=keyEQUALS_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEQUALS_PATH1240.getTree());

            LPAREN1241=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_equals_path7568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1241_tree = 
            cast(Object)adaptor.create(LPAREN1241)
            ;
            adaptor.addChild(root_0, LPAREN1241_tree);
            }

            pushFollow(FOLLOW_column_name_in_condition_equals_path7570);
            column_name1242=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1242.getTree());

            COMMA1243=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path7572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1243_tree = 
            cast(Object)adaptor.create(COMMA1243)
            ;
            adaptor.addChild(root_0, COMMA1243_tree);
            }

            pushFollow(FOLLOW_path_string_in_condition_equals_path7574);
            path_string1244=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1244.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1541:56: ( COMMA correlation_integer )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==COMMA) ) {
                alt327=1;
            }
            switch (alt327) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1541:58: COMMA correlation_integer
                   {
                   COMMA1245=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path7578); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   COMMA1245_tree = 
                   cast(Object)adaptor.create(COMMA1245)
                   ;
                   adaptor.addChild(root_0, COMMA1245_tree);
                   }

                   pushFollow(FOLLOW_correlation_integer_in_condition_equals_path7580);
                   correlation_integer1246=correlation_integer();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1246.getTree());

                   }
                   break;

                default:
            }


            RPAREN1247=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_equals_path7585); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1247_tree = 
            cast(Object)adaptor.create(RPAREN1247)
            ;
            adaptor.addChild(root_0, RPAREN1247_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_equals_path"," ",225);
            if ( state.backtracking>0 ) { memoize(input, 225, condition_equals_path_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_equals_path"


    public static class condition_under_path_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_under_path"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1543:1: condition_under_path : keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final PLSQL3_2_DParser.condition_under_path_return condition_under_path()  {
        debug(trace_rules) writeln("Entering rule:","condition_under_path"," ",226);
        PLSQL3_2_DParser.condition_under_path_return retval = new PLSQL3_2_DParser.condition_under_path_return();
        retval.start = input.LT(1);

        int condition_under_path_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1249=null;
        Token COMMA1251=null;
        Token COMMA1253=null;
        Token COMMA1255=null;
        Token RPAREN1257=null;
        PLSQL3_2_DParser.keyUNDER_PATH_return keyUNDER_PATH1248 =null;

        PLSQL3_2_DParser.column_name_return column_name1250 =null;

        PLSQL3_2_DParser.levels_return levels1252 =null;

        PLSQL3_2_DParser.path_string_return path_string1254 =null;

        PLSQL3_2_DParser.correlation_integer_return correlation_integer1256 =null;


        Object LPAREN1249_tree=null;
        Object COMMA1251_tree=null;
        Object COMMA1253_tree=null;
        Object COMMA1255_tree=null;
        Object RPAREN1257_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:2: ( keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:4: keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyUNDER_PATH_in_condition_under_path7595);
            keyUNDER_PATH1248=keyUNDER_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNDER_PATH1248.getTree());

            LPAREN1249=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_under_path7597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1249_tree = 
            cast(Object)adaptor.create(LPAREN1249)
            ;
            adaptor.addChild(root_0, LPAREN1249_tree);
            }

            pushFollow(FOLLOW_column_name_in_condition_under_path7599);
            column_name1250=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1250.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:37: ( COMMA levels )?
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==COMMA) ) {
                int LA328_1 = input.LA(2);

                if ( (LA328_1==NUMBER) ) {
                    alt328=1;
                }
            }
            switch (alt328) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:39: COMMA levels
                   {
                   COMMA1251=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7603); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   COMMA1251_tree = 
                   cast(Object)adaptor.create(COMMA1251)
                   ;
                   adaptor.addChild(root_0, COMMA1251_tree);
                   }

                   pushFollow(FOLLOW_levels_in_condition_under_path7605);
                   levels1252=levels();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, levels1252.getTree());

                   }
                   break;

                default:
            }


            COMMA1253=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1253_tree = 
            cast(Object)adaptor.create(COMMA1253)
            ;
            adaptor.addChild(root_0, COMMA1253_tree);
            }

            pushFollow(FOLLOW_path_string_in_condition_under_path7612);
            path_string1254=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1254.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:73: ( COMMA correlation_integer )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==COMMA) ) {
                alt329=1;
            }
            switch (alt329) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1544:75: COMMA correlation_integer
                   {
                   COMMA1255=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7616); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   COMMA1255_tree = 
                   cast(Object)adaptor.create(COMMA1255)
                   ;
                   adaptor.addChild(root_0, COMMA1255_tree);
                   }

                   pushFollow(FOLLOW_correlation_integer_in_condition_under_path7618);
                   correlation_integer1256=correlation_integer();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1256.getTree());

                   }
                   break;

                default:
            }


            RPAREN1257=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_under_path7623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1257_tree = 
            cast(Object)adaptor.create(RPAREN1257)
            ;
            adaptor.addChild(root_0, RPAREN1257_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","condition_under_path"," ",226);
            if ( state.backtracking>0 ) { memoize(input, 226, condition_under_path_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_under_path"


    public static class levels_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "levels"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1546:1: levels : integer ;
    public final PLSQL3_2_DParser.levels_return levels()  {
        debug(trace_rules) writeln("Entering rule:","levels"," ",227);
        PLSQL3_2_DParser.levels_return retval = new PLSQL3_2_DParser.levels_return();
        retval.start = input.LT(1);

        int levels_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.integer_return integer1258 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1547:2: ( integer )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1547:4: integer
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_levels7633);
            integer1258=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1258.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","levels"," ",227);
            if ( state.backtracking>0 ) { memoize(input, 227, levels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "levels"


    public static class correlation_integer_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "correlation_integer"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1549:1: correlation_integer : integer ;
    public final PLSQL3_2_DParser.correlation_integer_return correlation_integer()  {
        debug(trace_rules) writeln("Entering rule:","correlation_integer"," ",228);
        PLSQL3_2_DParser.correlation_integer_return retval = new PLSQL3_2_DParser.correlation_integer_return();
        retval.start = input.LT(1);

        int correlation_integer_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.integer_return integer1259 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1550:2: ( integer )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1550:4: integer
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_correlation_integer7643);
            integer1259=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1259.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","correlation_integer"," ",228);
            if ( state.backtracking>0 ) { memoize(input, 228, correlation_integer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "correlation_integer"


    public static class path_string_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_string"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1552:1: path_string : QUOTED_STRING ;
    public final PLSQL3_2_DParser.path_string_return path_string()  {
        debug(trace_rules) writeln("Entering rule:","path_string"," ",229);
        PLSQL3_2_DParser.path_string_return retval = new PLSQL3_2_DParser.path_string_return();
        retval.start = input.LT(1);

        int path_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1260=null;

        Object QUOTED_STRING1260_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1553:2: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1553:4: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING1260=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_path_string7653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1260_tree = 
            cast(Object)adaptor.create(QUOTED_STRING1260)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1260_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","path_string"," ",229);
            if ( state.backtracking>0 ) { memoize(input, 229, path_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "path_string"


    public static class grouping_expression_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_expression_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1555:1: grouping_expression_list : expression_list ( COMMA expression_list )* ;
    public final PLSQL3_2_DParser.grouping_expression_list_return grouping_expression_list()  {
        debug(trace_rules) writeln("Entering rule:","grouping_expression_list"," ",230);
        PLSQL3_2_DParser.grouping_expression_list_return retval = new PLSQL3_2_DParser.grouping_expression_list_return();
        retval.start = input.LT(1);

        int grouping_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1262=null;
        PLSQL3_2_DParser.expression_list_return expression_list1261 =null;

        PLSQL3_2_DParser.expression_list_return expression_list1263 =null;


        Object COMMA1262_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:2: ( expression_list ( COMMA expression_list )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:4: expression_list ( COMMA expression_list )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_expression_list_in_grouping_expression_list7663);
            expression_list1261=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1261.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:20: ( COMMA expression_list )*
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==COMMA) ) {
                    int LA330_1 = input.LA(2);

                    if ( (synpred538_PLSQL3_2_D()) ) {
                        alt330=1;
                    }


                }


                switch (alt330) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:22: COMMA expression_list
            	    {
            	    COMMA1262=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_expression_list7667); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1262_tree = 
            	    cast(Object)adaptor.create(COMMA1262)
            	    ;
            	    adaptor.addChild(root_0, COMMA1262_tree);
            	    }

            	    pushFollow(FOLLOW_expression_list_in_grouping_expression_list7669);
            	    expression_list1263=expression_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1263.getTree());

            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","grouping_expression_list"," ",230);
            if ( state.backtracking>0 ) { memoize(input, 230, grouping_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_expression_list"


    public static class expression_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1558:1: expression_list : ( LPAREN sql_expressions RPAREN | sql_expressions );
    public final PLSQL3_2_DParser.expression_list_return expression_list()  {
        debug(trace_rules) writeln("Entering rule:","expression_list"," ",231);
        PLSQL3_2_DParser.expression_list_return retval = new PLSQL3_2_DParser.expression_list_return();
        retval.start = input.LT(1);

        int expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1264=null;
        Token RPAREN1266=null;
        PLSQL3_2_DParser.sql_expressions_return sql_expressions1265 =null;

        PLSQL3_2_DParser.sql_expressions_return sql_expressions1267 =null;


        Object LPAREN1264_tree=null;
        Object RPAREN1266_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1559:2: ( LPAREN sql_expressions RPAREN | sql_expressions )
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==LPAREN) ) {
                int LA331_1 = input.LA(2);

                if ( (synpred539_PLSQL3_2_D()) ) {
                    alt331=1;
                }
                else if ( (true) ) {
                    alt331=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 331, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA331_0==DOUBLEQUOTED_STRING||LA331_0==ID||LA331_0==MINUS||LA331_0==NUMBER||LA331_0==PLUS||LA331_0==QUOTED_STRING||LA331_0==76||LA331_0==93||LA331_0==101||LA331_0==136||LA331_0==162||LA331_0==165||LA331_0==169||LA331_0==174) ) {
                alt331=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);

                throw nvae;

            }
            switch (alt331) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1559:4: LPAREN sql_expressions RPAREN
                    {
                    root_0 = cast(Object)adaptor.nil();


                    LPAREN1264=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list7682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1264_tree = 
                    cast(Object)adaptor.create(LPAREN1264)
                    ;
                    adaptor.addChild(root_0, LPAREN1264_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_expression_list7684);
                    sql_expressions1265=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1265.getTree());

                    RPAREN1266=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list7686); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1266_tree = 
                    cast(Object)adaptor.create(RPAREN1266)
                    ;
                    adaptor.addChild(root_0, RPAREN1266_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1560:4: sql_expressions
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expressions_in_expression_list7691);
                    sql_expressions1267=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1267.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","expression_list"," ",231);
            if ( state.backtracking>0 ) { memoize(input, 231, expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class cell_reference_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_reference"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1562:1: cell_reference : sql_identifier ;
    public final PLSQL3_2_DParser.cell_reference_return cell_reference()  {
        debug(trace_rules) writeln("Entering rule:","cell_reference"," ",232);
        PLSQL3_2_DParser.cell_reference_return retval = new PLSQL3_2_DParser.cell_reference_return();
        retval.start = input.LT(1);

        int cell_reference_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_identifier_return sql_identifier1268 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1563:2: ( sql_identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1563:4: sql_identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_cell_reference7701);
            sql_identifier1268=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1268.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","cell_reference"," ",232);
            if ( state.backtracking>0 ) { memoize(input, 232, cell_reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_reference"


    public static class call_parameters_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_parameters"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1565:1: call_parameters : call_parameter ( COMMA call_parameter )* ;
    public final PLSQL3_2_DParser.call_parameters_return call_parameters()  {
        debug(trace_rules) writeln("Entering rule:","call_parameters"," ",233);
        PLSQL3_2_DParser.call_parameters_return retval = new PLSQL3_2_DParser.call_parameters_return();
        retval.start = input.LT(1);

        int call_parameters_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1270=null;
        PLSQL3_2_DParser.call_parameter_return call_parameter1269 =null;

        PLSQL3_2_DParser.call_parameter_return call_parameter1271 =null;


        Object COMMA1270_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1566:2: ( call_parameter ( COMMA call_parameter )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1566:4: call_parameter ( COMMA call_parameter )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_call_parameter_in_call_parameters7711);
            call_parameter1269=call_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1269.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1566:19: ( COMMA call_parameter )*
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==COMMA) ) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1566:21: COMMA call_parameter
            	    {
            	    COMMA1270=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_call_parameters7715); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1270_tree = 
            	    cast(Object)adaptor.create(COMMA1270)
            	    ;
            	    adaptor.addChild(root_0, COMMA1270_tree);
            	    }

            	    pushFollow(FOLLOW_call_parameter_in_call_parameters7717);
            	    call_parameter1271=call_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1271.getTree());

            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","call_parameters"," ",233);
            if ( state.backtracking>0 ) { memoize(input, 233, call_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "call_parameters"


    public static class call_parameter_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_parameter"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1568:1: call_parameter : ( parameter_name ARROW )? nested_expression ;
    public final PLSQL3_2_DParser.call_parameter_return call_parameter()  {
        debug(trace_rules) writeln("Entering rule:","call_parameter"," ",234);
        PLSQL3_2_DParser.call_parameter_return retval = new PLSQL3_2_DParser.call_parameter_return();
        retval.start = input.LT(1);

        int call_parameter_StartIndex = input.index();

        Object root_0 = null;

        Token ARROW1273=null;
        PLSQL3_2_DParser.parameter_name_return parameter_name1272 =null;

        PLSQL3_2_DParser.nested_expression_return nested_expression1274 =null;


        Object ARROW1273_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1569:2: ( ( parameter_name ARROW )? nested_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1569:4: ( parameter_name ARROW )? nested_expression
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1569:4: ( parameter_name ARROW )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==ID) ) {
                int LA333_1 = input.LA(2);

                if ( (LA333_1==ARROW) ) {
                    alt333=1;
                }
            }
            else if ( (LA333_0==DOUBLEQUOTED_STRING) ) {
                int LA333_3 = input.LA(2);

                if ( (LA333_3==ARROW) ) {
                    alt333=1;
                }
            }
            switch (alt333) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1569:6: parameter_name ARROW
                   {
                   pushFollow(FOLLOW_parameter_name_in_call_parameter7732);
                   parameter_name1272=parameter_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name1272.getTree());

                   ARROW1273=cast(Token)match(input,ARROW,FOLLOW_ARROW_in_call_parameter7734); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   ARROW1273_tree = 
                   cast(Object)adaptor.create(ARROW1273)
                   ;
                   adaptor.addChild(root_0, ARROW1273_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_nested_expression_in_call_parameter7739);
            nested_expression1274=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1274.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","call_parameter"," ",234);
            if ( state.backtracking>0 ) { memoize(input, 234, call_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "call_parameter"


    public static class relational_op_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relational_op"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1572:1: relational_op : ( EQ | LTH | GTH | NOT_EQ | LEQ | GEQ );
    public final PLSQL3_2_DParser.relational_op_return relational_op()  {
        debug(trace_rules) writeln("Entering rule:","relational_op"," ",235);
        PLSQL3_2_DParser.relational_op_return retval = new PLSQL3_2_DParser.relational_op_return();
        retval.start = input.LT(1);

        int relational_op_StartIndex = input.index();

        Object root_0 = null;

        Token set1275=null;

        Object set1275_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1573:2: ( EQ | LTH | GTH | NOT_EQ | LEQ | GEQ )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
            {
            root_0 = cast(Object)adaptor.nil();


            set1275=cast(Token)input.LT(1);

            if ( input.LA(1)==EQ||(input.LA(1) >=20 && input.LA(1)<=21)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set1275)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","relational_op"," ",235);
            if ( state.backtracking>0 ) { memoize(input, 235, relational_op_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relational_op"


    public static class exp_set_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exp_set"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1576:1: exp_set : ( ( sql_expression )=> sql_expression | subquery );
    public final PLSQL3_2_DParser.exp_set_return exp_set()  {
        debug(trace_rules) writeln("Entering rule:","exp_set"," ",236);
        PLSQL3_2_DParser.exp_set_return retval = new PLSQL3_2_DParser.exp_set_return();
        retval.start = input.LT(1);

        int exp_set_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1276 =null;

        PLSQL3_2_DParser.subquery_return subquery1277 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1577:2: ( ( sql_expression )=> sql_expression | subquery )
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==MINUS||LA334_0==PLUS) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==LPAREN) ) {
                int LA334_2 = input.LA(2);

                if ( (synpred547_PLSQL3_2_D()) ) {
                    alt334=1;
                }
                else if ( (true) ) {
                    alt334=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 334, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA334_0==76) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==ID) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==93) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==DOUBLEQUOTED_STRING) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==162) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==101||LA334_0==174) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==169) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==QUOTED_STRING) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==NUMBER) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==136) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else if ( (LA334_0==165) && (synpred547_PLSQL3_2_D())) {
                alt334=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);

                throw nvae;

            }
            switch (alt334) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1577:4: ( sql_expression )=> sql_expression
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_exp_set7789);
                    sql_expression1276=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1276.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1578:4: subquery
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_subquery_in_exp_set7794);
                    subquery1277=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1277.getTree());

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","exp_set"," ",236);
            if ( state.backtracking>0 ) { memoize(input, 236, exp_set_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exp_set"


    public static class subquery_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1581:1: subquery : LPAREN select_command RPAREN ;
    public final PLSQL3_2_DParser.subquery_return subquery()  {
        debug(trace_rules) writeln("Entering rule:","subquery"," ",237);
        PLSQL3_2_DParser.subquery_return retval = new PLSQL3_2_DParser.subquery_return();
        retval.start = input.LT(1);

        int subquery_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1278=null;
        Token RPAREN1280=null;
        PLSQL3_2_DParser.select_command_return select_command1279 =null;


        Object LPAREN1278_tree=null;
        Object RPAREN1280_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1582:2: ( LPAREN select_command RPAREN )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1582:4: LPAREN select_command RPAREN
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN1278=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery7805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1278_tree = 
            cast(Object)adaptor.create(LPAREN1278)
            ;
            adaptor.addChild(root_0, LPAREN1278_tree);
            }

            pushFollow(FOLLOW_select_command_in_subquery7807);
            select_command1279=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1279.getTree());

            RPAREN1280=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery7809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1280_tree = 
            cast(Object)adaptor.create(RPAREN1280)
            ;
            adaptor.addChild(root_0, RPAREN1280_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","subquery"," ",237);
            if ( state.backtracking>0 ) { memoize(input, 237, subquery_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subquery"


    public static class connect_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "connect_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1585:1: connect_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? ;
    public final PLSQL3_2_DParser.connect_clause_return connect_clause()  {
        debug(trace_rules) writeln("Entering rule:","connect_clause"," ",238);
        PLSQL3_2_DParser.connect_clause_return retval = new PLSQL3_2_DParser.connect_clause_return();
        retval.start = input.LT(1);

        int connect_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1281=null;
        Token string_literal1282=null;
        Token string_literal1284=null;
        Token string_literal1285=null;
        Token string_literal1286=null;
        Token string_literal1293=null;
        Token string_literal1294=null;
        Token string_literal1298=null;
        Token string_literal1300=null;
        Token string_literal1302=null;
        Token string_literal1303=null;
        PLSQL3_2_DParser.sql_condition_return sql_condition1283 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1287 =null;

        PLSQL3_2_DParser.relational_op_return relational_op1288 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1289 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1290 =null;

        PLSQL3_2_DParser.relational_op_return relational_op1291 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1292 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1295 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1296 =null;

        PLSQL3_2_DParser.relational_op_return relational_op1297 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1299 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1301 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1304 =null;


        Object string_literal1281_tree=null;
        Object string_literal1282_tree=null;
        Object string_literal1284_tree=null;
        Object string_literal1285_tree=null;
        Object string_literal1286_tree=null;
        Object string_literal1293_tree=null;
        Object string_literal1294_tree=null;
        Object string_literal1298_tree=null;
        Object string_literal1300_tree=null;
        Object string_literal1302_tree=null;
        Object string_literal1303_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1586:2: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1586:4: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1586:4: ( 'START' 'WITH' sql_condition )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==170) ) {
                alt335=1;
            }
            switch (alt335) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1586:6: 'START' 'WITH' sql_condition
                   {
                   string_literal1281=cast(Token)match(input,170,FOLLOW_170_in_connect_clause7822); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1281_tree = 
                   cast(Object)adaptor.create(string_literal1281)
                   ;
                   adaptor.addChild(root_0, string_literal1281_tree);
                   }

                   string_literal1282=cast(Token)match(input,185,FOLLOW_185_in_connect_clause7824); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1282_tree = 
                   cast(Object)adaptor.create(string_literal1282)
                   ;
                   adaptor.addChild(root_0, string_literal1282_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_connect_clause7826);
                   sql_condition1283=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1283.getTree());

                   }
                   break;

                default:
            }


            string_literal1284=cast(Token)match(input,82,FOLLOW_82_in_connect_clause7833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1284_tree = 
            cast(Object)adaptor.create(string_literal1284)
            ;
            adaptor.addChild(root_0, string_literal1284_tree);
            }

            string_literal1285=cast(Token)match(input,75,FOLLOW_75_in_connect_clause7835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1285_tree = 
            cast(Object)adaptor.create(string_literal1285)
            ;
            adaptor.addChild(root_0, string_literal1285_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1588:3: ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==151) ) {
                alt336=1;
            }
            else if ( (LA336_0==DOUBLEQUOTED_STRING||LA336_0==ID||LA336_0==LPAREN||LA336_0==MINUS||LA336_0==NUMBER||LA336_0==PLUS||LA336_0==QUOTED_STRING||LA336_0==76||LA336_0==93||LA336_0==101||LA336_0==136||LA336_0==162||LA336_0==165||LA336_0==169||LA336_0==174) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;

            }
            switch (alt336) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1588:5: 'PRIOR' sql_expression relational_op sql_expression
                   {
                   string_literal1286=cast(Token)match(input,151,FOLLOW_151_in_connect_clause7842); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1286_tree = 
                   cast(Object)adaptor.create(string_literal1286)
                   ;
                   adaptor.addChild(root_0, string_literal1286_tree);
                   }

                   pushFollow(FOLLOW_sql_expression_in_connect_clause7844);
                   sql_expression1287=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1287.getTree());

                   pushFollow(FOLLOW_relational_op_in_connect_clause7846);
                   relational_op1288=relational_op();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1288.getTree());

                   pushFollow(FOLLOW_sql_expression_in_connect_clause7848);
                   sql_expression1289=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1289.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1589:5: sql_expression relational_op sql_expression 'PRIOR'
                   {
                   pushFollow(FOLLOW_sql_expression_in_connect_clause7854);
                   sql_expression1290=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1290.getTree());

                   pushFollow(FOLLOW_relational_op_in_connect_clause7856);
                   relational_op1291=relational_op();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1291.getTree());

                   pushFollow(FOLLOW_sql_expression_in_connect_clause7858);
                   sql_expression1292=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1292.getTree());

                   string_literal1293=cast(Token)match(input,151,FOLLOW_151_in_connect_clause7860); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1293_tree = 
                   cast(Object)adaptor.create(string_literal1293)
                   ;
                   adaptor.addChild(root_0, string_literal1293_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:3: ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? )
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==151) && (synpred551_PLSQL3_2_D())) {
                alt340=1;
            }
            else if ( (LA340_0==134) && (synpred551_PLSQL3_2_D())) {
                alt340=1;
            }
            else if ( (LA340_0==100) && (synpred551_PLSQL3_2_D())) {
                alt340=1;
            }
            else if ( (LA340_0==MINUS||LA340_0==PLUS) ) {
                int LA340_4 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==LPAREN) ) {
                int LA340_5 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==76) ) {
                int LA340_6 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==ID) ) {
                int LA340_7 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==93) ) {
                int LA340_8 = input.LA(2);

                if ( (((synpred551_PLSQL3_2_D()&&synpred551_PLSQL3_2_D())&&( is_sql ))) ) {
                    alt340=1;
                }
                else if ( (( is_sql )) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==DOUBLEQUOTED_STRING) ) {
                int LA340_9 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==162) ) {
                int LA340_10 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==101||LA340_0==174) ) {
                int LA340_11 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==169) ) {
                int LA340_12 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==QUOTED_STRING) ) {
                int LA340_13 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==NUMBER) ) {
                int LA340_14 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==136) ) {
                int LA340_15 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==165) ) {
                int LA340_16 = input.LA(2);

                if ( (synpred551_PLSQL3_2_D()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==63) && (synpred551_PLSQL3_2_D())) {
                alt340=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);

                throw nvae;

            }
            switch (alt340) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:5: ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:39: ( 'PRIOR' )?
                   int alt337=2;
                   int LA337_0 = input.LA(1);

                   if ( (LA337_0==151) ) {
                       int LA337_1 = input.LA(2);

                       if ( (synpred552_PLSQL3_2_D()) ) {
                           alt337=1;
                       }
                   }
                   switch (alt337) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:40: 'PRIOR'
                          {
                          string_literal1294=cast(Token)match(input,151,FOLLOW_151_in_connect_clause7886); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal1294_tree = 
                          cast(Object)adaptor.create(string_literal1294)
                          ;
                          adaptor.addChild(root_0, string_literal1294_tree);
                          }

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_sql_condition_in_connect_clause7890);
                   sql_condition1295=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1295.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1592:5: sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )?
                   {
                   pushFollow(FOLLOW_sql_expression_in_connect_clause7896);
                   sql_expression1296=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1296.getTree());

                   pushFollow(FOLLOW_relational_op_in_connect_clause7898);
                   relational_op1297=relational_op();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1297.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1592:34: ( 'PRIOR' )?
                   int alt338=2;
                   int LA338_0 = input.LA(1);

                   if ( (LA338_0==151) ) {
                       alt338=1;
                   }
                   switch (alt338) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1592:36: 'PRIOR'
                          {
                          string_literal1298=cast(Token)match(input,151,FOLLOW_151_in_connect_clause7902); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal1298_tree = 
                          cast(Object)adaptor.create(string_literal1298)
                          ;
                          adaptor.addChild(root_0, string_literal1298_tree);
                          }

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_sql_expression_in_connect_clause7907);
                   sql_expression1299=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1299.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1592:62: ( 'AND' sql_condition )?
                   int alt339=2;
                   int LA339_0 = input.LA(1);

                   if ( (LA339_0==62) ) {
                       alt339=1;
                   }
                   switch (alt339) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1592:64: 'AND' sql_condition
                          {
                          string_literal1300=cast(Token)match(input,62,FOLLOW_62_in_connect_clause7911); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal1300_tree = 
                          cast(Object)adaptor.create(string_literal1300)
                          ;
                          adaptor.addChild(root_0, string_literal1300_tree);
                          }

                          pushFollow(FOLLOW_sql_condition_in_connect_clause7913);
                          sql_condition1301=sql_condition();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1301.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1594:3: ( 'START' 'WITH' sql_condition )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==170) ) {
                alt341=1;
            }
            switch (alt341) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1594:5: 'START' 'WITH' sql_condition
                   {
                   string_literal1302=cast(Token)match(input,170,FOLLOW_170_in_connect_clause7926); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1302_tree = 
                   cast(Object)adaptor.create(string_literal1302)
                   ;
                   adaptor.addChild(root_0, string_literal1302_tree);
                   }

                   string_literal1303=cast(Token)match(input,185,FOLLOW_185_in_connect_clause7928); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1303_tree = 
                   cast(Object)adaptor.create(string_literal1303)
                   ;
                   adaptor.addChild(root_0, string_literal1303_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_connect_clause7930);
                   sql_condition1304=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1304.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","connect_clause"," ",238);
            if ( state.backtracking>0 ) { memoize(input, 238, connect_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "connect_clause"


    public static class group_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1597:1: group_clause : 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? ;
    public final PLSQL3_2_DParser.group_clause_return group_clause()  {
        debug(trace_rules) writeln("Entering rule:","group_clause"," ",239);
        PLSQL3_2_DParser.group_clause_return retval = new PLSQL3_2_DParser.group_clause_return();
        retval.start = input.LT(1);

        int group_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1305=null;
        Token string_literal1306=null;
        Token COMMA1308=null;
        Token string_literal1310=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1307 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1309 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1311 =null;


        Object string_literal1305_tree=null;
        Object string_literal1306_tree=null;
        Object COMMA1308_tree=null;
        Object string_literal1310_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:2: ( 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:4: 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1305=cast(Token)match(input,109,FOLLOW_109_in_group_clause7944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1305_tree = 
            cast(Object)adaptor.create(string_literal1305)
            ;
            adaptor.addChild(root_0, string_literal1305_tree);
            }

            string_literal1306=cast(Token)match(input,75,FOLLOW_75_in_group_clause7946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1306_tree = 
            cast(Object)adaptor.create(string_literal1306)
            ;
            adaptor.addChild(root_0, string_literal1306_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_group_clause7948);
            sql_expression1307=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1307.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:32: ( COMMA sql_expression )*
            loop342:
            do {
                int alt342=2;
                int LA342_0 = input.LA(1);

                if ( (LA342_0==COMMA) ) {
                    alt342=1;
                }


                switch (alt342) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:34: COMMA sql_expression
            	    {
            	    COMMA1308=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_group_clause7952); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1308_tree = 
            	    cast(Object)adaptor.create(COMMA1308)
            	    ;
            	    adaptor.addChild(root_0, COMMA1308_tree);
            	    }

            	    pushFollow(FOLLOW_sql_expression_in_group_clause7954);
            	    sql_expression1309=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1309.getTree());

            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:58: ( 'HAVING' sql_condition )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==110) ) {
                alt343=1;
            }
            switch (alt343) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1598:60: 'HAVING' sql_condition
                   {
                   string_literal1310=cast(Token)match(input,110,FOLLOW_110_in_group_clause7961); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1310_tree = 
                   cast(Object)adaptor.create(string_literal1310)
                   ;
                   adaptor.addChild(root_0, string_literal1310_tree);
                   }

                   pushFollow(FOLLOW_sql_condition_in_group_clause7963);
                   sql_condition1311=sql_condition();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1311.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","group_clause"," ",239);
            if ( state.backtracking>0 ) { memoize(input, 239, group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class set_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1601:1: set_clause : ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command ;
    public final PLSQL3_2_DParser.set_clause_return set_clause()  {
        debug(trace_rules) writeln("Entering rule:","set_clause"," ",240);
        PLSQL3_2_DParser.set_clause_return retval = new PLSQL3_2_DParser.set_clause_return();
        retval.start = input.LT(1);

        int set_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1312=null;
        Token string_literal1313=null;
        Token string_literal1314=null;
        Token string_literal1315=null;
        PLSQL3_2_DParser.select_command_return select_command1316 =null;


        Object string_literal1312_tree=null;
        Object string_literal1313_tree=null;
        Object string_literal1314_tree=null;
        Object string_literal1315_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:2: ( ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:4: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:4: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' )
            int alt344=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt344=1;
                }
                break;
            case 118:
                {
                alt344=2;
                }
                break;
            case 125:
                {
                alt344=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 344, 0, input);

                throw nvae;

            }

            switch (alt344) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:6: ( 'UNION' 'ALL' )
                   {
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:6: ( 'UNION' 'ALL' )
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:8: 'UNION' 'ALL'
                   {
                   string_literal1312=cast(Token)match(input,175,FOLLOW_175_in_set_clause7981); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1312_tree = 
                   cast(Object)adaptor.create(string_literal1312)
                   ;
                   adaptor.addChild(root_0, string_literal1312_tree);
                   }

                   string_literal1313=cast(Token)match(input,61,FOLLOW_61_in_set_clause7983); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1313_tree = 
                   cast(Object)adaptor.create(string_literal1313)
                   ;
                   adaptor.addChild(root_0, string_literal1313_tree);
                   }

                   }


                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:26: 'INTERSECT'
                   {
                   string_literal1314=cast(Token)match(input,118,FOLLOW_118_in_set_clause7989); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1314_tree = 
                   cast(Object)adaptor.create(string_literal1314)
                   ;
                   adaptor.addChild(root_0, string_literal1314_tree);
                   }

                   }
                   break;
               case 3 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1602:40: 'MINUS'
                   {
                   string_literal1315=cast(Token)match(input,125,FOLLOW_125_in_set_clause7993); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1315_tree = 
                   cast(Object)adaptor.create(string_literal1315)
                   ;
                   adaptor.addChild(root_0, string_literal1315_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_select_command_in_set_clause7997);
            select_command1316=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1316.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","set_clause"," ",240);
            if ( state.backtracking>0 ) { memoize(input, 240, set_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_clause"


    public static class order_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1605:1: order_clause : 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* ;
    public final PLSQL3_2_DParser.order_clause_return order_clause()  {
        debug(trace_rules) writeln("Entering rule:","order_clause"," ",241);
        PLSQL3_2_DParser.order_clause_return retval = new PLSQL3_2_DParser.order_clause_return();
        retval.start = input.LT(1);

        int order_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1317=null;
        Token string_literal1318=null;
        Token COMMA1320=null;
        PLSQL3_2_DParser.sorted_def_return sorted_def1319 =null;

        PLSQL3_2_DParser.sorted_def_return sorted_def1321 =null;


        Object string_literal1317_tree=null;
        Object string_literal1318_tree=null;
        Object COMMA1320_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1606:2: ( 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1606:4: 'ORDER' 'BY' sorted_def ( COMMA sorted_def )*
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1317=cast(Token)match(input,145,FOLLOW_145_in_order_clause8009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1317_tree = 
            cast(Object)adaptor.create(string_literal1317)
            ;
            adaptor.addChild(root_0, string_literal1317_tree);
            }

            string_literal1318=cast(Token)match(input,75,FOLLOW_75_in_order_clause8011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1318_tree = 
            cast(Object)adaptor.create(string_literal1318)
            ;
            adaptor.addChild(root_0, string_literal1318_tree);
            }

            pushFollow(FOLLOW_sorted_def_in_order_clause8013);
            sorted_def1319=sorted_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1319.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1606:28: ( COMMA sorted_def )*
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==COMMA) ) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1606:30: COMMA sorted_def
            	    {
            	    COMMA1320=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_order_clause8017); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1320_tree = 
            	    cast(Object)adaptor.create(COMMA1320)
            	    ;
            	    adaptor.addChild(root_0, COMMA1320_tree);
            	    }

            	    pushFollow(FOLLOW_sorted_def_in_order_clause8019);
            	    sorted_def1321=sorted_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1321.getTree());

            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","order_clause"," ",241);
            if ( state.backtracking>0 ) { memoize(input, 241, order_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class sorted_def_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sorted_def"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1609:1: sorted_def : ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? ;
    public final PLSQL3_2_DParser.sorted_def_return sorted_def()  {
        debug(trace_rules) writeln("Entering rule:","sorted_def"," ",242);
        PLSQL3_2_DParser.sorted_def_return retval = new PLSQL3_2_DParser.sorted_def_return();
        retval.start = input.LT(1);

        int sorted_def_StartIndex = input.index();

        Object root_0 = null;

        Token NUMBER1323=null;
        Token set1324=null;
        PLSQL3_2_DParser.sql_expression_return sql_expression1322 =null;


        Object NUMBER1323_tree=null;
        Object set1324_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:2: ( ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:4: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )?
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:4: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER )
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==MINUS||LA346_0==PLUS) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==LPAREN) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==76) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==ID) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==93) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==DOUBLEQUOTED_STRING) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==162) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==101||LA346_0==174) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==169) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==QUOTED_STRING) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==NUMBER) ) {
                int LA346_11 = input.LA(2);

                if ( (synpred561_PLSQL3_2_D()) ) {
                    alt346=1;
                }
                else if ( (synpred562_PLSQL3_2_D()) ) {
                    alt346=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 346, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA346_0==136) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else if ( (LA346_0==165) && (synpred561_PLSQL3_2_D())) {
                alt346=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 0, input);

                throw nvae;

            }
            switch (alt346) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:6: ( sql_expression )=> sql_expression
                   {
                   pushFollow(FOLLOW_sql_expression_in_sorted_def8043);
                   sql_expression1322=sql_expression();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1322.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:45: ( NUMBER )=> NUMBER
                   {
                   NUMBER1323=cast(Token)match(input,NUMBER,FOLLOW_NUMBER_in_sorted_def8055); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   NUMBER1323_tree = 
                   cast(Object)adaptor.create(NUMBER1323)
                   ;
                   adaptor.addChild(root_0, NUMBER1323_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:68: ( 'ASC' | 'DESC' )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==65||LA347_0==92) ) {
                alt347=1;
            }
            switch (alt347) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
                   {
                   set1324=cast(Token)input.LT(1);

                   if ( input.LA(1)==65||input.LA(1)==92 ) {
                       input.consume();
                       debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                       if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                       cast(Object)adaptor.create(set1324)
                       );
                       state.errorRecovery=false;
                       state.failed=false;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       MismatchedSetException mse = new MismatchedSetException(null,input);
                       throw mse;
                   }


                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sorted_def"," ",242);
            if ( state.backtracking>0 ) { memoize(input, 242, sorted_def_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sorted_def"


    public static class update_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1613:1: update_clause : 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? ;
    public final PLSQL3_2_DParser.update_clause_return update_clause()  {
        debug(trace_rules) writeln("Entering rule:","update_clause"," ",243);
        PLSQL3_2_DParser.update_clause_return retval = new PLSQL3_2_DParser.update_clause_return();
        retval.start = input.LT(1);

        int update_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1325=null;
        Token string_literal1326=null;
        Token string_literal1327=null;
        Token COMMA1329=null;
        Token string_literal1331=null;
        PLSQL3_2_DParser.column_name_return column_name1328 =null;

        PLSQL3_2_DParser.column_name_return column_name1330 =null;


        Object string_literal1325_tree=null;
        Object string_literal1326_tree=null;
        Object string_literal1327_tree=null;
        Object COMMA1329_tree=null;
        Object string_literal1331_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:2: ( 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:4: 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1325=cast(Token)match(input,104,FOLLOW_104_in_update_clause8079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1325_tree = 
            cast(Object)adaptor.create(string_literal1325)
            ;
            adaptor.addChild(root_0, string_literal1325_tree);
            }

            string_literal1326=cast(Token)match(input,177,FOLLOW_177_in_update_clause8081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1326_tree = 
            cast(Object)adaptor.create(string_literal1326)
            ;
            adaptor.addChild(root_0, string_literal1326_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:19: ( 'OF' column_name ( COMMA column_name )* )?
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( (LA349_0==142) ) {
                alt349=1;
            }
            switch (alt349) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:21: 'OF' column_name ( COMMA column_name )*
                   {
                   string_literal1327=cast(Token)match(input,142,FOLLOW_142_in_update_clause8085); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1327_tree = 
                   cast(Object)adaptor.create(string_literal1327)
                   ;
                   adaptor.addChild(root_0, string_literal1327_tree);
                   }

                   pushFollow(FOLLOW_column_name_in_update_clause8087);
                   column_name1328=column_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1328.getTree());

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:38: ( COMMA column_name )*
                   loop348:
                   do {
                       int alt348=2;
                       int LA348_0 = input.LA(1);

                       if ( (LA348_0==COMMA) ) {
                           alt348=1;
                       }


                       switch (alt348) {
                   	case 1 :
                   	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:40: COMMA column_name
                   	    {
                   	    COMMA1329=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_update_clause8091); if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) {
                   	    COMMA1329_tree = 
                   	    cast(Object)adaptor.create(COMMA1329)
                   	    ;
                   	    adaptor.addChild(root_0, COMMA1329_tree);
                   	    }

                   	    pushFollow(FOLLOW_column_name_in_update_clause8093);
                   	    column_name1330=column_name();

                   	    state._fsp--;
                   	    if (state.failed) return retval;
                   	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1330.getTree());

                   	    }
                   	    break;

                   	default :
                   	    break loop348;
                       }
                   } while (true);


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:64: ( 'NOWAIT' )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==135) ) {
                alt350=1;
            }
            switch (alt350) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1614:66: 'NOWAIT'
                   {
                   string_literal1331=cast(Token)match(input,135,FOLLOW_135_in_update_clause8103); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1331_tree = 
                   cast(Object)adaptor.create(string_literal1331)
                   ;
                   adaptor.addChild(root_0, string_literal1331_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_clause"," ",243);
            if ( state.backtracking>0 ) { memoize(input, 243, update_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_clause"


    public static class insert_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insert_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1617:1: insert_command : 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? ;
    public final PLSQL3_2_DParser.insert_command_return insert_command()  {
        debug(trace_rules) writeln("Entering rule:","insert_command"," ",244);
        PLSQL3_2_DParser.insert_command_return retval = new PLSQL3_2_DParser.insert_command_return();
        retval.start = input.LT(1);

        int insert_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1332=null;
        Token string_literal1333=null;
        Token LPAREN1335=null;
        Token RPAREN1337=null;
        Token string_literal1338=null;
        Token LPAREN1339=null;
        Token RPAREN1341=null;
        PLSQL3_2_DParser.table_reference_list_return table_reference_list1334 =null;

        PLSQL3_2_DParser.column_specs_return column_specs1336 =null;

        PLSQL3_2_DParser.plsql_expressions_return plsql_expressions1340 =null;

        PLSQL3_2_DParser.select_statement_return select_statement1342 =null;

        PLSQL3_2_DParser.returning_clause_return returning_clause1343 =null;


        Object string_literal1332_tree=null;
        Object string_literal1333_tree=null;
        Object LPAREN1335_tree=null;
        Object RPAREN1337_tree=null;
        Object string_literal1338_tree=null;
        Object LPAREN1339_tree=null;
        Object RPAREN1341_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1618:2: ( 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1618:4: 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1332=cast(Token)match(input,115,FOLLOW_115_in_insert_command8117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1332_tree = 
            cast(Object)adaptor.create(string_literal1332)
            ;
            adaptor.addChild(root_0, string_literal1332_tree);
            }

            string_literal1333=cast(Token)match(input,119,FOLLOW_119_in_insert_command8119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1333_tree = 
            cast(Object)adaptor.create(string_literal1333)
            ;
            adaptor.addChild(root_0, string_literal1333_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_insert_command8121);
            table_reference_list1334=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1334.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1619:3: ( LPAREN column_specs RPAREN )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==LPAREN) ) {
                alt351=1;
            }
            switch (alt351) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1619:5: LPAREN column_specs RPAREN
                   {
                   LPAREN1335=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command8127); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN1335_tree = 
                   cast(Object)adaptor.create(LPAREN1335)
                   ;
                   adaptor.addChild(root_0, LPAREN1335_tree);
                   }

                   pushFollow(FOLLOW_column_specs_in_insert_command8129);
                   column_specs1336=column_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1336.getTree());

                   RPAREN1337=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command8131); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN1337_tree = 
                   cast(Object)adaptor.create(RPAREN1337)
                   ;
                   adaptor.addChild(root_0, RPAREN1337_tree);
                   }

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1620:3: ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement )
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==179) ) {
                alt352=1;
            }
            else if ( (LA352_0==165) ) {
                alt352=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;

            }
            switch (alt352) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1620:5: 'VALUES' LPAREN plsql_expressions RPAREN
                   {
                   string_literal1338=cast(Token)match(input,179,FOLLOW_179_in_insert_command8140); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1338_tree = 
                   cast(Object)adaptor.create(string_literal1338)
                   ;
                   adaptor.addChild(root_0, string_literal1338_tree);
                   }

                   LPAREN1339=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command8142); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN1339_tree = 
                   cast(Object)adaptor.create(LPAREN1339)
                   ;
                   adaptor.addChild(root_0, LPAREN1339_tree);
                   }

                   pushFollow(FOLLOW_plsql_expressions_in_insert_command8144);
                   plsql_expressions1340=plsql_expressions();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1340.getTree());

                   RPAREN1341=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command8146); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN1341_tree = 
                   cast(Object)adaptor.create(RPAREN1341)
                   ;
                   adaptor.addChild(root_0, RPAREN1341_tree);
                   }

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1621:5: select_statement
                   {
                   pushFollow(FOLLOW_select_statement_in_insert_command8152);
                   select_statement1342=select_statement();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1342.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1623:3: ( returning_clause )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( ((LA353_0 >=158  && LA353_0<=159)) ) {
                alt353=1;
            }
            switch (alt353) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1623:5: returning_clause
                   {
                   pushFollow(FOLLOW_returning_clause_in_insert_command8162);
                   returning_clause1343=returning_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1343.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","insert_command"," ",244);
            if ( state.backtracking>0 ) { memoize(input, 244, insert_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "insert_command"


    public static class update_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1626:1: update_command : 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final PLSQL3_2_DParser.update_command_return update_command()  {
        debug(trace_rules) writeln("Entering rule:","update_command"," ",245);
        PLSQL3_2_DParser.update_command_return retval = new PLSQL3_2_DParser.update_command_return();
        retval.start = input.LT(1);

        int update_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1344=null;
        Token string_literal1346=null;
        Token string_literal1349=null;
        PLSQL3_2_DParser.selected_table_return selected_table1345 =null;

        PLSQL3_2_DParser.update_nested_column_specs_return update_nested_column_specs1347 =null;

        PLSQL3_2_DParser.update_column_specs_return update_column_specs1348 =null;

        PLSQL3_2_DParser.keyCURRENT_OF_return keyCURRENT_OF1350 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name1351 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1352 =null;

        PLSQL3_2_DParser.returning_clause_return returning_clause1353 =null;


        Object string_literal1344_tree=null;
        Object string_literal1346_tree=null;
        Object string_literal1349_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1627:2: ( 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1627:4: 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1344=cast(Token)match(input,177,FOLLOW_177_in_update_command8176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1344_tree = 
            cast(Object)adaptor.create(string_literal1344)
            ;
            adaptor.addChild(root_0, string_literal1344_tree);
            }

            pushFollow(FOLLOW_selected_table_in_update_command8178);
            selected_table1345=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1345.getTree());

            string_literal1346=cast(Token)match(input,166,FOLLOW_166_in_update_command8182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1346_tree = 
            cast(Object)adaptor.create(string_literal1346)
            ;
            adaptor.addChild(root_0, string_literal1346_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1629:3: ( update_nested_column_specs | update_column_specs )
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==LPAREN) ) {
                alt354=1;
            }
            else if ( (LA354_0==DOUBLEQUOTED_STRING||LA354_0==ID||LA354_0==162) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;

            }
            switch (alt354) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1629:5: update_nested_column_specs
                   {
                   pushFollow(FOLLOW_update_nested_column_specs_in_update_command8189);
                   update_nested_column_specs1347=update_nested_column_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_specs1347.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1630:5: update_column_specs
                   {
                   pushFollow(FOLLOW_update_column_specs_in_update_command8195);
                   update_column_specs1348=update_column_specs();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_specs1348.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1632:3: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==183) ) {
                alt356=1;
            }
            switch (alt356) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1632:5: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                   {
                   string_literal1349=cast(Token)match(input,183,FOLLOW_183_in_update_command8205); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1349_tree = 
                   cast(Object)adaptor.create(string_literal1349)
                   ;
                   adaptor.addChild(root_0, string_literal1349_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1633:4: ( keyCURRENT_OF cursor_name | sql_condition )
                   int alt355=2;
                   int LA355_0 = input.LA(1);

                   if ( (LA355_0==ID) ) {
                       switch ( input.LA(2) ) {
                       case ID:
                           {
                           int LA355_3 = input.LA(3);

                           if ( (LA355_3==EOF||LA355_3==SEMI||(LA355_3 >=158  && LA355_3<=159)) ) {
                               alt355=1;
                           }
                           else if ( (LA355_3==DOUBLEQUOTED_STRING||LA355_3==ID||LA355_3==LPAREN||LA355_3==MINUS||LA355_3==NUMBER||LA355_3==PLUS||LA355_3==QUOTED_STRING||LA355_3==76||LA355_3==93||LA355_3==101||LA355_3==136||LA355_3==142||LA355_3==162||LA355_3==165||LA355_3==169||LA355_3==174) ) {
                               alt355=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 355, 3, input);

                               throw nvae;

                           }
                           }
                           break;
                       case ASTERISK:
                       case DIVIDE:
                       case DOT:
                       case DOUBLEVERTBAR:
                       case EQ:
                       case EXPONENT:
                       case GEQ:
                       case GTH:
                       case LEQ:
                       case LPAREN:
                       case LTH:
                       case MINUS:
                       case NOT_EQ:
                       case PLUS:
                       case 68:
                       case 113:
                       case 120:
                       case 121:
                       case 134:
                           {
                           alt355=2;
                           }
                           break;
                       case DOUBLEQUOTED_STRING:
                           {
                           alt355=1;
                           }
                           break;
                       default:
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae = 
                               new NoViableAltException("", 355, 1, input);

                           throw nvae;

                       }

                   }
                   else if ( (LA355_0==DOUBLEQUOTED_STRING||LA355_0==LPAREN||LA355_0==MINUS||LA355_0==NUMBER||LA355_0==PLUS||LA355_0==QUOTED_STRING||LA355_0==63||LA355_0==76||LA355_0==93||(LA355_0 >=100  && LA355_0<=101)||LA355_0==134||LA355_0==136||LA355_0==151||LA355_0==162||LA355_0==165||LA355_0==169||LA355_0==174) ) {
                       alt355=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 355, 0, input);

                       throw nvae;

                   }
                   switch (alt355) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1633:6: keyCURRENT_OF cursor_name
                          {
                          pushFollow(FOLLOW_keyCURRENT_OF_in_update_command8212);
                          keyCURRENT_OF1350=keyCURRENT_OF();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1350.getTree());

                          pushFollow(FOLLOW_cursor_name_in_update_command8214);
                          cursor_name1351=cursor_name();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1351.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1634:6: sql_condition
                          {
                          pushFollow(FOLLOW_sql_condition_in_update_command8221);
                          sql_condition1352=sql_condition();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1352.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1637:3: ( returning_clause )?
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( ((LA357_0 >=158  && LA357_0<=159)) ) {
                alt357=1;
            }
            switch (alt357) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1637:5: returning_clause
                   {
                   pushFollow(FOLLOW_returning_clause_in_update_command8237);
                   returning_clause1353=returning_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1353.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_command"," ",245);
            if ( state.backtracking>0 ) { memoize(input, 245, update_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_command"


    public static class update_column_specs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_column_specs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1640:1: update_column_specs : update_column_spec ( COMMA update_column_spec )* ;
    public final PLSQL3_2_DParser.update_column_specs_return update_column_specs()  {
        debug(trace_rules) writeln("Entering rule:","update_column_specs"," ",246);
        PLSQL3_2_DParser.update_column_specs_return retval = new PLSQL3_2_DParser.update_column_specs_return();
        retval.start = input.LT(1);

        int update_column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1355=null;
        PLSQL3_2_DParser.update_column_spec_return update_column_spec1354 =null;

        PLSQL3_2_DParser.update_column_spec_return update_column_spec1356 =null;


        Object COMMA1355_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1641:2: ( update_column_spec ( COMMA update_column_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1641:4: update_column_spec ( COMMA update_column_spec )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_update_column_spec_in_update_column_specs8251);
            update_column_spec1354=update_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1354.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1641:23: ( COMMA update_column_spec )*
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==COMMA) ) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1641:25: COMMA update_column_spec
            	    {
            	    COMMA1355=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_update_column_specs8255); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1355_tree = 
            	    cast(Object)adaptor.create(COMMA1355)
            	    ;
            	    adaptor.addChild(root_0, COMMA1355_tree);
            	    }

            	    pushFollow(FOLLOW_update_column_spec_in_update_column_specs8257);
            	    update_column_spec1356=update_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1356.getTree());

            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_column_specs"," ",246);
            if ( state.backtracking>0 ) { memoize(input, 246, update_column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_column_specs"


    public static class update_column_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_column_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1644:1: update_column_spec : column_spec EQ sql_expression ;
    public final PLSQL3_2_DParser.update_column_spec_return update_column_spec()  {
        debug(trace_rules) writeln("Entering rule:","update_column_spec"," ",247);
        PLSQL3_2_DParser.update_column_spec_return retval = new PLSQL3_2_DParser.update_column_spec_return();
        retval.start = input.LT(1);

        int update_column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token EQ1358=null;
        PLSQL3_2_DParser.column_spec_return column_spec1357 =null;

        PLSQL3_2_DParser.sql_expression_return sql_expression1359 =null;


        Object EQ1358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1645:2: ( column_spec EQ sql_expression )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1645:4: column_spec EQ sql_expression
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_column_spec_in_update_column_spec8271);
            column_spec1357=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1357.getTree());

            EQ1358=cast(Token)match(input,EQ,FOLLOW_EQ_in_update_column_spec8273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1358_tree = 
            cast(Object)adaptor.create(EQ1358)
            ;
            adaptor.addChild(root_0, EQ1358_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_update_column_spec8275);
            sql_expression1359=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1359.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_column_spec"," ",247);
            if ( state.backtracking>0 ) { memoize(input, 247, update_column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_column_spec"


    public static class update_nested_column_specs_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_nested_column_specs"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1648:1: update_nested_column_specs : update_nested_column_spec ( COMMA update_nested_column_spec )* ;
    public final PLSQL3_2_DParser.update_nested_column_specs_return update_nested_column_specs()  {
        debug(trace_rules) writeln("Entering rule:","update_nested_column_specs"," ",248);
        PLSQL3_2_DParser.update_nested_column_specs_return retval = new PLSQL3_2_DParser.update_nested_column_specs_return();
        retval.start = input.LT(1);

        int update_nested_column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1361=null;
        PLSQL3_2_DParser.update_nested_column_spec_return update_nested_column_spec1360 =null;

        PLSQL3_2_DParser.update_nested_column_spec_return update_nested_column_spec1362 =null;


        Object COMMA1361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1649:2: ( update_nested_column_spec ( COMMA update_nested_column_spec )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1649:4: update_nested_column_spec ( COMMA update_nested_column_spec )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs8286);
            update_nested_column_spec1360=update_nested_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1360.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1649:30: ( COMMA update_nested_column_spec )*
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==COMMA) ) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1649:32: COMMA update_nested_column_spec
            	    {
            	    COMMA1361=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_update_nested_column_specs8290); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1361_tree = 
            	    cast(Object)adaptor.create(COMMA1361)
            	    ;
            	    adaptor.addChild(root_0, COMMA1361_tree);
            	    }

            	    pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs8292);
            	    update_nested_column_spec1362=update_nested_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1362.getTree());

            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_nested_column_specs"," ",248);
            if ( state.backtracking>0 ) { memoize(input, 248, update_nested_column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_nested_column_specs"


    public static class update_nested_column_spec_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_nested_column_spec"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1652:1: update_nested_column_spec : LPAREN column_specs RPAREN EQ subquery ;
    public final PLSQL3_2_DParser.update_nested_column_spec_return update_nested_column_spec()  {
        debug(trace_rules) writeln("Entering rule:","update_nested_column_spec"," ",249);
        PLSQL3_2_DParser.update_nested_column_spec_return retval = new PLSQL3_2_DParser.update_nested_column_spec_return();
        retval.start = input.LT(1);

        int update_nested_column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1363=null;
        Token RPAREN1365=null;
        Token EQ1366=null;
        PLSQL3_2_DParser.column_specs_return column_specs1364 =null;

        PLSQL3_2_DParser.subquery_return subquery1367 =null;


        Object LPAREN1363_tree=null;
        Object RPAREN1365_tree=null;
        Object EQ1366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1653:2: ( LPAREN column_specs RPAREN EQ subquery )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1653:4: LPAREN column_specs RPAREN EQ subquery
            {
            root_0 = cast(Object)adaptor.nil();


            LPAREN1363=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_update_nested_column_spec8306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1363_tree = 
            cast(Object)adaptor.create(LPAREN1363)
            ;
            adaptor.addChild(root_0, LPAREN1363_tree);
            }

            pushFollow(FOLLOW_column_specs_in_update_nested_column_spec8308);
            column_specs1364=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1364.getTree());

            RPAREN1365=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_update_nested_column_spec8310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1365_tree = 
            cast(Object)adaptor.create(RPAREN1365)
            ;
            adaptor.addChild(root_0, RPAREN1365_tree);
            }

            EQ1366=cast(Token)match(input,EQ,FOLLOW_EQ_in_update_nested_column_spec8312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1366_tree = 
            cast(Object)adaptor.create(EQ1366)
            ;
            adaptor.addChild(root_0, EQ1366_tree);
            }

            pushFollow(FOLLOW_subquery_in_update_nested_column_spec8314);
            subquery1367=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1367.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","update_nested_column_spec"," ",249);
            if ( state.backtracking>0 ) { memoize(input, 249, update_nested_column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_nested_column_spec"


    public static class delete_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delete_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1656:1: delete_command : 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final PLSQL3_2_DParser.delete_command_return delete_command()  {
        debug(trace_rules) writeln("Entering rule:","delete_command"," ",250);
        PLSQL3_2_DParser.delete_command_return retval = new PLSQL3_2_DParser.delete_command_return();
        retval.start = input.LT(1);

        int delete_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1368=null;
        Token string_literal1369=null;
        Token string_literal1371=null;
        PLSQL3_2_DParser.selected_table_return selected_table1370 =null;

        PLSQL3_2_DParser.keyCURRENT_OF_return keyCURRENT_OF1372 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name1373 =null;

        PLSQL3_2_DParser.sql_condition_return sql_condition1374 =null;

        PLSQL3_2_DParser.returning_clause_return returning_clause1375 =null;


        Object string_literal1368_tree=null;
        Object string_literal1369_tree=null;
        Object string_literal1371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1657:2: ( 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1657:4: 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1368=cast(Token)match(input,91,FOLLOW_91_in_delete_command8325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1368_tree = 
            cast(Object)adaptor.create(string_literal1368)
            ;
            adaptor.addChild(root_0, string_literal1368_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1657:13: ( 'FROM' )?
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==106) ) {
                alt360=1;
            }
            switch (alt360) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1657:15: 'FROM'
                   {
                   string_literal1369=cast(Token)match(input,106,FOLLOW_106_in_delete_command8329); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1369_tree = 
                   cast(Object)adaptor.create(string_literal1369)
                   ;
                   adaptor.addChild(root_0, string_literal1369_tree);
                   }

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_selected_table_in_delete_command8334);
            selected_table1370=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1370.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1658:3: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt362=2;
            int LA362_0 = input.LA(1);

            if ( (LA362_0==183) ) {
                alt362=1;
            }
            switch (alt362) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1658:5: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                   {
                   string_literal1371=cast(Token)match(input,183,FOLLOW_183_in_delete_command8340); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1371_tree = 
                   cast(Object)adaptor.create(string_literal1371)
                   ;
                   adaptor.addChild(root_0, string_literal1371_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1659:4: ( keyCURRENT_OF cursor_name | sql_condition )
                   int alt361=2;
                   int LA361_0 = input.LA(1);

                   if ( (LA361_0==ID) ) {
                       switch ( input.LA(2) ) {
                       case ID:
                           {
                           int LA361_3 = input.LA(3);

                           if ( (LA361_3==EOF||LA361_3==SEMI||(LA361_3 >=158  && LA361_3<=159)) ) {
                               alt361=1;
                           }
                           else if ( (LA361_3==DOUBLEQUOTED_STRING||LA361_3==ID||LA361_3==LPAREN||LA361_3==MINUS||LA361_3==NUMBER||LA361_3==PLUS||LA361_3==QUOTED_STRING||LA361_3==76||LA361_3==93||LA361_3==101||LA361_3==136||LA361_3==142||LA361_3==162||LA361_3==165||LA361_3==169||LA361_3==174) ) {
                               alt361=2;
                           }
                           else {
                               if (state.backtracking>0) {state.failed=true; return retval;}
                               NoViableAltException nvae =
                                   new NoViableAltException("", 361, 3, input);

                               throw nvae;

                           }
                           }
                           break;
                       case ASTERISK:
                       case DIVIDE:
                       case DOT:
                       case DOUBLEVERTBAR:
                       case EQ:
                       case EXPONENT:
                       case GEQ:
                       case GTH:
                       case LEQ:
                       case LPAREN:
                       case LTH:
                       case MINUS:
                       case NOT_EQ:
                       case PLUS:
                       case 68:
                       case 113:
                       case 120:
                       case 121:
                       case 134:
                           {
                           alt361=2;
                           }
                           break;
                       case DOUBLEQUOTED_STRING:
                           {
                           alt361=1;
                           }
                           break;
                       default:
                           if (state.backtracking>0) {state.failed=true; return retval;}
                           NoViableAltException nvae = 
                               new NoViableAltException("", 361, 1, input);

                           throw nvae;

                       }

                   }
                   else if ( (LA361_0==DOUBLEQUOTED_STRING||LA361_0==LPAREN||LA361_0==MINUS||LA361_0==NUMBER||LA361_0==PLUS||LA361_0==QUOTED_STRING||LA361_0==63||LA361_0==76||LA361_0==93||(LA361_0 >=100  && LA361_0<=101)||LA361_0==134||LA361_0==136||LA361_0==151||LA361_0==162||LA361_0==165||LA361_0==169||LA361_0==174) ) {
                       alt361=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return retval;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 361, 0, input);

                       throw nvae;

                   }
                   switch (alt361) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1659:6: keyCURRENT_OF cursor_name
                          {
                          pushFollow(FOLLOW_keyCURRENT_OF_in_delete_command8347);
                          keyCURRENT_OF1372=keyCURRENT_OF();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1372.getTree());

                          pushFollow(FOLLOW_cursor_name_in_delete_command8349);
                          cursor_name1373=cursor_name();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1373.getTree());

                          }
                          break;
                      case 2 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1660:6: sql_condition
                          {
                          pushFollow(FOLLOW_sql_condition_in_delete_command8356);
                          sql_condition1374=sql_condition();

                          state._fsp--;
                          if (state.failed) return retval;
                          if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1374.getTree());

                          }
                          break;

                       default:
                   }


                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1663:3: ( returning_clause )?
            int alt363=2;
            int LA363_0 = input.LA(1);

            if ( ((LA363_0 >=158  && LA363_0<=159)) ) {
                alt363=1;
            }
            switch (alt363) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1663:5: returning_clause
                   {
                   pushFollow(FOLLOW_returning_clause_in_delete_command8372);
                   returning_clause1375=returning_clause();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1375.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","delete_command"," ",250);
            if ( state.backtracking>0 ) { memoize(input, 250, delete_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delete_command"


    public static class returning_clause_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "returning_clause"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1666:1: returning_clause : ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues ;
    public final PLSQL3_2_DParser.returning_clause_return returning_clause()  {
        debug(trace_rules) writeln("Entering rule:","returning_clause"," ",251);
        PLSQL3_2_DParser.returning_clause_return retval = new PLSQL3_2_DParser.returning_clause_return();
        retval.start = input.LT(1);

        int returning_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1381=null;
        PLSQL3_2_DParser.keyRETURN_return keyRETURN1376 =null;

        PLSQL3_2_DParser.keyRETURNING_return keyRETURNING1377 =null;

        PLSQL3_2_DParser.select_list_return select_list1378 =null;

        PLSQL3_2_DParser.keyBULK_return keyBULK1379 =null;

        PLSQL3_2_DParser.keyCOLLECT_return keyCOLLECT1380 =null;

        PLSQL3_2_DParser.lvalues_return lvalues1382 =null;


        Object string_literal1381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:2: ( ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:4: ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues
            {
            root_0 = cast(Object)adaptor.nil();


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:4: ( keyRETURN | keyRETURNING )
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==158) ) {
                alt364=1;
            }
            else if ( (LA364_0==159) ) {
                alt364=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);

                throw nvae;

            }
            switch (alt364) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:6: keyRETURN
                   {
                   pushFollow(FOLLOW_keyRETURN_in_returning_clause8388);
                   keyRETURN1376=keyRETURN();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN1376.getTree());

                   }
                   break;
               case 2 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:18: keyRETURNING
                   {
                   pushFollow(FOLLOW_keyRETURNING_in_returning_clause8392);
                   keyRETURNING1377=keyRETURNING();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURNING1377.getTree());

                   }
                   break;

                default:
            }


            pushFollow(FOLLOW_select_list_in_returning_clause8396);
            select_list1378=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list1378.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:45: ( keyBULK keyCOLLECT )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==ID) ) {
                alt365=1;
            }
            switch (alt365) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1667:47: keyBULK keyCOLLECT
                   {
                   pushFollow(FOLLOW_keyBULK_in_returning_clause8400);
                   keyBULK1379=keyBULK();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK1379.getTree());

                   pushFollow(FOLLOW_keyCOLLECT_in_returning_clause8402);
                   keyCOLLECT1380=keyCOLLECT();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT1380.getTree());

                   }
                   break;

                default:
            }


            string_literal1381=cast(Token)match(input,119,FOLLOW_119_in_returning_clause8407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1381_tree = 
            cast(Object)adaptor.create(string_literal1381)
            ;
            adaptor.addChild(root_0, string_literal1381_tree);
            }

            pushFollow(FOLLOW_lvalues_in_returning_clause8409);
            lvalues1382=lvalues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues1382.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","returning_clause"," ",251);
            if ( state.backtracking>0 ) { memoize(input, 251, returning_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "returning_clause"


    public static class set_transaction_command_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_transaction_command"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1670:1: set_transaction_command : 'SET' keyTRANSACTION keyREAD keyONLY ;
    public final PLSQL3_2_DParser.set_transaction_command_return set_transaction_command()  {
        debug(trace_rules) writeln("Entering rule:","set_transaction_command"," ",252);
        PLSQL3_2_DParser.set_transaction_command_return retval = new PLSQL3_2_DParser.set_transaction_command_return();
        retval.start = input.LT(1);

        int set_transaction_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1383=null;
        PLSQL3_2_DParser.keyTRANSACTION_return keyTRANSACTION1384 =null;

        PLSQL3_2_DParser.keyREAD_return keyREAD1385 =null;

        PLSQL3_2_DParser.keyONLY_return keyONLY1386 =null;


        Object string_literal1383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1671:2: ( 'SET' keyTRANSACTION keyREAD keyONLY )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1671:4: 'SET' keyTRANSACTION keyREAD keyONLY
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1383=cast(Token)match(input,166,FOLLOW_166_in_set_transaction_command8420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1383_tree = 
            cast(Object)adaptor.create(string_literal1383)
            ;
            adaptor.addChild(root_0, string_literal1383_tree);
            }

            pushFollow(FOLLOW_keyTRANSACTION_in_set_transaction_command8422);
            keyTRANSACTION1384=keyTRANSACTION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTRANSACTION1384.getTree());

            pushFollow(FOLLOW_keyREAD_in_set_transaction_command8424);
            keyREAD1385=keyREAD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREAD1385.getTree());

            pushFollow(FOLLOW_keyONLY_in_set_transaction_command8426);
            keyONLY1386=keyONLY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1386.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","set_transaction_command"," ",252);
            if ( state.backtracking>0 ) { memoize(input, 252, set_transaction_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_transaction_command"


    public static class close_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "close_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1674:1: close_statement : keyCLOSE cursor_name ;
    public final PLSQL3_2_DParser.close_statement_return close_statement()  {
        debug(trace_rules) writeln("Entering rule:","close_statement"," ",253);
        PLSQL3_2_DParser.close_statement_return retval = new PLSQL3_2_DParser.close_statement_return();
        retval.start = input.LT(1);

        int close_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.keyCLOSE_return keyCLOSE1387 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name1388 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1675:2: ( keyCLOSE cursor_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1675:4: keyCLOSE cursor_name
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyCLOSE_in_close_statement8437);
            keyCLOSE1387=keyCLOSE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCLOSE1387.getTree());

            pushFollow(FOLLOW_cursor_name_in_close_statement8439);
            cursor_name1388=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1388.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","close_statement"," ",253);
            if ( state.backtracking>0 ) { memoize(input, 253, close_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "close_statement"


    public static class fetch_destination_item_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_destination_item"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1678:1: fetch_destination_item : identifier ( DOT identifier )* ;
    public final PLSQL3_2_DParser.fetch_destination_item_return fetch_destination_item()  {
        debug(trace_rules) writeln("Entering rule:","fetch_destination_item"," ",254);
        PLSQL3_2_DParser.fetch_destination_item_return retval = new PLSQL3_2_DParser.fetch_destination_item_return();
        retval.start = input.LT(1);

        int fetch_destination_item_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1390=null;
        PLSQL3_2_DParser.identifier_return identifier1389 =null;

        PLSQL3_2_DParser.identifier_return identifier1391 =null;


        Object DOT1390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1679:2: ( identifier ( DOT identifier )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1681:2: identifier ( DOT identifier )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_fetch_destination_item8454);
            identifier1389=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1389.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1681:13: ( DOT identifier )*
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==DOT) ) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1681:14: DOT identifier
            	    {
            	    DOT1390=cast(Token)match(input,DOT,FOLLOW_DOT_in_fetch_destination_item8457); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT1390_tree = 
            	    cast(Object)adaptor.create(DOT1390)
            	    ;
            	    adaptor.addChild(root_0, DOT1390_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_fetch_destination_item8459);
            	    identifier1391=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1391.getTree());

            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","fetch_destination_item"," ",254);
            if ( state.backtracking>0 ) { memoize(input, 254, fetch_destination_item_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fetch_destination_item"


    public static class fetch_destination_list_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_destination_list"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1684:2: fetch_destination_list : fetch_destination_item ( COMMA fetch_destination_item )* ;
    public final PLSQL3_2_DParser.fetch_destination_list_return fetch_destination_list()  {
        debug(trace_rules) writeln("Entering rule:","fetch_destination_list"," ",255);
        PLSQL3_2_DParser.fetch_destination_list_return retval = new PLSQL3_2_DParser.fetch_destination_list_return();
        retval.start = input.LT(1);

        int fetch_destination_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1393=null;
        PLSQL3_2_DParser.fetch_destination_item_return fetch_destination_item1392 =null;

        PLSQL3_2_DParser.fetch_destination_item_return fetch_destination_item1394 =null;


        Object COMMA1393_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1685:3: ( fetch_destination_item ( COMMA fetch_destination_item )* )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1685:4: fetch_destination_item ( COMMA fetch_destination_item )*
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_fetch_destination_item_in_fetch_destination_list8475);
            fetch_destination_item1392=fetch_destination_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_destination_item1392.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1685:27: ( COMMA fetch_destination_item )*
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==COMMA) ) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1685:29: COMMA fetch_destination_item
            	    {
            	    COMMA1393=cast(Token)match(input,COMMA,FOLLOW_COMMA_in_fetch_destination_list8479); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1393_tree = 
            	    cast(Object)adaptor.create(COMMA1393)
            	    ;
            	    adaptor.addChild(root_0, COMMA1393_tree);
            	    }

            	    pushFollow(FOLLOW_fetch_destination_item_in_fetch_destination_list8481);
            	    fetch_destination_item1394=fetch_destination_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_destination_item1394.getTree());

            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","fetch_destination_list"," ",255);
            if ( state.backtracking>0 ) { memoize(input, 255, fetch_destination_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fetch_destination_list"


    public static class fetch_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1687:1: fetch_statement : 'FETCH' cursor_name 'INTO' fetch_destination_list ;
    public final PLSQL3_2_DParser.fetch_statement_return fetch_statement()  {
        debug(trace_rules) writeln("Entering rule:","fetch_statement"," ",256);
        PLSQL3_2_DParser.fetch_statement_return retval = new PLSQL3_2_DParser.fetch_statement_return();
        retval.start = input.LT(1);

        int fetch_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1395=null;
        Token string_literal1397=null;
        PLSQL3_2_DParser.cursor_name_return cursor_name1396 =null;

        PLSQL3_2_DParser.fetch_destination_list_return fetch_destination_list1398 =null;


        Object string_literal1395_tree=null;
        Object string_literal1397_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1688:2: ( 'FETCH' cursor_name 'INTO' fetch_destination_list )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1688:4: 'FETCH' cursor_name 'INTO' fetch_destination_list
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1395=cast(Token)match(input,102,FOLLOW_102_in_fetch_statement8493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1395_tree = 
            cast(Object)adaptor.create(string_literal1395)
            ;
            adaptor.addChild(root_0, string_literal1395_tree);
            }

            pushFollow(FOLLOW_cursor_name_in_fetch_statement8495);
            cursor_name1396=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1396.getTree());

            string_literal1397=cast(Token)match(input,119,FOLLOW_119_in_fetch_statement8497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1397_tree = 
            cast(Object)adaptor.create(string_literal1397)
            ;
            adaptor.addChild(root_0, string_literal1397_tree);
            }

            pushFollow(FOLLOW_fetch_destination_list_in_fetch_statement8499);
            fetch_destination_list1398=fetch_destination_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_destination_list1398.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","fetch_statement"," ",256);
            if ( state.backtracking>0 ) { memoize(input, 256, fetch_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fetch_statement"


    public static class lock_table_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_table_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1692:1: lock_table_statement : 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? ;
    public final PLSQL3_2_DParser.lock_table_statement_return lock_table_statement()  {
        debug(trace_rules) writeln("Entering rule:","lock_table_statement"," ",257);
        PLSQL3_2_DParser.lock_table_statement_return retval = new PLSQL3_2_DParser.lock_table_statement_return();
        retval.start = input.LT(1);

        int lock_table_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1399=null;
        Token string_literal1400=null;
        Token string_literal1402=null;
        Token string_literal1404=null;
        Token string_literal1405=null;
        PLSQL3_2_DParser.table_reference_list_return table_reference_list1401 =null;

        PLSQL3_2_DParser.lock_mode_return lock_mode1403 =null;


        Object string_literal1399_tree=null;
        Object string_literal1400_tree=null;
        Object string_literal1402_tree=null;
        Object string_literal1404_tree=null;
        Object string_literal1405_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1693:2: ( 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1693:4: 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )?
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1399=cast(Token)match(input,122,FOLLOW_122_in_lock_table_statement8512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1399_tree = 
            cast(Object)adaptor.create(string_literal1399)
            ;
            adaptor.addChild(root_0, string_literal1399_tree);
            }

            string_literal1400=cast(Token)match(input,171,FOLLOW_171_in_lock_table_statement8514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1400_tree = 
            cast(Object)adaptor.create(string_literal1400)
            ;
            adaptor.addChild(root_0, string_literal1400_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_lock_table_statement8516);
            table_reference_list1401=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1401.getTree());

            string_literal1402=cast(Token)match(input,113,FOLLOW_113_in_lock_table_statement8520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1402_tree = 
            cast(Object)adaptor.create(string_literal1402)
            ;
            adaptor.addChild(root_0, string_literal1402_tree);
            }

            pushFollow(FOLLOW_lock_mode_in_lock_table_statement8522);
            lock_mode1403=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_mode1403.getTree());

            string_literal1404=cast(Token)match(input,127,FOLLOW_127_in_lock_table_statement8524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1404_tree = 
            cast(Object)adaptor.create(string_literal1404)
            ;
            adaptor.addChild(root_0, string_literal1404_tree);
            }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1694:25: ( 'NOWAIT' )?
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( (LA368_0==135) ) {
                alt368=1;
            }
            switch (alt368) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1694:27: 'NOWAIT'
                   {
                   string_literal1405=cast(Token)match(input,135,FOLLOW_135_in_lock_table_statement8528); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1405_tree = 
                   cast(Object)adaptor.create(string_literal1405)
                   ;
                   adaptor.addChild(root_0, string_literal1405_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lock_table_statement"," ",257);
            if ( state.backtracking>0 ) { memoize(input, 257, lock_table_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"


    public static class lock_mode_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_mode"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1697:1: lock_mode : ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' );
    public final PLSQL3_2_DParser.lock_mode_return lock_mode()  {
        debug(trace_rules) writeln("Entering rule:","lock_mode"," ",258);
        PLSQL3_2_DParser.lock_mode_return retval = new PLSQL3_2_DParser.lock_mode_return();
        retval.start = input.LT(1);

        int lock_mode_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1406=null;
        Token string_literal1407=null;
        Token string_literal1408=null;
        Token string_literal1409=null;
        Token string_literal1410=null;
        Token string_literal1411=null;
        Token string_literal1412=null;
        Token string_literal1413=null;
        Token string_literal1414=null;
        Token string_literal1415=null;
        Token string_literal1416=null;

        Object string_literal1406_tree=null;
        Object string_literal1407_tree=null;
        Object string_literal1408_tree=null;
        Object string_literal1409_tree=null;
        Object string_literal1410_tree=null;
        Object string_literal1411_tree=null;
        Object string_literal1412_tree=null;
        Object string_literal1413_tree=null;
        Object string_literal1414_tree=null;
        Object string_literal1415_tree=null;
        Object string_literal1416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1698:2: ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' )
            int alt369=6;
            switch ( input.LA(1) ) {
            case 161:
                {
                int LA369_1 = input.LA(2);

                if ( (LA369_1==167) ) {
                    alt369=1;
                }
                else if ( (LA369_1==99) ) {
                    alt369=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 1, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                switch ( input.LA(2) ) {
                case 177:
                    {
                    alt369=3;
                    }
                    break;
                case 161:
                    {
                    alt369=5;
                    }
                    break;
                case 127:
                    {
                    alt369=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae = 
                        new NoViableAltException("", 369, 2, input);

                    throw nvae;

                }

                }
                break;
            case 99:
                {
                alt369=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae = 
                    new NoViableAltException("", 369, 0, input);

                throw nvae;

            }

            switch (alt369) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1698:4: 'ROW' 'SHARE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1406=cast(Token)match(input,161,FOLLOW_161_in_lock_mode8542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1406_tree = 
                    cast(Object)adaptor.create(string_literal1406)
                    ;
                    adaptor.addChild(root_0, string_literal1406_tree);
                    }

                    string_literal1407=cast(Token)match(input,167,FOLLOW_167_in_lock_mode8544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1407_tree = 
                    cast(Object)adaptor.create(string_literal1407)
                    ;
                    adaptor.addChild(root_0, string_literal1407_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1699:4: 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1408=cast(Token)match(input,161,FOLLOW_161_in_lock_mode8549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1408_tree = 
                    cast(Object)adaptor.create(string_literal1408)
                    ;
                    adaptor.addChild(root_0, string_literal1408_tree);
                    }

                    string_literal1409=cast(Token)match(input,99,FOLLOW_99_in_lock_mode8551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1409_tree = 
                    cast(Object)adaptor.create(string_literal1409)
                    ;
                    adaptor.addChild(root_0, string_literal1409_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1700:4: 'SHARE' 'UPDATE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1410=cast(Token)match(input,167,FOLLOW_167_in_lock_mode8556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1410_tree = 
                    cast(Object)adaptor.create(string_literal1410)
                    ;
                    adaptor.addChild(root_0, string_literal1410_tree);
                    }

                    string_literal1411=cast(Token)match(input,177,FOLLOW_177_in_lock_mode8558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1411_tree = 
                    cast(Object)adaptor.create(string_literal1411)
                    ;
                    adaptor.addChild(root_0, string_literal1411_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1701:4: 'SHARE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1412=cast(Token)match(input,167,FOLLOW_167_in_lock_mode8563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1412_tree = 
                    cast(Object)adaptor.create(string_literal1412)
                    ;
                    adaptor.addChild(root_0, string_literal1412_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1702:4: 'SHARE' 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1413=cast(Token)match(input,167,FOLLOW_167_in_lock_mode8568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1413_tree = 
                    cast(Object)adaptor.create(string_literal1413)
                    ;
                    adaptor.addChild(root_0, string_literal1413_tree);
                    }

                    string_literal1414=cast(Token)match(input,161,FOLLOW_161_in_lock_mode8570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1414_tree = 
                    cast(Object)adaptor.create(string_literal1414)
                    ;
                    adaptor.addChild(root_0, string_literal1414_tree);
                    }

                    string_literal1415=cast(Token)match(input,99,FOLLOW_99_in_lock_mode8572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1415_tree = 
                    cast(Object)adaptor.create(string_literal1415)
                    ;
                    adaptor.addChild(root_0, string_literal1415_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1703:4: 'EXCLUSIVE'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1416=cast(Token)match(input,99,FOLLOW_99_in_lock_mode8577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1416_tree = 
                    cast(Object)adaptor.create(string_literal1416)
                    ;
                    adaptor.addChild(root_0, string_literal1416_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","lock_mode"," ",258);
            if ( state.backtracking>0 ) { memoize(input, 258, lock_mode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_mode"


    public static class open_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "open_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1706:1: open_statement : keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? ;
    public final PLSQL3_2_DParser.open_statement_return open_statement()  {
        debug(trace_rules) writeln("Entering rule:","open_statement"," ",259);
        PLSQL3_2_DParser.open_statement_return retval = new PLSQL3_2_DParser.open_statement_return();
        retval.start = input.LT(1);

        int open_statement_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1419=null;
        Token RPAREN1421=null;
        PLSQL3_2_DParser.keyOPEN_return keyOPEN1417 =null;

        PLSQL3_2_DParser.cursor_name_return cursor_name1418 =null;

        PLSQL3_2_DParser.plsql_expressions_return plsql_expressions1420 =null;


        Object LPAREN1419_tree=null;
        Object RPAREN1421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1707:2: ( keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1707:4: keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyOPEN_in_open_statement8588);
            keyOPEN1417=keyOPEN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOPEN1417.getTree());

            pushFollow(FOLLOW_cursor_name_in_open_statement8590);
            cursor_name1418=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1418.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1707:24: ( LPAREN plsql_expressions RPAREN )?
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==LPAREN) ) {
                alt370=1;
            }
            switch (alt370) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1707:26: LPAREN plsql_expressions RPAREN
                   {
                   LPAREN1419=cast(Token)match(input,LPAREN,FOLLOW_LPAREN_in_open_statement8594); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   LPAREN1419_tree = 
                   cast(Object)adaptor.create(LPAREN1419)
                   ;
                   adaptor.addChild(root_0, LPAREN1419_tree);
                   }

                   pushFollow(FOLLOW_plsql_expressions_in_open_statement8596);
                   plsql_expressions1420=plsql_expressions();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1420.getTree());

                   RPAREN1421=cast(Token)match(input,RPAREN,FOLLOW_RPAREN_in_open_statement8598); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   RPAREN1421_tree = 
                   cast(Object)adaptor.create(RPAREN1421)
                   ;
                   adaptor.addChild(root_0, RPAREN1421_tree);
                   }

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","open_statement"," ",259);
            if ( state.backtracking>0 ) { memoize(input, 259, open_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "open_statement"


    public static class rollback_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollback_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1710:1: rollback_statement : keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? ;
    public final PLSQL3_2_DParser.rollback_statement_return rollback_statement()  {
        debug(trace_rules) writeln("Entering rule:","rollback_statement"," ",260);
        PLSQL3_2_DParser.rollback_statement_return retval = new PLSQL3_2_DParser.rollback_statement_return();
        retval.start = input.LT(1);

        int rollback_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1424=null;
        Token string_literal1425=null;
        Token string_literal1427=null;
        PLSQL3_2_DParser.keyROLLBACK_return keyROLLBACK1422 =null;

        PLSQL3_2_DParser.keyWORK_return keyWORK1423 =null;

        PLSQL3_2_DParser.savepoint_name_return savepoint_name1426 =null;

        PLSQL3_2_DParser.quoted_string_return quoted_string1428 =null;


        Object string_literal1424_tree=null;
        Object string_literal1425_tree=null;
        Object string_literal1427_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1711:2: ( keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1711:4: keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )?
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_keyROLLBACK_in_rollback_statement8612);
            keyROLLBACK1422=keyROLLBACK();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLBACK1422.getTree());

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1711:16: ( keyWORK )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==ID) ) {
                alt371=1;
            }
            switch (alt371) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1711:18: keyWORK
                   {
                   pushFollow(FOLLOW_keyWORK_in_rollback_statement8616);
                   keyWORK1423=keyWORK();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWORK1423.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1712:3: ( 'TO' ( 'SAVEPOINT' )? savepoint_name )?
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==173) ) {
                alt373=1;
            }
            switch (alt373) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1712:5: 'TO' ( 'SAVEPOINT' )? savepoint_name
                   {
                   string_literal1424=cast(Token)match(input,173,FOLLOW_173_in_rollback_statement8625); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1424_tree = 
                   cast(Object)adaptor.create(string_literal1424)
                   ;
                   adaptor.addChild(root_0, string_literal1424_tree);
                   }

                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1712:10: ( 'SAVEPOINT' )?
                   int alt372=2;
                   int LA372_0 = input.LA(1);

                   if ( (LA372_0==164) ) {
                       alt372=1;
                   }
                   switch (alt372) {
                      case 1 :
                          // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1712:12: 'SAVEPOINT'
                          {
                          string_literal1425=cast(Token)match(input,164,FOLLOW_164_in_rollback_statement8629); if (state.failed) return retval;
                          if ( state.backtracking==0 ) {
                          string_literal1425_tree = 
                          cast(Object)adaptor.create(string_literal1425)
                          ;
                          adaptor.addChild(root_0, string_literal1425_tree);
                          }

                          }
                          break;

                       default:
                   }


                   pushFollow(FOLLOW_savepoint_name_in_rollback_statement8634);
                   savepoint_name1426=savepoint_name();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1426.getTree());

                   }
                   break;

                default:
            }


            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1713:3: ( 'COMMENT' quoted_string )?
            int alt374=2;
            int LA374_0 = input.LA(1);

            if ( (LA374_0==80) ) {
                alt374=1;
            }
            switch (alt374) {
               case 1 :
                   // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1713:5: 'COMMENT' quoted_string
                   {
                   string_literal1427=cast(Token)match(input,80,FOLLOW_80_in_rollback_statement8643); if (state.failed) return retval;
                   if ( state.backtracking==0 ) {
                   string_literal1427_tree = 
                   cast(Object)adaptor.create(string_literal1427)
                   ;
                   adaptor.addChild(root_0, string_literal1427_tree);
                   }

                   pushFollow(FOLLOW_quoted_string_in_rollback_statement8645);
                   quoted_string1428=quoted_string();

                   state._fsp--;
                   if (state.failed) return retval;
                   if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string1428.getTree());

                   }
                   break;

                default:
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","rollback_statement"," ",260);
            if ( state.backtracking>0 ) { memoize(input, 260, rollback_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rollback_statement"


    public static class savepoint_statement_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_statement"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1716:1: savepoint_statement : 'SAVEPOINT' savepoint_name ;
    public final PLSQL3_2_DParser.savepoint_statement_return savepoint_statement()  {
        debug(trace_rules) writeln("Entering rule:","savepoint_statement"," ",261);
        PLSQL3_2_DParser.savepoint_statement_return retval = new PLSQL3_2_DParser.savepoint_statement_return();
        retval.start = input.LT(1);

        int savepoint_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1429=null;
        PLSQL3_2_DParser.savepoint_name_return savepoint_name1430 =null;


        Object string_literal1429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1717:2: ( 'SAVEPOINT' savepoint_name )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1717:4: 'SAVEPOINT' savepoint_name
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1429=cast(Token)match(input,164,FOLLOW_164_in_savepoint_statement8659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1429_tree = 
            cast(Object)adaptor.create(string_literal1429)
            ;
            adaptor.addChild(root_0, string_literal1429_tree);
            }

            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement8661);
            savepoint_name1430=savepoint_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1430.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","savepoint_statement"," ",261);
            if ( state.backtracking>0 ) { memoize(input, 261, savepoint_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"


    public static class savepoint_name_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_name"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1720:1: savepoint_name : identifier ;
    public final PLSQL3_2_DParser.savepoint_name_return savepoint_name()  {
        debug(trace_rules) writeln("Entering rule:","savepoint_name"," ",262);
        PLSQL3_2_DParser.savepoint_name_return retval = new PLSQL3_2_DParser.savepoint_name_return();
        retval.start = input.LT(1);

        int savepoint_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3_2_DParser.identifier_return identifier1431 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1721:2: ( identifier )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1721:4: identifier
            {
            root_0 = cast(Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_savepoint_name8672);
            identifier1431=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1431.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","savepoint_name"," ",262);
            if ( state.backtracking>0 ) { memoize(input, 262, savepoint_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "savepoint_name"


    public static class identifier_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1724:1: identifier : ( ID | DOUBLEQUOTED_STRING );
    public final PLSQL3_2_DParser.identifier_return identifier()  {
        debug(trace_rules) writeln("Entering rule:","identifier"," ",263);
        PLSQL3_2_DParser.identifier_return retval = new PLSQL3_2_DParser.identifier_return();
        retval.start = input.LT(1);

        int identifier_StartIndex = input.index();

        Object root_0 = null;

        Token set1432=null;

        Object set1432_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1725:2: ( ID | DOUBLEQUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:
            {
            root_0 = cast(Object)adaptor.nil();


            set1432=cast(Token)input.LT(1);

            if ( input.LA(1)==DOUBLEQUOTED_STRING||input.LA(1)==ID ) {
                input.consume();
                debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                cast(Object)adaptor.create(set1432)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","identifier"," ",263);
            if ( state.backtracking>0 ) { memoize(input, 263, identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "identifier"


    public static class quoted_string_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quoted_string"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1730:1: quoted_string : QUOTED_STRING ;
    public final PLSQL3_2_DParser.quoted_string_return quoted_string()  {
        debug(trace_rules) writeln("Entering rule:","quoted_string"," ",264);
        PLSQL3_2_DParser.quoted_string_return retval = new PLSQL3_2_DParser.quoted_string_return();
        retval.start = input.LT(1);

        int quoted_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1433=null;

        Object QUOTED_STRING1433_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1731:2: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1731:4: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING1433=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_quoted_string8704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1433_tree = 
            cast(Object)adaptor.create(QUOTED_STRING1433)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1433_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","quoted_string"," ",264);
            if ( state.backtracking>0 ) { memoize(input, 264, quoted_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "quoted_string"


    public static class match_string_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "match_string"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1734:1: match_string : QUOTED_STRING ;
    public final PLSQL3_2_DParser.match_string_return match_string()  {
        debug(trace_rules) writeln("Entering rule:","match_string"," ",265);
        PLSQL3_2_DParser.match_string_return retval = new PLSQL3_2_DParser.match_string_return();
        retval.start = input.LT(1);

        int match_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1434=null;

        Object QUOTED_STRING1434_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1735:2: ( QUOTED_STRING )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1735:4: QUOTED_STRING
            {
            root_0 = cast(Object)adaptor.nil();


            QUOTED_STRING1434=cast(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_match_string8715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1434_tree = 
            cast(Object)adaptor.create(QUOTED_STRING1434)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1434_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","match_string"," ",265);
            if ( state.backtracking>0 ) { memoize(input, 265, match_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "match_string"


    public static class keyA_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyA"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1737:1: keyA :{...}? ID ;
    public final PLSQL3_2_DParser.keyA_return keyA()  {
        debug(trace_rules) writeln("Entering rule:","keyA"," ",266);
        PLSQL3_2_DParser.keyA_return retval = new PLSQL3_2_DParser.keyA_return();
        retval.start = input.LT(1);

        int keyA_StartIndex = input.index();

        Object root_0 = null;

        Token ID1435=null;

        Object ID1435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1737:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1737:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "A")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyA", "toUpper(input.LT(1).getText)== \"A\"");
            }

            ID1435=cast(Token)match(input,ID,FOLLOW_ID_in_keyA8755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1435_tree = 
            cast(Object)adaptor.create(ID1435)
            ;
            adaptor.addChild(root_0, ID1435_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyA"," ",266);
            if ( state.backtracking>0 ) { memoize(input, 266, keyA_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyA"


    public static class keyAUTOMATIC_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyAUTOMATIC"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1738:1: keyAUTOMATIC :{...}? ID ;
    public final PLSQL3_2_DParser.keyAUTOMATIC_return keyAUTOMATIC()  {
        debug(trace_rules) writeln("Entering rule:","keyAUTOMATIC"," ",267);
        PLSQL3_2_DParser.keyAUTOMATIC_return retval = new PLSQL3_2_DParser.keyAUTOMATIC_return();
        retval.start = input.LT(1);

        int keyAUTOMATIC_StartIndex = input.index();

        Object root_0 = null;

        Token ID1436=null;

        Object ID1436_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1738:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1738:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "AUTOMATIC")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTOMATIC", "toUpper(input.LT(1).getText)== \"AUTOMATIC\"");
            }

            ID1436=cast(Token)match(input,ID,FOLLOW_ID_in_keyAUTOMATIC8784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1436_tree = 
            cast(Object)adaptor.create(ID1436)
            ;
            adaptor.addChild(root_0, ID1436_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyAUTOMATIC"," ",267);
            if ( state.backtracking>0 ) { memoize(input, 267, keyAUTOMATIC_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyAUTOMATIC"


    public static class keyCOUNT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCOUNT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1739:1: keyCOUNT :{...}? ID ;
    public final PLSQL3_2_DParser.keyCOUNT_return keyCOUNT()  {
        debug(trace_rules) writeln("Entering rule:","keyCOUNT"," ",268);
        PLSQL3_2_DParser.keyCOUNT_return retval = new PLSQL3_2_DParser.keyCOUNT_return();
        retval.start = input.LT(1);

        int keyCOUNT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1437=null;

        Object ID1437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1739:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1739:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "COUNT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOUNT", "toUpper(input.LT(1).getText)== \"COUNT\"");
            }

            ID1437=cast(Token)match(input,ID,FOLLOW_ID_in_keyCOUNT8817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1437_tree = 
            cast(Object)adaptor.create(ID1437)
            ;
            adaptor.addChild(root_0, ID1437_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCOUNT"," ",268);
            if ( state.backtracking>0 ) { memoize(input, 268, keyCOUNT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCOUNT"


    public static class keyCROSS_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCROSS"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1740:1: keyCROSS :{...}? ID ;
    public final PLSQL3_2_DParser.keyCROSS_return keyCROSS()  {
        debug(trace_rules) writeln("Entering rule:","keyCROSS"," ",269);
        PLSQL3_2_DParser.keyCROSS_return retval = new PLSQL3_2_DParser.keyCROSS_return();
        retval.start = input.LT(1);

        int keyCROSS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1438=null;

        Object ID1438_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1740:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1740:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "CROSS")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCROSS", "toUpper(input.LT(1).getText)== \"CROSS\"");
            }

            ID1438=cast(Token)match(input,ID,FOLLOW_ID_in_keyCROSS8850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1438_tree = 
            cast(Object)adaptor.create(ID1438)
            ;
            adaptor.addChild(root_0, ID1438_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCROSS"," ",269);
            if ( state.backtracking>0 ) { memoize(input, 269, keyCROSS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCROSS"


    public static class keyCUBE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCUBE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1741:1: keyCUBE :{...}? ID ;
    public final PLSQL3_2_DParser.keyCUBE_return keyCUBE()  {
        debug(trace_rules) writeln("Entering rule:","keyCUBE"," ",270);
        PLSQL3_2_DParser.keyCUBE_return retval = new PLSQL3_2_DParser.keyCUBE_return();
        retval.start = input.LT(1);

        int keyCUBE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1439=null;

        Object ID1439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1741:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1741:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "CUBE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCUBE", "toUpper(input.LT(1).getText)== \"CUBE\"");
            }

            ID1439=cast(Token)match(input,ID,FOLLOW_ID_in_keyCUBE8884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1439_tree = 
            cast(Object)adaptor.create(ID1439)
            ;
            adaptor.addChild(root_0, ID1439_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCUBE"," ",270);
            if ( state.backtracking>0 ) { memoize(input, 270, keyCUBE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCUBE"


    public static class keyCURRENT_OF_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCURRENT_OF"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1742:1: keyCURRENT_OF :{...}? ID ;
    public final PLSQL3_2_DParser.keyCURRENT_OF_return keyCURRENT_OF()  {
        debug(trace_rules) writeln("Entering rule:","keyCURRENT_OF"," ",271);
        PLSQL3_2_DParser.keyCURRENT_OF_return retval = new PLSQL3_2_DParser.keyCURRENT_OF_return();
        retval.start = input.LT(1);

        int keyCURRENT_OF_StartIndex = input.index();

        Object root_0 = null;

        Token ID1440=null;

        Object ID1440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1742:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1742:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "CURRENT_OF")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURRENT_OF", "toUpper(input.LT(1).getText)== \"CURRENT_OF\"");
            }

            ID1440=cast(Token)match(input,ID,FOLLOW_ID_in_keyCURRENT_OF8912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1440_tree = 
            cast(Object)adaptor.create(ID1440)
            ;
            adaptor.addChild(root_0, ID1440_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCURRENT_OF"," ",271);
            if ( state.backtracking>0 ) { memoize(input, 271, keyCURRENT_OF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCURRENT_OF"


    public static class keyDAY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDAY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1743:1: keyDAY :{...}? ID ;
    public final PLSQL3_2_DParser.keyDAY_return keyDAY()  {
        debug(trace_rules) writeln("Entering rule:","keyDAY"," ",272);
        PLSQL3_2_DParser.keyDAY_return retval = new PLSQL3_2_DParser.keyDAY_return();
        retval.start = input.LT(1);

        int keyDAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1441=null;

        Object ID1441_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1743:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1743:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "DAY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDAY", "toUpper(input.LT(1).getText)== \"DAY\"");
            }

            ID1441=cast(Token)match(input,ID,FOLLOW_ID_in_keyDAY8947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1441_tree = 
            cast(Object)adaptor.create(ID1441)
            ;
            adaptor.addChild(root_0, ID1441_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyDAY"," ",272);
            if ( state.backtracking>0 ) { memoize(input, 272, keyDAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDAY"


    public static class keyDBTIMEZONE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDBTIMEZONE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1744:1: keyDBTIMEZONE :{...}? ID ;
    public final PLSQL3_2_DParser.keyDBTIMEZONE_return keyDBTIMEZONE()  {
        debug(trace_rules) writeln("Entering rule:","keyDBTIMEZONE"," ",273);
        PLSQL3_2_DParser.keyDBTIMEZONE_return retval = new PLSQL3_2_DParser.keyDBTIMEZONE_return();
        retval.start = input.LT(1);

        int keyDBTIMEZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1442=null;

        Object ID1442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1744:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1744:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "DBTIMEZONE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDBTIMEZONE", "toUpper(input.LT(1).getText)== \"DBTIMEZONE\"");
            }

            ID1442=cast(Token)match(input,ID,FOLLOW_ID_in_keyDBTIMEZONE8975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1442_tree = 
            cast(Object)adaptor.create(ID1442)
            ;
            adaptor.addChild(root_0, ID1442_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyDBTIMEZONE"," ",273);
            if ( state.backtracking>0 ) { memoize(input, 273, keyDBTIMEZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDBTIMEZONE"


    public static class keyDECREMENT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDECREMENT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1745:1: keyDECREMENT :{...}? ID ;
    public final PLSQL3_2_DParser.keyDECREMENT_return keyDECREMENT()  {
        debug(trace_rules) writeln("Entering rule:","keyDECREMENT"," ",274);
        PLSQL3_2_DParser.keyDECREMENT_return retval = new PLSQL3_2_DParser.keyDECREMENT_return();
        retval.start = input.LT(1);

        int keyDECREMENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1443=null;

        Object ID1443_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1745:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1745:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "DECREMENT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDECREMENT", "toUpper(input.LT(1).getText)== \"DECREMENT\"");
            }

            ID1443=cast(Token)match(input,ID,FOLLOW_ID_in_keyDECREMENT9004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1443_tree = 
            cast(Object)adaptor.create(ID1443)
            ;
            adaptor.addChild(root_0, ID1443_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyDECREMENT"," ",274);
            if ( state.backtracking>0 ) { memoize(input, 274, keyDECREMENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDECREMENT"


    public static class keyDIMENSION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDIMENSION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1746:1: keyDIMENSION :{...}? ID ;
    public final PLSQL3_2_DParser.keyDIMENSION_return keyDIMENSION()  {
        debug(trace_rules) writeln("Entering rule:","keyDIMENSION"," ",275);
        PLSQL3_2_DParser.keyDIMENSION_return retval = new PLSQL3_2_DParser.keyDIMENSION_return();
        retval.start = input.LT(1);

        int keyDIMENSION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1444=null;

        Object ID1444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1746:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1746:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "DIMENSION")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDIMENSION", "toUpper(input.LT(1).getText)== \"DIMENSION\"");
            }

            ID1444=cast(Token)match(input,ID,FOLLOW_ID_in_keyDIMENSION9033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1444_tree = 
            cast(Object)adaptor.create(ID1444)
            ;
            adaptor.addChild(root_0, ID1444_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyDIMENSION"," ",275);
            if ( state.backtracking>0 ) { memoize(input, 275, keyDIMENSION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDIMENSION"


    public static class keyEMPTY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEMPTY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1747:1: keyEMPTY :{...}? ID ;
    public final PLSQL3_2_DParser.keyEMPTY_return keyEMPTY()  {
        debug(trace_rules) writeln("Entering rule:","keyEMPTY"," ",276);
        PLSQL3_2_DParser.keyEMPTY_return retval = new PLSQL3_2_DParser.keyEMPTY_return();
        retval.start = input.LT(1);

        int keyEMPTY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1445=null;

        Object ID1445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1747:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1747:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "EMPTY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEMPTY", "toUpper(input.LT(1).getText)== \"EMPTY\"");
            }

            ID1445=cast(Token)match(input,ID,FOLLOW_ID_in_keyEMPTY9066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1445_tree = 
            cast(Object)adaptor.create(ID1445)
            ;
            adaptor.addChild(root_0, ID1445_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyEMPTY"," ",276);
            if ( state.backtracking>0 ) { memoize(input, 276, keyEMPTY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEMPTY"


    public static class keyEQUALS_PATH_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEQUALS_PATH"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1748:1: keyEQUALS_PATH :{...}? ID ;
    public final PLSQL3_2_DParser.keyEQUALS_PATH_return keyEQUALS_PATH()  {
        debug(trace_rules) writeln("Entering rule:","keyEQUALS_PATH"," ",277);
        PLSQL3_2_DParser.keyEQUALS_PATH_return retval = new PLSQL3_2_DParser.keyEQUALS_PATH_return();
        retval.start = input.LT(1);

        int keyEQUALS_PATH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1446=null;

        Object ID1446_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1748:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1748:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "EQUALS_PATH")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEQUALS_PATH", "toUpper(input.LT(1).getText)== \"EQUALS_PATH\"");
            }

            ID1446=cast(Token)match(input,ID,FOLLOW_ID_in_keyEQUALS_PATH9093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1446_tree = 
            cast(Object)adaptor.create(ID1446)
            ;
            adaptor.addChild(root_0, ID1446_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyEQUALS_PATH"," ",277);
            if ( state.backtracking>0 ) { memoize(input, 277, keyEQUALS_PATH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEQUALS_PATH"


    public static class keyESCAPE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyESCAPE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1749:1: keyESCAPE :{...}? ID ;
    public final PLSQL3_2_DParser.keyESCAPE_return keyESCAPE()  {
        debug(trace_rules) writeln("Entering rule:","keyESCAPE"," ",278);
        PLSQL3_2_DParser.keyESCAPE_return retval = new PLSQL3_2_DParser.keyESCAPE_return();
        retval.start = input.LT(1);

        int keyESCAPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1447=null;

        Object ID1447_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1749:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1749:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ESCAPE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyESCAPE", "toUpper(input.LT(1).getText)== \"ESCAPE\"");
            }

            ID1447=cast(Token)match(input,ID,FOLLOW_ID_in_keyESCAPE9125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1447_tree = 
            cast(Object)adaptor.create(ID1447)
            ;
            adaptor.addChild(root_0, ID1447_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyESCAPE"," ",278);
            if ( state.backtracking>0 ) { memoize(input, 278, keyESCAPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyESCAPE"


    public static class keyFIRST_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFIRST"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1750:1: keyFIRST :{...}? ID ;
    public final PLSQL3_2_DParser.keyFIRST_return keyFIRST()  {
        debug(trace_rules) writeln("Entering rule:","keyFIRST"," ",279);
        PLSQL3_2_DParser.keyFIRST_return retval = new PLSQL3_2_DParser.keyFIRST_return();
        retval.start = input.LT(1);

        int keyFIRST_StartIndex = input.index();

        Object root_0 = null;

        Token ID1448=null;

        Object ID1448_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1750:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1750:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "FIRST")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIRST", "toUpper(input.LT(1).getText)== \"FIRST\"");
            }

            ID1448=cast(Token)match(input,ID,FOLLOW_ID_in_keyFIRST9158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1448_tree = 
            cast(Object)adaptor.create(ID1448)
            ;
            adaptor.addChild(root_0, ID1448_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyFIRST"," ",279);
            if ( state.backtracking>0 ) { memoize(input, 279, keyFIRST_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFIRST"


    public static class keyFULL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFULL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1751:1: keyFULL :{...}? ID ;
    public final PLSQL3_2_DParser.keyFULL_return keyFULL()  {
        debug(trace_rules) writeln("Entering rule:","keyFULL"," ",280);
        PLSQL3_2_DParser.keyFULL_return retval = new PLSQL3_2_DParser.keyFULL_return();
        retval.start = input.LT(1);

        int keyFULL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1449=null;

        Object ID1449_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1751:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1751:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "FULL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFULL", "toUpper(input.LT(1).getText)== \"FULL\"");
            }

            ID1449=cast(Token)match(input,ID,FOLLOW_ID_in_keyFULL9192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1449_tree = 
            cast(Object)adaptor.create(ID1449)
            ;
            adaptor.addChild(root_0, ID1449_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyFULL"," ",280);
            if ( state.backtracking>0 ) { memoize(input, 280, keyFULL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFULL"


    public static class keyGROUPING_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyGROUPING"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1752:1: keyGROUPING :{...}? ID ;
    public final PLSQL3_2_DParser.keyGROUPING_return keyGROUPING()  {
        debug(trace_rules) writeln("Entering rule:","keyGROUPING"," ",281);
        PLSQL3_2_DParser.keyGROUPING_return retval = new PLSQL3_2_DParser.keyGROUPING_return();
        retval.start = input.LT(1);

        int keyGROUPING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1450=null;

        Object ID1450_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1752:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1752:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "GROUPING")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyGROUPING", "toUpper(input.LT(1).getText)== \"GROUPING\"");
            }

            ID1450=cast(Token)match(input,ID,FOLLOW_ID_in_keyGROUPING9222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1450_tree = 
            cast(Object)adaptor.create(ID1450)
            ;
            adaptor.addChild(root_0, ID1450_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyGROUPING"," ",281);
            if ( state.backtracking>0 ) { memoize(input, 281, keyGROUPING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyGROUPING"


    public static class keyIGNORE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyIGNORE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1753:1: keyIGNORE :{...}? ID ;
    public final PLSQL3_2_DParser.keyIGNORE_return keyIGNORE()  {
        debug(trace_rules) writeln("Entering rule:","keyIGNORE"," ",282);
        PLSQL3_2_DParser.keyIGNORE_return retval = new PLSQL3_2_DParser.keyIGNORE_return();
        retval.start = input.LT(1);

        int keyIGNORE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1451=null;

        Object ID1451_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1753:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1753:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "IGNORE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyIGNORE", "toUpper(input.LT(1).getText)== \"IGNORE\"");
            }

            ID1451=cast(Token)match(input,ID,FOLLOW_ID_in_keyIGNORE9254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1451_tree = 
            cast(Object)adaptor.create(ID1451)
            ;
            adaptor.addChild(root_0, ID1451_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyIGNORE"," ",282);
            if ( state.backtracking>0 ) { memoize(input, 282, keyIGNORE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyIGNORE"


    public static class keyINCREMENT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINCREMENT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1754:1: keyINCREMENT :{...}? ID ;
    public final PLSQL3_2_DParser.keyINCREMENT_return keyINCREMENT()  {
        debug(trace_rules) writeln("Entering rule:","keyINCREMENT"," ",283);
        PLSQL3_2_DParser.keyINCREMENT_return retval = new PLSQL3_2_DParser.keyINCREMENT_return();
        retval.start = input.LT(1);

        int keyINCREMENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1452=null;

        Object ID1452_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1754:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1754:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "INCREMENT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINCREMENT", "toUpper(input.LT(1).getText)== \"INCREMENT\"");
            }

            ID1452=cast(Token)match(input,ID,FOLLOW_ID_in_keyINCREMENT9283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1452_tree = 
            cast(Object)adaptor.create(ID1452)
            ;
            adaptor.addChild(root_0, ID1452_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyINCREMENT"," ",283);
            if ( state.backtracking>0 ) { memoize(input, 283, keyINCREMENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINCREMENT"


    public static class keyINFINITE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINFINITE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1755:1: keyINFINITE :{...}? ID ;
    public final PLSQL3_2_DParser.keyINFINITE_return keyINFINITE()  {
        debug(trace_rules) writeln("Entering rule:","keyINFINITE"," ",284);
        PLSQL3_2_DParser.keyINFINITE_return retval = new PLSQL3_2_DParser.keyINFINITE_return();
        retval.start = input.LT(1);

        int keyINFINITE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1453=null;

        Object ID1453_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1755:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1755:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "INFINITE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINFINITE", "toUpper(input.LT(1).getText)== \"INFINITE\"");
            }

            ID1453=cast(Token)match(input,ID,FOLLOW_ID_in_keyINFINITE9313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1453_tree = 
            cast(Object)adaptor.create(ID1453)
            ;
            adaptor.addChild(root_0, ID1453_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyINFINITE"," ",284);
            if ( state.backtracking>0 ) { memoize(input, 284, keyINFINITE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINFINITE"


    public static class keyINNER_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINNER"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1756:1: keyINNER :{...}? ID ;
    public final PLSQL3_2_DParser.keyINNER_return keyINNER()  {
        debug(trace_rules) writeln("Entering rule:","keyINNER"," ",285);
        PLSQL3_2_DParser.keyINNER_return retval = new PLSQL3_2_DParser.keyINNER_return();
        retval.start = input.LT(1);

        int keyINNER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1454=null;

        Object ID1454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1756:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1756:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "INNER")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINNER", "toUpper(input.LT(1).getText)== \"INNER\"");
            }

            ID1454=cast(Token)match(input,ID,FOLLOW_ID_in_keyINNER9346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1454_tree = 
            cast(Object)adaptor.create(ID1454)
            ;
            adaptor.addChild(root_0, ID1454_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyINNER"," ",285);
            if ( state.backtracking>0 ) { memoize(input, 285, keyINNER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINNER"


    public static class keyINTERVAL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINTERVAL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1757:1: keyINTERVAL :{...}? ID ;
    public final PLSQL3_2_DParser.keyINTERVAL_return keyINTERVAL()  {
        debug(trace_rules) writeln("Entering rule:","keyINTERVAL"," ",286);
        PLSQL3_2_DParser.keyINTERVAL_return retval = new PLSQL3_2_DParser.keyINTERVAL_return();
        retval.start = input.LT(1);

        int keyINTERVAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1455=null;

        Object ID1455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1757:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1757:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "INTERVAL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERVAL", "toUpper(input.LT(1).getText)== \"INTERVAL\"");
            }

            ID1455=cast(Token)match(input,ID,FOLLOW_ID_in_keyINTERVAL9376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1455_tree = 
            cast(Object)adaptor.create(ID1455)
            ;
            adaptor.addChild(root_0, ID1455_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyINTERVAL"," ",286);
            if ( state.backtracking>0 ) { memoize(input, 286, keyINTERVAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINTERVAL"


    public static class keyITERATE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyITERATE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1758:1: keyITERATE :{...}? ID ;
    public final PLSQL3_2_DParser.keyITERATE_return keyITERATE()  {
        debug(trace_rules) writeln("Entering rule:","keyITERATE"," ",287);
        PLSQL3_2_DParser.keyITERATE_return retval = new PLSQL3_2_DParser.keyITERATE_return();
        retval.start = input.LT(1);

        int keyITERATE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1456=null;

        Object ID1456_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1758:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1758:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ITERATE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyITERATE", "toUpper(input.LT(1).getText)== \"ITERATE\"");
            }

            ID1456=cast(Token)match(input,ID,FOLLOW_ID_in_keyITERATE9407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1456_tree = 
            cast(Object)adaptor.create(ID1456)
            ;
            adaptor.addChild(root_0, ID1456_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyITERATE"," ",287);
            if ( state.backtracking>0 ) { memoize(input, 287, keyITERATE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyITERATE"


    public static class keyJOIN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyJOIN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1759:1: keyJOIN :{...}? ID ;
    public final PLSQL3_2_DParser.keyJOIN_return keyJOIN()  {
        debug(trace_rules) writeln("Entering rule:","keyJOIN"," ",288);
        PLSQL3_2_DParser.keyJOIN_return retval = new PLSQL3_2_DParser.keyJOIN_return();
        retval.start = input.LT(1);

        int keyJOIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1457=null;

        Object ID1457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1759:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1759:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "JOIN")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyJOIN", "toUpper(input.LT(1).getText)== \"JOIN\"");
            }

            ID1457=cast(Token)match(input,ID,FOLLOW_ID_in_keyJOIN9441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1457_tree = 
            cast(Object)adaptor.create(ID1457)
            ;
            adaptor.addChild(root_0, ID1457_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyJOIN"," ",288);
            if ( state.backtracking>0 ) { memoize(input, 288, keyJOIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyJOIN"


    public static class keyKEEP_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyKEEP"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1760:1: keyKEEP :{...}? ID ;
    public final PLSQL3_2_DParser.keyKEEP_return keyKEEP()  {
        debug(trace_rules) writeln("Entering rule:","keyKEEP"," ",289);
        PLSQL3_2_DParser.keyKEEP_return retval = new PLSQL3_2_DParser.keyKEEP_return();
        retval.start = input.LT(1);

        int keyKEEP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1458=null;

        Object ID1458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1760:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1760:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "KEEP")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyKEEP", "toUpper(input.LT(1).getText)== \"KEEP\"");
            }

            ID1458=cast(Token)match(input,ID,FOLLOW_ID_in_keyKEEP9475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1458_tree = 
            cast(Object)adaptor.create(ID1458)
            ;
            adaptor.addChild(root_0, ID1458_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyKEEP"," ",289);
            if ( state.backtracking>0 ) { memoize(input, 289, keyKEEP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyKEEP"


    public static class keyLAST_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLAST"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1761:1: keyLAST :{...}? ID ;
    public final PLSQL3_2_DParser.keyLAST_return keyLAST()  {
        debug(trace_rules) writeln("Entering rule:","keyLAST"," ",290);
        PLSQL3_2_DParser.keyLAST_return retval = new PLSQL3_2_DParser.keyLAST_return();
        retval.start = input.LT(1);

        int keyLAST_StartIndex = input.index();

        Object root_0 = null;

        Token ID1459=null;

        Object ID1459_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1761:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1761:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LAST")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLAST", "toUpper(input.LT(1).getText)== \"LAST\"");
            }

            ID1459=cast(Token)match(input,ID,FOLLOW_ID_in_keyLAST9509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1459_tree = 
            cast(Object)adaptor.create(ID1459)
            ;
            adaptor.addChild(root_0, ID1459_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLAST"," ",290);
            if ( state.backtracking>0 ) { memoize(input, 290, keyLAST_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLAST"


    public static class keyLEFT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLEFT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1762:1: keyLEFT :{...}? ID ;
    public final PLSQL3_2_DParser.keyLEFT_return keyLEFT()  {
        debug(trace_rules) writeln("Entering rule:","keyLEFT"," ",291);
        PLSQL3_2_DParser.keyLEFT_return retval = new PLSQL3_2_DParser.keyLEFT_return();
        retval.start = input.LT(1);

        int keyLEFT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1460=null;

        Object ID1460_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1762:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1762:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LEFT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLEFT", "toUpper(input.LT(1).getText)== \"LEFT\"");
            }

            ID1460=cast(Token)match(input,ID,FOLLOW_ID_in_keyLEFT9543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1460_tree = 
            cast(Object)adaptor.create(ID1460)
            ;
            adaptor.addChild(root_0, ID1460_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLEFT"," ",291);
            if ( state.backtracking>0 ) { memoize(input, 291, keyLEFT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLEFT"


    public static class keyLIKE2_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKE2"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1763:1: keyLIKE2 :{...}? ID ;
    public final PLSQL3_2_DParser.keyLIKE2_return keyLIKE2()  {
        debug(trace_rules) writeln("Entering rule:","keyLIKE2"," ",292);
        PLSQL3_2_DParser.keyLIKE2_return retval = new PLSQL3_2_DParser.keyLIKE2_return();
        retval.start = input.LT(1);

        int keyLIKE2_StartIndex = input.index();

        Object root_0 = null;

        Token ID1461=null;

        Object ID1461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1763:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1763:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LIKE2")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE2", "toUpper(input.LT(1).getText)== \"LIKE2\"");
            }

            ID1461=cast(Token)match(input,ID,FOLLOW_ID_in_keyLIKE29576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1461_tree = 
            cast(Object)adaptor.create(ID1461)
            ;
            adaptor.addChild(root_0, ID1461_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLIKE2"," ",292);
            if ( state.backtracking>0 ) { memoize(input, 292, keyLIKE2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKE2"


    public static class keyLIKE4_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKE4"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1764:1: keyLIKE4 :{...}? ID ;
    public final PLSQL3_2_DParser.keyLIKE4_return keyLIKE4()  {
        debug(trace_rules) writeln("Entering rule:","keyLIKE4"," ",293);
        PLSQL3_2_DParser.keyLIKE4_return retval = new PLSQL3_2_DParser.keyLIKE4_return();
        retval.start = input.LT(1);

        int keyLIKE4_StartIndex = input.index();

        Object root_0 = null;

        Token ID1462=null;

        Object ID1462_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1764:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1764:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LIKE4")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE4", "toUpper(input.LT(1).getText)== \"LIKE4\"");
            }

            ID1462=cast(Token)match(input,ID,FOLLOW_ID_in_keyLIKE49609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1462_tree = 
            cast(Object)adaptor.create(ID1462)
            ;
            adaptor.addChild(root_0, ID1462_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLIKE4"," ",293);
            if ( state.backtracking>0 ) { memoize(input, 293, keyLIKE4_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKE4"


    public static class keyLIKEC_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKEC"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1765:1: keyLIKEC :{...}? ID ;
    public final PLSQL3_2_DParser.keyLIKEC_return keyLIKEC()  {
        debug(trace_rules) writeln("Entering rule:","keyLIKEC"," ",294);
        PLSQL3_2_DParser.keyLIKEC_return retval = new PLSQL3_2_DParser.keyLIKEC_return();
        retval.start = input.LT(1);

        int keyLIKEC_StartIndex = input.index();

        Object root_0 = null;

        Token ID1463=null;

        Object ID1463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1765:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1765:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LIKEC")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKEC", "toUpper(input.LT(1).getText)== \"LIKEC\"");
            }

            ID1463=cast(Token)match(input,ID,FOLLOW_ID_in_keyLIKEC9642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1463_tree = 
            cast(Object)adaptor.create(ID1463)
            ;
            adaptor.addChild(root_0, ID1463_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLIKEC"," ",294);
            if ( state.backtracking>0 ) { memoize(input, 294, keyLIKEC_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKEC"


    public static class keyLOCAL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLOCAL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1766:1: keyLOCAL :{...}? ID ;
    public final PLSQL3_2_DParser.keyLOCAL_return keyLOCAL()  {
        debug(trace_rules) writeln("Entering rule:","keyLOCAL"," ",295);
        PLSQL3_2_DParser.keyLOCAL_return retval = new PLSQL3_2_DParser.keyLOCAL_return();
        retval.start = input.LT(1);

        int keyLOCAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1464=null;

        Object ID1464_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1766:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1766:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "LOCAL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLOCAL", "toUpper(input.LT(1).getText)== \"LOCAL\"");
            }

            ID1464=cast(Token)match(input,ID,FOLLOW_ID_in_keyLOCAL9675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1464_tree = 
            cast(Object)adaptor.create(ID1464)
            ;
            adaptor.addChild(root_0, ID1464_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLOCAL"," ",295);
            if ( state.backtracking>0 ) { memoize(input, 295, keyLOCAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLOCAL"


    public static class keyMAIN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMAIN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1767:1: keyMAIN :{...}? ID ;
    public final PLSQL3_2_DParser.keyMAIN_return keyMAIN()  {
        debug(trace_rules) writeln("Entering rule:","keyMAIN"," ",296);
        PLSQL3_2_DParser.keyMAIN_return retval = new PLSQL3_2_DParser.keyMAIN_return();
        retval.start = input.LT(1);

        int keyMAIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1465=null;

        Object ID1465_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1767:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1767:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "MAIN")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMAIN", "toUpper(input.LT(1).getText)== \"MAIN\"");
            }

            ID1465=cast(Token)match(input,ID,FOLLOW_ID_in_keyMAIN9709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1465_tree = 
            cast(Object)adaptor.create(ID1465)
            ;
            adaptor.addChild(root_0, ID1465_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyMAIN"," ",296);
            if ( state.backtracking>0 ) { memoize(input, 296, keyMAIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMAIN"


    public static class keyMEASURES_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMEASURES"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1768:1: keyMEASURES :{...}? ID ;
    public final PLSQL3_2_DParser.keyMEASURES_return keyMEASURES()  {
        debug(trace_rules) writeln("Entering rule:","keyMEASURES"," ",297);
        PLSQL3_2_DParser.keyMEASURES_return retval = new PLSQL3_2_DParser.keyMEASURES_return();
        retval.start = input.LT(1);

        int keyMEASURES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1466=null;

        Object ID1466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1768:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1768:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "MEASURES")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEASURES", "toUpper(input.LT(1).getText)== \"MEASURES\"");
            }

            ID1466=cast(Token)match(input,ID,FOLLOW_ID_in_keyMEASURES9739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1466_tree = 
            cast(Object)adaptor.create(ID1466)
            ;
            adaptor.addChild(root_0, ID1466_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyMEASURES"," ",297);
            if ( state.backtracking>0 ) { memoize(input, 297, keyMEASURES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMEASURES"


    public static class keyMEMBER_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMEMBER"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1769:1: keyMEMBER :{...}? ID ;
    public final PLSQL3_2_DParser.keyMEMBER_return keyMEMBER()  {
        debug(trace_rules) writeln("Entering rule:","keyMEMBER"," ",298);
        PLSQL3_2_DParser.keyMEMBER_return retval = new PLSQL3_2_DParser.keyMEMBER_return();
        retval.start = input.LT(1);

        int keyMEMBER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1467=null;

        Object ID1467_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1769:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1769:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "MEMBER")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEMBER", "toUpper(input.LT(1).getText)== \"MEMBER\"");
            }

            ID1467=cast(Token)match(input,ID,FOLLOW_ID_in_keyMEMBER9771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1467_tree = 
            cast(Object)adaptor.create(ID1467)
            ;
            adaptor.addChild(root_0, ID1467_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyMEMBER"," ",298);
            if ( state.backtracking>0 ) { memoize(input, 298, keyMEMBER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMEMBER"


    public static class keyMODEL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMODEL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1770:1: keyMODEL :{...}? ID ;
    public final PLSQL3_2_DParser.keyMODEL_return keyMODEL()  {
        debug(trace_rules) writeln("Entering rule:","keyMODEL"," ",299);
        PLSQL3_2_DParser.keyMODEL_return retval = new PLSQL3_2_DParser.keyMODEL_return();
        retval.start = input.LT(1);

        int keyMODEL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1468=null;

        Object ID1468_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1770:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1770:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "MODEL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMODEL", "toUpper(input.LT(1).getText)== \"MODEL\"");
            }

            ID1468=cast(Token)match(input,ID,FOLLOW_ID_in_keyMODEL9804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1468_tree = 
            cast(Object)adaptor.create(ID1468)
            ;
            adaptor.addChild(root_0, ID1468_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyMODEL"," ",299);
            if ( state.backtracking>0 ) { memoize(input, 299, keyMODEL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMODEL"


    public static class keyMONTH_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMONTH"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1771:1: keyMONTH :{...}? ID ;
    public final PLSQL3_2_DParser.keyMONTH_return keyMONTH()  {
        debug(trace_rules) writeln("Entering rule:","keyMONTH"," ",300);
        PLSQL3_2_DParser.keyMONTH_return retval = new PLSQL3_2_DParser.keyMONTH_return();
        retval.start = input.LT(1);

        int keyMONTH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1469=null;

        Object ID1469_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1771:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1771:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "MONTH")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMONTH", "toUpper(input.LT(1).getText)== \"MONTH\"");
            }

            ID1469=cast(Token)match(input,ID,FOLLOW_ID_in_keyMONTH9837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1469_tree = 
            cast(Object)adaptor.create(ID1469)
            ;
            adaptor.addChild(root_0, ID1469_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyMONTH"," ",300);
            if ( state.backtracking>0 ) { memoize(input, 300, keyMONTH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMONTH"


    public static class keyNAN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNAN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1772:1: keyNAN :{...}? ID ;
    public final PLSQL3_2_DParser.keyNAN_return keyNAN()  {
        debug(trace_rules) writeln("Entering rule:","keyNAN"," ",301);
        PLSQL3_2_DParser.keyNAN_return retval = new PLSQL3_2_DParser.keyNAN_return();
        retval.start = input.LT(1);

        int keyNAN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1470=null;

        Object ID1470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1772:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1772:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NAN")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAN", "toUpper(input.LT(1).getText)== \"NAN\"");
            }

            ID1470=cast(Token)match(input,ID,FOLLOW_ID_in_keyNAN9872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1470_tree = 
            cast(Object)adaptor.create(ID1470)
            ;
            adaptor.addChild(root_0, ID1470_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNAN"," ",301);
            if ( state.backtracking>0 ) { memoize(input, 301, keyNAN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNAN"


    public static class keyNATURAL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNATURAL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1773:1: keyNATURAL :{...}? ID ;
    public final PLSQL3_2_DParser.keyNATURAL_return keyNATURAL()  {
        debug(trace_rules) writeln("Entering rule:","keyNATURAL"," ",302);
        PLSQL3_2_DParser.keyNATURAL_return retval = new PLSQL3_2_DParser.keyNATURAL_return();
        retval.start = input.LT(1);

        int keyNATURAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1471=null;

        Object ID1471_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1773:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1773:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NATURAL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNATURAL", "toUpper(input.LT(1).getText)== \"NATURAL\"");
            }

            ID1471=cast(Token)match(input,ID,FOLLOW_ID_in_keyNATURAL9903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1471_tree = 
            cast(Object)adaptor.create(ID1471)
            ;
            adaptor.addChild(root_0, ID1471_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNATURAL"," ",302);
            if ( state.backtracking>0 ) { memoize(input, 302, keyNATURAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNATURAL"


    public static class keyNAV_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNAV"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1774:1: keyNAV :{...}? ID ;
    public final PLSQL3_2_DParser.keyNAV_return keyNAV()  {
        debug(trace_rules) writeln("Entering rule:","keyNAV"," ",303);
        PLSQL3_2_DParser.keyNAV_return retval = new PLSQL3_2_DParser.keyNAV_return();
        retval.start = input.LT(1);

        int keyNAV_StartIndex = input.index();

        Object root_0 = null;

        Token ID1472=null;

        Object ID1472_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1774:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1774:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NAV")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAV", "toUpper(input.LT(1).getText)== \"NAV\"");
            }

            ID1472=cast(Token)match(input,ID,FOLLOW_ID_in_keyNAV9938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1472_tree = 
            cast(Object)adaptor.create(ID1472)
            ;
            adaptor.addChild(root_0, ID1472_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNAV"," ",303);
            if ( state.backtracking>0 ) { memoize(input, 303, keyNAV_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNAV"


    public static class keyNOCYCLE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNOCYCLE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1775:1: keyNOCYCLE :{...}? ID ;
    public final PLSQL3_2_DParser.keyNOCYCLE_return keyNOCYCLE()  {
        debug(trace_rules) writeln("Entering rule:","keyNOCYCLE"," ",304);
        PLSQL3_2_DParser.keyNOCYCLE_return retval = new PLSQL3_2_DParser.keyNOCYCLE_return();
        retval.start = input.LT(1);

        int keyNOCYCLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1473=null;

        Object ID1473_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1775:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1775:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NOCYCLE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNOCYCLE", "toUpper(input.LT(1).getText)== \"NOCYCLE\"");
            }

            ID1473=cast(Token)match(input,ID,FOLLOW_ID_in_keyNOCYCLE9969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1473_tree = 
            cast(Object)adaptor.create(ID1473)
            ;
            adaptor.addChild(root_0, ID1473_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNOCYCLE"," ",304);
            if ( state.backtracking>0 ) { memoize(input, 304, keyNOCYCLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNOCYCLE"


    public static class keyNULLS_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNULLS"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1776:1: keyNULLS :{...}? ID ;
    public final PLSQL3_2_DParser.keyNULLS_return keyNULLS()  {
        debug(trace_rules) writeln("Entering rule:","keyNULLS"," ",305);
        PLSQL3_2_DParser.keyNULLS_return retval = new PLSQL3_2_DParser.keyNULLS_return();
        retval.start = input.LT(1);

        int keyNULLS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1474=null;

        Object ID1474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1776:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1776:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NULLS")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNULLS", "toUpper(input.LT(1).getText)== \"NULLS\"");
            }

            ID1474=cast(Token)match(input,ID,FOLLOW_ID_in_keyNULLS10002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1474_tree = 
            cast(Object)adaptor.create(ID1474)
            ;
            adaptor.addChild(root_0, ID1474_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNULLS"," ",305);
            if ( state.backtracking>0 ) { memoize(input, 305, keyNULLS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNULLS"


    public static class keyONLY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyONLY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1777:1: keyONLY :{...}? ID ;
    public final PLSQL3_2_DParser.keyONLY_return keyONLY()  {
        debug(trace_rules) writeln("Entering rule:","keyONLY"," ",306);
        PLSQL3_2_DParser.keyONLY_return retval = new PLSQL3_2_DParser.keyONLY_return();
        retval.start = input.LT(1);

        int keyONLY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1475=null;

        Object ID1475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1777:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1777:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ONLY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyONLY", "toUpper(input.LT(1).getText)== \"ONLY\"");
            }

            ID1475=cast(Token)match(input,ID,FOLLOW_ID_in_keyONLY10036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1475_tree = 
            cast(Object)adaptor.create(ID1475)
            ;
            adaptor.addChild(root_0, ID1475_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyONLY"," ",306);
            if ( state.backtracking>0 ) { memoize(input, 306, keyONLY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyONLY"


    public static class keyOUTER_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOUTER"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1778:1: keyOUTER :{...}? ID ;
    public final PLSQL3_2_DParser.keyOUTER_return keyOUTER()  {
        debug(trace_rules) writeln("Entering rule:","keyOUTER"," ",307);
        PLSQL3_2_DParser.keyOUTER_return retval = new PLSQL3_2_DParser.keyOUTER_return();
        retval.start = input.LT(1);

        int keyOUTER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1476=null;

        Object ID1476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1778:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1778:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "OUTER")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOUTER", "toUpper(input.LT(1).getText)== \"OUTER\"");
            }

            ID1476=cast(Token)match(input,ID,FOLLOW_ID_in_keyOUTER10069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1476_tree = 
            cast(Object)adaptor.create(ID1476)
            ;
            adaptor.addChild(root_0, ID1476_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyOUTER"," ",307);
            if ( state.backtracking>0 ) { memoize(input, 307, keyOUTER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOUTER"


    public static class keyPARTITION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPARTITION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1779:1: keyPARTITION :{...}? ID ;
    public final PLSQL3_2_DParser.keyPARTITION_return keyPARTITION()  {
        debug(trace_rules) writeln("Entering rule:","keyPARTITION"," ",308);
        PLSQL3_2_DParser.keyPARTITION_return retval = new PLSQL3_2_DParser.keyPARTITION_return();
        retval.start = input.LT(1);

        int keyPARTITION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1477=null;

        Object ID1477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1779:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1779:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "PARTITION")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPARTITION", "toUpper(input.LT(1).getText)== \"PARTITION\"");
            }

            ID1477=cast(Token)match(input,ID,FOLLOW_ID_in_keyPARTITION10098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1477_tree = 
            cast(Object)adaptor.create(ID1477)
            ;
            adaptor.addChild(root_0, ID1477_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyPARTITION"," ",308);
            if ( state.backtracking>0 ) { memoize(input, 308, keyPARTITION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPARTITION"


    public static class keyPRECISION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRECISION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1780:1: keyPRECISION :{...}? ID ;
    public final PLSQL3_2_DParser.keyPRECISION_return keyPRECISION()  {
        debug(trace_rules) writeln("Entering rule:","keyPRECISION"," ",309);
        PLSQL3_2_DParser.keyPRECISION_return retval = new PLSQL3_2_DParser.keyPRECISION_return();
        retval.start = input.LT(1);

        int keyPRECISION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1478=null;

        Object ID1478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1780:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1780:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "PRECISION")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRECISION", "toUpper(input.LT(1).getText)== \"PRECISION\"");
            }

            ID1478=cast(Token)match(input,ID,FOLLOW_ID_in_keyPRECISION10127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1478_tree = 
            cast(Object)adaptor.create(ID1478)
            ;
            adaptor.addChild(root_0, ID1478_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyPRECISION"," ",309);
            if ( state.backtracking>0 ) { memoize(input, 309, keyPRECISION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRECISION"


    public static class keyPRESENT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRESENT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1781:1: keyPRESENT :{...}? ID ;
    public final PLSQL3_2_DParser.keyPRESENT_return keyPRESENT()  {
        debug(trace_rules) writeln("Entering rule:","keyPRESENT"," ",310);
        PLSQL3_2_DParser.keyPRESENT_return retval = new PLSQL3_2_DParser.keyPRESENT_return();
        retval.start = input.LT(1);

        int keyPRESENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1479=null;

        Object ID1479_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1781:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1781:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "PRESENT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRESENT", "toUpper(input.LT(1).getText)== \"PRESENT\"");
            }

            ID1479=cast(Token)match(input,ID,FOLLOW_ID_in_keyPRESENT10158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1479_tree = 
            cast(Object)adaptor.create(ID1479)
            ;
            adaptor.addChild(root_0, ID1479_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyPRESENT"," ",310);
            if ( state.backtracking>0 ) { memoize(input, 310, keyPRESENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRESENT"


    public static class keyREFERENCE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREFERENCE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1782:1: keyREFERENCE :{...}? ID ;
    public final PLSQL3_2_DParser.keyREFERENCE_return keyREFERENCE()  {
        debug(trace_rules) writeln("Entering rule:","keyREFERENCE"," ",311);
        PLSQL3_2_DParser.keyREFERENCE_return retval = new PLSQL3_2_DParser.keyREFERENCE_return();
        retval.start = input.LT(1);

        int keyREFERENCE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1480=null;

        Object ID1480_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1782:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1782:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "REFERENCE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREFERENCE", "toUpper(input.LT(1).getText)== \"REFERENCE\"");
            }

            ID1480=cast(Token)match(input,ID,FOLLOW_ID_in_keyREFERENCE10187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1480_tree = 
            cast(Object)adaptor.create(ID1480)
            ;
            adaptor.addChild(root_0, ID1480_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREFERENCE"," ",311);
            if ( state.backtracking>0 ) { memoize(input, 311, keyREFERENCE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREFERENCE"


    public static class keyREGEXP_LIKE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREGEXP_LIKE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1783:1: keyREGEXP_LIKE :{...}? ID ;
    public final PLSQL3_2_DParser.keyREGEXP_LIKE_return keyREGEXP_LIKE()  {
        debug(trace_rules) writeln("Entering rule:","keyREGEXP_LIKE"," ",312);
        PLSQL3_2_DParser.keyREGEXP_LIKE_return retval = new PLSQL3_2_DParser.keyREGEXP_LIKE_return();
        retval.start = input.LT(1);

        int keyREGEXP_LIKE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1481=null;

        Object ID1481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1783:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1783:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "REGEXP_LIKE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREGEXP_LIKE", "toUpper(input.LT(1).getText)== \"REGEXP_LIKE\"");
            }

            ID1481=cast(Token)match(input,ID,FOLLOW_ID_in_keyREGEXP_LIKE10214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1481_tree = 
            cast(Object)adaptor.create(ID1481)
            ;
            adaptor.addChild(root_0, ID1481_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREGEXP_LIKE"," ",312);
            if ( state.backtracking>0 ) { memoize(input, 312, keyREGEXP_LIKE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREGEXP_LIKE"


    public static class keyRIGHT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRIGHT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1785:1: keyRIGHT :{...}? ID ;
    public final PLSQL3_2_DParser.keyRIGHT_return keyRIGHT()  {
        debug(trace_rules) writeln("Entering rule:","keyRIGHT"," ",313);
        PLSQL3_2_DParser.keyRIGHT_return retval = new PLSQL3_2_DParser.keyRIGHT_return();
        retval.start = input.LT(1);

        int keyRIGHT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1482=null;

        Object ID1482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1785:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1785:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "RIGHT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRIGHT", "toUpper(input.LT(1).getText)== \"RIGHT\"");
            }

            ID1482=cast(Token)match(input,ID,FOLLOW_ID_in_keyRIGHT10248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1482_tree = 
            cast(Object)adaptor.create(ID1482)
            ;
            adaptor.addChild(root_0, ID1482_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRIGHT"," ",313);
            if ( state.backtracking>0 ) { memoize(input, 313, keyRIGHT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRIGHT"


    public static class keyROLLUP_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyROLLUP"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1786:1: keyROLLUP :{...}? ID ;
    public final PLSQL3_2_DParser.keyROLLUP_return keyROLLUP()  {
        debug(trace_rules) writeln("Entering rule:","keyROLLUP"," ",314);
        PLSQL3_2_DParser.keyROLLUP_return retval = new PLSQL3_2_DParser.keyROLLUP_return();
        retval.start = input.LT(1);

        int keyROLLUP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1483=null;

        Object ID1483_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1786:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1786:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ROLLUP")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyROLLUP", "toUpper(input.LT(1).getText)== \"ROLLUP\"");
            }

            ID1483=cast(Token)match(input,ID,FOLLOW_ID_in_keyROLLUP10280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1483_tree = 
            cast(Object)adaptor.create(ID1483)
            ;
            adaptor.addChild(root_0, ID1483_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyROLLUP"," ",314);
            if ( state.backtracking>0 ) { memoize(input, 314, keyROLLUP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyROLLUP"


    public static class keyRULES_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRULES"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1787:1: keyRULES :{...}? ID ;
    public final PLSQL3_2_DParser.keyRULES_return keyRULES()  {
        debug(trace_rules) writeln("Entering rule:","keyRULES"," ",315);
        PLSQL3_2_DParser.keyRULES_return retval = new PLSQL3_2_DParser.keyRULES_return();
        retval.start = input.LT(1);

        int keyRULES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1484=null;

        Object ID1484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1787:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1787:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "RULES")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRULES", "toUpper(input.LT(1).getText)== \"RULES\"");
            }

            ID1484=cast(Token)match(input,ID,FOLLOW_ID_in_keyRULES10313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1484_tree = 
            cast(Object)adaptor.create(ID1484)
            ;
            adaptor.addChild(root_0, ID1484_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRULES"," ",315);
            if ( state.backtracking>0 ) { memoize(input, 315, keyRULES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRULES"


    public static class keySECOND_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySECOND"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1788:1: keySECOND :{...}? ID ;
    public final PLSQL3_2_DParser.keySECOND_return keySECOND()  {
        debug(trace_rules) writeln("Entering rule:","keySECOND"," ",316);
        PLSQL3_2_DParser.keySECOND_return retval = new PLSQL3_2_DParser.keySECOND_return();
        retval.start = input.LT(1);

        int keySECOND_StartIndex = input.index();

        Object root_0 = null;

        Token ID1485=null;

        Object ID1485_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1788:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1788:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SECOND")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECOND", "toUpper(input.LT(1).getText)== \"SECOND\"");
            }

            ID1485=cast(Token)match(input,ID,FOLLOW_ID_in_keySECOND10345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1485_tree = 
            cast(Object)adaptor.create(ID1485)
            ;
            adaptor.addChild(root_0, ID1485_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySECOND"," ",316);
            if ( state.backtracking>0 ) { memoize(input, 316, keySECOND_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySECOND"


    public static class keySECONDS_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySECONDS"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1789:1: keySECONDS :{...}? ID ;
    public final PLSQL3_2_DParser.keySECONDS_return keySECONDS()  {
        debug(trace_rules) writeln("Entering rule:","keySECONDS"," ",317);
        PLSQL3_2_DParser.keySECONDS_return retval = new PLSQL3_2_DParser.keySECONDS_return();
        retval.start = input.LT(1);

        int keySECONDS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1486=null;

        Object ID1486_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1789:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1789:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SECONDS")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECONDS", "toUpper(input.LT(1).getText)== \"SECONDS\"");
            }

            ID1486=cast(Token)match(input,ID,FOLLOW_ID_in_keySECONDS10376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1486_tree = 
            cast(Object)adaptor.create(ID1486)
            ;
            adaptor.addChild(root_0, ID1486_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySECONDS"," ",317);
            if ( state.backtracking>0 ) { memoize(input, 317, keySECONDS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySECONDS"


    public static class keySEQUENTIAL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySEQUENTIAL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1790:1: keySEQUENTIAL :{...}? ID ;
    public final PLSQL3_2_DParser.keySEQUENTIAL_return keySEQUENTIAL()  {
        debug(trace_rules) writeln("Entering rule:","keySEQUENTIAL"," ",318);
        PLSQL3_2_DParser.keySEQUENTIAL_return retval = new PLSQL3_2_DParser.keySEQUENTIAL_return();
        retval.start = input.LT(1);

        int keySEQUENTIAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1487=null;

        Object ID1487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1790:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1790:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SEQUENTIAL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySEQUENTIAL", "toUpper(input.LT(1).getText)== \"SEQUENTIAL\"");
            }

            ID1487=cast(Token)match(input,ID,FOLLOW_ID_in_keySEQUENTIAL10404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1487_tree = 
            cast(Object)adaptor.create(ID1487)
            ;
            adaptor.addChild(root_0, ID1487_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySEQUENTIAL"," ",318);
            if ( state.backtracking>0 ) { memoize(input, 318, keySEQUENTIAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySEQUENTIAL"


    public static class keySESSIONTIMEZONE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySESSIONTIMEZONE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1791:1: keySESSIONTIMEZONE :{...}? ID ;
    public final PLSQL3_2_DParser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE()  {
        debug(trace_rules) writeln("Entering rule:","keySESSIONTIMEZONE"," ",319);
        PLSQL3_2_DParser.keySESSIONTIMEZONE_return retval = new PLSQL3_2_DParser.keySESSIONTIMEZONE_return();
        retval.start = input.LT(1);

        int keySESSIONTIMEZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1488=null;

        Object ID1488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1791:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1791:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SESSIONTIMEZONE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySESSIONTIMEZONE", "toUpper(input.LT(1).getText)== \"SESSIONTIMEZONE\"");
            }

            ID1488=cast(Token)match(input,ID,FOLLOW_ID_in_keySESSIONTIMEZONE10427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1488_tree = 
            cast(Object)adaptor.create(ID1488)
            ;
            adaptor.addChild(root_0, ID1488_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySESSIONTIMEZONE"," ",319);
            if ( state.backtracking>0 ) { memoize(input, 319, keySESSIONTIMEZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySESSIONTIMEZONE"


    public static class keySETS_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySETS"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1792:1: keySETS :{...}? ID ;
    public final PLSQL3_2_DParser.keySETS_return keySETS()  {
        debug(trace_rules) writeln("Entering rule:","keySETS"," ",320);
        PLSQL3_2_DParser.keySETS_return retval = new PLSQL3_2_DParser.keySETS_return();
        retval.start = input.LT(1);

        int keySETS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1489=null;

        Object ID1489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1792:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1792:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SETS")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySETS", "toUpper(input.LT(1).getText)== \"SETS\"");
            }

            ID1489=cast(Token)match(input,ID,FOLLOW_ID_in_keySETS10461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1489_tree = 
            cast(Object)adaptor.create(ID1489)
            ;
            adaptor.addChild(root_0, ID1489_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySETS"," ",320);
            if ( state.backtracking>0 ) { memoize(input, 320, keySETS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySETS"


    public static class keySIBLINGS_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySIBLINGS"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1793:1: keySIBLINGS :{...}? ID ;
    public final PLSQL3_2_DParser.keySIBLINGS_return keySIBLINGS()  {
        debug(trace_rules) writeln("Entering rule:","keySIBLINGS"," ",321);
        PLSQL3_2_DParser.keySIBLINGS_return retval = new PLSQL3_2_DParser.keySIBLINGS_return();
        retval.start = input.LT(1);

        int keySIBLINGS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1490=null;

        Object ID1490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1793:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1793:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SIBLINGS")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySIBLINGS", "toUpper(input.LT(1).getText)== \"SIBLINGS\"");
            }

            ID1490=cast(Token)match(input,ID,FOLLOW_ID_in_keySIBLINGS10491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1490_tree = 
            cast(Object)adaptor.create(ID1490)
            ;
            adaptor.addChild(root_0, ID1490_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySIBLINGS"," ",321);
            if ( state.backtracking>0 ) { memoize(input, 321, keySIBLINGS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySIBLINGS"


    public static class keySINGLE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySINGLE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1794:1: keySINGLE :{...}? ID ;
    public final PLSQL3_2_DParser.keySINGLE_return keySINGLE()  {
        debug(trace_rules) writeln("Entering rule:","keySINGLE"," ",322);
        PLSQL3_2_DParser.keySINGLE_return retval = new PLSQL3_2_DParser.keySINGLE_return();
        retval.start = input.LT(1);

        int keySINGLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1491=null;

        Object ID1491_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1794:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1794:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SINGLE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySINGLE", "toUpper(input.LT(1).getText)== \"SINGLE\"");
            }

            ID1491=cast(Token)match(input,ID,FOLLOW_ID_in_keySINGLE10523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1491_tree = 
            cast(Object)adaptor.create(ID1491)
            ;
            adaptor.addChild(root_0, ID1491_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySINGLE"," ",322);
            if ( state.backtracking>0 ) { memoize(input, 322, keySINGLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySINGLE"


    public static class keySOME_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySOME"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1795:1: keySOME :{...}? ID ;
    public final PLSQL3_2_DParser.keySOME_return keySOME()  {
        debug(trace_rules) writeln("Entering rule:","keySOME"," ",323);
        PLSQL3_2_DParser.keySOME_return retval = new PLSQL3_2_DParser.keySOME_return();
        retval.start = input.LT(1);

        int keySOME_StartIndex = input.index();

        Object root_0 = null;

        Token ID1492=null;

        Object ID1492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1795:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1795:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SOME")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySOME", "toUpper(input.LT(1).getText)== \"SOME\"");
            }

            ID1492=cast(Token)match(input,ID,FOLLOW_ID_in_keySOME10557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1492_tree = 
            cast(Object)adaptor.create(ID1492)
            ;
            adaptor.addChild(root_0, ID1492_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySOME"," ",323);
            if ( state.backtracking>0 ) { memoize(input, 323, keySOME_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySOME"


    public static class keySUBMULTISET_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySUBMULTISET"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1796:1: keySUBMULTISET :{...}? ID ;
    public final PLSQL3_2_DParser.keySUBMULTISET_return keySUBMULTISET()  {
        debug(trace_rules) writeln("Entering rule:","keySUBMULTISET"," ",324);
        PLSQL3_2_DParser.keySUBMULTISET_return retval = new PLSQL3_2_DParser.keySUBMULTISET_return();
        retval.start = input.LT(1);

        int keySUBMULTISET_StartIndex = input.index();

        Object root_0 = null;

        Token ID1493=null;

        Object ID1493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1796:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1796:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SUBMULTISET")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBMULTISET", "toUpper(input.LT(1).getText)== \"SUBMULTISET\"");
            }

            ID1493=cast(Token)match(input,ID,FOLLOW_ID_in_keySUBMULTISET10584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1493_tree = 
            cast(Object)adaptor.create(ID1493)
            ;
            adaptor.addChild(root_0, ID1493_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySUBMULTISET"," ",324);
            if ( state.backtracking>0 ) { memoize(input, 324, keySUBMULTISET_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySUBMULTISET"


    public static class keyTIME_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTIME"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1797:1: keyTIME :{...}? ID ;
    public final PLSQL3_2_DParser.keyTIME_return keyTIME()  {
        debug(trace_rules) writeln("Entering rule:","keyTIME"," ",325);
        PLSQL3_2_DParser.keyTIME_return retval = new PLSQL3_2_DParser.keyTIME_return();
        retval.start = input.LT(1);

        int keyTIME_StartIndex = input.index();

        Object root_0 = null;

        Token ID1494=null;

        Object ID1494_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1797:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1797:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "TIME")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIME", "toUpper(input.LT(1).getText)== \"TIME\"");
            }

            ID1494=cast(Token)match(input,ID,FOLLOW_ID_in_keyTIME10618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1494_tree = 
            cast(Object)adaptor.create(ID1494)
            ;
            adaptor.addChild(root_0, ID1494_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyTIME"," ",325);
            if ( state.backtracking>0 ) { memoize(input, 325, keyTIME_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTIME"


    public static class keyTIMESTAMP_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTIMESTAMP"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1798:1: keyTIMESTAMP :{...}? ID ;
    public final PLSQL3_2_DParser.keyTIMESTAMP_return keyTIMESTAMP()  {
        debug(trace_rules) writeln("Entering rule:","keyTIMESTAMP"," ",326);
        PLSQL3_2_DParser.keyTIMESTAMP_return retval = new PLSQL3_2_DParser.keyTIMESTAMP_return();
        retval.start = input.LT(1);

        int keyTIMESTAMP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1495=null;

        Object ID1495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1798:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1798:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "TIMESTAMP")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIMESTAMP", "toUpper(input.LT(1).getText)== \"TIMESTAMP\"");
            }

            ID1495=cast(Token)match(input,ID,FOLLOW_ID_in_keyTIMESTAMP10647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1495_tree = 
            cast(Object)adaptor.create(ID1495)
            ;
            adaptor.addChild(root_0, ID1495_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyTIMESTAMP"," ",326);
            if ( state.backtracking>0 ) { memoize(input, 326, keyTIMESTAMP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTIMESTAMP"


    public static class keyTHE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTHE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1799:1: keyTHE :{...}? ID ;
    public final PLSQL3_2_DParser.keyTHE_return keyTHE()  {
        debug(trace_rules) writeln("Entering rule:","keyTHE"," ",327);
        PLSQL3_2_DParser.keyTHE_return retval = new PLSQL3_2_DParser.keyTHE_return();
        retval.start = input.LT(1);

        int keyTHE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1496=null;

        Object ID1496_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1799:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1799:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "THE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTHE", "toUpper(input.LT(1).getText)== \"THE\"");
            }

            ID1496=cast(Token)match(input,ID,FOLLOW_ID_in_keyTHE10682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1496_tree = 
            cast(Object)adaptor.create(ID1496)
            ;
            adaptor.addChild(root_0, ID1496_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyTHE"," ",327);
            if ( state.backtracking>0 ) { memoize(input, 327, keyTHE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTHE"


    public static class keyUNDER_PATH_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUNDER_PATH"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1800:1: keyUNDER_PATH :{...}? ID ;
    public final PLSQL3_2_DParser.keyUNDER_PATH_return keyUNDER_PATH()  {
        debug(trace_rules) writeln("Entering rule:","keyUNDER_PATH"," ",328);
        PLSQL3_2_DParser.keyUNDER_PATH_return retval = new PLSQL3_2_DParser.keyUNDER_PATH_return();
        retval.start = input.LT(1);

        int keyUNDER_PATH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1497=null;

        Object ID1497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1800:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1800:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "UNDER_PATH")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNDER_PATH", "toUpper(input.LT(1).getText)== \"UNDER_PATH\"");
            }

            ID1497=cast(Token)match(input,ID,FOLLOW_ID_in_keyUNDER_PATH10710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1497_tree = 
            cast(Object)adaptor.create(ID1497)
            ;
            adaptor.addChild(root_0, ID1497_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyUNDER_PATH"," ",328);
            if ( state.backtracking>0 ) { memoize(input, 328, keyUNDER_PATH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUNDER_PATH"


    public static class keyUNTIL_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUNTIL"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1801:1: keyUNTIL :{...}? ID ;
    public final PLSQL3_2_DParser.keyUNTIL_return keyUNTIL()  {
        debug(trace_rules) writeln("Entering rule:","keyUNTIL"," ",329);
        PLSQL3_2_DParser.keyUNTIL_return retval = new PLSQL3_2_DParser.keyUNTIL_return();
        retval.start = input.LT(1);

        int keyUNTIL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1498=null;

        Object ID1498_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1801:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1801:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "UNTIL")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNTIL", "toUpper(input.LT(1).getText)== \"UNTIL\"");
            }

            ID1498=cast(Token)match(input,ID,FOLLOW_ID_in_keyUNTIL10743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1498_tree = 
            cast(Object)adaptor.create(ID1498)
            ;
            adaptor.addChild(root_0, ID1498_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyUNTIL"," ",329);
            if ( state.backtracking>0 ) { memoize(input, 329, keyUNTIL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUNTIL"


    public static class keyUPDATED_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUPDATED"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1802:1: keyUPDATED :{...}? ID ;
    public final PLSQL3_2_DParser.keyUPDATED_return keyUPDATED()  {
        debug(trace_rules) writeln("Entering rule:","keyUPDATED"," ",330);
        PLSQL3_2_DParser.keyUPDATED_return retval = new PLSQL3_2_DParser.keyUPDATED_return();
        retval.start = input.LT(1);

        int keyUPDATED_StartIndex = input.index();

        Object root_0 = null;

        Token ID1499=null;

        Object ID1499_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1802:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1802:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "UPDATED")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPDATED", "toUpper(input.LT(1).getText)== \"UPDATED\"");
            }

            ID1499=cast(Token)match(input,ID,FOLLOW_ID_in_keyUPDATED10774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1499_tree = 
            cast(Object)adaptor.create(ID1499)
            ;
            adaptor.addChild(root_0, ID1499_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyUPDATED"," ",330);
            if ( state.backtracking>0 ) { memoize(input, 330, keyUPDATED_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUPDATED"


    public static class keyUPSERT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUPSERT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1803:1: keyUPSERT :{...}? ID ;
    public final PLSQL3_2_DParser.keyUPSERT_return keyUPSERT()  {
        debug(trace_rules) writeln("Entering rule:","keyUPSERT"," ",331);
        PLSQL3_2_DParser.keyUPSERT_return retval = new PLSQL3_2_DParser.keyUPSERT_return();
        retval.start = input.LT(1);

        int keyUPSERT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1500=null;

        Object ID1500_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1803:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1803:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "UPSERT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPSERT", "toUpper(input.LT(1).getText)== \"UPSERT\"");
            }

            ID1500=cast(Token)match(input,ID,FOLLOW_ID_in_keyUPSERT10806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1500_tree = 
            cast(Object)adaptor.create(ID1500)
            ;
            adaptor.addChild(root_0, ID1500_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyUPSERT"," ",331);
            if ( state.backtracking>0 ) { memoize(input, 331, keyUPSERT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUPSERT"


    public static class keyWAIT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWAIT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1804:1: keyWAIT :{...}? ID ;
    public final PLSQL3_2_DParser.keyWAIT_return keyWAIT()  {
        debug(trace_rules) writeln("Entering rule:","keyWAIT"," ",332);
        PLSQL3_2_DParser.keyWAIT_return retval = new PLSQL3_2_DParser.keyWAIT_return();
        retval.start = input.LT(1);

        int keyWAIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1501=null;

        Object ID1501_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1804:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1804:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "WAIT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWAIT", "toUpper(input.LT(1).getText)== \"WAIT\"");
            }

            ID1501=cast(Token)match(input,ID,FOLLOW_ID_in_keyWAIT10840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1501_tree = 
            cast(Object)adaptor.create(ID1501)
            ;
            adaptor.addChild(root_0, ID1501_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyWAIT"," ",332);
            if ( state.backtracking>0 ) { memoize(input, 332, keyWAIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWAIT"


    public static class keyYEAR_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyYEAR"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1805:1: keyYEAR :{...}? ID ;
    public final PLSQL3_2_DParser.keyYEAR_return keyYEAR()  {
        debug(trace_rules) writeln("Entering rule:","keyYEAR"," ",333);
        PLSQL3_2_DParser.keyYEAR_return retval = new PLSQL3_2_DParser.keyYEAR_return();
        retval.start = input.LT(1);

        int keyYEAR_StartIndex = input.index();

        Object root_0 = null;

        Token ID1502=null;

        Object ID1502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1805:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1805:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "YEAR")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyYEAR", "toUpper(input.LT(1).getText)== \"YEAR\"");
            }

            ID1502=cast(Token)match(input,ID,FOLLOW_ID_in_keyYEAR10874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1502_tree = 
            cast(Object)adaptor.create(ID1502)
            ;
            adaptor.addChild(root_0, ID1502_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyYEAR"," ",333);
            if ( state.backtracking>0 ) { memoize(input, 333, keyYEAR_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyYEAR"


    public static class keyZONE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyZONE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1806:1: keyZONE :{...}? ID ;
    public final PLSQL3_2_DParser.keyZONE_return keyZONE()  {
        debug(trace_rules) writeln("Entering rule:","keyZONE"," ",334);
        PLSQL3_2_DParser.keyZONE_return retval = new PLSQL3_2_DParser.keyZONE_return();
        retval.start = input.LT(1);

        int keyZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1503=null;

        Object ID1503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1806:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1806:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ZONE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyZONE", "toUpper(input.LT(1).getText)== \"ZONE\"");
            }

            ID1503=cast(Token)match(input,ID,FOLLOW_ID_in_keyZONE10908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1503_tree = 
            cast(Object)adaptor.create(ID1503)
            ;
            adaptor.addChild(root_0, ID1503_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyZONE"," ",334);
            if ( state.backtracking>0 ) { memoize(input, 334, keyZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyZONE"


    public static class keyARRAY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyARRAY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1808:1: keyARRAY :{...}? ID ;
    public final PLSQL3_2_DParser.keyARRAY_return keyARRAY()  {
        debug(trace_rules) writeln("Entering rule:","keyARRAY"," ",335);
        PLSQL3_2_DParser.keyARRAY_return retval = new PLSQL3_2_DParser.keyARRAY_return();
        retval.start = input.LT(1);

        int keyARRAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1504=null;

        Object ID1504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1808:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1808:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "ARRAY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyARRAY", "toUpper(input.LT(1).getText)== \"ARRAY\"");
            }

            ID1504=cast(Token)match(input,ID,FOLLOW_ID_in_keyARRAY10942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1504_tree = 
            cast(Object)adaptor.create(ID1504)
            ;
            adaptor.addChild(root_0, ID1504_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyARRAY"," ",335);
            if ( state.backtracking>0 ) { memoize(input, 335, keyARRAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyARRAY"


    public static class keyAUTONOMOUS_TRANSACTION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyAUTONOMOUS_TRANSACTION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1809:1: keyAUTONOMOUS_TRANSACTION :{...}? ID ;
    public final PLSQL3_2_DParser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION()  {
        debug(trace_rules) writeln("Entering rule:","keyAUTONOMOUS_TRANSACTION"," ",336);
        PLSQL3_2_DParser.keyAUTONOMOUS_TRANSACTION_return retval = new PLSQL3_2_DParser.keyAUTONOMOUS_TRANSACTION_return();
        retval.start = input.LT(1);

        int keyAUTONOMOUS_TRANSACTION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1505=null;

        Object ID1505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1809:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1809:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "AUTONOMOUS_TRANSACTION")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTONOMOUS_TRANSACTION", "toUpper(input.LT(1).getText)== \"AUTONOMOUS_TRANSACTION\"");
            }

            ID1505=cast(Token)match(input,ID,FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1505_tree = 
            cast(Object)adaptor.create(ID1505)
            ;
            adaptor.addChild(root_0, ID1505_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyAUTONOMOUS_TRANSACTION"," ",336);
            if ( state.backtracking>0 ) { memoize(input, 336, keyAUTONOMOUS_TRANSACTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyAUTONOMOUS_TRANSACTION"


    public static class keyBODY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBODY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1810:1: keyBODY :{...}? ID ;
    public final PLSQL3_2_DParser.keyBODY_return keyBODY()  {
        debug(trace_rules) writeln("Entering rule:","keyBODY"," ",337);
        PLSQL3_2_DParser.keyBODY_return retval = new PLSQL3_2_DParser.keyBODY_return();
        retval.start = input.LT(1);

        int keyBODY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1506=null;

        Object ID1506_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1810:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1810:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "BODY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBODY", "toUpper(input.LT(1).getText)== \"BODY\"");
            }

            ID1506=cast(Token)match(input,ID,FOLLOW_ID_in_keyBODY10992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1506_tree = 
            cast(Object)adaptor.create(ID1506)
            ;
            adaptor.addChild(root_0, ID1506_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyBODY"," ",337);
            if ( state.backtracking>0 ) { memoize(input, 337, keyBODY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBODY"


    public static class keyBUILTIN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBUILTIN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1811:1: keyBUILTIN :{...}? ID ;
    public final PLSQL3_2_DParser.keyBUILTIN_return keyBUILTIN()  {
        debug(trace_rules) writeln("Entering rule:","keyBUILTIN"," ",338);
        PLSQL3_2_DParser.keyBUILTIN_return retval = new PLSQL3_2_DParser.keyBUILTIN_return();
        retval.start = input.LT(1);

        int keyBUILTIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1507=null;

        Object ID1507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1811:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1811:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "BUILTIN")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBUILTIN", "toUpper(input.LT(1).getText)== \"BUILTIN\"");
            }

            ID1507=cast(Token)match(input,ID,FOLLOW_ID_in_keyBUILTIN11023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1507_tree = 
            cast(Object)adaptor.create(ID1507)
            ;
            adaptor.addChild(root_0, ID1507_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyBUILTIN"," ",338);
            if ( state.backtracking>0 ) { memoize(input, 338, keyBUILTIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBUILTIN"


    public static class keyBULK_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBULK"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1812:1: keyBULK :{...}? ID ;
    public final PLSQL3_2_DParser.keyBULK_return keyBULK()  {
        debug(trace_rules) writeln("Entering rule:","keyBULK"," ",339);
        PLSQL3_2_DParser.keyBULK_return retval = new PLSQL3_2_DParser.keyBULK_return();
        retval.start = input.LT(1);

        int keyBULK_StartIndex = input.index();

        Object root_0 = null;

        Token ID1508=null;

        Object ID1508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1812:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1812:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "BULK")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBULK", "toUpper(input.LT(1).getText)== \"BULK\"");
            }

            ID1508=cast(Token)match(input,ID,FOLLOW_ID_in_keyBULK11057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1508_tree = 
            cast(Object)adaptor.create(ID1508)
            ;
            adaptor.addChild(root_0, ID1508_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyBULK"," ",339);
            if ( state.backtracking>0 ) { memoize(input, 339, keyBULK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBULK"


    public static class keyBYTE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBYTE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1813:1: keyBYTE :{...}? ID ;
    public final PLSQL3_2_DParser.keyBYTE_return keyBYTE()  {
        debug(trace_rules) writeln("Entering rule:","keyBYTE"," ",340);
        PLSQL3_2_DParser.keyBYTE_return retval = new PLSQL3_2_DParser.keyBYTE_return();
        retval.start = input.LT(1);

        int keyBYTE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1509=null;

        Object ID1509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1813:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1813:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "BYTE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBYTE", "toUpper(input.LT(1).getText)== \"BYTE\"");
            }

            ID1509=cast(Token)match(input,ID,FOLLOW_ID_in_keyBYTE11091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1509_tree = 
            cast(Object)adaptor.create(ID1509)
            ;
            adaptor.addChild(root_0, ID1509_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyBYTE"," ",340);
            if ( state.backtracking>0 ) { memoize(input, 340, keyBYTE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBYTE"


    public static class keyCLOSE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCLOSE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1814:1: keyCLOSE :{...}? ID ;
    public final PLSQL3_2_DParser.keyCLOSE_return keyCLOSE()  {
        debug(trace_rules) writeln("Entering rule:","keyCLOSE"," ",341);
        PLSQL3_2_DParser.keyCLOSE_return retval = new PLSQL3_2_DParser.keyCLOSE_return();
        retval.start = input.LT(1);

        int keyCLOSE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1510=null;

        Object ID1510_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1814:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1814:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "CLOSE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCLOSE", "toUpper(input.LT(1).getText)== \"CLOSE\"");
            }

            ID1510=cast(Token)match(input,ID,FOLLOW_ID_in_keyCLOSE11124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1510_tree = 
            cast(Object)adaptor.create(ID1510)
            ;
            adaptor.addChild(root_0, ID1510_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCLOSE"," ",341);
            if ( state.backtracking>0 ) { memoize(input, 341, keyCLOSE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCLOSE"


    public static class keyCOLLECT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCOLLECT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1815:1: keyCOLLECT :{...}? ID ;
    public final PLSQL3_2_DParser.keyCOLLECT_return keyCOLLECT()  {
        debug(trace_rules) writeln("Entering rule:","keyCOLLECT"," ",342);
        PLSQL3_2_DParser.keyCOLLECT_return retval = new PLSQL3_2_DParser.keyCOLLECT_return();
        retval.start = input.LT(1);

        int keyCOLLECT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1511=null;

        Object ID1511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1815:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1815:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "COLLECT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOLLECT", "toUpper(input.LT(1).getText)== \"COLLECT\"");
            }

            ID1511=cast(Token)match(input,ID,FOLLOW_ID_in_keyCOLLECT11155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1511_tree = 
            cast(Object)adaptor.create(ID1511)
            ;
            adaptor.addChild(root_0, ID1511_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCOLLECT"," ",342);
            if ( state.backtracking>0 ) { memoize(input, 342, keyCOLLECT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCOLLECT"


    public static class keyCURSOR_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCURSOR"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1816:1: keyCURSOR :{...}? ID ;
    public final PLSQL3_2_DParser.keyCURSOR_return keyCURSOR()  {
        debug(trace_rules) writeln("Entering rule:","keyCURSOR"," ",343);
        PLSQL3_2_DParser.keyCURSOR_return retval = new PLSQL3_2_DParser.keyCURSOR_return();
        retval.start = input.LT(1);

        int keyCURSOR_StartIndex = input.index();

        Object root_0 = null;

        Token ID1512=null;

        Object ID1512_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1816:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1816:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "CURSOR")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURSOR", "toUpper(input.LT(1).getText)== \"CURSOR\"");
            }

            ID1512=cast(Token)match(input,ID,FOLLOW_ID_in_keyCURSOR11187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1512_tree = 
            cast(Object)adaptor.create(ID1512)
            ;
            adaptor.addChild(root_0, ID1512_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyCURSOR"," ",343);
            if ( state.backtracking>0 ) { memoize(input, 343, keyCURSOR_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCURSOR"


    public static class keyELSIF_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyELSIF"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1817:1: keyELSIF : 'ELSIF' ;
    public final PLSQL3_2_DParser.keyELSIF_return keyELSIF()  {
        debug(trace_rules) writeln("Entering rule:","keyELSIF"," ",344);
        PLSQL3_2_DParser.keyELSIF_return retval = new PLSQL3_2_DParser.keyELSIF_return();
        retval.start = input.LT(1);

        int keyELSIF_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1513=null;

        Object string_literal1513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1817:34: ( 'ELSIF' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1817:36: 'ELSIF'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1513=cast(Token)match(input,96,FOLLOW_96_in_keyELSIF11218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1513_tree = 
            cast(Object)adaptor.create(string_literal1513)
            ;
            adaptor.addChild(root_0, string_literal1513_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyELSIF"," ",344);
            if ( state.backtracking>0 ) { memoize(input, 344, keyELSIF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyELSIF"


    public static class keyEXCEPTION_INIT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEXCEPTION_INIT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1818:1: keyEXCEPTION_INIT :{...}? ID ;
    public final PLSQL3_2_DParser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT()  {
        debug(trace_rules) writeln("Entering rule:","keyEXCEPTION_INIT"," ",345);
        PLSQL3_2_DParser.keyEXCEPTION_INIT_return retval = new PLSQL3_2_DParser.keyEXCEPTION_INIT_return();
        retval.start = input.LT(1);

        int keyEXCEPTION_INIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1514=null;

        Object ID1514_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1818:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1818:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "EXCEPTION_INIT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXCEPTION_INIT", "toUpper(input.LT(1).getText)== \"EXCEPTION_INIT\"");
            }

            ID1514=cast(Token)match(input,ID,FOLLOW_ID_in_keyEXCEPTION_INIT11243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1514_tree = 
            cast(Object)adaptor.create(ID1514)
            ;
            adaptor.addChild(root_0, ID1514_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyEXCEPTION_INIT"," ",345);
            if ( state.backtracking>0 ) { memoize(input, 345, keyEXCEPTION_INIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEXCEPTION_INIT"


    public static class keyEXIT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEXIT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1819:1: keyEXIT :{...}? ID ;
    public final PLSQL3_2_DParser.keyEXIT_return keyEXIT()  {
        debug(trace_rules) writeln("Entering rule:","keyEXIT"," ",346);
        PLSQL3_2_DParser.keyEXIT_return retval = new PLSQL3_2_DParser.keyEXIT_return();
        retval.start = input.LT(1);

        int keyEXIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1515=null;

        Object ID1515_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1819:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1819:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "EXIT")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXIT", "toUpper(input.LT(1).getText)== \"EXIT\"");
            }

            ID1515=cast(Token)match(input,ID,FOLLOW_ID_in_keyEXIT11277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1515_tree = 
            cast(Object)adaptor.create(ID1515)
            ;
            adaptor.addChild(root_0, ID1515_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyEXIT"," ",346);
            if ( state.backtracking>0 ) { memoize(input, 346, keyEXIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEXIT"


    public static class keyFIPSFLAG_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFIPSFLAG"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1820:1: keyFIPSFLAG :{...}? ID ;
    public final PLSQL3_2_DParser.keyFIPSFLAG_return keyFIPSFLAG()  {
        debug(trace_rules) writeln("Entering rule:","keyFIPSFLAG"," ",347);
        PLSQL3_2_DParser.keyFIPSFLAG_return retval = new PLSQL3_2_DParser.keyFIPSFLAG_return();
        retval.start = input.LT(1);

        int keyFIPSFLAG_StartIndex = input.index();

        Object root_0 = null;

        Token ID1516=null;

        Object ID1516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1820:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1820:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "FIPSFLAG")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIPSFLAG", "toUpper(input.LT(1).getText)== \"FIPSFLAG\"");
            }

            ID1516=cast(Token)match(input,ID,FOLLOW_ID_in_keyFIPSFLAG11307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1516_tree = 
            cast(Object)adaptor.create(ID1516)
            ;
            adaptor.addChild(root_0, ID1516_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyFIPSFLAG"," ",347);
            if ( state.backtracking>0 ) { memoize(input, 347, keyFIPSFLAG_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFIPSFLAG"


    public static class keyFUNCTION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFUNCTION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1821:1: keyFUNCTION : 'FUNCTION' ;
    public final PLSQL3_2_DParser.keyFUNCTION_return keyFUNCTION()  {
        debug(trace_rules) writeln("Entering rule:","keyFUNCTION"," ",348);
        PLSQL3_2_DParser.keyFUNCTION_return retval = new PLSQL3_2_DParser.keyFUNCTION_return();
        retval.start = input.LT(1);

        int keyFUNCTION_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1517=null;

        Object string_literal1517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1821:34: ( 'FUNCTION' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1821:36: 'FUNCTION'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1517=cast(Token)match(input,107,FOLLOW_107_in_keyFUNCTION11335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1517_tree = 
            cast(Object)adaptor.create(string_literal1517)
            ;
            adaptor.addChild(root_0, string_literal1517_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyFUNCTION"," ",348);
            if ( state.backtracking>0 ) { memoize(input, 348, keyFUNCTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFUNCTION"


    public static class keyINTERFACE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINTERFACE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1822:1: keyINTERFACE :{...}? ID ;
    public final PLSQL3_2_DParser.keyINTERFACE_return keyINTERFACE()  {
        debug(trace_rules) writeln("Entering rule:","keyINTERFACE"," ",349);
        PLSQL3_2_DParser.keyINTERFACE_return retval = new PLSQL3_2_DParser.keyINTERFACE_return();
        retval.start = input.LT(1);

        int keyINTERFACE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1518=null;

        Object ID1518_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1822:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1822:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "INTERFACE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERFACE", "toUpper(input.LT(1).getText)== \"INTERFACE\"");
            }

            ID1518=cast(Token)match(input,ID,FOLLOW_ID_in_keyINTERFACE11365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1518_tree = 
            cast(Object)adaptor.create(ID1518)
            ;
            adaptor.addChild(root_0, ID1518_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyINTERFACE"," ",349);
            if ( state.backtracking>0 ) { memoize(input, 349, keyINTERFACE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINTERFACE"


    public static class keyLOOP_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLOOP"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1823:1: keyLOOP : 'LOOP' ;
    public final PLSQL3_2_DParser.keyLOOP_return keyLOOP()  {
        debug(trace_rules) writeln("Entering rule:","keyLOOP"," ",350);
        PLSQL3_2_DParser.keyLOOP_return retval = new PLSQL3_2_DParser.keyLOOP_return();
        retval.start = input.LT(1);

        int keyLOOP_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1519=null;

        Object string_literal1519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1823:34: ( 'LOOP' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1823:36: 'LOOP'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1519=cast(Token)match(input,124,FOLLOW_124_in_keyLOOP11397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1519_tree = 
            cast(Object)adaptor.create(string_literal1519)
            ;
            adaptor.addChild(root_0, string_literal1519_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyLOOP"," ",350);
            if ( state.backtracking>0 ) { memoize(input, 350, keyLOOP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLOOP"


    public static class keyNEW_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNEW"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1824:1: keyNEW :{...}? ID ;
    public final PLSQL3_2_DParser.keyNEW_return keyNEW()  {
        debug(trace_rules) writeln("Entering rule:","keyNEW"," ",351);
        PLSQL3_2_DParser.keyNEW_return retval = new PLSQL3_2_DParser.keyNEW_return();
        retval.start = input.LT(1);

        int keyNEW_StartIndex = input.index();

        Object root_0 = null;

        Token ID1520=null;

        Object ID1520_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1824:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1824:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NEW")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW", "toUpper(input.LT(1).getText)== \"NEW\"");
            }

            ID1520=cast(Token)match(input,ID,FOLLOW_ID_in_keyNEW11433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1520_tree = 
            cast(Object)adaptor.create(ID1520)
            ;
            adaptor.addChild(root_0, ID1520_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNEW"," ",351);
            if ( state.backtracking>0 ) { memoize(input, 351, keyNEW_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNEW"


    public static class keyNEW_NAMES_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNEW_NAMES"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1825:1: keyNEW_NAMES :{...}? ID ;
    public final PLSQL3_2_DParser.keyNEW_NAMES_return keyNEW_NAMES()  {
        debug(trace_rules) writeln("Entering rule:","keyNEW_NAMES"," ",352);
        PLSQL3_2_DParser.keyNEW_NAMES_return retval = new PLSQL3_2_DParser.keyNEW_NAMES_return();
        retval.start = input.LT(1);

        int keyNEW_NAMES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1521=null;

        Object ID1521_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1825:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1825:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "NEW_NAMES")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW_NAMES", "toUpper(input.LT(1).getText)== \"NEW_NAMES\"");
            }

            ID1521=cast(Token)match(input,ID,FOLLOW_ID_in_keyNEW_NAMES11462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1521_tree = 
            cast(Object)adaptor.create(ID1521)
            ;
            adaptor.addChild(root_0, ID1521_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyNEW_NAMES"," ",352);
            if ( state.backtracking>0 ) { memoize(input, 352, keyNEW_NAMES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNEW_NAMES"


    public static class keyOPEN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOPEN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1826:1: keyOPEN :{...}? ID ;
    public final PLSQL3_2_DParser.keyOPEN_return keyOPEN()  {
        debug(trace_rules) writeln("Entering rule:","keyOPEN"," ",353);
        PLSQL3_2_DParser.keyOPEN_return retval = new PLSQL3_2_DParser.keyOPEN_return();
        retval.start = input.LT(1);

        int keyOPEN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1522=null;

        Object ID1522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1826:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1826:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "OPEN")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOPEN", "toUpper(input.LT(1).getText)== \"OPEN\"");
            }

            ID1522=cast(Token)match(input,ID,FOLLOW_ID_in_keyOPEN11496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1522_tree = 
            cast(Object)adaptor.create(ID1522)
            ;
            adaptor.addChild(root_0, ID1522_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyOPEN"," ",353);
            if ( state.backtracking>0 ) { memoize(input, 353, keyOPEN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOPEN"


    public static class keyOUT_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOUT"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1827:1: keyOUT : 'OUT' ;
    public final PLSQL3_2_DParser.keyOUT_return keyOUT()  {
        debug(trace_rules) writeln("Entering rule:","keyOUT"," ",354);
        PLSQL3_2_DParser.keyOUT_return retval = new PLSQL3_2_DParser.keyOUT_return();
        retval.start = input.LT(1);

        int keyOUT_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1523=null;

        Object string_literal1523_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1827:34: ( 'OUT' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1827:36: 'OUT'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1523=cast(Token)match(input,146,FOLLOW_146_in_keyOUT11529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1523_tree = 
            cast(Object)adaptor.create(string_literal1523)
            ;
            adaptor.addChild(root_0, string_literal1523_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyOUT"," ",354);
            if ( state.backtracking>0 ) { memoize(input, 354, keyOUT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOUT"


    public static class keyPACKAGE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPACKAGE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1828:1: keyPACKAGE : 'PACKAGE' ;
    public final PLSQL3_2_DParser.keyPACKAGE_return keyPACKAGE()  {
        debug(trace_rules) writeln("Entering rule:","keyPACKAGE"," ",355);
        PLSQL3_2_DParser.keyPACKAGE_return retval = new PLSQL3_2_DParser.keyPACKAGE_return();
        retval.start = input.LT(1);

        int keyPACKAGE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1524=null;

        Object string_literal1524_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1828:34: ( 'PACKAGE' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1828:36: 'PACKAGE'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1524=cast(Token)match(input,147,FOLLOW_147_in_keyPACKAGE11559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1524_tree = 
            cast(Object)adaptor.create(string_literal1524)
            ;
            adaptor.addChild(root_0, string_literal1524_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyPACKAGE"," ",355);
            if ( state.backtracking>0 ) { memoize(input, 355, keyPACKAGE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPACKAGE"


    public static class keyPRAGMA_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRAGMA"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1829:1: keyPRAGMA : 'PRAGMA' ;
    public final PLSQL3_2_DParser.keyPRAGMA_return keyPRAGMA()  {
        debug(trace_rules) writeln("Entering rule:","keyPRAGMA"," ",356);
        PLSQL3_2_DParser.keyPRAGMA_return retval = new PLSQL3_2_DParser.keyPRAGMA_return();
        retval.start = input.LT(1);

        int keyPRAGMA_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1525=null;

        Object string_literal1525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1829:34: ( 'PRAGMA' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1829:36: 'PRAGMA'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1525=cast(Token)match(input,150,FOLLOW_150_in_keyPRAGMA11590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1525_tree = 
            cast(Object)adaptor.create(string_literal1525)
            ;
            adaptor.addChild(root_0, string_literal1525_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyPRAGMA"," ",356);
            if ( state.backtracking>0 ) { memoize(input, 356, keyPRAGMA_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRAGMA"


    public static class keyRAISE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRAISE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1830:1: keyRAISE : 'RAISE' ;
    public final PLSQL3_2_DParser.keyRAISE_return keyRAISE()  {
        debug(trace_rules) writeln("Entering rule:","keyRAISE"," ",357);
        PLSQL3_2_DParser.keyRAISE_return retval = new PLSQL3_2_DParser.keyRAISE_return();
        retval.start = input.LT(1);

        int keyRAISE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1526=null;

        Object string_literal1526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1830:34: ( 'RAISE' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1830:36: 'RAISE'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1526=cast(Token)match(input,154,FOLLOW_154_in_keyRAISE11622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1526_tree = 
            cast(Object)adaptor.create(string_literal1526)
            ;
            adaptor.addChild(root_0, string_literal1526_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRAISE"," ",357);
            if ( state.backtracking>0 ) { memoize(input, 357, keyRAISE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRAISE"


    public static class keyRANGE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRANGE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1831:1: keyRANGE :{...}? ID ;
    public final PLSQL3_2_DParser.keyRANGE_return keyRANGE()  {
        debug(trace_rules) writeln("Entering rule:","keyRANGE"," ",358);
        PLSQL3_2_DParser.keyRANGE_return retval = new PLSQL3_2_DParser.keyRANGE_return();
        retval.start = input.LT(1);

        int keyRANGE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1527=null;

        Object ID1527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1831:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1831:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "RANGE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRANGE", "toUpper(input.LT(1).getText)== \"RANGE\"");
            }

            ID1527=cast(Token)match(input,ID,FOLLOW_ID_in_keyRANGE11656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1527_tree = 
            cast(Object)adaptor.create(ID1527)
            ;
            adaptor.addChild(root_0, ID1527_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRANGE"," ",358);
            if ( state.backtracking>0 ) { memoize(input, 358, keyRANGE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRANGE"


    public static class keyREAD_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREAD"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1832:1: keyREAD :{...}? ID ;
    public final PLSQL3_2_DParser.keyREAD_return keyREAD()  {
        debug(trace_rules) writeln("Entering rule:","keyREAD"," ",359);
        PLSQL3_2_DParser.keyREAD_return retval = new PLSQL3_2_DParser.keyREAD_return();
        retval.start = input.LT(1);

        int keyREAD_StartIndex = input.index();

        Object root_0 = null;

        Token ID1528=null;

        Object ID1528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1832:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1832:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "READ")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREAD", "toUpper(input.LT(1).getText)== \"READ\"");
            }

            ID1528=cast(Token)match(input,ID,FOLLOW_ID_in_keyREAD11690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1528_tree = 
            cast(Object)adaptor.create(ID1528)
            ;
            adaptor.addChild(root_0, ID1528_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREAD"," ",359);
            if ( state.backtracking>0 ) { memoize(input, 359, keyREAD_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREAD"


    public static class keyRECORD_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRECORD"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1833:1: keyRECORD : 'RECORD' ;
    public final PLSQL3_2_DParser.keyRECORD_return keyRECORD()  {
        debug(trace_rules) writeln("Entering rule:","keyRECORD"," ",360);
        PLSQL3_2_DParser.keyRECORD_return retval = new PLSQL3_2_DParser.keyRECORD_return();
        retval.start = input.LT(1);

        int keyRECORD_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1529=null;

        Object string_literal1529_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1833:34: ( 'RECORD' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1833:36: 'RECORD'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1529=cast(Token)match(input,157,FOLLOW_157_in_keyRECORD11720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1529_tree = 
            cast(Object)adaptor.create(string_literal1529)
            ;
            adaptor.addChild(root_0, string_literal1529_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRECORD"," ",360);
            if ( state.backtracking>0 ) { memoize(input, 360, keyRECORD_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRECORD"


    public static class keyREF_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREF"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1834:1: keyREF :{...}? ID ;
    public final PLSQL3_2_DParser.keyREF_return keyREF()  {
        debug(trace_rules) writeln("Entering rule:","keyREF"," ",361);
        PLSQL3_2_DParser.keyREF_return retval = new PLSQL3_2_DParser.keyREF_return();
        retval.start = input.LT(1);

        int keyREF_StartIndex = input.index();

        Object root_0 = null;

        Token ID1530=null;

        Object ID1530_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1834:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1834:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "REF")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREF", "toUpper(input.LT(1).getText)== \"REF\"");
            }

            ID1530=cast(Token)match(input,ID,FOLLOW_ID_in_keyREF11756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1530_tree = 
            cast(Object)adaptor.create(ID1530)
            ;
            adaptor.addChild(root_0, ID1530_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREF"," ",361);
            if ( state.backtracking>0 ) { memoize(input, 361, keyREF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREF"


    public static class keyREPLACE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREPLACE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1835:1: keyREPLACE :{...}? ID ;
    public final PLSQL3_2_DParser.keyREPLACE_return keyREPLACE()  {
        debug(trace_rules) writeln("Entering rule:","keyREPLACE"," ",362);
        PLSQL3_2_DParser.keyREPLACE_return retval = new PLSQL3_2_DParser.keyREPLACE_return();
        retval.start = input.LT(1);

        int keyREPLACE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1531=null;

        Object ID1531_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1835:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1835:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "REPLACE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREPLACE", "toUpper(input.LT(1).getText)== \"REPLACE\"");
            }

            ID1531=cast(Token)match(input,ID,FOLLOW_ID_in_keyREPLACE11787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1531_tree = 
            cast(Object)adaptor.create(ID1531)
            ;
            adaptor.addChild(root_0, ID1531_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREPLACE"," ",362);
            if ( state.backtracking>0 ) { memoize(input, 362, keyREPLACE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREPLACE"


    public static class keyRESTRICT_REFERENCES_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRESTRICT_REFERENCES"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1836:1: keyRESTRICT_REFERENCES :{...}? ID ;
    public final PLSQL3_2_DParser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES()  {
        debug(trace_rules) writeln("Entering rule:","keyRESTRICT_REFERENCES"," ",363);
        PLSQL3_2_DParser.keyRESTRICT_REFERENCES_return retval = new PLSQL3_2_DParser.keyRESTRICT_REFERENCES_return();
        retval.start = input.LT(1);

        int keyRESTRICT_REFERENCES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1532=null;

        Object ID1532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1836:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1836:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "RESTRICT_REFERENCES")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRESTRICT_REFERENCES", "toUpper(input.LT(1).getText)== \"RESTRICT_REFERENCES\"");
            }

            ID1532=cast(Token)match(input,ID,FOLLOW_ID_in_keyRESTRICT_REFERENCES11806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1532_tree = 
            cast(Object)adaptor.create(ID1532)
            ;
            adaptor.addChild(root_0, ID1532_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRESTRICT_REFERENCES"," ",363);
            if ( state.backtracking>0 ) { memoize(input, 363, keyRESTRICT_REFERENCES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRESTRICT_REFERENCES"


    public static class keyRETURN_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRETURN"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1837:1: keyRETURN : 'RETURN' ;
    public final PLSQL3_2_DParser.keyRETURN_return keyRETURN()  {
        debug(trace_rules) writeln("Entering rule:","keyRETURN"," ",364);
        PLSQL3_2_DParser.keyRETURN_return retval = new PLSQL3_2_DParser.keyRETURN_return();
        retval.start = input.LT(1);

        int keyRETURN_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1533=null;

        Object string_literal1533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1837:34: ( 'RETURN' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1837:36: 'RETURN'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1533=cast(Token)match(input,158,FOLLOW_158_in_keyRETURN11836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1533_tree = 
            cast(Object)adaptor.create(string_literal1533)
            ;
            adaptor.addChild(root_0, string_literal1533_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRETURN"," ",364);
            if ( state.backtracking>0 ) { memoize(input, 364, keyRETURN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRETURN"


    public static class keyRETURNING_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRETURNING"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1838:1: keyRETURNING : 'RETURNING' ;
    public final PLSQL3_2_DParser.keyRETURNING_return keyRETURNING()  {
        debug(trace_rules) writeln("Entering rule:","keyRETURNING"," ",365);
        PLSQL3_2_DParser.keyRETURNING_return retval = new PLSQL3_2_DParser.keyRETURNING_return();
        retval.start = input.LT(1);

        int keyRETURNING_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1534=null;

        Object string_literal1534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1838:34: ( 'RETURNING' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1838:36: 'RETURNING'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1534=cast(Token)match(input,159,FOLLOW_159_in_keyRETURNING11864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1534_tree = 
            cast(Object)adaptor.create(string_literal1534)
            ;
            adaptor.addChild(root_0, string_literal1534_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyRETURNING"," ",365);
            if ( state.backtracking>0 ) { memoize(input, 365, keyRETURNING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRETURNING"


    public static class keyREVERSE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREVERSE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1839:1: keyREVERSE :{...}? ID ;
    public final PLSQL3_2_DParser.keyREVERSE_return keyREVERSE()  {
        debug(trace_rules) writeln("Entering rule:","keyREVERSE"," ",366);
        PLSQL3_2_DParser.keyREVERSE_return retval = new PLSQL3_2_DParser.keyREVERSE_return();
        retval.start = input.LT(1);

        int keyREVERSE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1535=null;

        Object ID1535_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1839:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1839:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "REVERSE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREVERSE", "toUpper(input.LT(1).getText)== \"REVERSE\"");
            }

            ID1535=cast(Token)match(input,ID,FOLLOW_ID_in_keyREVERSE11896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1535_tree = 
            cast(Object)adaptor.create(ID1535)
            ;
            adaptor.addChild(root_0, ID1535_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyREVERSE"," ",366);
            if ( state.backtracking>0 ) { memoize(input, 366, keyREVERSE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREVERSE"


    public static class keyROLLBACK_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyROLLBACK"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1840:1: keyROLLBACK : 'ROLLBACK' ;
    public final PLSQL3_2_DParser.keyROLLBACK_return keyROLLBACK()  {
        debug(trace_rules) writeln("Entering rule:","keyROLLBACK"," ",367);
        PLSQL3_2_DParser.keyROLLBACK_return retval = new PLSQL3_2_DParser.keyROLLBACK_return();
        retval.start = input.LT(1);

        int keyROLLBACK_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1536=null;

        Object string_literal1536_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1840:34: ( 'ROLLBACK' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1840:36: 'ROLLBACK'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1536=cast(Token)match(input,160,FOLLOW_160_in_keyROLLBACK11924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1536_tree = 
            cast(Object)adaptor.create(string_literal1536)
            ;
            adaptor.addChild(root_0, string_literal1536_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyROLLBACK"," ",367);
            if ( state.backtracking>0 ) { memoize(input, 367, keyROLLBACK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyROLLBACK"


    public static class keySERIALLY_REUSABLE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySERIALLY_REUSABLE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1841:1: keySERIALLY_REUSABLE :{...}? ID ;
    public final PLSQL3_2_DParser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE()  {
        debug(trace_rules) writeln("Entering rule:","keySERIALLY_REUSABLE"," ",368);
        PLSQL3_2_DParser.keySERIALLY_REUSABLE_return retval = new PLSQL3_2_DParser.keySERIALLY_REUSABLE_return();
        retval.start = input.LT(1);

        int keySERIALLY_REUSABLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1537=null;

        Object ID1537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 368) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1841:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1841:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SERIALLY_REUSABLE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySERIALLY_REUSABLE", "toUpper(input.LT(1).getText)== \"SERIALLY_REUSABLE\"");
            }

            ID1537=cast(Token)match(input,ID,FOLLOW_ID_in_keySERIALLY_REUSABLE11946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1537_tree = 
            cast(Object)adaptor.create(ID1537)
            ;
            adaptor.addChild(root_0, ID1537_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySERIALLY_REUSABLE"," ",368);
            if ( state.backtracking>0 ) { memoize(input, 368, keySERIALLY_REUSABLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySERIALLY_REUSABLE"


    public static class keySUBTYPE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySUBTYPE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1842:1: keySUBTYPE :{...}? ID ;
    public final PLSQL3_2_DParser.keySUBTYPE_return keySUBTYPE()  {
        debug(trace_rules) writeln("Entering rule:","keySUBTYPE"," ",369);
        PLSQL3_2_DParser.keySUBTYPE_return retval = new PLSQL3_2_DParser.keySUBTYPE_return();
        retval.start = input.LT(1);

        int keySUBTYPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1538=null;

        Object ID1538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 369) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1842:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1842:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "SUBTYPE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBTYPE", "toUpper(input.LT(1).getText)== \"SUBTYPE\"");
            }

            ID1538=cast(Token)match(input,ID,FOLLOW_ID_in_keySUBTYPE11977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1538_tree = 
            cast(Object)adaptor.create(ID1538)
            ;
            adaptor.addChild(root_0, ID1538_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keySUBTYPE"," ",369);
            if ( state.backtracking>0 ) { memoize(input, 369, keySUBTYPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySUBTYPE"


    public static class keyTRANSACTION_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTRANSACTION"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1843:1: keyTRANSACTION :{...}? ID ;
    public final PLSQL3_2_DParser.keyTRANSACTION_return keyTRANSACTION()  {
        debug(trace_rules) writeln("Entering rule:","keyTRANSACTION"," ",370);
        PLSQL3_2_DParser.keyTRANSACTION_return retval = new PLSQL3_2_DParser.keyTRANSACTION_return();
        retval.start = input.LT(1);

        int keyTRANSACTION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1539=null;

        Object ID1539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 370) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1843:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1843:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "TRANSACTION")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRANSACTION", "toUpper(input.LT(1).getText)== \"TRANSACTION\"");
            }

            ID1539=cast(Token)match(input,ID,FOLLOW_ID_in_keyTRANSACTION12004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1539_tree = 
            cast(Object)adaptor.create(ID1539)
            ;
            adaptor.addChild(root_0, ID1539_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyTRANSACTION"," ",370);
            if ( state.backtracking>0 ) { memoize(input, 370, keyTRANSACTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTRANSACTION"


    public static class keyTYPE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTYPE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1844:1: keyTYPE :{...}? ID ;
    public final PLSQL3_2_DParser.keyTYPE_return keyTYPE()  {
        debug(trace_rules) writeln("Entering rule:","keyTYPE"," ",371);
        PLSQL3_2_DParser.keyTYPE_return retval = new PLSQL3_2_DParser.keyTYPE_return();
        retval.start = input.LT(1);

        int keyTYPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1540=null;

        Object ID1540_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 371) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1844:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1844:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "TYPE")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTYPE", "toUpper(input.LT(1).getText)== \"TYPE\"");
            }

            ID1540=cast(Token)match(input,ID,FOLLOW_ID_in_keyTYPE12038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1540_tree = 
            cast(Object)adaptor.create(ID1540)
            ;
            adaptor.addChild(root_0, ID1540_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyTYPE"," ",371);
            if ( state.backtracking>0 ) { memoize(input, 371, keyTYPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTYPE"


    public static class keyUSING_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUSING"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1845:1: keyUSING :{...}? ID ;
    public final PLSQL3_2_DParser.keyUSING_return keyUSING()  {
        debug(trace_rules) writeln("Entering rule:","keyUSING"," ",372);
        PLSQL3_2_DParser.keyUSING_return retval = new PLSQL3_2_DParser.keyUSING_return();
        retval.start = input.LT(1);

        int keyUSING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1541=null;

        Object ID1541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 372) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1845:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1845:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "USING")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUSING", "toUpper(input.LT(1).getText)== \"USING\"");
            }

            ID1541=cast(Token)match(input,ID,FOLLOW_ID_in_keyUSING12071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1541_tree = 
            cast(Object)adaptor.create(ID1541)
            ;
            adaptor.addChild(root_0, ID1541_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyUSING"," ",372);
            if ( state.backtracking>0 ) { memoize(input, 372, keyUSING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUSING"


    public static class keyVARRAY_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyVARRAY"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1846:1: keyVARRAY :{...}? ID ;
    public final PLSQL3_2_DParser.keyVARRAY_return keyVARRAY()  {
        debug(trace_rules) writeln("Entering rule:","keyVARRAY"," ",373);
        PLSQL3_2_DParser.keyVARRAY_return retval = new PLSQL3_2_DParser.keyVARRAY_return();
        retval.start = input.LT(1);

        int keyVARRAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1542=null;

        Object ID1542_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 373) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1846:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1846:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "VARRAY")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARRAY", "toUpper(input.LT(1).getText)== \"VARRAY\"");
            }

            ID1542=cast(Token)match(input,ID,FOLLOW_ID_in_keyVARRAY12103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1542_tree = 
            cast(Object)adaptor.create(ID1542)
            ;
            adaptor.addChild(root_0, ID1542_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyVARRAY"," ",373);
            if ( state.backtracking>0 ) { memoize(input, 373, keyVARRAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyVARRAY"


    public static class keyVARYING_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyVARYING"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1847:1: keyVARYING :{...}? ID ;
    public final PLSQL3_2_DParser.keyVARYING_return keyVARYING()  {
        debug(trace_rules) writeln("Entering rule:","keyVARYING"," ",374);
        PLSQL3_2_DParser.keyVARYING_return retval = new PLSQL3_2_DParser.keyVARYING_return();
        retval.start = input.LT(1);

        int keyVARYING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1543=null;

        Object ID1543_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 374) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1847:33: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1847:35: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "VARYING")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARYING", "toUpper(input.LT(1).getText)== \"VARYING\"");
            }

            ID1543=cast(Token)match(input,ID,FOLLOW_ID_in_keyVARYING12133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1543_tree = 
            cast(Object)adaptor.create(ID1543)
            ;
            adaptor.addChild(root_0, ID1543_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyVARYING"," ",374);
            if ( state.backtracking>0 ) { memoize(input, 374, keyVARYING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyVARYING"


    public static class keyWHILE_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWHILE"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1848:1: keyWHILE : 'WHILE' ;
    public final PLSQL3_2_DParser.keyWHILE_return keyWHILE()  {
        debug(trace_rules) writeln("Entering rule:","keyWHILE"," ",375);
        PLSQL3_2_DParser.keyWHILE_return retval = new PLSQL3_2_DParser.keyWHILE_return();
        retval.start = input.LT(1);

        int keyWHILE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1544=null;

        Object string_literal1544_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 375) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1848:34: ( 'WHILE' )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1848:36: 'WHILE'
            {
            root_0 = cast(Object)adaptor.nil();


            string_literal1544=cast(Token)match(input,184,FOLLOW_184_in_keyWHILE12164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1544_tree = 
            cast(Object)adaptor.create(string_literal1544)
            ;
            adaptor.addChild(root_0, string_literal1544_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyWHILE"," ",375);
            if ( state.backtracking>0 ) { memoize(input, 375, keyWHILE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWHILE"


    public static class keyWORK_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWORK"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1849:1: keyWORK :{...}? ID ;
    public final PLSQL3_2_DParser.keyWORK_return keyWORK()  {
        debug(trace_rules) writeln("Entering rule:","keyWORK"," ",376);
        PLSQL3_2_DParser.keyWORK_return retval = new PLSQL3_2_DParser.keyWORK_return();
        retval.start = input.LT(1);

        int keyWORK_StartIndex = input.index();

        Object root_0 = null;

        Token ID1545=null;

        Object ID1545_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 376) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1849:34: ({...}? ID )
            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1849:36: {...}? ID
            {
            root_0 = cast(Object)adaptor.nil();


            if ( !((toUpper(input.LT(1).getText)== "WORK")) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWORK", "toUpper(input.LT(1).getText)== \"WORK\"");
            }

            ID1545=cast(Token)match(input,ID,FOLLOW_ID_in_keyWORK12199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1545_tree = 
            cast(Object)adaptor.create(ID1545)
            ;
            adaptor.addChild(root_0, ID1545_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","keyWORK"," ",376);
            if ( state.backtracking>0 ) { memoize(input, 376, keyWORK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWORK"


    public static class sql_identifier_return : ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_identifier"
    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1852:1: sql_identifier : ( identifier | 'ROWID' );
    public final PLSQL3_2_DParser.sql_identifier_return sql_identifier()  {
        debug(trace_rules) writeln("Entering rule:","sql_identifier"," ",377);
        PLSQL3_2_DParser.sql_identifier_return retval = new PLSQL3_2_DParser.sql_identifier_return();
        retval.start = input.LT(1);

        int sql_identifier_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1547=null;
        PLSQL3_2_DParser.identifier_return identifier1546 =null;


        Object string_literal1547_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 377) ) { return retval; }

            // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1853:2: ( identifier | 'ROWID' )
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==DOUBLEQUOTED_STRING||LA375_0==ID) ) {
                alt375=1;
            }
            else if ( (LA375_0==162) ) {
                alt375=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);

                throw nvae;

            }
            switch (alt375) {
                case 1 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1853:4: identifier
                    {
                    root_0 = cast(Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_sql_identifier12209);
                    identifier1546=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1546.getTree());

                    }
                    break;
                case 2 :
                    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1854:4: 'ROWID'
                    {
                    root_0 = cast(Object)adaptor.nil();


                    string_literal1547=cast(Token)match(input,162,FOLLOW_162_in_sql_identifier12214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1547_tree = 
                    cast(Object)adaptor.create(string_literal1547)
                    ;
                    adaptor.addChild(root_0, string_literal1547_tree);
                    }

                    }
                    break;

                default:
            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = cast(Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = cast(Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            debug(trace_rules) writeln("Leaving rule:","sql_identifier"," ",377);
            if ( state.backtracking>0 ) { memoize(input, 377, sql_identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_identifier"

    // $ANTLR start synpred32_PLSQL3_2_D
    public final void synpred32_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:450:4: ( type_declaration )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:450:4: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred32_PLSQL3_2_D470);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_PLSQL3_2_D

    // $ANTLR start synpred33_PLSQL3_2_D
    public final void synpred33_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:451:4: ( subtype_declaration )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:451:4: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred33_PLSQL3_2_D475);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_PLSQL3_2_D

    // $ANTLR start synpred46_PLSQL3_2_D
    public final void synpred46_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:29: ( keyNEW )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:470:29: keyNEW
        {
        pushFollow(FOLLOW_keyNEW_in_synpred46_PLSQL3_2_D597);
        keyNEW();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_PLSQL3_2_D

    // $ANTLR start synpred62_PLSQL3_2_D
    public final void synpred62_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:500:4: ( assignment_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:500:4: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred62_PLSQL3_2_D798);
        assignment_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_PLSQL3_2_D

    // $ANTLR start synpred63_PLSQL3_2_D
    public final void synpred63_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:501:4: ( exit_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:501:4: exit_statement
        {
        pushFollow(FOLLOW_exit_statement_in_synpred63_PLSQL3_2_D803);
        exit_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred63_PLSQL3_2_D

    // $ANTLR start synpred65_PLSQL3_2_D
    public final void synpred65_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:503:4: ( case_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:503:4: case_statement
        {
        pushFollow(FOLLOW_case_statement_in_synpred65_PLSQL3_2_D813);
        case_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred65_PLSQL3_2_D

    // $ANTLR start synpred67_PLSQL3_2_D
    public final void synpred67_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:505:4: ( loop_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:505:4: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred67_PLSQL3_2_D824);
        loop_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred67_PLSQL3_2_D

    // $ANTLR start synpred71_PLSQL3_2_D
    public final void synpred71_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:509:4: ( sql_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:509:4: sql_statement
        {
        pushFollow(FOLLOW_sql_statement_in_synpred71_PLSQL3_2_D845);
        sql_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred71_PLSQL3_2_D

    // $ANTLR start synpred72_PLSQL3_2_D
    public final void synpred72_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:510:4: ( plsql_block )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:510:4: plsql_block
        {
        pushFollow(FOLLOW_plsql_block_in_synpred72_PLSQL3_2_D850);
        plsql_block();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred72_PLSQL3_2_D

    // $ANTLR start synpred81_PLSQL3_2_D
    public final void synpred81_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:526:4: ( subtype_declaration )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:526:4: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred81_PLSQL3_2_D965);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_PLSQL3_2_D

    // $ANTLR start synpred89_PLSQL3_2_D
    public final void synpred89_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:534:4: ( type_declaration )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:534:4: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred89_PLSQL3_2_D1011);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred89_PLSQL3_2_D

    // $ANTLR start synpred92_PLSQL3_2_D
    public final void synpred92_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:5: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:5: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
        {
        pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_synpred92_PLSQL3_2_D1035);
        keyRESTRICT_REFERENCES();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred92_PLSQL3_2_D1037); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:35: ( 'DEFAULT' | function_name )
        int alt382=2;
        int LA382_0 = input.LA(1);

        if ( (LA382_0==90) ) {
            alt382=1;
        }
        else if ( (LA382_0==DOUBLEQUOTED_STRING||LA382_0==ID||LA382_0==QUOTED_STRING) ) {
            alt382=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 382, 0, input);

            throw nvae;

        }
        switch (alt382) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:37: 'DEFAULT'
               {
               match(input,90,FOLLOW_90_in_synpred92_PLSQL3_2_D1041); if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:49: function_name
               {
               pushFollow(FOLLOW_function_name_in_synpred92_PLSQL3_2_D1045);
               function_name();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:65: ( COMMA pragma_param )+
        int cnt383=0;
        loop383:
        do {
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==COMMA) ) {
                alt383=1;
            }


            switch (alt383) {
        	case 1 :
        	    // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:540:67: COMMA pragma_param
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred92_PLSQL3_2_D1051); if (state.failed) return ;

        	    pushFollow(FOLLOW_pragma_param_in_synpred92_PLSQL3_2_D1053);
        	    pragma_param();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt383 >= 1 ) break loop383;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(383, input);
                    throw eee;
            }
            cnt383++;
        } while (true);


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred92_PLSQL3_2_D1058); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred92_PLSQL3_2_D

    // $ANTLR start synpred93_PLSQL3_2_D
    public final void synpred93_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:541:5: ( keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:541:5: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
        {
        pushFollow(FOLLOW_keyEXCEPTION_INIT_in_synpred93_PLSQL3_2_D1065);
        keyEXCEPTION_INIT();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred93_PLSQL3_2_D1067); if (state.failed) return ;

        pushFollow(FOLLOW_exception_name_in_synpred93_PLSQL3_2_D1069);
        exception_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred93_PLSQL3_2_D1071); if (state.failed) return ;

        pushFollow(FOLLOW_literal_in_synpred93_PLSQL3_2_D1073);
        literal();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred93_PLSQL3_2_D1075); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred93_PLSQL3_2_D

    // $ANTLR start synpred94_PLSQL3_2_D
    public final void synpred94_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:542:5: ( keyAUTONOMOUS_TRANSACTION )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:542:5: keyAUTONOMOUS_TRANSACTION
        {
        pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred94_PLSQL3_2_D1081);
        keyAUTONOMOUS_TRANSACTION();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred94_PLSQL3_2_D

    // $ANTLR start synpred95_PLSQL3_2_D
    public final void synpred95_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:543:5: ( keySERIALLY_REUSABLE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:543:5: keySERIALLY_REUSABLE
        {
        pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_synpred95_PLSQL3_2_D1087);
        keySERIALLY_REUSABLE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred95_PLSQL3_2_D

    // $ANTLR start synpred96_PLSQL3_2_D
    public final void synpred96_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:544:5: ( keyBUILTIN LPAREN pragma_params RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:544:5: keyBUILTIN LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyBUILTIN_in_synpred96_PLSQL3_2_D1093);
        keyBUILTIN();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred96_PLSQL3_2_D1095); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred96_PLSQL3_2_D1097);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred96_PLSQL3_2_D1099); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred96_PLSQL3_2_D

    // $ANTLR start synpred97_PLSQL3_2_D
    public final void synpred97_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:545:5: ( keyFIPSFLAG LPAREN pragma_params RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:545:5: keyFIPSFLAG LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyFIPSFLAG_in_synpred97_PLSQL3_2_D1105);
        keyFIPSFLAG();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred97_PLSQL3_2_D1107); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred97_PLSQL3_2_D1109);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred97_PLSQL3_2_D1111); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred97_PLSQL3_2_D

    // $ANTLR start synpred98_PLSQL3_2_D
    public final void synpred98_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:546:5: ( keyINTERFACE LPAREN pragma_params RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:546:5: keyINTERFACE LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyINTERFACE_in_synpred98_PLSQL3_2_D1117);
        keyINTERFACE();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred98_PLSQL3_2_D1119); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred98_PLSQL3_2_D1121);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred98_PLSQL3_2_D1123); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred98_PLSQL3_2_D

    // $ANTLR start synpred99_PLSQL3_2_D
    public final void synpred99_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:547:5: ( keyNEW_NAMES LPAREN pragma_params RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:547:5: keyNEW_NAMES LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyNEW_NAMES_in_synpred99_PLSQL3_2_D1129);
        keyNEW_NAMES();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred99_PLSQL3_2_D1131); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred99_PLSQL3_2_D1133);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred99_PLSQL3_2_D1135); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred99_PLSQL3_2_D

    // $ANTLR start synpred133_PLSQL3_2_D
    public final void synpred133_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:4: ( keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:4: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred133_PLSQL3_2_D1522);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyDAY_in_synpred133_PLSQL3_2_D1524);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:23: ( LPAREN NUMBER RPAREN )?
        int alt392=2;
        int LA392_0 = input.LA(1);

        if ( (LA392_0==LPAREN) ) {
            alt392=1;
        }
        switch (alt392) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:25: LPAREN NUMBER RPAREN
               {
               match(input,LPAREN,FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1528); if (state.failed) return ;

               match(input,NUMBER,FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1530); if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1532); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,173,FOLLOW_173_in_synpred133_PLSQL3_2_D1537); if (state.failed) return ;

        pushFollow(FOLLOW_keySECOND_in_synpred133_PLSQL3_2_D1539);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:64: ( LPAREN NUMBER RPAREN )?
        int alt393=2;
        int LA393_0 = input.LA(1);

        if ( (LA393_0==LPAREN) ) {
            alt393=1;
        }
        switch (alt393) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:614:66: LPAREN NUMBER RPAREN
               {
               match(input,LPAREN,FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1543); if (state.failed) return ;

               match(input,NUMBER,FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1545); if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1547); if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred133_PLSQL3_2_D

    // $ANTLR start synpred135_PLSQL3_2_D
    public final void synpred135_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:4: ( keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:4: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred135_PLSQL3_2_D1555);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyYEAR_in_synpred135_PLSQL3_2_D1557);
        keyYEAR();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:24: ( LPAREN NUMBER RPAREN )?
        int alt394=2;
        int LA394_0 = input.LA(1);

        if ( (LA394_0==LPAREN) ) {
            alt394=1;
        }
        switch (alt394) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:615:26: LPAREN NUMBER RPAREN
               {
               match(input,LPAREN,FOLLOW_LPAREN_in_synpred135_PLSQL3_2_D1561); if (state.failed) return ;

               match(input,NUMBER,FOLLOW_NUMBER_in_synpred135_PLSQL3_2_D1563); if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred135_PLSQL3_2_D1565); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,173,FOLLOW_173_in_synpred135_PLSQL3_2_D1570); if (state.failed) return ;

        pushFollow(FOLLOW_keyMONTH_in_synpred135_PLSQL3_2_D1572);
        keyMONTH();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred135_PLSQL3_2_D

    // $ANTLR start synpred136_PLSQL3_2_D
    public final void synpred136_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:6: ( keyTIME )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:616:6: keyTIME
        {
        pushFollow(FOLLOW_keyTIME_in_synpred136_PLSQL3_2_D1579);
        keyTIME();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred136_PLSQL3_2_D

    // $ANTLR start synpred191_PLSQL3_2_D
    public final void synpred191_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:642:4: ( datatype )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:642:4: datatype
        {
        pushFollow(FOLLOW_datatype_in_synpred191_PLSQL3_2_D2048);
        datatype();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred191_PLSQL3_2_D

    // $ANTLR start synpred251_PLSQL3_2_D
    public final void synpred251_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:28: ({...}? LPAREN ( call_parameters )? RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:28: {...}? LPAREN ( call_parameters )? RPAREN
        {
        if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred251_PLSQL3_2_D", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred251_PLSQL3_2_D3216); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:110: ( call_parameters )?
        int alt438=2;
        int LA438_0 = input.LA(1);

        if ( (LA438_0==DOUBLEQUOTED_STRING||LA438_0==ID||LA438_0==LPAREN||LA438_0==MINUS||LA438_0==NUMBER||LA438_0==PLUS||LA438_0==QUOTED_STRING||LA438_0==76||LA438_0==93||LA438_0==101||LA438_0==134||LA438_0==136||LA438_0==162||LA438_0==165||LA438_0==169||LA438_0==174) ) {
            alt438=1;
        }
        switch (alt438) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:856:112: call_parameters
               {
               pushFollow(FOLLOW_call_parameters_in_synpred251_PLSQL3_2_D3220);
               call_parameters();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred251_PLSQL3_2_D3225); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred251_PLSQL3_2_D

    // $ANTLR start synpred258_PLSQL3_2_D
    public final void synpred258_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:895:7: ( numeric_loop_param )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:895:9: numeric_loop_param
        {
        pushFollow(FOLLOW_numeric_loop_param_in_synpred258_PLSQL3_2_D3401);
        numeric_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred258_PLSQL3_2_D

    // $ANTLR start synpred259_PLSQL3_2_D
    public final void synpred259_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:896:7: ( cursor_loop_param )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:896:9: cursor_loop_param
        {
        pushFollow(FOLLOW_cursor_loop_param_in_synpred259_PLSQL3_2_D3417);
        cursor_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred259_PLSQL3_2_D

    // $ANTLR start synpred262_PLSQL3_2_D
    public final void synpred262_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:22: ( keyREVERSE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:907:22: keyREVERSE
        {
        pushFollow(FOLLOW_keyREVERSE_in_synpred262_PLSQL3_2_D3481);
        keyREVERSE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred262_PLSQL3_2_D

    // $ANTLR start synpred272_PLSQL3_2_D
    public final void synpred272_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:965:4: ( close_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:965:4: close_statement
        {
        pushFollow(FOLLOW_close_statement_in_synpred272_PLSQL3_2_D3715);
        close_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred272_PLSQL3_2_D

    // $ANTLR start synpred276_PLSQL3_2_D
    public final void synpred276_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:969:4: ( open_statement )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:969:4: open_statement
        {
        pushFollow(FOLLOW_open_statement_in_synpred276_PLSQL3_2_D3735);
        open_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred276_PLSQL3_2_D

    // $ANTLR start synpred283_PLSQL3_2_D
    public final void synpred283_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:12: ( join_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:12: join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred283_PLSQL3_2_D3834);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred283_PLSQL3_2_D

    // $ANTLR start synpred284_PLSQL3_2_D
    public final void synpred284_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:26: ( LPAREN join_clause RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:988:26: LPAREN join_clause RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred284_PLSQL3_2_D3838); if (state.failed) return ;

        pushFollow(FOLLOW_join_clause_in_synpred284_PLSQL3_2_D3840);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred284_PLSQL3_2_D3842); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred284_PLSQL3_2_D

    // $ANTLR start synpred285_PLSQL3_2_D
    public final void synpred285_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:5: ( where_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:5: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred285_PLSQL3_2_D3854);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred285_PLSQL3_2_D

    // $ANTLR start synpred286_PLSQL3_2_D
    public final void synpred286_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:23: ( hierarchical_query_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:23: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred286_PLSQL3_2_D3861);
        hierarchical_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred286_PLSQL3_2_D

    // $ANTLR start synpred287_PLSQL3_2_D
    public final void synpred287_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:54: ( group_by_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:989:54: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred287_PLSQL3_2_D3868);
        group_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred287_PLSQL3_2_D

    // $ANTLR start synpred288_PLSQL3_2_D
    public final void synpred288_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:5: ( 'HAVING' sql_condition )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:5: 'HAVING' sql_condition
        {
        match(input,110,FOLLOW_110_in_synpred288_PLSQL3_2_D3877); if (state.failed) return ;

        pushFollow(FOLLOW_sql_condition_in_synpred288_PLSQL3_2_D3879);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred288_PLSQL3_2_D

    // $ANTLR start synpred289_PLSQL3_2_D
    public final void synpred289_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:33: ( model_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:990:33: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred289_PLSQL3_2_D3886);
        model_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred289_PLSQL3_2_D

    // $ANTLR start synpred294_PLSQL3_2_D
    public final void synpred294_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:5: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
        int alt443=3;
        switch ( input.LA(1) ) {
        case 175:
            {
            alt443=1;
            }
            break;
        case 118:
            {
            alt443=2;
            }
            break;
        case 125:
            {
            alt443=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae = 
                new NoViableAltException("", 443, 0, input);

            throw nvae;

        }

        switch (alt443) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:7: 'UNION' ( 'ALL' )?
               {
               match(input,175,FOLLOW_175_in_synpred294_PLSQL3_2_D3897); if (state.failed) return ;

               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:15: ( 'ALL' )?
               int alt442=2;
               int LA442_0 = input.LA(1);

               if ( (LA442_0==61) ) {
                   alt442=1;
               }
               switch (alt442) {
                  case 1 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:991:17: 'ALL'
                      {
                      match(input,61,FOLLOW_61_in_synpred294_PLSQL3_2_D3901); if (state.failed) return ;

                      }
                      break;

                   default:
               }


               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:992:6: 'INTERSECT'
               {
               match(input,118,FOLLOW_118_in_synpred294_PLSQL3_2_D3911); if (state.failed) return ;

               }
               break;
           case 3 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:993:6: 'MINUS'
               {
               match(input,125,FOLLOW_125_in_synpred294_PLSQL3_2_D3918); if (state.failed) return ;

               }
               break;

            default:
        }


        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:995:4: ( select_expression | subquery )
        int alt444=2;
        int LA444_0 = input.LA(1);

        if ( (LA444_0==165) ) {
            alt444=1;
        }
        else if ( (LA444_0==LPAREN) ) {
            alt444=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 444, 0, input);

            throw nvae;

        }
        switch (alt444) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:995:6: select_expression
               {
               pushFollow(FOLLOW_select_expression_in_synpred294_PLSQL3_2_D3930);
               select_expression();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:996:6: subquery
               {
               pushFollow(FOLLOW_subquery_in_synpred294_PLSQL3_2_D3938);
               subquery();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred294_PLSQL3_2_D

    // $ANTLR start synpred295_PLSQL3_2_D
    public final void synpred295_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:999:5: ( order_by_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:999:5: order_by_clause
        {
        pushFollow(FOLLOW_order_by_clause_in_synpred295_PLSQL3_2_D3954);
        order_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred295_PLSQL3_2_D

    // $ANTLR start synpred298_PLSQL3_2_D
    public final void synpred298_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:21: ( COMMA selected_table )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1012:21: COMMA selected_table
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred298_PLSQL3_2_D4012); if (state.failed) return ;

        pushFollow(FOLLOW_selected_table_in_synpred298_PLSQL3_2_D4014);
        selected_table();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred298_PLSQL3_2_D

    // $ANTLR start synpred299_PLSQL3_2_D
    public final void synpred299_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:21: ( inner_cross_join_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:21: inner_cross_join_clause
        {
        pushFollow(FOLLOW_inner_cross_join_clause_in_synpred299_PLSQL3_2_D4032);
        inner_cross_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred299_PLSQL3_2_D

    // $ANTLR start synpred300_PLSQL3_2_D
    public final void synpred300_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:47: ( outer_join_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1016:47: outer_join_clause
        {
        pushFollow(FOLLOW_outer_join_clause_in_synpred300_PLSQL3_2_D4036);
        outer_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred300_PLSQL3_2_D

    // $ANTLR start synpred303_PLSQL3_2_D
    public final void synpred303_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:4: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:4: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:4: ( keyINNER )?
        int alt445=2;
        int LA445_0 = input.LA(1);

        if ( (LA445_0==ID) ) {
            int LA445_1 = input.LA(2);

            if ( (LA445_1==ID) ) {
                int LA445_2 = input.LA(3);

                if ( (LA445_2==ID) ) {
                    int LA445_4 = input.LA(4);

                    if ( (LA445_4==ID||LA445_4==143) ) {
                        alt445=1;
                    }
                }
                else if ( (LA445_2==DOUBLEQUOTED_STRING||LA445_2==162) ) {
                    alt445=1;
                }
            }
        }
        switch (alt445) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:6: keyINNER
               {
               pushFollow(FOLLOW_keyINNER_in_synpred303_PLSQL3_2_D4051);
               keyINNER();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        pushFollow(FOLLOW_keyJOIN_in_synpred303_PLSQL3_2_D4056);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_table_name_in_synpred303_PLSQL3_2_D4058);
        table_name();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:37: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        int alt446=2;
        int LA446_0 = input.LA(1);

        if ( (LA446_0==143) ) {
            alt446=1;
        }
        else if ( (LA446_0==ID) ) {
            alt446=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 446, 0, input);

            throw nvae;

        }
        switch (alt446) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:39: 'ON' sql_condition
               {
               match(input,143,FOLLOW_143_in_synpred303_PLSQL3_2_D4062); if (state.failed) return ;

               pushFollow(FOLLOW_sql_condition_in_synpred303_PLSQL3_2_D4064);
               sql_condition();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1019:60: keyUSING LPAREN column_specs RPAREN
               {
               pushFollow(FOLLOW_keyUSING_in_synpred303_PLSQL3_2_D4068);
               keyUSING();

               state._fsp--;
               if (state.failed) return ;

               match(input,LPAREN,FOLLOW_LPAREN_in_synpred303_PLSQL3_2_D4070); if (state.failed) return ;

               pushFollow(FOLLOW_column_specs_in_synpred303_PLSQL3_2_D4072);
               column_specs();

               state._fsp--;
               if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred303_PLSQL3_2_D4074); if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred303_PLSQL3_2_D

    // $ANTLR start synpred304_PLSQL3_2_D
    public final void synpred304_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:6: ( keyCROSS )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1020:6: keyCROSS
        {
        pushFollow(FOLLOW_keyCROSS_in_synpred304_PLSQL3_2_D4083);
        keyCROSS();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred304_PLSQL3_2_D

    // $ANTLR start synpred306_PLSQL3_2_D
    public final void synpred306_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1024:5: ( outer_join_type keyJOIN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1024:5: outer_join_type keyJOIN
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred306_PLSQL3_2_D4120);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyJOIN_in_synpred306_PLSQL3_2_D4122);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred306_PLSQL3_2_D

    // $ANTLR start synpred307_PLSQL3_2_D
    public final void synpred307_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1025:18: ( outer_join_type )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1025:18: outer_join_type
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred307_PLSQL3_2_D4132);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred307_PLSQL3_2_D

    // $ANTLR start synpred308_PLSQL3_2_D
    public final void synpred308_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1027:20: ( query_partition_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1027:20: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred308_PLSQL3_2_D4149);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred308_PLSQL3_2_D

    // $ANTLR start synpred309_PLSQL3_2_D
    public final void synpred309_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:5: ( 'ON' sql_condition )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:5: 'ON' sql_condition
        {
        match(input,143,FOLLOW_143_in_synpred309_PLSQL3_2_D4158); if (state.failed) return ;

        pushFollow(FOLLOW_sql_condition_in_synpred309_PLSQL3_2_D4160);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred309_PLSQL3_2_D

    // $ANTLR start synpred310_PLSQL3_2_D
    public final void synpred310_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:26: ( keyUSING LPAREN column_specs RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1028:26: keyUSING LPAREN column_specs RPAREN
        {
        pushFollow(FOLLOW_keyUSING_in_synpred310_PLSQL3_2_D4164);
        keyUSING();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred310_PLSQL3_2_D4166); if (state.failed) return ;

        pushFollow(FOLLOW_column_specs_in_synpred310_PLSQL3_2_D4168);
        column_specs();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred310_PLSQL3_2_D4170); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred310_PLSQL3_2_D

    // $ANTLR start synpred311_PLSQL3_2_D
    public final void synpred311_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:6: ( keyFULL )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:6: keyFULL
        {
        pushFollow(FOLLOW_keyFULL_in_synpred311_PLSQL3_2_D4199);
        keyFULL();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred311_PLSQL3_2_D

    // $ANTLR start synpred312_PLSQL3_2_D
    public final void synpred312_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:16: ( keyLEFT )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:16: keyLEFT
        {
        pushFollow(FOLLOW_keyLEFT_in_synpred312_PLSQL3_2_D4203);
        keyLEFT();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred312_PLSQL3_2_D

    // $ANTLR start synpred313_PLSQL3_2_D
    public final void synpred313_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:39: ( keyOUTER )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1034:39: keyOUTER
        {
        pushFollow(FOLLOW_keyOUTER_in_synpred313_PLSQL3_2_D4213);
        keyOUTER();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred313_PLSQL3_2_D

    // $ANTLR start synpred315_PLSQL3_2_D
    public final void synpred315_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:55: ( keyNOCYCLE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1043:55: keyNOCYCLE
        {
        pushFollow(FOLLOW_keyNOCYCLE_in_synpred315_PLSQL3_2_D4269);
        keyNOCYCLE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred315_PLSQL3_2_D

    // $ANTLR start synpred316_PLSQL3_2_D
    public final void synpred316_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:20: ( COMMA group_by_expr )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1049:20: COMMA group_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred316_PLSQL3_2_D4302); if (state.failed) return ;

        pushFollow(FOLLOW_group_by_expr_in_synpred316_PLSQL3_2_D4304);
        group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred316_PLSQL3_2_D

    // $ANTLR start synpred317_PLSQL3_2_D
    public final void synpred317_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1052:4: ( rollup_cube_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1052:4: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred317_PLSQL3_2_D4317);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred317_PLSQL3_2_D

    // $ANTLR start synpred318_PLSQL3_2_D
    public final void synpred318_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1053:4: ( grouping_sets_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1053:4: grouping_sets_clause
        {
        pushFollow(FOLLOW_grouping_sets_clause_in_synpred318_PLSQL3_2_D4322);
        grouping_sets_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred318_PLSQL3_2_D

    // $ANTLR start synpred319_PLSQL3_2_D
    public final void synpred319_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:6: ( keyROLLUP )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1057:6: keyROLLUP
        {
        pushFollow(FOLLOW_keyROLLUP_in_synpred319_PLSQL3_2_D4339);
        keyROLLUP();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred319_PLSQL3_2_D

    // $ANTLR start synpred321_PLSQL3_2_D
    public final void synpred321_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1066:4: ( rollup_cube_clause )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1066:4: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred321_PLSQL3_2_D4398);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred321_PLSQL3_2_D

    // $ANTLR start synpred324_PLSQL3_2_D
    public final void synpred324_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:8: ( keyIGNORE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:8: keyIGNORE
        {
        pushFollow(FOLLOW_keyIGNORE_in_synpred324_PLSQL3_2_D4452);
        keyIGNORE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred324_PLSQL3_2_D

    // $ANTLR start synpred325_PLSQL3_2_D
    public final void synpred325_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:6: ( ( keyIGNORE | keyKEEP ) keyNAV )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:6: ( keyIGNORE | keyKEEP ) keyNAV
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:6: ( keyIGNORE | keyKEEP )
        int alt447=2;
        int LA447_0 = input.LA(1);

        if ( (LA447_0==ID) ) {
            int LA447_1 = input.LA(2);

            if ( (((synpred324_PLSQL3_2_D()&&synpred324_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "IGNORE"))) ) {
                alt447=1;
            }
            else if ( ((toUpper(input.LT(1).getText)== "KEEP")) ) {
                alt447=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 1, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 447, 0, input);

            throw nvae;

        }
        switch (alt447) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:8: keyIGNORE
               {
               pushFollow(FOLLOW_keyIGNORE_in_synpred325_PLSQL3_2_D4452);
               keyIGNORE();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1074:20: keyKEEP
               {
               pushFollow(FOLLOW_keyKEEP_in_synpred325_PLSQL3_2_D4456);
               keyKEEP();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        pushFollow(FOLLOW_keyNAV_in_synpred325_PLSQL3_2_D4460);
        keyNAV();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred325_PLSQL3_2_D

    // $ANTLR start synpred326_PLSQL3_2_D
    public final void synpred326_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:16: ( keyDIMENSION )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1075:16: keyDIMENSION
        {
        pushFollow(FOLLOW_keyDIMENSION_in_synpred326_PLSQL3_2_D4473);
        keyDIMENSION();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred326_PLSQL3_2_D

    // $ANTLR start synpred331_PLSQL3_2_D
    public final void synpred331_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:6: ( query_partition_clause ( column_spec )? )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:6: query_partition_clause ( column_spec )?
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred331_PLSQL3_2_D4597);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:29: ( column_spec )?
        int alt449=2;
        int LA449_0 = input.LA(1);

        if ( (LA449_0==DOUBLEQUOTED_STRING||LA449_0==ID||LA449_0==162) ) {
            alt449=1;
        }
        switch (alt449) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1095:31: column_spec
               {
               pushFollow(FOLLOW_column_spec_in_synpred331_PLSQL3_2_D4601);
               column_spec();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred331_PLSQL3_2_D

    // $ANTLR start synpred338_PLSQL3_2_D
    public final void synpred338_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:56: ( keyAUTOMATIC )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1106:56: keyAUTOMATIC
        {
        pushFollow(FOLLOW_keyAUTOMATIC_in_synpred338_PLSQL3_2_D4708);
        keyAUTOMATIC();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred338_PLSQL3_2_D

    // $ANTLR start synpred350_PLSQL3_2_D
    public final void synpred350_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:4: ( sql_condition )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:4: sql_condition
        {
        pushFollow(FOLLOW_sql_condition_in_synpred350_PLSQL3_2_D4869);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred350_PLSQL3_2_D

    // $ANTLR start synpred351_PLSQL3_2_D
    public final void synpred351_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:20: ( sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1123:20: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred351_PLSQL3_2_D4873);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred351_PLSQL3_2_D

    // $ANTLR start synpred355_PLSQL3_2_D
    public final void synpred355_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:55: ( keyINCREMENT )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1131:55: keyINCREMENT
        {
        pushFollow(FOLLOW_keyINCREMENT_in_synpred355_PLSQL3_2_D4944);
        keyINCREMENT();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred355_PLSQL3_2_D

    // $ANTLR start synpred363_PLSQL3_2_D
    public final void synpred363_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:20: ( COMMA order_by_expr )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1157:20: COMMA order_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred363_PLSQL3_2_D5111); if (state.failed) return ;

        pushFollow(FOLLOW_order_by_expr_in_synpred363_PLSQL3_2_D5113);
        order_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred363_PLSQL3_2_D

    // $ANTLR start synpred366_PLSQL3_2_D
    public final void synpred366_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:25: ( keyNULLS keyFIRST )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:25: keyNULLS keyFIRST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred366_PLSQL3_2_D5151);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyFIRST_in_synpred366_PLSQL3_2_D5153);
        keyFIRST();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred366_PLSQL3_2_D

    // $ANTLR start synpred367_PLSQL3_2_D
    public final void synpred367_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:45: ( keyNULLS keyLAST )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1164:45: keyNULLS keyLAST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred367_PLSQL3_2_D5157);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyLAST_in_synpred367_PLSQL3_2_D5159);
        keyLAST();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred367_PLSQL3_2_D

    // $ANTLR start synpred374_PLSQL3_2_D
    public final void synpred374_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1200:4: ({...}? sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1200:4: {...}? sql_expression
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred374_PLSQL3_2_D", "  is_sql ");
        }

        pushFollow(FOLLOW_sql_expression_in_synpred374_PLSQL3_2_D5313);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred374_PLSQL3_2_D

    // $ANTLR start synpred376_PLSQL3_2_D
    public final void synpred376_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:14: ( 'OR' expr_or )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1219:14: 'OR' expr_or
        {
        match(input,144,FOLLOW_144_in_synpred376_PLSQL3_2_D5391); if (state.failed) return ;

        pushFollow(FOLLOW_expr_or_in_synpred376_PLSQL3_2_D5393);
        expr_or();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred376_PLSQL3_2_D

    // $ANTLR start synpred377_PLSQL3_2_D
    public final void synpred377_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:15: ( 'AND' expr_and )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1222:15: 'AND' expr_and
        {
        match(input,62,FOLLOW_62_in_synpred377_PLSQL3_2_D5410); if (state.failed) return ;

        pushFollow(FOLLOW_expr_and_in_synpred377_PLSQL3_2_D5412);
        expr_and();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred377_PLSQL3_2_D

    // $ANTLR start synpred379_PLSQL3_2_D
    public final void synpred379_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1229:5: ( relational_op expr_add )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1229:5: relational_op expr_add
        {
        pushFollow(FOLLOW_relational_op_in_synpred379_PLSQL3_2_D5449);
        relational_op();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred379_PLSQL3_2_D5451);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred379_PLSQL3_2_D

    // $ANTLR start synpred380_PLSQL3_2_D
    public final void synpred380_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:5: ( FOUND_ATTR )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:5: FOUND_ATTR
        {
        match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_synpred380_PLSQL3_2_D5457); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred380_PLSQL3_2_D

    // $ANTLR start synpred381_PLSQL3_2_D
    public final void synpred381_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:18: ( NOTFOUND_ATTR )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:18: NOTFOUND_ATTR
        {
        match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_synpred381_PLSQL3_2_D5461); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred381_PLSQL3_2_D

    // $ANTLR start synpred382_PLSQL3_2_D
    public final void synpred382_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:34: ( ISOPEN_ATTR )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:34: ISOPEN_ATTR
        {
        match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_synpred382_PLSQL3_2_D5465); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred382_PLSQL3_2_D

    // $ANTLR start synpred383_PLSQL3_2_D
    public final void synpred383_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:48: ( ROWCOUNT_ATTR )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:48: ROWCOUNT_ATTR
        {
        match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_synpred383_PLSQL3_2_D5469); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred383_PLSQL3_2_D

    // $ANTLR start synpred384_PLSQL3_2_D
    public final void synpred384_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:64: ( BULK_ROWCOUNT_ATTR )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1230:64: BULK_ROWCOUNT_ATTR
        {
        match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred384_PLSQL3_2_D5473); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred384_PLSQL3_2_D

    // $ANTLR start synpred386_PLSQL3_2_D
    public final void synpred386_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:5: ( 'IS' ( 'NOT' )? 'NULL' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:5: 'IS' ( 'NOT' )? 'NULL'
        {
        match(input,120,FOLLOW_120_in_synpred386_PLSQL3_2_D5479); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:10: ( 'NOT' )?
        int alt461=2;
        int LA461_0 = input.LA(1);

        if ( (LA461_0==134) ) {
            alt461=1;
        }
        switch (alt461) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1231:12: 'NOT'
               {
               match(input,134,FOLLOW_134_in_synpred386_PLSQL3_2_D5483); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,136,FOLLOW_136_in_synpred386_PLSQL3_2_D5488); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred386_PLSQL3_2_D

    // $ANTLR start synpred388_PLSQL3_2_D
    public final void synpred388_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:5: ( ( 'NOT' )? 'LIKE' expr_add )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:5: ( 'NOT' )? 'LIKE' expr_add
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:5: ( 'NOT' )?
        int alt462=2;
        int LA462_0 = input.LA(1);

        if ( (LA462_0==134) ) {
            alt462=1;
        }
        switch (alt462) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1232:7: 'NOT'
               {
               match(input,134,FOLLOW_134_in_synpred388_PLSQL3_2_D5496); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,121,FOLLOW_121_in_synpred388_PLSQL3_2_D5501); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred388_PLSQL3_2_D5503);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred388_PLSQL3_2_D

    // $ANTLR start synpred390_PLSQL3_2_D
    public final void synpred390_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:5: ( ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:5: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:5: ( 'NOT' )?
        int alt463=2;
        int LA463_0 = input.LA(1);

        if ( (LA463_0==134) ) {
            alt463=1;
        }
        switch (alt463) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1233:7: 'NOT'
               {
               match(input,134,FOLLOW_134_in_synpred390_PLSQL3_2_D5511); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,68,FOLLOW_68_in_synpred390_PLSQL3_2_D5516); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5518);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        match(input,62,FOLLOW_62_in_synpred390_PLSQL3_2_D5520); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5522);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred390_PLSQL3_2_D

    // $ANTLR start synpred392_PLSQL3_2_D
    public final void synpred392_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:5: ( ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:5: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:5: ( 'NOT' )?
        int alt464=2;
        int LA464_0 = input.LA(1);

        if ( (LA464_0==134) ) {
            alt464=1;
        }
        switch (alt464) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1234:7: 'NOT'
               {
               match(input,134,FOLLOW_134_in_synpred392_PLSQL3_2_D5530); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,113,FOLLOW_113_in_synpred392_PLSQL3_2_D5535); if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred392_PLSQL3_2_D5537); if (state.failed) return ;

        pushFollow(FOLLOW_nested_expressions_in_synpred392_PLSQL3_2_D5539);
        nested_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred392_PLSQL3_2_D5541); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred392_PLSQL3_2_D

    // $ANTLR start synpred394_PLSQL3_2_D
    public final void synpred394_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:21: ( COMMA sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1243:21: COMMA sql_expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred394_PLSQL3_2_D5576); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expression_in_synpred394_PLSQL3_2_D5578);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred394_PLSQL3_2_D

    // $ANTLR start synpred397_PLSQL3_2_D
    public final void synpred397_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:15: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1250:15: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
        {
        if ( input.LA(1)==DOUBLEVERTBAR||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            input.consume();
            debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_expr_mul_in_synpred397_PLSQL3_2_D5626);
        expr_mul();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred397_PLSQL3_2_D

    // $ANTLR start synpred399_PLSQL3_2_D
    public final void synpred399_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:16: ( ( ASTERISK | DIVIDE ) expr_sign )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1253:16: ( ASTERISK | DIVIDE ) expr_sign
        {
        if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
            input.consume();
            debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_expr_sign_in_synpred399_PLSQL3_2_D5653);
        expr_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred399_PLSQL3_2_D

    // $ANTLR start synpred402_PLSQL3_2_D
    public final void synpred402_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:16: ( EXPONENT expr_expr )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1259:16: EXPONENT expr_expr
        {
        match(input,EXPONENT,FOLLOW_EXPONENT_in_synpred402_PLSQL3_2_D5691); if (state.failed) return ;

        pushFollow(FOLLOW_expr_expr_in_synpred402_PLSQL3_2_D5693);
        expr_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred402_PLSQL3_2_D

    // $ANTLR start synpred403_PLSQL3_2_D
    public final void synpred403_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1262:4: ( expr_paren )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1262:6: expr_paren
        {
        pushFollow(FOLLOW_expr_paren_in_synpred403_PLSQL3_2_D5708);
        expr_paren();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred403_PLSQL3_2_D

    // $ANTLR start synpred404_PLSQL3_2_D
    public final void synpred404_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1265:4: ( case_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1265:6: case_expression
        {
        pushFollow(FOLLOW_case_expression_in_synpred404_PLSQL3_2_D5724);
        case_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred404_PLSQL3_2_D

    // $ANTLR start synpred405_PLSQL3_2_D
    public final void synpred405_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1266:4: ( cursor_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1266:6: cursor_expression
        {
        pushFollow(FOLLOW_cursor_expression_in_synpred405_PLSQL3_2_D5737);
        cursor_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred405_PLSQL3_2_D

    // $ANTLR start synpred406_PLSQL3_2_D
    public final void synpred406_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1267:4: ( function_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1267:6: function_expression
        {
        pushFollow(FOLLOW_function_expression_in_synpred406_PLSQL3_2_D5750);
        function_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred406_PLSQL3_2_D

    // $ANTLR start synpred407_PLSQL3_2_D
    public final void synpred407_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1268:4: ( simple_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1268:6: simple_expression
        {
        pushFollow(FOLLOW_simple_expression_in_synpred407_PLSQL3_2_D5763);
        simple_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred407_PLSQL3_2_D

    // $ANTLR start synpred408_PLSQL3_2_D
    public final void synpred408_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1269:4: ( select_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1269:6: select_expression
        {
        pushFollow(FOLLOW_select_expression_in_synpred408_PLSQL3_2_D5776);
        select_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred408_PLSQL3_2_D

    // $ANTLR start synpred416_PLSQL3_2_D
    public final void synpred416_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1285:4: ( column_spec )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1285:6: column_spec
        {
        pushFollow(FOLLOW_column_spec_in_synpred416_PLSQL3_2_D5842);
        column_spec();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred416_PLSQL3_2_D

    // $ANTLR start synpred429_PLSQL3_2_D
    public final void synpred429_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:23: ( keyDBTIMEZONE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:23: keyDBTIMEZONE
        {
        pushFollow(FOLLOW_keyDBTIMEZONE_in_synpred429_PLSQL3_2_D6134);
        keyDBTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred429_PLSQL3_2_D

    // $ANTLR start synpred430_PLSQL3_2_D
    public final void synpred430_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:39: ( keySESSIONTIMEZONE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1335:39: keySESSIONTIMEZONE
        {
        pushFollow(FOLLOW_keySESSIONTIMEZONE_in_synpred430_PLSQL3_2_D6138);
        keySESSIONTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred430_PLSQL3_2_D

    // $ANTLR start synpred432_PLSQL3_2_D
    public final void synpred432_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:5: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
        {
        pushFollow(FOLLOW_keyCOUNT_in_synpred432_PLSQL3_2_D6167);
        keyCOUNT();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred432_PLSQL3_2_D6169); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:21: ( ASTERISK | nested_expression )
        int alt465=2;
        int LA465_0 = input.LA(1);

        if ( (LA465_0==ASTERISK) ) {
            alt465=1;
        }
        else if ( (LA465_0==DOUBLEQUOTED_STRING||LA465_0==ID||LA465_0==LPAREN||LA465_0==MINUS||LA465_0==NUMBER||LA465_0==PLUS||LA465_0==QUOTED_STRING||LA465_0==76||LA465_0==93||LA465_0==101||LA465_0==134||LA465_0==136||LA465_0==162||LA465_0==165||LA465_0==169||LA465_0==174) ) {
            alt465=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 465, 0, input);

            throw nvae;

        }
        switch (alt465) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:23: ASTERISK
               {
               match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred432_PLSQL3_2_D6173); if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:34: nested_expression
               {
               pushFollow(FOLLOW_nested_expression_in_synpred432_PLSQL3_2_D6177);
               nested_expression();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred432_PLSQL3_2_D6181); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred432_PLSQL3_2_D

    // $ANTLR start synpred433_PLSQL3_2_D
    public final void synpred433_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:18: ( LPAREN nested_expression RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:18: LPAREN nested_expression RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred433_PLSQL3_2_D6191); if (state.failed) return ;

        pushFollow(FOLLOW_nested_expression_in_synpred433_PLSQL3_2_D6193);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred433_PLSQL3_2_D6195); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred433_PLSQL3_2_D

    // $ANTLR start synpred436_PLSQL3_2_D
    public final void synpred436_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1340:3: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? ) )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1340:3: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? )
        {
        if ( !(( is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred436_PLSQL3_2_D", " is_sql ");
        }

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:3: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) | function_call ( DOT nested_expression )? )
        int alt470=3;
        switch ( input.LA(1) ) {
        case ID:
            {
            int LA470_1 = input.LA(2);

            if ( (((synpred432_PLSQL3_2_D()&&synpred432_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "COUNT"))) ) {
                alt470=1;
            }
            else if ( (true) ) {
                alt470=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 470, 1, input);

                throw nvae;

            }
            }
            break;
        case 93:
            {
            alt470=2;
            }
            break;
        case DOUBLEQUOTED_STRING:
        case 162:
            {
            alt470=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae = 
                new NoViableAltException("", 470, 0, input);

            throw nvae;

        }

        switch (alt470) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
               {
               pushFollow(FOLLOW_keyCOUNT_in_synpred436_PLSQL3_2_D6167);
               keyCOUNT();

               state._fsp--;
               if (state.failed) return ;

               match(input,LPAREN,FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6169); if (state.failed) return ;

               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:21: ( ASTERISK | nested_expression )
               int alt467=2;
               int LA467_0 = input.LA(1);

               if ( (LA467_0==ASTERISK) ) {
                   alt467=1;
               }
               else if ( (LA467_0==DOUBLEQUOTED_STRING||LA467_0==ID||LA467_0==LPAREN||LA467_0==MINUS||LA467_0==NUMBER||LA467_0==PLUS||LA467_0==QUOTED_STRING||LA467_0==76||LA467_0==93||LA467_0==101||LA467_0==134||LA467_0==136||LA467_0==162||LA467_0==165||LA467_0==169||LA467_0==174) ) {
                   alt467=2;
               }
               else {
                   if (state.backtracking>0) {state.failed=true; return ;}
                   NoViableAltException nvae =
                       new NoViableAltException("", 467, 0, input);

                   throw nvae;

               }
               switch (alt467) {
                  case 1 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:23: ASTERISK
                      {
                      match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred436_PLSQL3_2_D6173); if (state.failed) return ;

                      }
                      break;
                  case 2 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1341:34: nested_expression
                      {
                      pushFollow(FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6177);
                      nested_expression();

                      state._fsp--;
                      if (state.failed) return ;

                      }
                      break;

                   default:
               }


               match(input,RPAREN,FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6181); if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:5: 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression )
               {
               match(input,93,FOLLOW_93_in_synpred436_PLSQL3_2_D6187); if (state.failed) return ;

               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:16: ( LPAREN nested_expression RPAREN | nested_expression )
               int alt468=2;
               int LA468_0 = input.LA(1);

               if ( (LA468_0==LPAREN) ) {
                   int LA468_1 = input.LA(2);

                   if ( (synpred433_PLSQL3_2_D()) ) {
                       alt468=1;
                   }
                   else if ( ((( !is_sql )||(  is_sql ))) ) {
                       alt468=2;
                   }
                   else {
                       if (state.backtracking>0) {state.failed=true; return ;}
                       NoViableAltException nvae =
                           new NoViableAltException("", 468, 1, input);

                       throw nvae;

                   }
               }
               else if ( (LA468_0==DOUBLEQUOTED_STRING||LA468_0==ID||LA468_0==MINUS||LA468_0==NUMBER||LA468_0==PLUS||LA468_0==QUOTED_STRING||LA468_0==76||LA468_0==93||LA468_0==101||LA468_0==134||LA468_0==136||LA468_0==162||LA468_0==165||LA468_0==169||LA468_0==174) ) {
                   alt468=2;
               }
               else {
                   if (state.backtracking>0) {state.failed=true; return ;}
                   NoViableAltException nvae =
                       new NoViableAltException("", 468, 0, input);

                   throw nvae;

               }
               switch (alt468) {
                  case 1 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:18: LPAREN nested_expression RPAREN
                      {
                      match(input,LPAREN,FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6191); if (state.failed) return ;

                      pushFollow(FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6193);
                      nested_expression();

                      state._fsp--;
                      if (state.failed) return ;

                      match(input,RPAREN,FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6195); if (state.failed) return ;

                      }
                      break;
                  case 2 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1342:52: nested_expression
                      {
                      pushFollow(FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6199);
                      nested_expression();

                      state._fsp--;
                      if (state.failed) return ;

                      }
                      break;

                   default:
               }


               }
               break;
           case 3 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:11: function_call ( DOT nested_expression )?
               {
               pushFollow(FOLLOW_function_call_in_synpred436_PLSQL3_2_D6213);
               function_call();

               state._fsp--;
               if (state.failed) return ;

               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:25: ( DOT nested_expression )?
               int alt469=2;
               int LA469_0 = input.LA(1);

               if ( (LA469_0==DOT) ) {
                   alt469=1;
               }
               switch (alt469) {
                  case 1 :
                      // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1343:27: DOT nested_expression
                      {
                      match(input,DOT,FOLLOW_DOT_in_synpred436_PLSQL3_2_D6217); if (state.failed) return ;

                      pushFollow(FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6219);
                      nested_expression();

                      state._fsp--;
                      if (state.failed) return ;

                      }
                      break;

                   default:
               }


               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred436_PLSQL3_2_D

    // $ANTLR start synpred442_PLSQL3_2_D
    public final void synpred442_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:5: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:5: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
        {
        pushFollow(FOLLOW_keyDAY_in_synpred442_PLSQL3_2_D6305);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:12: ( LPAREN leading_field_precision RPAREN )?
        int alt472=2;
        int LA472_0 = input.LA(1);

        if ( (LA472_0==LPAREN) ) {
            alt472=1;
        }
        switch (alt472) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:14: LPAREN leading_field_precision RPAREN
               {
               match(input,LPAREN,FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6309); if (state.failed) return ;

               pushFollow(FOLLOW_leading_field_precision_in_synpred442_PLSQL3_2_D6311);
               leading_field_precision();

               state._fsp--;
               if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6313); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,173,FOLLOW_173_in_synpred442_PLSQL3_2_D6318); if (state.failed) return ;

        pushFollow(FOLLOW_keySECOND_in_synpred442_PLSQL3_2_D6320);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:70: ( LPAREN fractional_second_precision RPAREN )?
        int alt473=2;
        int LA473_0 = input.LA(1);

        if ( (LA473_0==LPAREN) ) {
            alt473=1;
        }
        switch (alt473) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1356:72: LPAREN fractional_second_precision RPAREN
               {
               match(input,LPAREN,FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6324); if (state.failed) return ;

               pushFollow(FOLLOW_fractional_second_precision_in_synpred442_PLSQL3_2_D6326);
               fractional_second_precision();

               state._fsp--;
               if (state.failed) return ;

               match(input,RPAREN,FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6328); if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred442_PLSQL3_2_D

    // $ANTLR start synpred449_PLSQL3_2_D
    public final void synpred449_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:21: ( DOT sql_identifier )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1417:21: DOT sql_identifier
        {
        match(input,DOT,FOLLOW_DOT_in_synpred449_PLSQL3_2_D6574); if (state.failed) return ;

        pushFollow(FOLLOW_sql_identifier_in_synpred449_PLSQL3_2_D6576);
        sql_identifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred449_PLSQL3_2_D

    // $ANTLR start synpred453_PLSQL3_2_D
    public final void synpred453_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:6: ( table_spec )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:6: table_spec
        {
        pushFollow(FOLLOW_table_spec_in_synpred453_PLSQL3_2_D6623);
        table_spec();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred453_PLSQL3_2_D

    // $ANTLR start synpred456_PLSQL3_2_D
    public final void synpred456_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:54: ( alias_ )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1430:54: alias_
        {
        pushFollow(FOLLOW_alias__in_synpred456_PLSQL3_2_D6644);
        alias_();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred456_PLSQL3_2_D

    // $ANTLR start synpred462_PLSQL3_2_D
    public final void synpred462_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1445:4: ({...}? condition_or )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1445:4: {...}? condition_or
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred462_PLSQL3_2_D", "  is_sql ");
        }

        pushFollow(FOLLOW_condition_or_in_synpred462_PLSQL3_2_D6735);
        condition_or();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred462_PLSQL3_2_D

    // $ANTLR start synpred463_PLSQL3_2_D
    public final void synpred463_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:20: ( 'OR' condition_and )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1457:20: 'OR' condition_and
        {
        match(input,144,FOLLOW_144_in_synpred463_PLSQL3_2_D6788); if (state.failed) return ;

        pushFollow(FOLLOW_condition_and_in_synpred463_PLSQL3_2_D6790);
        condition_and();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred463_PLSQL3_2_D

    // $ANTLR start synpred464_PLSQL3_2_D
    public final void synpred464_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:20: ( 'AND' condition_not )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1460:20: 'AND' condition_not
        {
        match(input,62,FOLLOW_62_in_synpred464_PLSQL3_2_D6807); if (state.failed) return ;

        pushFollow(FOLLOW_condition_not_in_synpred464_PLSQL3_2_D6809);
        condition_not();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred464_PLSQL3_2_D

    // $ANTLR start synpred467_PLSQL3_2_D
    public final void synpred467_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1468:4: ( condition_is )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1468:4: condition_is
        {
        pushFollow(FOLLOW_condition_is_in_synpred467_PLSQL3_2_D6844);
        condition_is();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred467_PLSQL3_2_D

    // $ANTLR start synpred468_PLSQL3_2_D
    public final void synpred468_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1469:4: ( condition_comparison )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1469:4: condition_comparison
        {
        pushFollow(FOLLOW_condition_comparison_in_synpred468_PLSQL3_2_D6849);
        condition_comparison();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred468_PLSQL3_2_D

    // $ANTLR start synpred469_PLSQL3_2_D
    public final void synpred469_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1470:4: ( condition_group_comparison )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1470:4: condition_group_comparison
        {
        pushFollow(FOLLOW_condition_group_comparison_in_synpred469_PLSQL3_2_D6854);
        condition_group_comparison();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred469_PLSQL3_2_D

    // $ANTLR start synpred470_PLSQL3_2_D
    public final void synpred470_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1471:4: ( condition_in )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1471:4: condition_in
        {
        pushFollow(FOLLOW_condition_in_in_synpred470_PLSQL3_2_D6859);
        condition_in();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred470_PLSQL3_2_D

    // $ANTLR start synpred471_PLSQL3_2_D
    public final void synpred471_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1472:4: ( condition_is_a_set )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1472:4: condition_is_a_set
        {
        pushFollow(FOLLOW_condition_is_a_set_in_synpred471_PLSQL3_2_D6864);
        condition_is_a_set();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred471_PLSQL3_2_D

    // $ANTLR start synpred472_PLSQL3_2_D
    public final void synpred472_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1473:4: ( condition_is_any )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1473:4: condition_is_any
        {
        pushFollow(FOLLOW_condition_is_any_in_synpred472_PLSQL3_2_D6869);
        condition_is_any();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred472_PLSQL3_2_D

    // $ANTLR start synpred473_PLSQL3_2_D
    public final void synpred473_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1474:4: ( condition_is_empty )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1474:4: condition_is_empty
        {
        pushFollow(FOLLOW_condition_is_empty_in_synpred473_PLSQL3_2_D6874);
        condition_is_empty();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred473_PLSQL3_2_D

    // $ANTLR start synpred474_PLSQL3_2_D
    public final void synpred474_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1475:4: ( condition_is_of_type )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1475:4: condition_is_of_type
        {
        pushFollow(FOLLOW_condition_is_of_type_in_synpred474_PLSQL3_2_D6879);
        condition_is_of_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred474_PLSQL3_2_D

    // $ANTLR start synpred475_PLSQL3_2_D
    public final void synpred475_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1476:4: ( condition_is_present )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1476:4: condition_is_present
        {
        pushFollow(FOLLOW_condition_is_present_in_synpred475_PLSQL3_2_D6884);
        condition_is_present();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred475_PLSQL3_2_D

    // $ANTLR start synpred476_PLSQL3_2_D
    public final void synpred476_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1477:4: ( condition_like )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1477:4: condition_like
        {
        pushFollow(FOLLOW_condition_like_in_synpred476_PLSQL3_2_D6889);
        condition_like();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred476_PLSQL3_2_D

    // $ANTLR start synpred477_PLSQL3_2_D
    public final void synpred477_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1478:4: ( condition_memeber )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1478:4: condition_memeber
        {
        pushFollow(FOLLOW_condition_memeber_in_synpred477_PLSQL3_2_D6894);
        condition_memeber();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred477_PLSQL3_2_D

    // $ANTLR start synpred478_PLSQL3_2_D
    public final void synpred478_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1479:4: ( condition_between )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1479:4: condition_between
        {
        pushFollow(FOLLOW_condition_between_in_synpred478_PLSQL3_2_D6899);
        condition_between();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred478_PLSQL3_2_D

    // $ANTLR start synpred479_PLSQL3_2_D
    public final void synpred479_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1480:4: ( condition_regexp_like )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1480:4: condition_regexp_like
        {
        pushFollow(FOLLOW_condition_regexp_like_in_synpred479_PLSQL3_2_D6904);
        condition_regexp_like();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred479_PLSQL3_2_D

    // $ANTLR start synpred480_PLSQL3_2_D
    public final void synpred480_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1481:4: ( condition_submultiset )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1481:4: condition_submultiset
        {
        pushFollow(FOLLOW_condition_submultiset_in_synpred480_PLSQL3_2_D6909);
        condition_submultiset();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred480_PLSQL3_2_D

    // $ANTLR start synpred481_PLSQL3_2_D
    public final void synpred481_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1482:4: ( condition_equals_path )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1482:4: condition_equals_path
        {
        pushFollow(FOLLOW_condition_equals_path_in_synpred481_PLSQL3_2_D6914);
        condition_equals_path();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred481_PLSQL3_2_D

    // $ANTLR start synpred482_PLSQL3_2_D
    public final void synpred482_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1483:4: ( condition_under_path )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1483:4: condition_under_path
        {
        pushFollow(FOLLOW_condition_under_path_in_synpred482_PLSQL3_2_D6919);
        condition_under_path();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred482_PLSQL3_2_D

    // $ANTLR start synpred484_PLSQL3_2_D
    public final void synpred484_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:37: ( keyNAN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:37: keyNAN
        {
        pushFollow(FOLLOW_keyNAN_in_synpred484_PLSQL3_2_D6963);
        keyNAN();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred484_PLSQL3_2_D

    // $ANTLR start synpred485_PLSQL3_2_D
    public final void synpred485_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:46: ( keyINFINITE )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1490:46: keyINFINITE
        {
        pushFollow(FOLLOW_keyINFINITE_in_synpred485_PLSQL3_2_D6967);
        keyINFINITE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred485_PLSQL3_2_D

    // $ANTLR start synpred488_PLSQL3_2_D
    public final void synpred488_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:102: ( outer_join_sign )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:102: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred488_PLSQL3_2_D7014);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred488_PLSQL3_2_D

    // $ANTLR start synpred489_PLSQL3_2_D
    public final void synpred489_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:4: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:4: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D6983); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred489_PLSQL3_2_D6985);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D6987); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:34: ( outer_join_sign )?
        int alt475=2;
        int LA475_0 = input.LA(1);

        if ( (LA475_0==LPAREN) ) {
            alt475=1;
        }
        switch (alt475) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:36: outer_join_sign
               {
               pushFollow(FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D6991);
               outer_join_sign();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        match(input,LPAREN,FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D7006); if (state.failed) return ;

        pushFollow(FOLLOW_select_command_in_synpred489_PLSQL3_2_D7008);
        select_command();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D7010); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:100: ( outer_join_sign )?
        int alt476=2;
        int LA476_0 = input.LA(1);

        if ( (LA476_0==LPAREN) ) {
            alt476=1;
        }
        switch (alt476) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1493:102: outer_join_sign
               {
               pushFollow(FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D7014);
               outer_join_sign();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        }

    }
    // $ANTLR end synpred489_PLSQL3_2_D

    // $ANTLR start synpred498_PLSQL3_2_D
    public final void synpred498_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:108: ( sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:108: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred498_PLSQL3_2_D7073);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred498_PLSQL3_2_D

    // $ANTLR start synpred499_PLSQL3_2_D
    public final void synpred499_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:158: ( outer_join_sign )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1494:158: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred499_PLSQL3_2_D7087);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred499_PLSQL3_2_D

    // $ANTLR start synpred503_PLSQL3_2_D
    public final void synpred503_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:87: ( grouping_expression_list )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:87: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred503_PLSQL3_2_D7134);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred503_PLSQL3_2_D

    // $ANTLR start synpred504_PLSQL3_2_D
    public final void synpred504_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:4: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:4: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7100); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred504_PLSQL3_2_D7102);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7104); if (state.failed) return ;

        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            debug(trace_consume) writeln("Consumed token:",(cast(CommonToken)input.LT(-1)).toStringHeaders());
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:50: ( 'ANY' | keySOME | 'ALL' )
        int alt477=3;
        switch ( input.LA(1) ) {
        case 63:
            {
            alt477=1;
            }
            break;
        case ID:
            {
            alt477=2;
            }
            break;
        case 61:
            {
            alt477=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae = 
                new NoViableAltException("", 477, 0, input);

            throw nvae;

        }

        switch (alt477) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:52: 'ANY'
               {
               match(input,63,FOLLOW_63_in_synpred504_PLSQL3_2_D7118); if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:60: keySOME
               {
               pushFollow(FOLLOW_keySOME_in_synpred504_PLSQL3_2_D7122);
               keySOME();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 3 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:70: 'ALL'
               {
               match(input,61,FOLLOW_61_in_synpred504_PLSQL3_2_D7126); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,LPAREN,FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7130); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:85: ( grouping_expression_list | select_command )
        int alt478=2;
        int LA478_0 = input.LA(1);

        if ( (LA478_0==DOUBLEQUOTED_STRING||LA478_0==ID||LA478_0==LPAREN||LA478_0==MINUS||LA478_0==NUMBER||LA478_0==PLUS||LA478_0==QUOTED_STRING||LA478_0==76||LA478_0==93||LA478_0==101||LA478_0==136||LA478_0==162||LA478_0==169||LA478_0==174) ) {
            alt478=1;
        }
        else if ( (LA478_0==165) ) {
            int LA478_13 = input.LA(2);

            if ( (synpred503_PLSQL3_2_D()) ) {
                alt478=1;
            }
            else if ( (true) ) {
                alt478=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 478, 13, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 478, 0, input);

            throw nvae;

        }
        switch (alt478) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:87: grouping_expression_list
               {
               pushFollow(FOLLOW_grouping_expression_list_in_synpred504_PLSQL3_2_D7134);
               grouping_expression_list();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1497:114: select_command
               {
               pushFollow(FOLLOW_select_command_in_synpred504_PLSQL3_2_D7138);
               select_command();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7142); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred504_PLSQL3_2_D

    // $ANTLR start synpred512_PLSQL3_2_D
    public final void synpred512_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:96: ( sql_expressions )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1498:96: sql_expressions
        {
        pushFollow(FOLLOW_sql_expressions_in_synpred512_PLSQL3_2_D7193);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred512_PLSQL3_2_D

    // $ANTLR start synpred514_PLSQL3_2_D
    public final void synpred514_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:59: ( grouping_expression_list )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:59: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred514_PLSQL3_2_D7230);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred514_PLSQL3_2_D

    // $ANTLR start synpred515_PLSQL3_2_D
    public final void synpred515_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:4: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:4: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7211); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred515_PLSQL3_2_D7213);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7215); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:34: ( 'NOT' )?
        int alt479=2;
        int LA479_0 = input.LA(1);

        if ( (LA479_0==134) ) {
            alt479=1;
        }
        switch (alt479) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:36: 'NOT'
               {
               match(input,134,FOLLOW_134_in_synpred515_PLSQL3_2_D7219); if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,113,FOLLOW_113_in_synpred515_PLSQL3_2_D7224); if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7226); if (state.failed) return ;

        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:57: ( grouping_expression_list | select_command )
        int alt480=2;
        int LA480_0 = input.LA(1);

        if ( (LA480_0==DOUBLEQUOTED_STRING||LA480_0==ID||LA480_0==LPAREN||LA480_0==MINUS||LA480_0==NUMBER||LA480_0==PLUS||LA480_0==QUOTED_STRING||LA480_0==76||LA480_0==93||LA480_0==101||LA480_0==136||LA480_0==162||LA480_0==169||LA480_0==174) ) {
            alt480=1;
        }
        else if ( (LA480_0==165) ) {
            int LA480_13 = input.LA(2);

            if ( (synpred514_PLSQL3_2_D()) ) {
                alt480=1;
            }
            else if ( (true) ) {
                alt480=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 480, 13, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 480, 0, input);

            throw nvae;

        }
        switch (alt480) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:59: grouping_expression_list
               {
               pushFollow(FOLLOW_grouping_expression_list_in_synpred515_PLSQL3_2_D7230);
               grouping_expression_list();

               state._fsp--;
               if (state.failed) return ;

               }
               break;
           case 2 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1501:86: select_command
               {
               pushFollow(FOLLOW_select_command_in_synpred515_PLSQL3_2_D7234);
               select_command();

               state._fsp--;
               if (state.failed) return ;

               }
               break;

            default:
        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7238); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred515_PLSQL3_2_D

    // $ANTLR start synpred517_PLSQL3_2_D
    public final void synpred517_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:44: ( expression_list )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1502:44: expression_list
        {
        pushFollow(FOLLOW_expression_list_in_synpred517_PLSQL3_2_D7258);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred517_PLSQL3_2_D

    // $ANTLR start synpred527_PLSQL3_2_D
    public final void synpred527_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:41: ( keyLIKEC )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:41: keyLIKEC
        {
        pushFollow(FOLLOW_keyLIKEC_in_synpred527_PLSQL3_2_D7438);
        keyLIKEC();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred527_PLSQL3_2_D

    // $ANTLR start synpred528_PLSQL3_2_D
    public final void synpred528_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:52: ( keyLIKE2 )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:52: keyLIKE2
        {
        pushFollow(FOLLOW_keyLIKE2_in_synpred528_PLSQL3_2_D7442);
        keyLIKE2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred528_PLSQL3_2_D

    // $ANTLR start synpred529_PLSQL3_2_D
    public final void synpred529_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:91: ( keyESCAPE sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1526:91: keyESCAPE sql_expression
        {
        pushFollow(FOLLOW_keyESCAPE_in_synpred529_PLSQL3_2_D7454);
        keyESCAPE();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_sql_expression_in_synpred529_PLSQL3_2_D7456);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred529_PLSQL3_2_D

    // $ANTLR start synpred538_PLSQL3_2_D
    public final void synpred538_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:22: ( COMMA expression_list )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1556:22: COMMA expression_list
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred538_PLSQL3_2_D7667); if (state.failed) return ;

        pushFollow(FOLLOW_expression_list_in_synpred538_PLSQL3_2_D7669);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred538_PLSQL3_2_D

    // $ANTLR start synpred539_PLSQL3_2_D
    public final void synpred539_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1559:4: ( LPAREN sql_expressions RPAREN )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1559:4: LPAREN sql_expressions RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred539_PLSQL3_2_D7682); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred539_PLSQL3_2_D7684);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred539_PLSQL3_2_D7686); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred539_PLSQL3_2_D

    // $ANTLR start synpred547_PLSQL3_2_D
    public final void synpred547_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1577:4: ( sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1577:6: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred547_PLSQL3_2_D7783);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred547_PLSQL3_2_D

    // $ANTLR start synpred550_PLSQL3_2_D
    public final void synpred550_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:9: ( 'PRIOR' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:9: 'PRIOR'
        {
        match(input,151,FOLLOW_151_in_synpred550_PLSQL3_2_D7874); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred550_PLSQL3_2_D

    // $ANTLR start synpred551_PLSQL3_2_D
    public final void synpred551_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:5: ( ( 'PRIOR' )? sql_condition )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:7: ( 'PRIOR' )? sql_condition
        {
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:7: ( 'PRIOR' )?
        int alt481=2;
        int LA481_0 = input.LA(1);

        if ( (LA481_0==151) ) {
            int LA481_1 = input.LA(2);

            if ( (synpred550_PLSQL3_2_D()) ) {
                alt481=1;
            }
        }
        switch (alt481) {
           case 1 :
               // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:9: 'PRIOR'
               {
               match(input,151,FOLLOW_151_in_synpred551_PLSQL3_2_D7874); if (state.failed) return ;

               }
               break;

            default:
        }


        pushFollow(FOLLOW_sql_condition_in_synpred551_PLSQL3_2_D7879);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred551_PLSQL3_2_D

    // $ANTLR start synpred552_PLSQL3_2_D
    public final void synpred552_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:40: ( 'PRIOR' )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1591:40: 'PRIOR'
        {
        match(input,151,FOLLOW_151_in_synpred552_PLSQL3_2_D7886); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred552_PLSQL3_2_D

    // $ANTLR start synpred561_PLSQL3_2_D
    public final void synpred561_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:6: ( sql_expression )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:8: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred561_PLSQL3_2_D8037);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred561_PLSQL3_2_D

    // $ANTLR start synpred562_PLSQL3_2_D
    public final void synpred562_PLSQL3_2_D_fragment()  {   
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:45: ( NUMBER )
        // D:\\m\\antlr\\antlrdtarget\\examples\\plsqlparser\\\\PLSQL3_2_D.g:1610:47: NUMBER
        {
        match(input,NUMBER,FOLLOW_NUMBER_in_synpred562_PLSQL3_2_D8049); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred562_PLSQL3_2_D

    // Delegated rules

    public final bool synpred528_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred528_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred135_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred67_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred251_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred92_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred325_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred527_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred527_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred429_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred515_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred515_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred499_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred499_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred317_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred481_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred481_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred488_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred488_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred469_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred469_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred311_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred355_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred276_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred392_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred503_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred503_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred285_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred470_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred316_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred304_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred303_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred468_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred397_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred379_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred462_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred33_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred94_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred286_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred95_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred89_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred259_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred394_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred136_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred479_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred479_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred485_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred485_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred404_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred308_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred133_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred399_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred405_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred71_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred477_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred477_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred289_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred388_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred475_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred475_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred93_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred529_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred529_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred306_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred390_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred298_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred386_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred406_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred294_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred338_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred430_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred407_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred433_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred561_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred561_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred331_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred288_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred65_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred456_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred456_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred453_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred326_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred476_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred476_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred498_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred498_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred473_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred473_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred374_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred324_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred380_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred383_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred295_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred96_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred474_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred474_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred284_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred512_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred512_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred283_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred408_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred467_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred467_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred432_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred350_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred376_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred287_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred381_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred307_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred482_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred300_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred310_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred363_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred272_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred552_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred552_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred72_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred32_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred547_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred547_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred63_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred98_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred81_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred517_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred517_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred562_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred562_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred62_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred351_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred402_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred403_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred262_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred318_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred384_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred464_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred464_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred449_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred539_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred539_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred319_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred321_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred550_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred550_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred442_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred471_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred471_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred191_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred463_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred514_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred514_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred489_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred489_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred46_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred313_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred382_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred99_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred551_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred551_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred309_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred299_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred366_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred538_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred538_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred367_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred480_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred480_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred472_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred472_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred416_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred312_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred258_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred436_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred504_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred504_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred478_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred478_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred484_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred484_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred377_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred315_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final bool synpred97_PLSQL3_2_D() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_PLSQL3_2_D_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            stderr.writeln("impossible: ",re);
        }
        bool success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }



     protected DFA17 dfa17;
     protected DFA26 dfa26;
     protected DFA36 dfa36;
     protected DFA39 dfa39;
     protected DFA133 dfa133;
     protected DFA166 dfa166;
     protected DFA175 dfa175;

    protected void createDFAs()
  {
    dfa17 = new DFA17(this);
    dfa26 = new DFA26(this);
    dfa36 = new DFA36(this);
    dfa39 = new DFA39(this);
    dfa133 = new DFA133(this);
    dfa166 = new DFA166(this);
    dfa175 = new DFA175(this);
  } 



    const static short DFA17_eot[656] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1
    ];
    const static short DFA17_eof[656] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1
    ];
    const static int DFA17_min[656] = [
    	15,13,13,-1,-1,-1,-1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,5,5,5,5,5,5,
    	     5,77,5,5,5,5,5,5,5,5,5,-1,15,34,5,34,34,27,15,22,15,5,5,15,-1,
    	     34,5,5,34,166,34,166,34,166,5,34,5,34,34,34,5,166,34,15,13,22,
    	     22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
    	     22,77,22,22,22,22,22,22,22,22,13,-1,11,52,52,34,22,52,11,22,5,
    	     -1,13,-1,-1,52,22,15,22,15,22,15,52,52,52,52,5,34,15,52,52,13,
    	     15,22,136,0,15,22,22,-1,34,22,34,34,34,22,22,34,166,34,166,34,
    	     166,22,34,22,34,34,34,22,166,34,34,34,5,5,5,52,5,5,11,11,11,11,
    	     11,11,11,11,11,11,11,11,11,11,11,11,11,22,11,11,11,11,11,11,11,
    	     77,11,11,11,11,11,11,11,11,11,15,120,5,34,15,13,15,5,52,52,5,5,
    	     9,52,52,5,5,9,52,52,5,5,9,5,5,5,5,52,5,9,5,5,34,22,6,22,53,13,
    	     11,52,52,52,22,15,22,15,22,15,52,52,52,52,22,34,15,52,52,52,173,
    	     34,34,11,34,34,27,34,22,15,11,11,34,11,11,34,166,34,166,34,166,
    	     11,34,11,34,34,34,11,166,34,34,11,5,34,6,15,5,15,5,15,5,5,15,5,
    	     52,22,22,22,34,22,22,22,22,52,52,22,9,9,52,52,22,9,9,52,52,22,
    	     9,9,22,22,22,22,52,9,9,22,22,52,11,52,52,34,22,52,22,11,52,22,
    	     15,22,15,22,15,52,52,52,52,11,34,15,52,52,11,11,11,11,11,11,11,
    	     11,11,11,11,11,11,11,11,11,11,22,11,11,11,11,11,11,11,77,11,11,
    	     11,11,11,11,11,11,11,52,22,9,9,9,9,9,9,9,9,53,34,22,52,15,22,15,
    	     22,15,22,22,15,22,5,34,11,11,11,52,11,11,11,11,52,52,11,9,9,52,
    	     52,11,9,9,52,52,11,9,9,11,11,11,11,52,9,9,11,11,34,11,34,34,27,
    	     34,22,15,11,11,34,11,11,34,166,34,166,34,166,11,34,11,34,34,34,
    	     11,166,34,34,53,-1,15,15,15,15,52,9,9,9,9,9,9,9,9,52,173,34,11,
    	     15,11,15,11,15,11,11,15,11,11,52,52,34,22,52,22,11,52,22,15,22,
    	     15,22,15,52,52,52,52,11,34,15,52,52,9,9,9,9,9,9,9,9,22,15,15,15,
    	     15,52,9,9,9,9,9,9,9,9,34,11,11,11,52,11,11,11,11,52,52,11,9,9,
    	     52,52,11,9,9,52,52,11,9,9,11,11,11,11,52,9,9,11,11,9,9,9,9,9,9,
    	     9,9,11,15,15,15,15,52,173,34,11,15,11,15,11,15,11,11,15,11,9,9,
    	     9,9,9,9,9,9,52,9,9,9,9,9,9,9,9,11,15,15,15,15,9,9,9,9,9,9,9,9
    ];
    const static int DFA17_max[656] = [
    	152,181,181,-1,-1,-1,-1,134,134,134,134,134,134,155,134,134,134,185,
    	     134,134,134,134,134,22,134,134,134,134,134,134,134,78,134,134,
    	     134,134,134,134,134,134,158,-1,181,34,134,34,34,173,34,22,22,134,
    	     134,181,-1,34,134,134,34,166,34,166,34,166,134,34,134,34,34,34,
    	     134,166,34,34,185,134,134,134,134,134,134,155,134,134,134,134,
    	     134,134,134,134,22,134,134,134,134,134,134,134,78,134,134,134,
    	     134,134,134,134,134,134,-1,52,52,52,34,22,52,181,22,134,-1,185,
    	     -1,-1,52,77,162,77,162,77,162,52,52,52,52,134,34,162,52,52,185,
    	     174,22,136,0,22,134,134,-1,34,134,34,34,34,134,134,34,166,34,166,
    	     34,166,134,34,134,34,34,34,134,166,34,34,34,134,134,134,52,134,
    	     185,181,52,52,52,52,52,52,155,52,52,52,185,52,52,52,52,52,22,78,
    	     78,78,52,52,52,52,78,52,52,52,78,52,52,52,52,56,22,158,134,34,
    	     181,185,174,134,52,52,134,134,13,52,52,134,134,13,52,52,134,134,
    	     13,134,134,134,134,52,134,13,134,134,34,22,144,22,53,134,52,52,
    	     52,52,77,162,77,162,77,162,52,52,52,52,134,34,162,52,52,52,173,
    	     34,34,52,34,34,173,34,22,22,52,52,34,52,78,34,166,34,166,34,166,
    	     52,34,52,34,34,34,52,166,34,34,181,134,34,144,162,134,162,134,
    	     162,134,134,162,134,52,134,185,134,34,134,134,134,134,52,52,134,
    	     134,13,52,52,134,134,13,52,52,134,134,13,134,134,134,134,52,134,
    	     13,134,134,52,52,52,52,34,22,52,22,56,52,77,162,77,162,77,162,
    	     52,52,52,52,52,34,162,52,52,181,52,52,52,52,52,52,155,52,52,52,
    	     185,52,52,52,52,52,22,78,78,78,52,52,52,52,78,52,52,52,78,52,52,
    	     52,52,56,52,185,13,13,13,13,13,13,13,13,185,34,134,52,162,134,
    	     162,134,162,134,134,162,134,134,34,52,52,52,52,52,185,52,52,52,
    	     52,78,52,13,52,52,78,52,13,52,52,78,52,13,52,52,52,52,52,52,13,
    	     52,52,34,52,34,34,173,34,22,22,52,52,34,52,78,34,166,34,166,34,
    	     166,52,34,52,34,34,34,52,166,34,34,185,-1,162,162,162,162,52,13,
    	     13,13,13,13,13,13,13,52,173,34,52,162,52,162,52,162,52,52,162,
    	     52,52,52,52,34,22,52,22,56,52,77,162,77,162,77,162,52,52,52,52,
    	     52,34,162,52,52,9,9,9,9,9,9,9,9,134,162,162,162,162,52,13,13,13,
    	     13,13,13,13,13,34,52,52,52,52,52,185,52,52,52,52,78,52,13,52,52,
    	     78,52,13,52,52,78,52,13,52,52,52,52,52,52,13,52,52,9,9,9,9,9,9,
    	     9,9,52,162,162,162,162,52,173,34,52,162,52,162,52,162,52,52,162,
    	     52,9,9,9,9,9,9,9,9,52,13,13,13,13,13,13,13,13,52,162,162,162,162,
    	     9,9,9,9,9,9,9,9
    ];
    const static short DFA17_accept[656] = [
    	-1,-1,-1,9,10,12,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,4,7,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1
    ];
    const static short DFA17_special[656] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1
    ];

    /*const static short DFA17_transition[][]=[
     [
    	41, -1, 40, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 37, 9, 8, 7, 34, 15, -1, -1, 24, 27, 35, -1, -1, 
    		-1, 6, -1, 16, 12, 12, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 41, 
    		-1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		19, 18, -1, -1, -1, -1, -1, 13, -1, -1, 32, -1, 31, 10, 28, 36, -1, 
    		-1, -1, -1, -1, -1, 12, 12, 29, 30, -1, -1, -1, -1, -1, -1, 33, 11, 
    		-1, -1, -1, -1, -1, 14, 22, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, 
    		-1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 25, 26
    ],
     [
    	339
    ],
     [
    	212, -1, -1, -1, 406, -1, -1, -1, -1, -1, -1, 383, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 403, 375, 374, 373, 400, 381, -1, 
    		-1, 390, 393, 401, -1, -1, -1, -1, -1, 382, 378, 378, -1, -1, -1, 
    		-1, -1, -1, 389, -1, -1, -1, -1, -1, -1, -1, -1, 387, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 372, -1, -1, 385, 384, -1, -1, -1, -1, -1, 
    		379, -1, -1, 398, -1, 397, 376, 394, 402, -1, -1, -1, -1, -1, -1, 
    		378, 378, 395, 396, -1, -1, -1, -1, -1, -1, 399, 377, -1, -1, -1, 
    		-1, -1, 380, 388, -1, -1, -1, -1, -1, 404, -1, -1, -1, -1, -1, 386, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, 391, 392
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	571
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 294, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	435
    ],
     [
    	330
    ],
     [
    	614
    ],
     [
    	509
    ],
     [
    	261
    ],
     [
    	417
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	111
    ],
     [
    	235
    ],
     [
    	537
    ],
     [
    	364
    ],
     [
    	129
    ],
     [
    	592
    ],
     [
    	173
    ],
     [
    	456
    ],
     [
    	110
    ],
     [
    	536
    ],
     [
    	363
    ],
     [
    	591
    ],
     [
    	455
    ],
     [
    	422
    ],
     [
    	172
    ],
     [
    	313, -1, -1, -1, 312
    ],
     [
    	6, -1, -1, -1, 306, -1, -1, -1, 305, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	146, -1, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, -1, -1, 406, -1, -1, -1, -1, -1, -1, 383, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 403, 375, 374, 373, 400, 381, -1, 
    		-1, 390, 393, 401, -1, -1, -1, -1, -1, 382, 378, 378, -1, -1, -1, 
    		-1, -1, -1, 389, -1, -1, -1, -1, -1, -1, -1, -1, 387, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 385, 384, -1, -1, -1, -1, -1, 
    		379, -1, -1, 398, -1, 397, 376, 394, 402, -1, -1, -1, -1, -1, -1, 
    		378, 378, 395, 396, -1, -1, -1, -1, -1, -1, 399, 377, -1, -1, -1, 
    		-1, -1, 380, 388, -1, -1, -1, -1, -1, 404, -1, -1, -1, -1, -1, 386, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, 391, 392
    ],
     [
    	620, -1, -1, -1, 645
    ],
     [
    	515, -1, -1, -1, 610
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	146, -1, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ],
     [
    	539
    ],
     [
    	366
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 481, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 482
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 295, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 465
    ],
     [
    	407
    ],
     [
    	618
    ],
     [
    	513
    ],
     [
    	341
    ],
     [
    	263
    ],
     [
    	130
    ],
     [
    	424
    ],
     [
    	426, -1, -1, -1, 556
    ],
     [
    	166, 166
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	583
    ],
     [
    	447
    ],
     [
    	236
    ],
     [
    	625, -1, -1, -1, 647
    ],
     [
    	520, -1, -1, -1, 612
    ],
     [
    	594
    ],
     [
    	458
    ],
     [
    	538
    ],
     [
    	365
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 273
    ],
     [
    	340
    ],
     [
    	333, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 335, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 334
    ],
     [
    	475
    ],
     [
    	262
    ],
     [
    	283
    ],
     [
    	306
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 486, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	222
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 479, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 480
    ],
     [
    	176
    ],
     [
    	593
    ],
     [
    	457
    ],
     [
    	625
    ],
     [
    	520
    ],
     [
    	131
    ],
     [
    	-1
    ],
     [
    	347
    ],
     [
    	237
    ],
     [
    	228, -1, -1, -1, -1, -1, -1, 228, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 229
    ],
     [
    	153, -1, -1, -1, -1, 154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	259
    ],
     [
    	578
    ],
     [
    	442
    ],
     [
    	430
    ],
     [
    	618, -1, -1, -1, 644
    ],
     [
    	513, -1, -1, -1, 609
    ],
     [
    	535
    ],
     [
    	362
    ],
     [
    	579, -1, -1, -1, -1, -1, -1, 579, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 580
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		133, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	443, -1, -1, -1, -1, -1, -1, 443, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 444
    ],
     [
    	424, -1, -1, -1, 555
    ],
     [
    	258
    ],
     [
    	146, -1, -1, -1, -1, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	534
    ],
     [
    	361
    ],
     [
    	107, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, 
    		-1, -1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, 
    		-1, -1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 
    		79, -1, -1, -1, -1, -1, 82, 89, 120, -1, -1, -1, -1, 105, -1, -1, 
    		121, -1, -1, 87, -1, -1, 118, -1, -1, -1, -1, -1, -1, 106, -1, 92, 
    		93
    ],
     [
    	146, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	317
    ],
     [
    	336, -1, -1, -1, -1, -1, -1, 336, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337
    ],
     [
    	625, -1, -1, -1, 624
    ],
     [
    	520, -1, -1, -1, 519
    ],
     [
    	6, -1, -1, -1, 310, -1, -1, -1, 309, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	6, -1, -1, -1, 313, -1, -1, -1, 312, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 280, 213, -1, -1, -1, 281
    ],
     [
    	70, 70
    ],
     [
    	306, -1, -1, -1, 495
    ],
     [
    	338
    ],
     [
    	260
    ],
     [
    	171
    ],
     [
    	620
    ],
     [
    	515
    ],
     [
    	426
    ],
     [
    	146, -1, -1, -1, -1, 150, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 215, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	525
    ],
     [
    	352
    ],
     [
    	248
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ],
     [
    	132
    ],
     [
    	313, -1, -1, -1, 498
    ],
     [
    	146, -1, -1, -1, -1, 163, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	238
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 467, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, 471, -1, -1, -1, -1, -1, -1, -1, -1, 468, -1, -1, -1, -1, 
    		469, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 472, 213, -1, -1, -1, 473, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 470
    ],
     [
    	175
    ],
     [
    	588
    ],
     [
    	589, -1, -1, -1, -1, -1, -1, 589, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 590
    ],
     [
    	452
    ],
     [
    	515, -1, 212, -1, 514, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 299, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	453, -1, -1, -1, -1, -1, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 454
    ],
     [
    	532
    ],
     [
    	359
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		302, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	311
    ],
     [
    	256
    ],
     [
    	270
    ],
     [
    	239
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 293, -1, -1, -1, -1, 294, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 296, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	240, -1, -1, -1, -1, -1, -1, 240, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 241
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 282, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 244, -1, 
    		146, -1, -1, -1, -1, 146, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 146, -1, -1, -1, -1, 108, -1, 108, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108
    ],
     [
    	174
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 616, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	429, -1, -1, -1, 557
    ],
     [
    	227
    ],
     [
    	409, -1, -1, -1, -1, -1, -1, 409, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 410
    ],
     [
    	411, -1, -1, -1, -1, -1, -1, 411, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 412
    ],
     [
    	413, -1, -1, -1, -1, -1, -1, 413, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414
    ],
     [
    	415, -1, -1, -1, -1, -1, -1, 415, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 416
    ],
     [
    	429
    ],
     [
    	313
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 292, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	135
    ],
     [
    	170, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 171
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 108, -1, 108, -1, 
    		-1, -1, -1, 304, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 108, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, 
    		108, -1, -1, -1, 108, -1, -1, -1, -1, 108
    ],
     [
    	551, -1, -1, -1, -1, -1, -1, 551, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 552
    ],
     [
    	549, -1, -1, -1, -1, -1, -1, 549, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 550
    ],
     [
    	547, -1, -1, -1, -1, -1, -1, 547, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 548
    ],
     [
    	545, -1, -1, -1, -1, -1, -1, 545, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 546
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ],
     [
    	143, -1, 108, -1, -1, -1, -1, -1, -1, 138, -1, -1, -1, -1, 139, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, -1, -1, 
    		108, 108, 108, -1, -1, -1, -1, -1, 108, 108, 108, -1, -1, -1, -1, 
    		-1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 108, 
    		-1, -1, 108, -1, 108, 108, 108, 108, -1, -1, 141, -1, -1, -1, 108, 
    		108, 108, 108, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 
    		108, 108, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 108, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, -1, 108, 108, -1, -1, -1, 140
    ],
     [
    	325
    ],
     [
    	308, -1, -1, -1, 496
    ],
     [
    	264, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	533
    ],
     [
    	360
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 287, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 288
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 289, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290
    ],
     [
    	121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 54
    ],
     [
    	257
    ],
     [
    	424, -1, -1, -1, 423, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	620, -1, 212, -1, 619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 491, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	160, -1, -1, -1, -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	335
    ],
     [
    	146, -1, -1, -1, -1, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 482
    ],
     [
    	143, -1, 108, -1, -1, -1, -1, -1, -1, 217, -1, -1, -1, -1, 218, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, -1, -1, 
    		108, 108, 108, -1, -1, -1, -1, -1, 108, 108, 108, -1, -1, -1, -1, 
    		-1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 108, 
    		-1, -1, 108, -1, 108, 108, 108, 108, -1, -1, 141, -1, -1, -1, 108, 
    		108, 108, 108, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 
    		108, 108, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 108, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, -1, 108, 108, -1, -1, -1, 140
    ],
     [
    	622
    ],
     [
    	517
    ],
     [
    	301, -1, -1, -1, -1, -1, -1, 301
    ],
     [
    	318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 319
    ],
     [
    	573
    ],
     [
    	437
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 476, -1, -1, -1, -1, 477, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ],
     [
    	526
    ],
     [
    	353
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 511, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		47, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	253
    ],
     [
    	230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 232, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 231
    ],
     [
    	322
    ],
     [
    	529
    ],
     [
    	356
    ],
     [
    	575
    ],
     [
    	107, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, -1, 
    		-1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, -1, 
    		-1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 79, 
    		-1, -1, -1, -1, -1, 82, 89, -1, -1, -1, -1, -1, 105, -1, -1, -1, -1, 
    		-1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 92, 93
    ],
     [
    	439
    ],
     [
    	115, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 114
    ],
     [
    	113
    ],
     [
    	622, -1, -1, -1, 646
    ],
     [
    	517, -1, -1, -1, 611
    ],
     [
    	306, -1, -1, -1, 305
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 488, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	531
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	358
    ],
     [
    	242
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	422, -1, -1, -1, 554
    ],
     [
    	567, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 568
    ],
     [
    	255
    ],
     [
    	431, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 432
    ],
     [
    	223, -1, -1, -1, -1, -1, -1, 223, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 470
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 483, -1, -1, -1, -1, 484, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	116
    ],
     [
    	524, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 525
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	136
    ],
     [
    	351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 352
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	254
    ],
     [
    	310, -1, -1, -1, 497
    ],
     [
    	530
    ],
     [
    	357
    ],
     [
    	643
    ],
     [
    	608
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		64, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	122
    ],
     [
    	219
    ],
     [
    	634
    ],
     [
    	558
    ],
     [
    	315
    ],
     [
    	499
    ],
     [
    	553
    ],
     [
    	596, -1, -1, -1, -1, -1, -1, 596, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 597
    ],
     [
    	460, -1, -1, -1, -1, -1, -1, 460, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 461
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	576, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 578, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 577
    ],
     [
    	440, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 442, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 441
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 167, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 474, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	143, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 169, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 141
    ],
     [
    	146, -1, -1, -1, -1, 418, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	142
    ],
     [
    	506, -1, -1, -1, -1, -1, -1, 506, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 507
    ],
     [
    	504, -1, -1, -1, -1, -1, -1, 504, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 505
    ],
     [
    	502, -1, -1, -1, -1, -1, -1, 502, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 503
    ],
     [
    	500, -1, -1, -1, -1, -1, -1, 500, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 501
    ],
     [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 
    		3
    ],
     [
    	115, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 137
    ],
     [
    	331, -1, -1, -1, -1, -1, -1, 331, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332
    ],
     [
    	606, -1, -1, -1, -1, -1, -1, 606, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 607
    ],
     [
    	604, -1, -1, -1, -1, -1, -1, 604, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 605
    ],
     [
    	602, -1, -1, -1, -1, -1, -1, 602, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 603
    ],
     [
    	600, -1, -1, -1, -1, -1, -1, 600, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 601
    ],
     [
    	212, -1, 471, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 492, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 472, 213, -1, -1, -1, 473
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 487, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	570
    ],
     [
    	434
    ],
     [
    	523
    ],
     [
    	350
    ],
     [
    	308, -1, -1, -1, 307
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 108, -1, 108, -1, 
    		-1, -1, -1, 246, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 108, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, 
    		108, -1, -1, -1, 108, -1, -1, -1, -1, 108
    ],
     [
    	620, -1, -1, -1, 619
    ],
     [
    	515, -1, -1, -1, 514
    ],
     [
    	123
    ],
     [
    	572
    ],
     [
    	436
    ],
     [
    	107, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, 
    		-1, -1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, 
    		-1, -1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 
    		79, -1, -1, -1, -1, -1, 82, 89, 120, -1, -1, -1, -1, 105, -1, -1, 
    		-1, -1, -1, 87, -1, -1, 118, -1, -1, -1, -1, -1, -1, 106, -1, 92, 
    		93
    ],
     [
    	243
    ],
     [
    	225, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 227, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 226
    ],
     [
    	426, -1, -1, -1, 425
    ],
     [
    	137
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 464, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	517, -1, 212, -1, 516, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	422, -1, -1, -1, 421, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	641, -1, -1, -1, -1, -1, -1, 641, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 642
    ],
     [
    	639, -1, -1, -1, -1, -1, -1, 639, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 640
    ],
     [
    	637, -1, -1, -1, -1, -1, -1, 637, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 638
    ],
     [
    	635, -1, -1, -1, -1, -1, -1, 635, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 636
    ],
     [
    	565, -1, -1, -1, -1, -1, -1, 565, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 566
    ],
     [
    	563, -1, -1, -1, -1, -1, -1, 563, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 564
    ],
     [
    	561, -1, -1, -1, -1, -1, -1, 561, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 562
    ],
     [
    	559, -1, -1, -1, -1, -1, -1, 559, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 560
    ],
     [
    	584, -1, -1, -1, -1, -1, -1, 584, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 585
    ],
     [
    	448, -1, -1, -1, -1, -1, -1, 448, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 449
    ],
     [
    	346
    ],
     [
    	268
    ],
     [
    	654, -1, -1, -1, -1, -1, -1, 654, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 655
    ],
     [
    	652, -1, -1, -1, -1, -1, -1, 652, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 653
    ],
     [
    	650, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 651
    ],
     [
    	648, -1, -1, -1, -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 649
    ],
     [
    	632, -1, -1, -1, -1, -1, -1, 632, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 633
    ],
     [
    	630, -1, -1, -1, -1, -1, -1, 630, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 631
    ],
     [
    	628, -1, -1, -1, -1, -1, -1, 628, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 629
    ],
     [
    	626, -1, -1, -1, -1, -1, -1, 626, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 627
    ],
     [
    	599
    ],
     [
    	463
    ],
     [
    	124
    ],
     [
    	544
    ],
     [
    	371
    ],
     [
    	232
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 368, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	422, -1, -1, -1, 421
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 615, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	625, -1, 212, -1, 624, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	343, -1, -1, -1, -1, -1, -1, 343, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 344
    ],
     [
    	618, -1, -1, -1, 617
    ],
     [
    	513, -1, -1, -1, 512
    ],
     [
    	6, -1, -1, -1, 308, -1, -1, -1, 307, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	493
    ],
     [
    	424, -1, -1, -1, 423
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 278
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 275, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	146, -1, -1, -1, -1, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, 211, -1, -1, -1, -1, -1, -1, 188, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 208, 180, 179, 178, 205, 186, -1, 
    		-1, 195, 198, 206, -1, -1, -1, -1, -1, 187, 183, 183, -1, -1, -1, 
    		-1, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 177, -1, -1, 190, 189, -1, -1, -1, -1, -1, 
    		184, -1, -1, 203, -1, 202, 181, 199, 207, -1, -1, -1, -1, -1, -1, 
    		183, 183, 200, 201, -1, -1, -1, -1, -1, -1, 204, 182, -1, -1, -1, 
    		-1, -1, 185, 193, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, 191, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, 196, 197
    ],
     [
    	125
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, 541, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 480
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 367, -1, -1, -1, -1, 368, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	543
    ],
     [
    	370
    ],
     [
    	41, -1, 6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 6, 6, 6, 6, 6, 6, -1, -1, 6, 6, 6, -1, -1, -1, 6, 
    		-1, 6, 6, 6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, 41, -1, -1, -1, 
    		-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, 
    		-1, -1, -1, 6, -1, -1, 6, -1, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 
    		6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, -1, -1, -1, 6, 6, 
    		-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 6, -1, 6, 6
    ],
     [
    	328, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 330, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 329
    ],
     [
    	247
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 291, -1, -1, -1, -1, 292, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	345
    ],
     [
    	267
    ],
     [
    	314
    ],
     [
    	117, -1, -1, -1, -1, -1, -1, 117
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 484, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140
    ],
     [
    	126
    ],
     [
    	308
    ],
     [
    	146, -1, -1, -1, -1, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	212, -1, -1, -1, 211, -1, -1, -1, -1, -1, -1, 188, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 208, 180, 179, 178, 205, 186, -1, 
    		-1, 195, 198, 206, -1, -1, -1, -1, -1, 187, 183, 183, -1, -1, -1, 
    		-1, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 190, 189, -1, -1, -1, -1, -1, 
    		184, -1, -1, 203, -1, 202, 181, 199, 207, -1, -1, -1, -1, -1, -1, 
    		183, 183, 200, 201, -1, -1, -1, -1, -1, -1, 204, 182, -1, -1, -1, 
    		-1, -1, 185, 193, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, 191, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, 196, 197
    ],
     [
    	310
    ],
     [
    	598
    ],
     [
    	462
    ],
     [
    	429, -1, -1, -1, 428
    ],
     [
    	233, -1, -1, -1, -1, -1, -1, 233, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 234
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290
    ],
     [
    	622, -1, 212, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		66, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	574
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		57, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	438
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 288
    ],
     [
    	520, -1, 212, -1, 519, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	342
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 541, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	146, -1, -1, -1, -1, 154, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	581, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 583, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 582
    ],
     [
    	445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 447, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 446
    ],
     [
    	595
    ],
     [
    	459
    ],
     [
    	427
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ],
     [
    	622, -1, -1, -1, 621
    ],
     [
    	517, -1, -1, -1, 516
    ],
     [
    	489, 489
    ],
     [
    	220, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 221
    ],
     [
    	297, 297
    ],
     [
    	108, -1, 108, -1, -1, 108, 108, -1, -1, -1, 108, 108, 108, 108, 108, 
    		108, -1, 108, -1, 108, -1, -1, 108, 108, -1, -1, 108, 108, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
    		408, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		-1, 108, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ],
     [
    	127
    ],
     [
    	527
    ],
     [
    	354
    ],
     [
    	251
    ],
     [
    	269
    ],
     [
    	320
    ],
     [
    	522
    ],
     [
    	349
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ],
     [
    	569
    ],
     [
    	433
    ],
     [
    	162, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	146, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	109
    ],
     [
    	623
    ],
     [
    	518
    ],
     [
    	146, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	252
    ],
     [
    	249, -1, -1, -1, -1, -1, -1, 249
    ],
     [
    	323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 325, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 324
    ],
     [
    	321
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		54
    ],
     [
    	542
    ],
     [
    	146, -1, -1, -1, -1, 161, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	369
    ],
     [
    	56
    ],
     [
    	618, -1, 212, -1, 617, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 303, -1, 
    		146, -1, -1, -1, -1, 146, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 146, -1, -1, -1, -1, 108, -1, 108, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108
    ],
     [
    	112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113
    ],
     [
    	146, -1, -1, -1, -1, 265, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298
    ],
     [
    	214
    ],
     [
    	528, -1, -1, -1, -1, -1, -1, 528
    ],
     [
    	108, -1, 108, -1, -1, 108, 108, -1, -1, -1, 108, 108, 108, 108, 108, 
    		108, -1, 108, -1, 108, -1, -1, 108, 108, -1, -1, 108, 108, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
    		316, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		-1, 108, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ],
     [
    	355, -1, -1, -1, -1, -1, -1, 355
    ],
     [
    	586, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 588, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 587
    ],
     [
    	450, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 452, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 451
    ],
     [
    	266
    ],
     [
    	250
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	128
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 285, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ],
     [
    	326, -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 327
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 485, -1, -1, -1, -1, 486, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, -1, -1, -1, 285, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 490
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 477, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	152
    ],
     [
    	319
    ],
     [
    	310, -1, -1, -1, 309
    ],
     [
    	419, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	420
    ],
     [
    	513, -1, 212, -1, 512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ],
     [
    	521
    ],
     [
    	212, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, 276, -1, -1, -1, -1, 
    		277, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 280, 213, -1, -1, -1, 281, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 278
    ],
     [
    	348
    ],
     [
    	426, -1, -1, -1, 425, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	613
    ],
     [
    	508
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ],
     [
    	568
    ],
     [
    	432
    ],
     [
    	429, -1, -1, -1, 428, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ],
     [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 510, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa17_transition0[] = [
    	41, -1, 40, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 37, 9, 8, 7, 34, 15, -1, -1, 24, 27, 35, -1, -1, 
    		-1, 6, -1, 16, 12, 12, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 41, 
    		-1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		19, 18, -1, -1, -1, -1, -1, 13, -1, -1, 32, -1, 31, 10, 28, 36, -1, 
    		-1, -1, -1, -1, -1, 12, 12, 29, 30, -1, -1, -1, -1, -1, -1, 33, 11, 
    		-1, -1, -1, -1, -1, 14, 22, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, 
    		-1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 25, 26
    ];
    const static short PLSQL3_2_DParserdfa17_transition1[] = [
    	339
    ];
    const static short PLSQL3_2_DParserdfa17_transition2[] = [
    	212, -1, -1, -1, 406, -1, -1, -1, -1, -1, -1, 383, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 403, 375, 374, 373, 400, 381, -1, 
    		-1, 390, 393, 401, -1, -1, -1, -1, -1, 382, 378, 378, -1, -1, -1, 
    		-1, -1, -1, 389, -1, -1, -1, -1, -1, -1, -1, -1, 387, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 372, -1, -1, 385, 384, -1, -1, -1, -1, -1, 
    		379, -1, -1, 398, -1, 397, 376, 394, 402, -1, -1, -1, -1, -1, -1, 
    		378, 378, 395, 396, -1, -1, -1, -1, -1, -1, 399, 377, -1, -1, -1, 
    		-1, -1, 380, 388, -1, -1, -1, -1, -1, 404, -1, -1, -1, -1, -1, 386, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, 391, 392
    ];
    const static short PLSQL3_2_DParserdfa17_transition3[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition4[] = [
    	571
    ];
    const static short PLSQL3_2_DParserdfa17_transition5[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition6[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 294, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition7[] = [
    	435
    ];
    const static short PLSQL3_2_DParserdfa17_transition8[] = [
    	330
    ];
    const static short PLSQL3_2_DParserdfa17_transition9[] = [
    	614
    ];
    const static short PLSQL3_2_DParserdfa17_transition10[] = [
    	509
    ];
    const static short PLSQL3_2_DParserdfa17_transition11[] = [
    	261
    ];
    const static short PLSQL3_2_DParserdfa17_transition12[] = [
    	417
    ];
    const static short PLSQL3_2_DParserdfa17_transition13[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition14[] = [
    	111
    ];
    const static short PLSQL3_2_DParserdfa17_transition15[] = [
    	235
    ];
    const static short PLSQL3_2_DParserdfa17_transition16[] = [
    	537
    ];
    const static short PLSQL3_2_DParserdfa17_transition17[] = [
    	364
    ];
    const static short PLSQL3_2_DParserdfa17_transition18[] = [
    	129
    ];
    const static short PLSQL3_2_DParserdfa17_transition19[] = [
    	592
    ];
    const static short PLSQL3_2_DParserdfa17_transition20[] = [
    	173
    ];
    const static short PLSQL3_2_DParserdfa17_transition21[] = [
    	456
    ];
    const static short PLSQL3_2_DParserdfa17_transition22[] = [
    	110
    ];
    const static short PLSQL3_2_DParserdfa17_transition23[] = [
    	536
    ];
    const static short PLSQL3_2_DParserdfa17_transition24[] = [
    	363
    ];
    const static short PLSQL3_2_DParserdfa17_transition25[] = [
    	591
    ];
    const static short PLSQL3_2_DParserdfa17_transition26[] = [
    	455
    ];
    const static short PLSQL3_2_DParserdfa17_transition27[] = [
    	422
    ];
    const static short PLSQL3_2_DParserdfa17_transition28[] = [
    	172
    ];
    const static short PLSQL3_2_DParserdfa17_transition29[] = [
    	313, -1, -1, -1, 312
    ];
    const static short PLSQL3_2_DParserdfa17_transition30[] = [
    	6, -1, -1, -1, 306, -1, -1, -1, 305, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition31[] = [
    	146, -1, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition32[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition33[] = [
    	212, -1, -1, -1, 406, -1, -1, -1, -1, -1, -1, 383, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 403, 375, 374, 373, 400, 381, -1, 
    		-1, 390, 393, 401, -1, -1, -1, -1, -1, 382, 378, 378, -1, -1, -1, 
    		-1, -1, -1, 389, -1, -1, -1, -1, -1, -1, -1, -1, 387, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 385, 384, -1, -1, -1, -1, -1, 
    		379, -1, -1, 398, -1, 397, 376, 394, 402, -1, -1, -1, -1, -1, -1, 
    		378, 378, 395, 396, -1, -1, -1, -1, -1, -1, 399, 377, -1, -1, -1, 
    		-1, -1, 380, 388, -1, -1, -1, -1, -1, 404, -1, -1, -1, -1, -1, 386, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, 391, 392
    ];
    const static short PLSQL3_2_DParserdfa17_transition34[] = [
    	620, -1, -1, -1, 645
    ];
    const static short PLSQL3_2_DParserdfa17_transition35[] = [
    	515, -1, -1, -1, 610
    ];
    const static short PLSQL3_2_DParserdfa17_transition36[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition37[] = [
    	146, -1, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ];
    const static short PLSQL3_2_DParserdfa17_transition38[] = [
    	539
    ];
    const static short PLSQL3_2_DParserdfa17_transition39[] = [
    	366
    ];
    const static short PLSQL3_2_DParserdfa17_transition40[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 481, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 482
    ];
    const static short PLSQL3_2_DParserdfa17_transition41[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition42[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 295, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition43[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 465
    ];
    const static short PLSQL3_2_DParserdfa17_transition44[] = [
    	407
    ];
    const static short PLSQL3_2_DParserdfa17_transition45[] = [
    	618
    ];
    const static short PLSQL3_2_DParserdfa17_transition46[] = [
    	513
    ];
    const static short PLSQL3_2_DParserdfa17_transition47[] = [
    	341
    ];
    const static short PLSQL3_2_DParserdfa17_transition48[] = [
    	263
    ];
    const static short PLSQL3_2_DParserdfa17_transition49[] = [
    	130
    ];
    const static short PLSQL3_2_DParserdfa17_transition50[] = [
    	424
    ];
    const static short PLSQL3_2_DParserdfa17_transition51[] = [
    	426, -1, -1, -1, 556
    ];
    const static short PLSQL3_2_DParserdfa17_transition52[] = [
    	166, 166
    ];
    const static short PLSQL3_2_DParserdfa17_transition53[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition54[] = [
    	583
    ];
    const static short PLSQL3_2_DParserdfa17_transition55[] = [
    	447
    ];
    const static short PLSQL3_2_DParserdfa17_transition56[] = [
    	236
    ];
    const static short PLSQL3_2_DParserdfa17_transition57[] = [
    	625, -1, -1, -1, 647
    ];
    const static short PLSQL3_2_DParserdfa17_transition58[] = [
    	520, -1, -1, -1, 612
    ];
    const static short PLSQL3_2_DParserdfa17_transition59[] = [
    	594
    ];
    const static short PLSQL3_2_DParserdfa17_transition60[] = [
    	458
    ];
    const static short PLSQL3_2_DParserdfa17_transition61[] = [
    	538
    ];
    const static short PLSQL3_2_DParserdfa17_transition62[] = [
    	365
    ];
    const static short PLSQL3_2_DParserdfa17_transition63[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 273
    ];
    const static short PLSQL3_2_DParserdfa17_transition64[] = [
    	340
    ];
    const static short PLSQL3_2_DParserdfa17_transition65[] = [
    	333, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 335, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 334
    ];
    const static short PLSQL3_2_DParserdfa17_transition66[] = [
    	475
    ];
    const static short PLSQL3_2_DParserdfa17_transition67[] = [
    	262
    ];
    const static short PLSQL3_2_DParserdfa17_transition68[] = [
    	283
    ];
    const static short PLSQL3_2_DParserdfa17_transition69[] = [
    	306
    ];
    const static short PLSQL3_2_DParserdfa17_transition70[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 486, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition71[] = [
    	222
    ];
    const static short PLSQL3_2_DParserdfa17_transition72[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 479, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 480
    ];
    const static short PLSQL3_2_DParserdfa17_transition73[] = [
    	176
    ];
    const static short PLSQL3_2_DParserdfa17_transition74[] = [
    	593
    ];
    const static short PLSQL3_2_DParserdfa17_transition75[] = [
    	457
    ];
    const static short PLSQL3_2_DParserdfa17_transition76[] = [
    	625
    ];
    const static short PLSQL3_2_DParserdfa17_transition77[] = [
    	520
    ];
    const static short PLSQL3_2_DParserdfa17_transition78[] = [
    	131
    ];
    const static short PLSQL3_2_DParserdfa17_transition79[] = [
    	-1
    ];
    const static short PLSQL3_2_DParserdfa17_transition80[] = [
    	347
    ];
    const static short PLSQL3_2_DParserdfa17_transition81[] = [
    	237
    ];
    const static short PLSQL3_2_DParserdfa17_transition82[] = [
    	228, -1, -1, -1, -1, -1, -1, 228, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 229
    ];
    const static short PLSQL3_2_DParserdfa17_transition83[] = [
    	153, -1, -1, -1, -1, 154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition84[] = [
    	259
    ];
    const static short PLSQL3_2_DParserdfa17_transition85[] = [
    	578
    ];
    const static short PLSQL3_2_DParserdfa17_transition86[] = [
    	442
    ];
    const static short PLSQL3_2_DParserdfa17_transition87[] = [
    	430
    ];
    const static short PLSQL3_2_DParserdfa17_transition88[] = [
    	618, -1, -1, -1, 644
    ];
    const static short PLSQL3_2_DParserdfa17_transition89[] = [
    	513, -1, -1, -1, 609
    ];
    const static short PLSQL3_2_DParserdfa17_transition90[] = [
    	535
    ];
    const static short PLSQL3_2_DParserdfa17_transition91[] = [
    	362
    ];
    const static short PLSQL3_2_DParserdfa17_transition92[] = [
    	579, -1, -1, -1, -1, -1, -1, 579, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 580
    ];
    const static short PLSQL3_2_DParserdfa17_transition93[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		133, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition94[] = [
    	443, -1, -1, -1, -1, -1, -1, 443, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 444
    ];
    const static short PLSQL3_2_DParserdfa17_transition95[] = [
    	424, -1, -1, -1, 555
    ];
    const static short PLSQL3_2_DParserdfa17_transition96[] = [
    	258
    ];
    const static short PLSQL3_2_DParserdfa17_transition97[] = [
    	146, -1, -1, -1, -1, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition98[] = [
    	534
    ];
    const static short PLSQL3_2_DParserdfa17_transition99[] = [
    	361
    ];
    const static short PLSQL3_2_DParserdfa17_transition100[] = [
    	107, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, 
    		-1, -1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, 
    		-1, -1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 
    		79, -1, -1, -1, -1, -1, 82, 89, 120, -1, -1, -1, -1, 105, -1, -1, 
    		121, -1, -1, 87, -1, -1, 118, -1, -1, -1, -1, -1, -1, 106, -1, 92, 
    		93
    ];
    const static short PLSQL3_2_DParserdfa17_transition101[] = [
    	146, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition102[] = [
    	317
    ];
    const static short PLSQL3_2_DParserdfa17_transition103[] = [
    	336, -1, -1, -1, -1, -1, -1, 336, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337
    ];
    const static short PLSQL3_2_DParserdfa17_transition104[] = [
    	625, -1, -1, -1, 624
    ];
    const static short PLSQL3_2_DParserdfa17_transition105[] = [
    	520, -1, -1, -1, 519
    ];
    const static short PLSQL3_2_DParserdfa17_transition106[] = [
    	6, -1, -1, -1, 310, -1, -1, -1, 309, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition107[] = [
    	6, -1, -1, -1, 313, -1, -1, -1, 312, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition108[] = [
    	212, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 280, 213, -1, -1, -1, 281
    ];
    const static short PLSQL3_2_DParserdfa17_transition109[] = [
    	70, 70
    ];
    const static short PLSQL3_2_DParserdfa17_transition110[] = [
    	306, -1, -1, -1, 495
    ];
    const static short PLSQL3_2_DParserdfa17_transition111[] = [
    	338
    ];
    const static short PLSQL3_2_DParserdfa17_transition112[] = [
    	260
    ];
    const static short PLSQL3_2_DParserdfa17_transition113[] = [
    	171
    ];
    const static short PLSQL3_2_DParserdfa17_transition114[] = [
    	620
    ];
    const static short PLSQL3_2_DParserdfa17_transition115[] = [
    	515
    ];
    const static short PLSQL3_2_DParserdfa17_transition116[] = [
    	426
    ];
    const static short PLSQL3_2_DParserdfa17_transition117[] = [
    	146, -1, -1, -1, -1, 150, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition118[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 215, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition119[] = [
    	525
    ];
    const static short PLSQL3_2_DParserdfa17_transition120[] = [
    	352
    ];
    const static short PLSQL3_2_DParserdfa17_transition121[] = [
    	248
    ];
    const static short PLSQL3_2_DParserdfa17_transition122[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition123[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ];
    const static short PLSQL3_2_DParserdfa17_transition124[] = [
    	132
    ];
    const static short PLSQL3_2_DParserdfa17_transition125[] = [
    	313, -1, -1, -1, 498
    ];
    const static short PLSQL3_2_DParserdfa17_transition126[] = [
    	146, -1, -1, -1, -1, 163, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition127[] = [
    	238
    ];
    const static short PLSQL3_2_DParserdfa17_transition128[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 467, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition129[] = [
    	212, -1, 471, -1, -1, -1, -1, -1, -1, -1, -1, 468, -1, -1, -1, -1, 
    		469, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 472, 213, -1, -1, -1, 473, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 470
    ];
    const static short PLSQL3_2_DParserdfa17_transition130[] = [
    	175
    ];
    const static short PLSQL3_2_DParserdfa17_transition131[] = [
    	588
    ];
    const static short PLSQL3_2_DParserdfa17_transition132[] = [
    	589, -1, -1, -1, -1, -1, -1, 589, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 590
    ];
    const static short PLSQL3_2_DParserdfa17_transition133[] = [
    	452
    ];
    const static short PLSQL3_2_DParserdfa17_transition134[] = [
    	515, -1, 212, -1, 514, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition135[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 299, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition136[] = [
    	453, -1, -1, -1, -1, -1, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 454
    ];
    const static short PLSQL3_2_DParserdfa17_transition137[] = [
    	532
    ];
    const static short PLSQL3_2_DParserdfa17_transition138[] = [
    	359
    ];
    const static short PLSQL3_2_DParserdfa17_transition139[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		302, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition140[] = [
    	311
    ];
    const static short PLSQL3_2_DParserdfa17_transition141[] = [
    	256
    ];
    const static short PLSQL3_2_DParserdfa17_transition142[] = [
    	270
    ];
    const static short PLSQL3_2_DParserdfa17_transition143[] = [
    	239
    ];
    const static short PLSQL3_2_DParserdfa17_transition144[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 293, -1, -1, -1, -1, 294, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition145[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition146[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 296, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition147[] = [
    	240, -1, -1, -1, -1, -1, -1, 240, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 241
    ];
    const static short PLSQL3_2_DParserdfa17_transition148[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 282, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition149[] = [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 244, -1, 
    		146, -1, -1, -1, -1, 146, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 146, -1, -1, -1, -1, 108, -1, 108, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition150[] = [
    	174
    ];
    const static short PLSQL3_2_DParserdfa17_transition151[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 616, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition152[] = [
    	429, -1, -1, -1, 557
    ];
    const static short PLSQL3_2_DParserdfa17_transition153[] = [
    	227
    ];
    const static short PLSQL3_2_DParserdfa17_transition154[] = [
    	409, -1, -1, -1, -1, -1, -1, 409, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 410
    ];
    const static short PLSQL3_2_DParserdfa17_transition155[] = [
    	411, -1, -1, -1, -1, -1, -1, 411, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 412
    ];
    const static short PLSQL3_2_DParserdfa17_transition156[] = [
    	413, -1, -1, -1, -1, -1, -1, 413, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414
    ];
    const static short PLSQL3_2_DParserdfa17_transition157[] = [
    	415, -1, -1, -1, -1, -1, -1, 415, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 416
    ];
    const static short PLSQL3_2_DParserdfa17_transition158[] = [
    	429
    ];
    const static short PLSQL3_2_DParserdfa17_transition159[] = [
    	313
    ];
    const static short PLSQL3_2_DParserdfa17_transition160[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 292, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition161[] = [
    	135
    ];
    const static short PLSQL3_2_DParserdfa17_transition162[] = [
    	170, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 171
    ];
    const static short PLSQL3_2_DParserdfa17_transition163[] = [
    	108, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 108, -1, 108, -1, 
    		-1, -1, -1, 304, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 108, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, 
    		108, -1, -1, -1, 108, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition164[] = [
    	551, -1, -1, -1, -1, -1, -1, 551, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 552
    ];
    const static short PLSQL3_2_DParserdfa17_transition165[] = [
    	549, -1, -1, -1, -1, -1, -1, 549, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 550
    ];
    const static short PLSQL3_2_DParserdfa17_transition166[] = [
    	547, -1, -1, -1, -1, -1, -1, 547, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 548
    ];
    const static short PLSQL3_2_DParserdfa17_transition167[] = [
    	545, -1, -1, -1, -1, -1, -1, 545, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 546
    ];
    const static short PLSQL3_2_DParserdfa17_transition168[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ];
    const static short PLSQL3_2_DParserdfa17_transition169[] = [
    	143, -1, 108, -1, -1, -1, -1, -1, -1, 138, -1, -1, -1, -1, 139, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, -1, -1, 
    		108, 108, 108, -1, -1, -1, -1, -1, 108, 108, 108, -1, -1, -1, -1, 
    		-1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 108, 
    		-1, -1, 108, -1, 108, 108, 108, 108, -1, -1, 141, -1, -1, -1, 108, 
    		108, 108, 108, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 
    		108, 108, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 108, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, -1, 108, 108, -1, -1, -1, 140
    ];
    const static short PLSQL3_2_DParserdfa17_transition170[] = [
    	325
    ];
    const static short PLSQL3_2_DParserdfa17_transition171[] = [
    	308, -1, -1, -1, 496
    ];
    const static short PLSQL3_2_DParserdfa17_transition172[] = [
    	264, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition173[] = [
    	533
    ];
    const static short PLSQL3_2_DParserdfa17_transition174[] = [
    	360
    ];
    const static short PLSQL3_2_DParserdfa17_transition175[] = [
    	146, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition176[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 287, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 288
    ];
    const static short PLSQL3_2_DParserdfa17_transition177[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 289, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290
    ];
    const static short PLSQL3_2_DParserdfa17_transition178[] = [
    	121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 54
    ];
    const static short PLSQL3_2_DParserdfa17_transition179[] = [
    	257
    ];
    const static short PLSQL3_2_DParserdfa17_transition180[] = [
    	424, -1, -1, -1, 423, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition181[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition182[] = [
    	620, -1, 212, -1, 619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition183[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 491, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition184[] = [
    	160, -1, -1, -1, -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition185[] = [
    	335
    ];
    const static short PLSQL3_2_DParserdfa17_transition186[] = [
    	146, -1, -1, -1, -1, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition187[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 482
    ];
    const static short PLSQL3_2_DParserdfa17_transition188[] = [
    	143, -1, 108, -1, -1, -1, -1, -1, -1, 217, -1, -1, -1, -1, 218, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, -1, -1, 
    		108, 108, 108, -1, -1, -1, -1, -1, 108, 108, 108, -1, -1, -1, -1, 
    		-1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 108, 
    		-1, -1, 108, -1, 108, 108, 108, 108, -1, -1, 141, -1, -1, -1, 108, 
    		108, 108, 108, -1, -1, -1, -1, -1, -1, 108, 108, -1, -1, -1, -1, -1, 
    		108, 108, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 108, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 108, -1, 108, 108, -1, -1, -1, 140
    ];
    const static short PLSQL3_2_DParserdfa17_transition189[] = [
    	622
    ];
    const static short PLSQL3_2_DParserdfa17_transition190[] = [
    	517
    ];
    const static short PLSQL3_2_DParserdfa17_transition191[] = [
    	301, -1, -1, -1, -1, -1, -1, 301
    ];
    const static short PLSQL3_2_DParserdfa17_transition192[] = [
    	318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 319
    ];
    const static short PLSQL3_2_DParserdfa17_transition193[] = [
    	573
    ];
    const static short PLSQL3_2_DParserdfa17_transition194[] = [
    	437
    ];
    const static short PLSQL3_2_DParserdfa17_transition195[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 476, -1, -1, -1, -1, 477, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ];
    const static short PLSQL3_2_DParserdfa17_transition196[] = [
    	526
    ];
    const static short PLSQL3_2_DParserdfa17_transition197[] = [
    	353
    ];
    const static short PLSQL3_2_DParserdfa17_transition198[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 511, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition199[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		47, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49
    ];
    const static short PLSQL3_2_DParserdfa17_transition200[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition201[] = [
    	253
    ];
    const static short PLSQL3_2_DParserdfa17_transition202[] = [
    	230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 232, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 231
    ];
    const static short PLSQL3_2_DParserdfa17_transition203[] = [
    	322
    ];
    const static short PLSQL3_2_DParserdfa17_transition204[] = [
    	529
    ];
    const static short PLSQL3_2_DParserdfa17_transition205[] = [
    	356
    ];
    const static short PLSQL3_2_DParserdfa17_transition206[] = [
    	575
    ];
    const static short PLSQL3_2_DParserdfa17_transition207[] = [
    	107, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, -1, 
    		-1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, -1, 
    		-1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 79, 
    		-1, -1, -1, -1, -1, 82, 89, -1, -1, -1, -1, -1, 105, -1, -1, -1, -1, 
    		-1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 92, 93
    ];
    const static short PLSQL3_2_DParserdfa17_transition208[] = [
    	439
    ];
    const static short PLSQL3_2_DParserdfa17_transition209[] = [
    	115, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 114
    ];
    const static short PLSQL3_2_DParserdfa17_transition210[] = [
    	113
    ];
    const static short PLSQL3_2_DParserdfa17_transition211[] = [
    	622, -1, -1, -1, 646
    ];
    const static short PLSQL3_2_DParserdfa17_transition212[] = [
    	517, -1, -1, -1, 611
    ];
    const static short PLSQL3_2_DParserdfa17_transition213[] = [
    	306, -1, -1, -1, 305
    ];
    const static short PLSQL3_2_DParserdfa17_transition214[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 488, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition215[] = [
    	531
    ];
    const static short PLSQL3_2_DParserdfa17_transition216[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition217[] = [
    	358
    ];
    const static short PLSQL3_2_DParserdfa17_transition218[] = [
    	242
    ];
    const static short PLSQL3_2_DParserdfa17_transition219[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition220[] = [
    	422, -1, -1, -1, 554
    ];
    const static short PLSQL3_2_DParserdfa17_transition221[] = [
    	567, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 568
    ];
    const static short PLSQL3_2_DParserdfa17_transition222[] = [
    	255
    ];
    const static short PLSQL3_2_DParserdfa17_transition223[] = [
    	431, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 432
    ];
    const static short PLSQL3_2_DParserdfa17_transition224[] = [
    	223, -1, -1, -1, -1, -1, -1, 223, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224
    ];
    const static short PLSQL3_2_DParserdfa17_transition225[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 470
    ];
    const static short PLSQL3_2_DParserdfa17_transition226[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition227[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 483, -1, -1, -1, -1, 484, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition228[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ];
    const static short PLSQL3_2_DParserdfa17_transition229[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition230[] = [
    	116
    ];
    const static short PLSQL3_2_DParserdfa17_transition231[] = [
    	524, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 525
    ];
    const static short PLSQL3_2_DParserdfa17_transition232[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition233[] = [
    	136
    ];
    const static short PLSQL3_2_DParserdfa17_transition234[] = [
    	351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 352
    ];
    const static short PLSQL3_2_DParserdfa17_transition235[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition236[] = [
    	254
    ];
    const static short PLSQL3_2_DParserdfa17_transition237[] = [
    	310, -1, -1, -1, 497
    ];
    const static short PLSQL3_2_DParserdfa17_transition238[] = [
    	530
    ];
    const static short PLSQL3_2_DParserdfa17_transition239[] = [
    	357
    ];
    const static short PLSQL3_2_DParserdfa17_transition240[] = [
    	643
    ];
    const static short PLSQL3_2_DParserdfa17_transition241[] = [
    	608
    ];
    const static short PLSQL3_2_DParserdfa17_transition242[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		64, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition243[] = [
    	122
    ];
    const static short PLSQL3_2_DParserdfa17_transition244[] = [
    	219
    ];
    const static short PLSQL3_2_DParserdfa17_transition245[] = [
    	634
    ];
    const static short PLSQL3_2_DParserdfa17_transition246[] = [
    	558
    ];
    const static short PLSQL3_2_DParserdfa17_transition247[] = [
    	315
    ];
    const static short PLSQL3_2_DParserdfa17_transition248[] = [
    	499
    ];
    const static short PLSQL3_2_DParserdfa17_transition249[] = [
    	553
    ];
    const static short PLSQL3_2_DParserdfa17_transition250[] = [
    	596, -1, -1, -1, -1, -1, -1, 596, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 597
    ];
    const static short PLSQL3_2_DParserdfa17_transition251[] = [
    	460, -1, -1, -1, -1, -1, -1, 460, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 461
    ];
    const static short PLSQL3_2_DParserdfa17_transition252[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition253[] = [
    	576, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 578, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 577
    ];
    const static short PLSQL3_2_DParserdfa17_transition254[] = [
    	440, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 442, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 441
    ];
    const static short PLSQL3_2_DParserdfa17_transition255[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 167, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition256[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 474, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition257[] = [
    	143, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 169, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 144, -1, 142, -1, -1, 145, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition258[] = [
    	146, -1, -1, -1, -1, 418, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition259[] = [
    	142
    ];
    const static short PLSQL3_2_DParserdfa17_transition260[] = [
    	506, -1, -1, -1, -1, -1, -1, 506, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 507
    ];
    const static short PLSQL3_2_DParserdfa17_transition261[] = [
    	504, -1, -1, -1, -1, -1, -1, 504, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 505
    ];
    const static short PLSQL3_2_DParserdfa17_transition262[] = [
    	502, -1, -1, -1, -1, -1, -1, 502, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 503
    ];
    const static short PLSQL3_2_DParserdfa17_transition263[] = [
    	500, -1, -1, -1, -1, -1, -1, 500, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 501
    ];
    const static short PLSQL3_2_DParserdfa17_transition264[] = [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 
    		3
    ];
    const static short PLSQL3_2_DParserdfa17_transition265[] = [
    	115, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 137
    ];
    const static short PLSQL3_2_DParserdfa17_transition266[] = [
    	331, -1, -1, -1, -1, -1, -1, 331, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332
    ];
    const static short PLSQL3_2_DParserdfa17_transition267[] = [
    	606, -1, -1, -1, -1, -1, -1, 606, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 607
    ];
    const static short PLSQL3_2_DParserdfa17_transition268[] = [
    	604, -1, -1, -1, -1, -1, -1, 604, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 605
    ];
    const static short PLSQL3_2_DParserdfa17_transition269[] = [
    	602, -1, -1, -1, -1, -1, -1, 602, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 603
    ];
    const static short PLSQL3_2_DParserdfa17_transition270[] = [
    	600, -1, -1, -1, -1, -1, -1, 600, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 601
    ];
    const static short PLSQL3_2_DParserdfa17_transition271[] = [
    	212, -1, 471, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 492, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 472, 213, -1, -1, -1, 473
    ];
    const static short PLSQL3_2_DParserdfa17_transition272[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 487, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition273[] = [
    	570
    ];
    const static short PLSQL3_2_DParserdfa17_transition274[] = [
    	434
    ];
    const static short PLSQL3_2_DParserdfa17_transition275[] = [
    	523
    ];
    const static short PLSQL3_2_DParserdfa17_transition276[] = [
    	350
    ];
    const static short PLSQL3_2_DParserdfa17_transition277[] = [
    	308, -1, -1, -1, 307
    ];
    const static short PLSQL3_2_DParserdfa17_transition278[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ];
    const static short PLSQL3_2_DParserdfa17_transition279[] = [
    	108, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 108, -1, 108, -1, 
    		-1, -1, -1, 246, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 108, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, 
    		108, -1, -1, -1, 108, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition280[] = [
    	620, -1, -1, -1, 619
    ];
    const static short PLSQL3_2_DParserdfa17_transition281[] = [
    	515, -1, -1, -1, 514
    ];
    const static short PLSQL3_2_DParserdfa17_transition282[] = [
    	123
    ];
    const static short PLSQL3_2_DParserdfa17_transition283[] = [
    	572
    ];
    const static short PLSQL3_2_DParserdfa17_transition284[] = [
    	436
    ];
    const static short PLSQL3_2_DParserdfa17_transition285[] = [
    	107, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 104, 77, 76, 75, 101, 83, -1, -1, 91, 94, 102, -1, 
    		-1, -1, -1, -1, 84, 80, 80, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 86, 85, -1, -1, -1, -1, -1, 81, -1, -1, 99, -1, 98, 78, 95, 103, 
    		-1, -1, -1, -1, -1, -1, 80, 80, 96, 97, -1, -1, -1, -1, -1, -1, 100, 
    		79, -1, -1, -1, -1, -1, 82, 89, 120, -1, -1, -1, -1, 105, -1, -1, 
    		-1, -1, -1, 87, -1, -1, 118, -1, -1, -1, -1, -1, -1, 106, -1, 92, 
    		93
    ];
    const static short PLSQL3_2_DParserdfa17_transition286[] = [
    	243
    ];
    const static short PLSQL3_2_DParserdfa17_transition287[] = [
    	225, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 227, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 226
    ];
    const static short PLSQL3_2_DParserdfa17_transition288[] = [
    	426, -1, -1, -1, 425
    ];
    const static short PLSQL3_2_DParserdfa17_transition289[] = [
    	137
    ];
    const static short PLSQL3_2_DParserdfa17_transition290[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 464, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition291[] = [
    	517, -1, 212, -1, 516, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition292[] = [
    	422, -1, -1, -1, 421, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition293[] = [
    	641, -1, -1, -1, -1, -1, -1, 641, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 642
    ];
    const static short PLSQL3_2_DParserdfa17_transition294[] = [
    	639, -1, -1, -1, -1, -1, -1, 639, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 640
    ];
    const static short PLSQL3_2_DParserdfa17_transition295[] = [
    	637, -1, -1, -1, -1, -1, -1, 637, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 638
    ];
    const static short PLSQL3_2_DParserdfa17_transition296[] = [
    	635, -1, -1, -1, -1, -1, -1, 635, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 636
    ];
    const static short PLSQL3_2_DParserdfa17_transition297[] = [
    	565, -1, -1, -1, -1, -1, -1, 565, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 566
    ];
    const static short PLSQL3_2_DParserdfa17_transition298[] = [
    	563, -1, -1, -1, -1, -1, -1, 563, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 564
    ];
    const static short PLSQL3_2_DParserdfa17_transition299[] = [
    	561, -1, -1, -1, -1, -1, -1, 561, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 562
    ];
    const static short PLSQL3_2_DParserdfa17_transition300[] = [
    	559, -1, -1, -1, -1, -1, -1, 559, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 560
    ];
    const static short PLSQL3_2_DParserdfa17_transition301[] = [
    	584, -1, -1, -1, -1, -1, -1, 584, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 585
    ];
    const static short PLSQL3_2_DParserdfa17_transition302[] = [
    	448, -1, -1, -1, -1, -1, -1, 448, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 449
    ];
    const static short PLSQL3_2_DParserdfa17_transition303[] = [
    	346
    ];
    const static short PLSQL3_2_DParserdfa17_transition304[] = [
    	268
    ];
    const static short PLSQL3_2_DParserdfa17_transition305[] = [
    	654, -1, -1, -1, -1, -1, -1, 654, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 655
    ];
    const static short PLSQL3_2_DParserdfa17_transition306[] = [
    	652, -1, -1, -1, -1, -1, -1, 652, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 653
    ];
    const static short PLSQL3_2_DParserdfa17_transition307[] = [
    	650, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 651
    ];
    const static short PLSQL3_2_DParserdfa17_transition308[] = [
    	648, -1, -1, -1, -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 649
    ];
    const static short PLSQL3_2_DParserdfa17_transition309[] = [
    	632, -1, -1, -1, -1, -1, -1, 632, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 633
    ];
    const static short PLSQL3_2_DParserdfa17_transition310[] = [
    	630, -1, -1, -1, -1, -1, -1, 630, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 631
    ];
    const static short PLSQL3_2_DParserdfa17_transition311[] = [
    	628, -1, -1, -1, -1, -1, -1, 628, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 629
    ];
    const static short PLSQL3_2_DParserdfa17_transition312[] = [
    	626, -1, -1, -1, -1, -1, -1, 626, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 627
    ];
    const static short PLSQL3_2_DParserdfa17_transition313[] = [
    	599
    ];
    const static short PLSQL3_2_DParserdfa17_transition314[] = [
    	463
    ];
    const static short PLSQL3_2_DParserdfa17_transition315[] = [
    	124
    ];
    const static short PLSQL3_2_DParserdfa17_transition316[] = [
    	544
    ];
    const static short PLSQL3_2_DParserdfa17_transition317[] = [
    	371
    ];
    const static short PLSQL3_2_DParserdfa17_transition318[] = [
    	232
    ];
    const static short PLSQL3_2_DParserdfa17_transition319[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 368, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition320[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition321[] = [
    	422, -1, -1, -1, 421
    ];
    const static short PLSQL3_2_DParserdfa17_transition322[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 615, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition323[] = [
    	625, -1, 212, -1, 624, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition324[] = [
    	343, -1, -1, -1, -1, -1, -1, 343, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 344
    ];
    const static short PLSQL3_2_DParserdfa17_transition325[] = [
    	618, -1, -1, -1, 617
    ];
    const static short PLSQL3_2_DParserdfa17_transition326[] = [
    	513, -1, -1, -1, 512
    ];
    const static short PLSQL3_2_DParserdfa17_transition327[] = [
    	6, -1, -1, -1, 308, -1, -1, -1, 307, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition328[] = [
    	493
    ];
    const static short PLSQL3_2_DParserdfa17_transition329[] = [
    	424, -1, -1, -1, 423
    ];
    const static short PLSQL3_2_DParserdfa17_transition330[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 278
    ];
    const static short PLSQL3_2_DParserdfa17_transition331[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 275, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition332[] = [
    	146, -1, -1, -1, -1, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition333[] = [
    	212, -1, -1, -1, 211, -1, -1, -1, -1, -1, -1, 188, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 208, 180, 179, 178, 205, 186, -1, 
    		-1, 195, 198, 206, -1, -1, -1, -1, -1, 187, 183, 183, -1, -1, -1, 
    		-1, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 177, -1, -1, 190, 189, -1, -1, -1, -1, -1, 
    		184, -1, -1, 203, -1, 202, 181, 199, 207, -1, -1, -1, -1, -1, -1, 
    		183, 183, 200, 201, -1, -1, -1, -1, -1, -1, 204, 182, -1, -1, -1, 
    		-1, -1, 185, 193, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, 191, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, 196, 197
    ];
    const static short PLSQL3_2_DParserdfa17_transition334[] = [
    	125
    ];
    const static short PLSQL3_2_DParserdfa17_transition335[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, 541, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition336[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 480
    ];
    const static short PLSQL3_2_DParserdfa17_transition337[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition338[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 367, -1, -1, -1, -1, 368, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition339[] = [
    	543
    ];
    const static short PLSQL3_2_DParserdfa17_transition340[] = [
    	370
    ];
    const static short PLSQL3_2_DParserdfa17_transition341[] = [
    	41, -1, 6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 6, 6, 6, 6, 6, 6, -1, -1, 6, 6, 6, -1, -1, -1, 6, 
    		-1, 6, 6, 6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, 41, -1, -1, -1, 
    		-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, 
    		-1, -1, -1, 6, -1, -1, 6, -1, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 
    		6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, -1, -1, -1, 6, 6, 
    		-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 6, -1, 6, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition342[] = [
    	328, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 330, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 329
    ];
    const static short PLSQL3_2_DParserdfa17_transition343[] = [
    	247
    ];
    const static short PLSQL3_2_DParserdfa17_transition344[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 291, -1, -1, -1, -1, 292, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition345[] = [
    	345
    ];
    const static short PLSQL3_2_DParserdfa17_transition346[] = [
    	267
    ];
    const static short PLSQL3_2_DParserdfa17_transition347[] = [
    	314
    ];
    const static short PLSQL3_2_DParserdfa17_transition348[] = [
    	117, -1, -1, -1, -1, -1, -1, 117
    ];
    const static short PLSQL3_2_DParserdfa17_transition349[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140
    ];
    const static short PLSQL3_2_DParserdfa17_transition350[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 484, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition351[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, -1, 
    		-1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140
    ];
    const static short PLSQL3_2_DParserdfa17_transition352[] = [
    	126
    ];
    const static short PLSQL3_2_DParserdfa17_transition353[] = [
    	308
    ];
    const static short PLSQL3_2_DParserdfa17_transition354[] = [
    	146, -1, -1, -1, -1, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition355[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition356[] = [
    	212, -1, -1, -1, 211, -1, -1, -1, -1, -1, -1, 188, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 208, 180, 179, 178, 205, 186, -1, 
    		-1, 195, 198, 206, -1, -1, -1, -1, -1, 187, 183, 183, -1, -1, -1, 
    		-1, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 190, 189, -1, -1, -1, -1, -1, 
    		184, -1, -1, 203, -1, 202, 181, 199, 207, -1, -1, -1, -1, -1, -1, 
    		183, 183, 200, 201, -1, -1, -1, -1, -1, -1, 204, 182, -1, -1, -1, 
    		-1, -1, 185, 193, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, 191, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, 196, 197
    ];
    const static short PLSQL3_2_DParserdfa17_transition357[] = [
    	310
    ];
    const static short PLSQL3_2_DParserdfa17_transition358[] = [
    	598
    ];
    const static short PLSQL3_2_DParserdfa17_transition359[] = [
    	462
    ];
    const static short PLSQL3_2_DParserdfa17_transition360[] = [
    	429, -1, -1, -1, 428
    ];
    const static short PLSQL3_2_DParserdfa17_transition361[] = [
    	233, -1, -1, -1, -1, -1, -1, 233, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 234
    ];
    const static short PLSQL3_2_DParserdfa17_transition362[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290
    ];
    const static short PLSQL3_2_DParserdfa17_transition363[] = [
    	622, -1, 212, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition364[] = [
    	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition365[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		66, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition366[] = [
    	574
    ];
    const static short PLSQL3_2_DParserdfa17_transition367[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		57, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition368[] = [
    	438
    ];
    const static short PLSQL3_2_DParserdfa17_transition369[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 288
    ];
    const static short PLSQL3_2_DParserdfa17_transition370[] = [
    	520, -1, 212, -1, 519, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition371[] = [
    	342
    ];
    const static short PLSQL3_2_DParserdfa17_transition372[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 541, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition373[] = [
    	146, -1, -1, -1, -1, 154, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition374[] = [
    	581, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 583, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 582
    ];
    const static short PLSQL3_2_DParserdfa17_transition375[] = [
    	445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 447, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 446
    ];
    const static short PLSQL3_2_DParserdfa17_transition376[] = [
    	595
    ];
    const static short PLSQL3_2_DParserdfa17_transition377[] = [
    	459
    ];
    const static short PLSQL3_2_DParserdfa17_transition378[] = [
    	427
    ];
    const static short PLSQL3_2_DParserdfa17_transition379[] = [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition380[] = [
    	622, -1, -1, -1, 621
    ];
    const static short PLSQL3_2_DParserdfa17_transition381[] = [
    	517, -1, -1, -1, 516
    ];
    const static short PLSQL3_2_DParserdfa17_transition382[] = [
    	489, 489
    ];
    const static short PLSQL3_2_DParserdfa17_transition383[] = [
    	220, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 221
    ];
    const static short PLSQL3_2_DParserdfa17_transition384[] = [
    	297, 297
    ];
    const static short PLSQL3_2_DParserdfa17_transition385[] = [
    	108, -1, 108, -1, -1, 108, 108, -1, -1, -1, 108, 108, 108, 108, 108, 
    		108, -1, 108, -1, 108, -1, -1, 108, 108, -1, -1, 108, 108, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
    		408, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		-1, 108, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition386[] = [
    	127
    ];
    const static short PLSQL3_2_DParserdfa17_transition387[] = [
    	527
    ];
    const static short PLSQL3_2_DParserdfa17_transition388[] = [
    	354
    ];
    const static short PLSQL3_2_DParserdfa17_transition389[] = [
    	251
    ];
    const static short PLSQL3_2_DParserdfa17_transition390[] = [
    	269
    ];
    const static short PLSQL3_2_DParserdfa17_transition391[] = [
    	320
    ];
    const static short PLSQL3_2_DParserdfa17_transition392[] = [
    	522
    ];
    const static short PLSQL3_2_DParserdfa17_transition393[] = [
    	349
    ];
    const static short PLSQL3_2_DParserdfa17_transition394[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition395[] = [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, 
    		-1, -1, -1, -1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition396[] = [
    	569
    ];
    const static short PLSQL3_2_DParserdfa17_transition397[] = [
    	433
    ];
    const static short PLSQL3_2_DParserdfa17_transition398[] = [
    	162, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition399[] = [
    	146, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition400[] = [
    	109
    ];
    const static short PLSQL3_2_DParserdfa17_transition401[] = [
    	623
    ];
    const static short PLSQL3_2_DParserdfa17_transition402[] = [
    	518
    ];
    const static short PLSQL3_2_DParserdfa17_transition403[] = [
    	146, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition404[] = [
    	252
    ];
    const static short PLSQL3_2_DParserdfa17_transition405[] = [
    	249, -1, -1, -1, -1, -1, -1, 249
    ];
    const static short PLSQL3_2_DParserdfa17_transition406[] = [
    	323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 325, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 324
    ];
    const static short PLSQL3_2_DParserdfa17_transition407[] = [
    	321
    ];
    const static short PLSQL3_2_DParserdfa17_transition408[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 6, -1, -1, 
    		52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		54
    ];
    const static short PLSQL3_2_DParserdfa17_transition409[] = [
    	542
    ];
    const static short PLSQL3_2_DParserdfa17_transition410[] = [
    	146, -1, -1, -1, -1, 161, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition411[] = [
    	369
    ];
    const static short PLSQL3_2_DParserdfa17_transition412[] = [
    	56
    ];
    const static short PLSQL3_2_DParserdfa17_transition413[] = [
    	618, -1, 212, -1, 617, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition414[] = [
    	108, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 303, -1, 
    		146, -1, -1, -1, -1, 146, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 146, -1, -1, -1, -1, 108, -1, 108, -1, -1, 108, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition415[] = [
    	112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113
    ];
    const static short PLSQL3_2_DParserdfa17_transition416[] = [
    	146, -1, -1, -1, -1, 265, -1, 146, -1, -1, -1, -1, 146, -1, 146, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, 142, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition417[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298
    ];
    const static short PLSQL3_2_DParserdfa17_transition418[] = [
    	214
    ];
    const static short PLSQL3_2_DParserdfa17_transition419[] = [
    	528, -1, -1, -1, -1, -1, -1, 528
    ];
    const static short PLSQL3_2_DParserdfa17_transition420[] = [
    	108, -1, 108, -1, -1, 108, 108, -1, -1, -1, 108, 108, 108, 108, 108, 
    		108, -1, 108, -1, 108, -1, -1, 108, 108, -1, -1, 108, 108, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
    		316, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    		-1, 108, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    ];
    const static short PLSQL3_2_DParserdfa17_transition421[] = [
    	355, -1, -1, -1, -1, -1, -1, 355
    ];
    const static short PLSQL3_2_DParserdfa17_transition422[] = [
    	586, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 588, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 587
    ];
    const static short PLSQL3_2_DParserdfa17_transition423[] = [
    	450, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 452, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 451
    ];
    const static short PLSQL3_2_DParserdfa17_transition424[] = [
    	266
    ];
    const static short PLSQL3_2_DParserdfa17_transition425[] = [
    	250
    ];
    const static short PLSQL3_2_DParserdfa17_transition426[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition427[] = [
    	128
    ];
    const static short PLSQL3_2_DParserdfa17_transition428[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 285, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ];
    const static short PLSQL3_2_DParserdfa17_transition429[] = [
    	326, -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 327
    ];
    const static short PLSQL3_2_DParserdfa17_transition430[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 485, -1, -1, -1, -1, 486, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition431[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, -1, -1, -1, 285, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    ];
    const static short PLSQL3_2_DParserdfa17_transition432[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 490
    ];
    const static short PLSQL3_2_DParserdfa17_transition433[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 477, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478
    ];
    const static short PLSQL3_2_DParserdfa17_transition434[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition435[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition436[] = [
    	152
    ];
    const static short PLSQL3_2_DParserdfa17_transition437[] = [
    	319
    ];
    const static short PLSQL3_2_DParserdfa17_transition438[] = [
    	310, -1, -1, -1, 309
    ];
    const static short PLSQL3_2_DParserdfa17_transition439[] = [
    	419, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition440[] = [
    	420
    ];
    const static short PLSQL3_2_DParserdfa17_transition441[] = [
    	513, -1, 212, -1, 512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213
    ];
    const static short PLSQL3_2_DParserdfa17_transition442[] = [
    	521
    ];
    const static short PLSQL3_2_DParserdfa17_transition443[] = [
    	212, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, 276, -1, -1, -1, -1, 
    		277, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 280, 213, -1, -1, -1, 281, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 278
    ];
    const static short PLSQL3_2_DParserdfa17_transition444[] = [
    	348
    ];
    const static short PLSQL3_2_DParserdfa17_transition445[] = [
    	426, -1, -1, -1, 425, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition446[] = [
    	613
    ];
    const static short PLSQL3_2_DParserdfa17_transition447[] = [
    	508
    ];
    const static short PLSQL3_2_DParserdfa17_transition448[] = [
    	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    ];
    const static short PLSQL3_2_DParserdfa17_transition449[] = [
    	568
    ];
    const static short PLSQL3_2_DParserdfa17_transition450[] = [
    	432
    ];
    const static short PLSQL3_2_DParserdfa17_transition451[] = [
    	429, -1, -1, -1, 428, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 141
    ];
    const static short PLSQL3_2_DParserdfa17_transition452[] = [
    	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 510, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 213
    ];

    const static short DFA17_transition[][] = [
    	PLSQL3_2_DParserdfa17_transition264,
    	PLSQL3_2_DParserdfa17_transition0,
    	PLSQL3_2_DParserdfa17_transition341,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition435,
    	PLSQL3_2_DParserdfa17_transition278,
    	PLSQL3_2_DParserdfa17_transition252,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition199,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition426,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition412,
    	PLSQL3_2_DParserdfa17_transition367,
    	PLSQL3_2_DParserdfa17_transition200,
    	PLSQL3_2_DParserdfa17_transition320,
    	PLSQL3_2_DParserdfa17_transition242,
    	PLSQL3_2_DParserdfa17_transition365,
    	PLSQL3_2_DParserdfa17_transition181,
    	PLSQL3_2_DParserdfa17_transition434,
    	PLSQL3_2_DParserdfa17_transition109,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition355,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition145,
    	PLSQL3_2_DParserdfa17_transition408,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition207,
    	PLSQL3_2_DParserdfa17_transition400,
    	PLSQL3_2_DParserdfa17_transition232,
    	PLSQL3_2_DParserdfa17_transition22,
    	PLSQL3_2_DParserdfa17_transition14,
    	PLSQL3_2_DParserdfa17_transition415,
    	PLSQL3_2_DParserdfa17_transition209,
    	PLSQL3_2_DParserdfa17_transition230,
    	PLSQL3_2_DParserdfa17_transition348,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition100,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition243,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition53,
    	PLSQL3_2_DParserdfa17_transition282,
    	PLSQL3_2_DParserdfa17_transition315,
    	PLSQL3_2_DParserdfa17_transition334,
    	PLSQL3_2_DParserdfa17_transition352,
    	PLSQL3_2_DParserdfa17_transition386,
    	PLSQL3_2_DParserdfa17_transition427,
    	PLSQL3_2_DParserdfa17_transition229,
    	PLSQL3_2_DParserdfa17_transition18,
    	PLSQL3_2_DParserdfa17_transition394,
    	PLSQL3_2_DParserdfa17_transition49,
    	PLSQL3_2_DParserdfa17_transition78,
    	PLSQL3_2_DParserdfa17_transition124,
    	PLSQL3_2_DParserdfa17_transition93,
    	PLSQL3_2_DParserdfa17_transition161,
    	PLSQL3_2_DParserdfa17_transition233,
    	PLSQL3_2_DParserdfa17_transition265,
    	PLSQL3_2_DParserdfa17_transition169,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition332,
    	PLSQL3_2_DParserdfa17_transition37,
    	PLSQL3_2_DParserdfa17_transition117,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition354,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition436,
    	PLSQL3_2_DParserdfa17_transition83,
    	PLSQL3_2_DParserdfa17_transition399,
    	PLSQL3_2_DParserdfa17_transition403,
    	PLSQL3_2_DParserdfa17_transition184,
    	PLSQL3_2_DParserdfa17_transition398,
    	PLSQL3_2_DParserdfa17_transition186,
    	PLSQL3_2_DParserdfa17_transition101,
    	PLSQL3_2_DParserdfa17_transition52,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition255,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition97,
    	PLSQL3_2_DParserdfa17_transition257,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition162,
    	PLSQL3_2_DParserdfa17_transition28,
    	PLSQL3_2_DParserdfa17_transition20,
    	PLSQL3_2_DParserdfa17_transition150,
    	PLSQL3_2_DParserdfa17_transition130,
    	PLSQL3_2_DParserdfa17_transition73,
    	PLSQL3_2_DParserdfa17_transition333,
    	PLSQL3_2_DParserdfa17_transition418,
    	PLSQL3_2_DParserdfa17_transition118,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition188,
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition244,
    	PLSQL3_2_DParserdfa17_transition383,
    	PLSQL3_2_DParserdfa17_transition224,
    	PLSQL3_2_DParserdfa17_transition287,
    	PLSQL3_2_DParserdfa17_transition82,
    	PLSQL3_2_DParserdfa17_transition202,
    	PLSQL3_2_DParserdfa17_transition361,
    	PLSQL3_2_DParserdfa17_transition15,
    	PLSQL3_2_DParserdfa17_transition56,
    	PLSQL3_2_DParserdfa17_transition81,
    	PLSQL3_2_DParserdfa17_transition127,
    	PLSQL3_2_DParserdfa17_transition448,
    	PLSQL3_2_DParserdfa17_transition143,
    	PLSQL3_2_DParserdfa17_transition147,
    	PLSQL3_2_DParserdfa17_transition218,
    	PLSQL3_2_DParserdfa17_transition286,
    	PLSQL3_2_DParserdfa17_transition149,
    	PLSQL3_2_DParserdfa17_transition279,
    	PLSQL3_2_DParserdfa17_transition343,
    	PLSQL3_2_DParserdfa17_transition121,
    	PLSQL3_2_DParserdfa17_transition79,
    	PLSQL3_2_DParserdfa17_transition405,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition425,
    	PLSQL3_2_DParserdfa17_transition31,
    	PLSQL3_2_DParserdfa17_transition389,
    	PLSQL3_2_DParserdfa17_transition404,
    	PLSQL3_2_DParserdfa17_transition201,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition373,
    	PLSQL3_2_DParserdfa17_transition236,
    	PLSQL3_2_DParserdfa17_transition222,
    	PLSQL3_2_DParserdfa17_transition141,
    	PLSQL3_2_DParserdfa17_transition179,
    	PLSQL3_2_DParserdfa17_transition96,
    	PLSQL3_2_DParserdfa17_transition84,
    	PLSQL3_2_DParserdfa17_transition410,
    	PLSQL3_2_DParserdfa17_transition112,
    	PLSQL3_2_DParserdfa17_transition126,
    	PLSQL3_2_DParserdfa17_transition11,
    	PLSQL3_2_DParserdfa17_transition67,
    	PLSQL3_2_DParserdfa17_transition48,
    	PLSQL3_2_DParserdfa17_transition172,
    	PLSQL3_2_DParserdfa17_transition424,
    	PLSQL3_2_DParserdfa17_transition346,
    	PLSQL3_2_DParserdfa17_transition304,
    	PLSQL3_2_DParserdfa17_transition390,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition142,
    	PLSQL3_2_DParserdfa17_transition219,
    	PLSQL3_2_DParserdfa17_transition168,
    	PLSQL3_2_DParserdfa17_transition356,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition122,
    	PLSQL3_2_DParserdfa17_transition63,
    	PLSQL3_2_DParserdfa17_transition331,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition443,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition148,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition68,
    	PLSQL3_2_DParserdfa17_transition431,
    	PLSQL3_2_DParserdfa17_transition176,
    	PLSQL3_2_DParserdfa17_transition177,
    	PLSQL3_2_DParserdfa17_transition344,
    	PLSQL3_2_DParserdfa17_transition144,
    	PLSQL3_2_DParserdfa17_transition42,
    	PLSQL3_2_DParserdfa17_transition146,
    	PLSQL3_2_DParserdfa17_transition384,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition417,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition135,
    	PLSQL3_2_DParserdfa17_transition108,
    	PLSQL3_2_DParserdfa17_transition191,
    	PLSQL3_2_DParserdfa17_transition178,
    	PLSQL3_2_DParserdfa17_transition139,
    	PLSQL3_2_DParserdfa17_transition289,
    	PLSQL3_2_DParserdfa17_transition285,
    	PLSQL3_2_DParserdfa17_transition414,
    	PLSQL3_2_DParserdfa17_transition163,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition71,
    	PLSQL3_2_DParserdfa17_transition71,
    	PLSQL3_2_DParserdfa17_transition226,
    	PLSQL3_2_DParserdfa17_transition30,
    	PLSQL3_2_DParserdfa17_transition213,
    	PLSQL3_2_DParserdfa17_transition153,
    	PLSQL3_2_DParserdfa17_transition153,
    	PLSQL3_2_DParserdfa17_transition13,
    	PLSQL3_2_DParserdfa17_transition327,
    	PLSQL3_2_DParserdfa17_transition277,
    	PLSQL3_2_DParserdfa17_transition318,
    	PLSQL3_2_DParserdfa17_transition318,
    	PLSQL3_2_DParserdfa17_transition41,
    	PLSQL3_2_DParserdfa17_transition106,
    	PLSQL3_2_DParserdfa17_transition438,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition140,
    	PLSQL3_2_DParserdfa17_transition107,
    	PLSQL3_2_DParserdfa17_transition29,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition347,
    	PLSQL3_2_DParserdfa17_transition247,
    	PLSQL3_2_DParserdfa17_transition420,
    	PLSQL3_2_DParserdfa17_transition102,
    	PLSQL3_2_DParserdfa17_transition259,
    	PLSQL3_2_DParserdfa17_transition257,
    	PLSQL3_2_DParserdfa17_transition192,
    	PLSQL3_2_DParserdfa17_transition391,
    	PLSQL3_2_DParserdfa17_transition407,
    	PLSQL3_2_DParserdfa17_transition203,
    	PLSQL3_2_DParserdfa17_transition406,
    	PLSQL3_2_DParserdfa17_transition429,
    	PLSQL3_2_DParserdfa17_transition342,
    	PLSQL3_2_DParserdfa17_transition266,
    	PLSQL3_2_DParserdfa17_transition65,
    	PLSQL3_2_DParserdfa17_transition103,
    	PLSQL3_2_DParserdfa17_transition111,
    	PLSQL3_2_DParserdfa17_transition1,
    	PLSQL3_2_DParserdfa17_transition64,
    	PLSQL3_2_DParserdfa17_transition47,
    	PLSQL3_2_DParserdfa17_transition416,
    	PLSQL3_2_DParserdfa17_transition371,
    	PLSQL3_2_DParserdfa17_transition324,
    	PLSQL3_2_DParserdfa17_transition345,
    	PLSQL3_2_DParserdfa17_transition303,
    	PLSQL3_2_DParserdfa17_transition113,
    	PLSQL3_2_DParserdfa17_transition210,
    	PLSQL3_2_DParserdfa17_transition80,
    	PLSQL3_2_DParserdfa17_transition444,
    	PLSQL3_2_DParserdfa17_transition235,
    	PLSQL3_2_DParserdfa17_transition393,
    	PLSQL3_2_DParserdfa17_transition276,
    	PLSQL3_2_DParserdfa17_transition234,
    	PLSQL3_2_DParserdfa17_transition197,
    	PLSQL3_2_DParserdfa17_transition388,
    	PLSQL3_2_DParserdfa17_transition421,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition205,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition428,
    	PLSQL3_2_DParserdfa17_transition239,
    	PLSQL3_2_DParserdfa17_transition217,
    	PLSQL3_2_DParserdfa17_transition138,
    	PLSQL3_2_DParserdfa17_transition174,
    	PLSQL3_2_DParserdfa17_transition99,
    	PLSQL3_2_DParserdfa17_transition91,
    	PLSQL3_2_DParserdfa17_transition160,
    	PLSQL3_2_DParserdfa17_transition24,
    	PLSQL3_2_DParserdfa17_transition6,
    	PLSQL3_2_DParserdfa17_transition17,
    	PLSQL3_2_DParserdfa17_transition62,
    	PLSQL3_2_DParserdfa17_transition39,
    	PLSQL3_2_DParserdfa17_transition338,
    	PLSQL3_2_DParserdfa17_transition411,
    	PLSQL3_2_DParserdfa17_transition340,
    	PLSQL3_2_DParserdfa17_transition317,
    	PLSQL3_2_DParserdfa17_transition2,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition44,
    	PLSQL3_2_DParserdfa17_transition385,
    	PLSQL3_2_DParserdfa17_transition154,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition155,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition156,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition157,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition12,
    	PLSQL3_2_DParserdfa17_transition258,
    	PLSQL3_2_DParserdfa17_transition349,
    	PLSQL3_2_DParserdfa17_transition439,
    	PLSQL3_2_DParserdfa17_transition440,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition170,
    	PLSQL3_2_DParserdfa17_transition170,
    	PLSQL3_2_DParserdfa17_transition3,
    	PLSQL3_2_DParserdfa17_transition292,
    	PLSQL3_2_DParserdfa17_transition321,
    	PLSQL3_2_DParserdfa17_transition8,
    	PLSQL3_2_DParserdfa17_transition8,
    	PLSQL3_2_DParserdfa17_transition364,
    	PLSQL3_2_DParserdfa17_transition180,
    	PLSQL3_2_DParserdfa17_transition329,
    	PLSQL3_2_DParserdfa17_transition185,
    	PLSQL3_2_DParserdfa17_transition185,
    	PLSQL3_2_DParserdfa17_transition337,
    	PLSQL3_2_DParserdfa17_transition445,
    	PLSQL3_2_DParserdfa17_transition288,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition378,
    	PLSQL3_2_DParserdfa17_transition451,
    	PLSQL3_2_DParserdfa17_transition360,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition87,
    	PLSQL3_2_DParserdfa17_transition223,
    	PLSQL3_2_DParserdfa17_transition397,
    	PLSQL3_2_DParserdfa17_transition274,
    	PLSQL3_2_DParserdfa17_transition7,
    	PLSQL3_2_DParserdfa17_transition284,
    	PLSQL3_2_DParserdfa17_transition194,
    	PLSQL3_2_DParserdfa17_transition368,
    	PLSQL3_2_DParserdfa17_transition108,
    	PLSQL3_2_DParserdfa17_transition208,
    	PLSQL3_2_DParserdfa17_transition254,
    	PLSQL3_2_DParserdfa17_transition94,
    	PLSQL3_2_DParserdfa17_transition375,
    	PLSQL3_2_DParserdfa17_transition302,
    	PLSQL3_2_DParserdfa17_transition423,
    	PLSQL3_2_DParserdfa17_transition136,
    	PLSQL3_2_DParserdfa17_transition26,
    	PLSQL3_2_DParserdfa17_transition21,
    	PLSQL3_2_DParserdfa17_transition75,
    	PLSQL3_2_DParserdfa17_transition60,
    	PLSQL3_2_DParserdfa17_transition319,
    	PLSQL3_2_DParserdfa17_transition377,
    	PLSQL3_2_DParserdfa17_transition251,
    	PLSQL3_2_DParserdfa17_transition359,
    	PLSQL3_2_DParserdfa17_transition314,
    	PLSQL3_2_DParserdfa17_transition33,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition290,
    	PLSQL3_2_DParserdfa17_transition43,
    	PLSQL3_2_DParserdfa17_transition128,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition129,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition256,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition66,
    	PLSQL3_2_DParserdfa17_transition195,
    	PLSQL3_2_DParserdfa17_transition72,
    	PLSQL3_2_DParserdfa17_transition40,
    	PLSQL3_2_DParserdfa17_transition227,
    	PLSQL3_2_DParserdfa17_transition430,
    	PLSQL3_2_DParserdfa17_transition272,
    	PLSQL3_2_DParserdfa17_transition214,
    	PLSQL3_2_DParserdfa17_transition382,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition432,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition183,
    	PLSQL3_2_DParserdfa17_transition271,
    	PLSQL3_2_DParserdfa17_transition328,
    	PLSQL3_2_DParserdfa17_transition351,
    	PLSQL3_2_DParserdfa17_transition110,
    	PLSQL3_2_DParserdfa17_transition110,
    	PLSQL3_2_DParserdfa17_transition171,
    	PLSQL3_2_DParserdfa17_transition171,
    	PLSQL3_2_DParserdfa17_transition237,
    	PLSQL3_2_DParserdfa17_transition237,
    	PLSQL3_2_DParserdfa17_transition125,
    	PLSQL3_2_DParserdfa17_transition125,
    	PLSQL3_2_DParserdfa17_transition379,
    	PLSQL3_2_DParserdfa17_transition248,
    	PLSQL3_2_DParserdfa17_transition175,
    	PLSQL3_2_DParserdfa17_transition437,
    	PLSQL3_2_DParserdfa17_transition263,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition262,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition261,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition260,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition32,
    	PLSQL3_2_DParserdfa17_transition447,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition10,
    	PLSQL3_2_DParserdfa17_transition452,
    	PLSQL3_2_DParserdfa17_transition330,
    	PLSQL3_2_DParserdfa17_transition198,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition86,
    	PLSQL3_2_DParserdfa17_transition86,
    	PLSQL3_2_DParserdfa17_transition228,
    	PLSQL3_2_DParserdfa17_transition441,
    	PLSQL3_2_DParserdfa17_transition326,
    	PLSQL3_2_DParserdfa17_transition55,
    	PLSQL3_2_DParserdfa17_transition55,
    	PLSQL3_2_DParserdfa17_transition369,
    	PLSQL3_2_DParserdfa17_transition134,
    	PLSQL3_2_DParserdfa17_transition281,
    	PLSQL3_2_DParserdfa17_transition133,
    	PLSQL3_2_DParserdfa17_transition133,
    	PLSQL3_2_DParserdfa17_transition362,
    	PLSQL3_2_DParserdfa17_transition291,
    	PLSQL3_2_DParserdfa17_transition381,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition402,
    	PLSQL3_2_DParserdfa17_transition370,
    	PLSQL3_2_DParserdfa17_transition105,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition442,
    	PLSQL3_2_DParserdfa17_transition216,
    	PLSQL3_2_DParserdfa17_transition392,
    	PLSQL3_2_DParserdfa17_transition275,
    	PLSQL3_2_DParserdfa17_transition231,
    	PLSQL3_2_DParserdfa17_transition196,
    	PLSQL3_2_DParserdfa17_transition387,
    	PLSQL3_2_DParserdfa17_transition419,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition204,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition433,
    	PLSQL3_2_DParserdfa17_transition238,
    	PLSQL3_2_DParserdfa17_transition215,
    	PLSQL3_2_DParserdfa17_transition137,
    	PLSQL3_2_DParserdfa17_transition173,
    	PLSQL3_2_DParserdfa17_transition98,
    	PLSQL3_2_DParserdfa17_transition90,
    	PLSQL3_2_DParserdfa17_transition350,
    	PLSQL3_2_DParserdfa17_transition23,
    	PLSQL3_2_DParserdfa17_transition70,
    	PLSQL3_2_DParserdfa17_transition16,
    	PLSQL3_2_DParserdfa17_transition61,
    	PLSQL3_2_DParserdfa17_transition38,
    	PLSQL3_2_DParserdfa17_transition335,
    	PLSQL3_2_DParserdfa17_transition409,
    	PLSQL3_2_DParserdfa17_transition339,
    	PLSQL3_2_DParserdfa17_transition316,
    	PLSQL3_2_DParserdfa17_transition395,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa17_transition167,
    	PLSQL3_2_DParserdfa17_transition166,
    	PLSQL3_2_DParserdfa17_transition165,
    	PLSQL3_2_DParserdfa17_transition164,
    	PLSQL3_2_DParserdfa17_transition249,
    	PLSQL3_2_DParserdfa17_transition220,
    	PLSQL3_2_DParserdfa17_transition220,
    	PLSQL3_2_DParserdfa17_transition95,
    	PLSQL3_2_DParserdfa17_transition95,
    	PLSQL3_2_DParserdfa17_transition51,
    	PLSQL3_2_DParserdfa17_transition51,
    	PLSQL3_2_DParserdfa17_transition152,
    	PLSQL3_2_DParserdfa17_transition152,
    	PLSQL3_2_DParserdfa17_transition450,
    	PLSQL3_2_DParserdfa17_transition120,
    	PLSQL3_2_DParserdfa17_transition246,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition300,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition299,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition298,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition297,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition221,
    	PLSQL3_2_DParserdfa17_transition396,
    	PLSQL3_2_DParserdfa17_transition273,
    	PLSQL3_2_DParserdfa17_transition4,
    	PLSQL3_2_DParserdfa17_transition283,
    	PLSQL3_2_DParserdfa17_transition193,
    	PLSQL3_2_DParserdfa17_transition366,
    	PLSQL3_2_DParserdfa17_transition271,
    	PLSQL3_2_DParserdfa17_transition206,
    	PLSQL3_2_DParserdfa17_transition253,
    	PLSQL3_2_DParserdfa17_transition92,
    	PLSQL3_2_DParserdfa17_transition374,
    	PLSQL3_2_DParserdfa17_transition301,
    	PLSQL3_2_DParserdfa17_transition422,
    	PLSQL3_2_DParserdfa17_transition132,
    	PLSQL3_2_DParserdfa17_transition25,
    	PLSQL3_2_DParserdfa17_transition19,
    	PLSQL3_2_DParserdfa17_transition74,
    	PLSQL3_2_DParserdfa17_transition59,
    	PLSQL3_2_DParserdfa17_transition372,
    	PLSQL3_2_DParserdfa17_transition376,
    	PLSQL3_2_DParserdfa17_transition250,
    	PLSQL3_2_DParserdfa17_transition358,
    	PLSQL3_2_DParserdfa17_transition313,
    	PLSQL3_2_DParserdfa17_transition69,
    	PLSQL3_2_DParserdfa17_transition69,
    	PLSQL3_2_DParserdfa17_transition353,
    	PLSQL3_2_DParserdfa17_transition353,
    	PLSQL3_2_DParserdfa17_transition357,
    	PLSQL3_2_DParserdfa17_transition357,
    	PLSQL3_2_DParserdfa17_transition159,
    	PLSQL3_2_DParserdfa17_transition159,
    	PLSQL3_2_DParserdfa17_transition36,
    	PLSQL3_2_DParserdfa17_transition270,
    	PLSQL3_2_DParserdfa17_transition269,
    	PLSQL3_2_DParserdfa17_transition268,
    	PLSQL3_2_DParserdfa17_transition267,
    	PLSQL3_2_DParserdfa17_transition241,
    	PLSQL3_2_DParserdfa17_transition89,
    	PLSQL3_2_DParserdfa17_transition89,
    	PLSQL3_2_DParserdfa17_transition35,
    	PLSQL3_2_DParserdfa17_transition35,
    	PLSQL3_2_DParserdfa17_transition212,
    	PLSQL3_2_DParserdfa17_transition212,
    	PLSQL3_2_DParserdfa17_transition58,
    	PLSQL3_2_DParserdfa17_transition58,
    	PLSQL3_2_DParserdfa17_transition446,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition9,
    	PLSQL3_2_DParserdfa17_transition322,
    	PLSQL3_2_DParserdfa17_transition225,
    	PLSQL3_2_DParserdfa17_transition151,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition85,
    	PLSQL3_2_DParserdfa17_transition85,
    	PLSQL3_2_DParserdfa17_transition123,
    	PLSQL3_2_DParserdfa17_transition413,
    	PLSQL3_2_DParserdfa17_transition325,
    	PLSQL3_2_DParserdfa17_transition54,
    	PLSQL3_2_DParserdfa17_transition54,
    	PLSQL3_2_DParserdfa17_transition336,
    	PLSQL3_2_DParserdfa17_transition182,
    	PLSQL3_2_DParserdfa17_transition280,
    	PLSQL3_2_DParserdfa17_transition131,
    	PLSQL3_2_DParserdfa17_transition131,
    	PLSQL3_2_DParserdfa17_transition187,
    	PLSQL3_2_DParserdfa17_transition363,
    	PLSQL3_2_DParserdfa17_transition380,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition401,
    	PLSQL3_2_DParserdfa17_transition323,
    	PLSQL3_2_DParserdfa17_transition104,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition27,
    	PLSQL3_2_DParserdfa17_transition27,
    	PLSQL3_2_DParserdfa17_transition50,
    	PLSQL3_2_DParserdfa17_transition50,
    	PLSQL3_2_DParserdfa17_transition116,
    	PLSQL3_2_DParserdfa17_transition116,
    	PLSQL3_2_DParserdfa17_transition158,
    	PLSQL3_2_DParserdfa17_transition158,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition312,
    	PLSQL3_2_DParserdfa17_transition311,
    	PLSQL3_2_DParserdfa17_transition310,
    	PLSQL3_2_DParserdfa17_transition309,
    	PLSQL3_2_DParserdfa17_transition449,
    	PLSQL3_2_DParserdfa17_transition119,
    	PLSQL3_2_DParserdfa17_transition245,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition296,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition295,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition294,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition293,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition46,
    	PLSQL3_2_DParserdfa17_transition46,
    	PLSQL3_2_DParserdfa17_transition115,
    	PLSQL3_2_DParserdfa17_transition115,
    	PLSQL3_2_DParserdfa17_transition190,
    	PLSQL3_2_DParserdfa17_transition190,
    	PLSQL3_2_DParserdfa17_transition77,
    	PLSQL3_2_DParserdfa17_transition77,
    	PLSQL3_2_DParserdfa17_transition240,
    	PLSQL3_2_DParserdfa17_transition88,
    	PLSQL3_2_DParserdfa17_transition88,
    	PLSQL3_2_DParserdfa17_transition34,
    	PLSQL3_2_DParserdfa17_transition34,
    	PLSQL3_2_DParserdfa17_transition211,
    	PLSQL3_2_DParserdfa17_transition211,
    	PLSQL3_2_DParserdfa17_transition57,
    	PLSQL3_2_DParserdfa17_transition57,
    	PLSQL3_2_DParserdfa17_transition5,
    	PLSQL3_2_DParserdfa17_transition308,
    	PLSQL3_2_DParserdfa17_transition307,
    	PLSQL3_2_DParserdfa17_transition306,
    	PLSQL3_2_DParserdfa17_transition305,
    	PLSQL3_2_DParserdfa17_transition45,
    	PLSQL3_2_DParserdfa17_transition45,
    	PLSQL3_2_DParserdfa17_transition114,
    	PLSQL3_2_DParserdfa17_transition114,
    	PLSQL3_2_DParserdfa17_transition189,
    	PLSQL3_2_DParserdfa17_transition189,
    	PLSQL3_2_DParserdfa17_transition76,
    	PLSQL3_2_DParserdfa17_transition76,
    ];







    /*static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;
    */
    /*static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }*/

    class DFA17 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = cast(short[])DFA17_eot;
            this.eof = cast(short[])DFA17_eof;
            this.min = cast(int[])DFA17_min;
            this.max = cast(int[])DFA17_max;
            this.accept = cast(short[])DFA17_accept;
            this.special = cast(short[])DFA17_special;
            this.transition = cast(short[][])DFA17_transition;
        }
        public string getDescription() {
            return "448:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_142 = input.LA(1);

                         
                        int index17_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((toUpper(input.LT(1).getText)== "TYPE")&&(toUpper(input.LT(1).getText)== "TYPE"))&&synpred32_PLSQL3_2_D())) ) {s = 108;}

                        else if ( (((synpred33_PLSQL3_2_D()&&synpred33_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "SUBTYPE"))) ) {s = 146;}

                         
                        input.seek(index17_142);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA26_eot[182] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA26_eof[182] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA26_min[182] = [
    	15,13,13,107,-1,-1,-1,-1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,5,5,5,5,
    	     5,5,5,77,5,5,5,5,5,5,5,5,5,-1,22,-1,34,5,34,34,27,15,22,15,5,5,
    	     15,34,5,5,34,166,34,166,34,166,5,34,5,34,34,34,5,166,34,15,107,
    	     11,52,52,34,22,52,-1,22,5,-1,13,-1,52,22,15,22,15,22,15,52,52,
    	     52,52,5,34,15,52,52,34,5,5,5,52,5,5,5,34,15,27,34,5,52,52,5,5,
    	     9,52,52,5,5,9,52,52,5,5,9,5,5,5,5,52,5,9,5,5,52,173,34,5,34,52,
    	     15,5,15,5,15,5,5,15,5,52,52,22,9,9,9,9,9,9,9,9,5,142,-1,15,15,
    	     15,15,9,9,9,9,9,9,9,9
    ];
    const static int DFA26_max[182] = [
    	152,181,181,152,-1,-1,-1,-1,134,134,134,134,134,134,155,134,134,134,
    	     185,134,134,134,134,134,22,134,134,134,134,134,134,134,78,134,
    	     134,134,134,134,134,134,134,134,-1,22,-1,34,134,34,34,173,34,22,
    	     22,134,134,181,34,134,134,34,166,34,166,34,166,134,34,134,34,34,
    	     34,134,166,34,34,152,52,52,52,34,22,52,-1,22,134,-1,185,-1,52,
    	     77,162,77,162,77,162,52,52,52,52,134,34,162,52,52,34,134,134,134,
    	     52,134,185,134,34,181,173,34,134,52,52,134,134,13,52,52,134,134,
    	     13,52,52,134,134,13,134,134,134,134,52,134,13,134,134,52,173,34,
    	     134,34,52,162,134,162,134,162,134,134,162,134,52,52,185,13,13,
    	     13,13,13,13,13,13,134,173,-1,162,162,162,162,9,9,9,9,9,9,9,9
    ];
    const static short DFA26_accept[182] = [
    	-1,-1,-1,-1,8,9,10,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,2,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,6,-1,5,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA26_special[182] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA26_transition[][]=[
     [
    	157
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	152, -1, -1, -1, 151
    ],
     [
    	133
    ],
     [
    	124
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	139
    ],
     [
    	137, -1, -1, -1, -1, -1, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138
    ],
     [
    	102
    ],
     [
    	96
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	156
    ],
     [
    	109
    ],
     [
    	142
    ],
     [
    	167
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	130, -1, -1, -1, -1, -1, -1, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131
    ],
     [
    	152
    ],
     [
    	165, -1, -1, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 166
    ],
     [
    	163, -1, -1, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 164
    ],
     [
    	161, -1, -1, -1, -1, -1, -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162
    ],
     [
    	159, -1, -1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160
    ],
     [
    	79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80
    ],
     [
    	111
    ],
     [
    	82, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 81
    ],
     [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		4
    ],
     [
    	91
    ],
     [
    	129
    ],
     [
    	158
    ],
     [
    	122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 123
    ],
     [
    	108
    ],
     [
    	7, -1, -1, -1, 148, -1, -1, -1, 147, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	180, -1, -1, -1, -1, -1, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181
    ],
     [
    	178, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179
    ],
     [
    	176, -1, -1, -1, -1, -1, -1, 176, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 177
    ],
     [
    	174, -1, -1, -1, -1, -1, -1, 174, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 175
    ],
     [
    	150, -1, -1, -1, 171
    ],
     [
    	148
    ],
     [
    	7, -1, -1, -1, 155, -1, -1, -1, 154, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	146
    ],
     [
    	80
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 143, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	83
    ],
     [
    	169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ],
     [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	135
    ],
     [
    	42, -1, 41, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 38, 10, 9, 8, 35, 16, -1, -1, 25, 28, 36, -1, 
    		-1, -1, 7, -1, 17, 13, 13, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 
    		42, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 20, 19, -1, -1, -1, -1, -1, 14, -1, -1, 33, -1, 32, 11, 29, 37, 
    		-1, -1, -1, -1, -1, -1, 13, 13, 30, 31, -1, -1, -1, -1, -1, -1, 34, 
    		12, -1, -1, -1, -1, -1, 15, 23, -1, -1, -1, -1, -1, 39, -1, -1, -1, 
    		-1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 27
    ],
     [
    	98
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 128
    ],
     [
    	42, -1, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, -1, 7, 
    		-1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 42, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 
    		-1, -1, -1, 7, -1, -1, 7, -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    		-1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, -1, 7, 7
    ],
     [
    	148, -1, -1, -1, 170
    ],
     [
    	44, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, 44, 44, 44, 44, 44, -1, -1, 44, 44, 44, -1, -1, -1, 
    		-1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 
    		44, -1, -1, -1, -1, -1, 44, -1, -1, 44, -1, 44, 44, 44, 44, -1, -1, 
    		-1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, 44, -1, 
    		-1, -1, -1, -1, 44, 44, 87, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		44, -1, -1, 85, -1, -1, -1, -1, -1, -1, 44, -1, 44, 44
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	119
    ],
     [
    	71, 71
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	155, -1, -1, -1, 173
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	150
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		67, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	134
    ],
     [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 4
    ],
     [
    	97
    ],
     [
    	155, -1, -1, -1, 154
    ],
     [
    	152, -1, -1, -1, 172
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, 150, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	92
    ],
     [
    	84, -1, -1, -1, -1, -1, -1, 84
    ],
     [
    	155
    ],
     [
    	153
    ],
     [
    	104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 105
    ],
     [
    	136
    ],
     [
    	110
    ],
     [
    	148, -1, -1, -1, 147
    ],
     [
    	89
    ],
     [
    	44, -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, -1, -1, -1, 115, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 44, -1, 44, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44
    ],
     [
    	103
    ],
     [
    	120, -1, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121
    ],
     [
    	94
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	77
    ],
     [
    	140
    ],
     [
    	106
    ],
     [
    	93
    ],
     [
    	145, -1, 44, -1, -1, -1, -1, 44, -1, 44, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46
    ],
     [
    	88
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	116
    ],
     [
    	78
    ],
     [
    	82, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 103
    ],
     [
    	107
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	95
    ],
     [
    	44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 
    		-1, 169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ],
     [
    	76
    ],
     [
    	101
    ],
     [
    	90
    ],
     [
    	117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 118
    ],
     [
    	7, -1, -1, -1, 152, -1, -1, -1, 151, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		49, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ],
     [
    	132
    ],
     [
    	125, -1, -1, -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		58, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	75
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		65, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	57
    ],
     [
    	150, -1, -1, -1, 149
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		99, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	105
    ],
     [
    	141
    ],
     [
    	168
    ],
     [
    	44, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, 44, 44, 44, 44, 44, -1, -1, 44, 44, 44, -1, -1, -1, 
    		-1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 
    		44, -1, -1, -1, -1, -1, 44, -1, -1, 44, -1, 44, 44, 44, 44, -1, -1, 
    		-1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, 44, -1, 
    		-1, -1, -1, -1, 44, 44, 87, -1, -1, -1, -1, 44, -1, -1, 82, -1, -1, 
    		44, -1, -1, 85, -1, -1, -1, -1, -1, -1, 44, -1, 44, 44
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa26_transition0[] = [
    	157
    ];
    const static short PLSQL3_2_DParserdfa26_transition1[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition2[] = [
    	152, -1, -1, -1, 151
    ];
    const static short PLSQL3_2_DParserdfa26_transition3[] = [
    	133
    ];
    const static short PLSQL3_2_DParserdfa26_transition4[] = [
    	124
    ];
    const static short PLSQL3_2_DParserdfa26_transition5[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition6[] = [
    	139
    ];
    const static short PLSQL3_2_DParserdfa26_transition7[] = [
    	137, -1, -1, -1, -1, -1, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138
    ];
    const static short PLSQL3_2_DParserdfa26_transition8[] = [
    	102
    ];
    const static short PLSQL3_2_DParserdfa26_transition9[] = [
    	96
    ];
    const static short PLSQL3_2_DParserdfa26_transition10[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition11[] = [
    	156
    ];
    const static short PLSQL3_2_DParserdfa26_transition12[] = [
    	109
    ];
    const static short PLSQL3_2_DParserdfa26_transition13[] = [
    	142
    ];
    const static short PLSQL3_2_DParserdfa26_transition14[] = [
    	167
    ];
    const static short PLSQL3_2_DParserdfa26_transition15[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition16[] = [
    	130, -1, -1, -1, -1, -1, -1, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131
    ];
    const static short PLSQL3_2_DParserdfa26_transition17[] = [
    	152
    ];
    const static short PLSQL3_2_DParserdfa26_transition18[] = [
    	165, -1, -1, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 166
    ];
    const static short PLSQL3_2_DParserdfa26_transition19[] = [
    	163, -1, -1, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 164
    ];
    const static short PLSQL3_2_DParserdfa26_transition20[] = [
    	161, -1, -1, -1, -1, -1, -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162
    ];
    const static short PLSQL3_2_DParserdfa26_transition21[] = [
    	159, -1, -1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160
    ];
    const static short PLSQL3_2_DParserdfa26_transition22[] = [
    	79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80
    ];
    const static short PLSQL3_2_DParserdfa26_transition23[] = [
    	111
    ];
    const static short PLSQL3_2_DParserdfa26_transition24[] = [
    	82, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 81
    ];
    const static short PLSQL3_2_DParserdfa26_transition25[] = [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		4
    ];
    const static short PLSQL3_2_DParserdfa26_transition26[] = [
    	91
    ];
    const static short PLSQL3_2_DParserdfa26_transition27[] = [
    	129
    ];
    const static short PLSQL3_2_DParserdfa26_transition28[] = [
    	158
    ];
    const static short PLSQL3_2_DParserdfa26_transition29[] = [
    	122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 123
    ];
    const static short PLSQL3_2_DParserdfa26_transition30[] = [
    	108
    ];
    const static short PLSQL3_2_DParserdfa26_transition31[] = [
    	7, -1, -1, -1, 148, -1, -1, -1, 147, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition32[] = [
    	180, -1, -1, -1, -1, -1, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181
    ];
    const static short PLSQL3_2_DParserdfa26_transition33[] = [
    	178, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179
    ];
    const static short PLSQL3_2_DParserdfa26_transition34[] = [
    	176, -1, -1, -1, -1, -1, -1, 176, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 177
    ];
    const static short PLSQL3_2_DParserdfa26_transition35[] = [
    	174, -1, -1, -1, -1, -1, -1, 174, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 175
    ];
    const static short PLSQL3_2_DParserdfa26_transition36[] = [
    	150, -1, -1, -1, 171
    ];
    const static short PLSQL3_2_DParserdfa26_transition37[] = [
    	148
    ];
    const static short PLSQL3_2_DParserdfa26_transition38[] = [
    	7, -1, -1, -1, 155, -1, -1, -1, 154, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition39[] = [
    	146
    ];
    const static short PLSQL3_2_DParserdfa26_transition40[] = [
    	80
    ];
    const static short PLSQL3_2_DParserdfa26_transition41[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 143, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition42[] = [
    	83
    ];
    const static short PLSQL3_2_DParserdfa26_transition43[] = [
    	169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition44[] = [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    ];
    const static short PLSQL3_2_DParserdfa26_transition45[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition46[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition47[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition48[] = [
    	135
    ];
    const static short PLSQL3_2_DParserdfa26_transition49[] = [
    	42, -1, 41, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 38, 10, 9, 8, 35, 16, -1, -1, 25, 28, 36, -1, 
    		-1, -1, 7, -1, 17, 13, 13, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 
    		42, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 20, 19, -1, -1, -1, -1, -1, 14, -1, -1, 33, -1, 32, 11, 29, 37, 
    		-1, -1, -1, -1, -1, -1, 13, 13, 30, 31, -1, -1, -1, -1, -1, -1, 34, 
    		12, -1, -1, -1, -1, -1, 15, 23, -1, -1, -1, -1, -1, 39, -1, -1, -1, 
    		-1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 27
    ];
    const static short PLSQL3_2_DParserdfa26_transition50[] = [
    	98
    ];
    const static short PLSQL3_2_DParserdfa26_transition51[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition52[] = [
    	127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 128
    ];
    const static short PLSQL3_2_DParserdfa26_transition53[] = [
    	42, -1, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, -1, 7, 
    		-1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 42, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 
    		-1, -1, -1, 7, -1, -1, 7, -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    		-1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, -1, 7, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition54[] = [
    	148, -1, -1, -1, 170
    ];
    const static short PLSQL3_2_DParserdfa26_transition55[] = [
    	44, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, 44, 44, 44, 44, 44, -1, -1, 44, 44, 44, -1, -1, -1, 
    		-1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 
    		44, -1, -1, -1, -1, -1, 44, -1, -1, 44, -1, 44, 44, 44, 44, -1, -1, 
    		-1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, 44, -1, 
    		-1, -1, -1, -1, 44, 44, 87, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		44, -1, -1, 85, -1, -1, -1, -1, -1, -1, 44, -1, 44, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition56[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition57[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition58[] = [
    	119
    ];
    const static short PLSQL3_2_DParserdfa26_transition59[] = [
    	71, 71
    ];
    const static short PLSQL3_2_DParserdfa26_transition60[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition61[] = [
    	155, -1, -1, -1, 173
    ];
    const static short PLSQL3_2_DParserdfa26_transition62[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition63[] = [
    	150
    ];
    const static short PLSQL3_2_DParserdfa26_transition64[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		67, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition65[] = [
    	134
    ];
    const static short PLSQL3_2_DParserdfa26_transition66[] = [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 4
    ];
    const static short PLSQL3_2_DParserdfa26_transition67[] = [
    	97
    ];
    const static short PLSQL3_2_DParserdfa26_transition68[] = [
    	155, -1, -1, -1, 154
    ];
    const static short PLSQL3_2_DParserdfa26_transition69[] = [
    	152, -1, -1, -1, 172
    ];
    const static short PLSQL3_2_DParserdfa26_transition70[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition71[] = [
    	7, -1, -1, -1, 150, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition72[] = [
    	92
    ];
    const static short PLSQL3_2_DParserdfa26_transition73[] = [
    	84, -1, -1, -1, -1, -1, -1, 84
    ];
    const static short PLSQL3_2_DParserdfa26_transition74[] = [
    	155
    ];
    const static short PLSQL3_2_DParserdfa26_transition75[] = [
    	153
    ];
    const static short PLSQL3_2_DParserdfa26_transition76[] = [
    	104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 105
    ];
    const static short PLSQL3_2_DParserdfa26_transition77[] = [
    	136
    ];
    const static short PLSQL3_2_DParserdfa26_transition78[] = [
    	110
    ];
    const static short PLSQL3_2_DParserdfa26_transition79[] = [
    	148, -1, -1, -1, 147
    ];
    const static short PLSQL3_2_DParserdfa26_transition80[] = [
    	89
    ];
    const static short PLSQL3_2_DParserdfa26_transition81[] = [
    	44, -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, -1, -1, -1, 115, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 44, -1, 44, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition82[] = [
    	103
    ];
    const static short PLSQL3_2_DParserdfa26_transition83[] = [
    	120, -1, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121
    ];
    const static short PLSQL3_2_DParserdfa26_transition84[] = [
    	94
    ];
    const static short PLSQL3_2_DParserdfa26_transition85[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition86[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition87[] = [
    	77
    ];
    const static short PLSQL3_2_DParserdfa26_transition88[] = [
    	140
    ];
    const static short PLSQL3_2_DParserdfa26_transition89[] = [
    	106
    ];
    const static short PLSQL3_2_DParserdfa26_transition90[] = [
    	93
    ];
    const static short PLSQL3_2_DParserdfa26_transition91[] = [
    	145, -1, 44, -1, -1, -1, -1, 44, -1, 44, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition92[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46
    ];
    const static short PLSQL3_2_DParserdfa26_transition93[] = [
    	88
    ];
    const static short PLSQL3_2_DParserdfa26_transition94[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition95[] = [
    	116
    ];
    const static short PLSQL3_2_DParserdfa26_transition96[] = [
    	78
    ];
    const static short PLSQL3_2_DParserdfa26_transition97[] = [
    	82, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 103
    ];
    const static short PLSQL3_2_DParserdfa26_transition98[] = [
    	107
    ];
    const static short PLSQL3_2_DParserdfa26_transition99[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ];
    const static short PLSQL3_2_DParserdfa26_transition100[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition101[] = [
    	95
    ];
    const static short PLSQL3_2_DParserdfa26_transition102[] = [
    	44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 
    		-1, 169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition103[] = [
    	76
    ];
    const static short PLSQL3_2_DParserdfa26_transition104[] = [
    	101
    ];
    const static short PLSQL3_2_DParserdfa26_transition105[] = [
    	90
    ];
    const static short PLSQL3_2_DParserdfa26_transition106[] = [
    	117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 118
    ];
    const static short PLSQL3_2_DParserdfa26_transition107[] = [
    	7, -1, -1, -1, 152, -1, -1, -1, 151, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition108[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		49, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ];
    const static short PLSQL3_2_DParserdfa26_transition109[] = [
    	132
    ];
    const static short PLSQL3_2_DParserdfa26_transition110[] = [
    	125, -1, -1, -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126
    ];
    const static short PLSQL3_2_DParserdfa26_transition111[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		58, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition112[] = [
    	75
    ];
    const static short PLSQL3_2_DParserdfa26_transition113[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition114[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		65, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition115[] = [
    	57
    ];
    const static short PLSQL3_2_DParserdfa26_transition116[] = [
    	150, -1, -1, -1, 149
    ];
    const static short PLSQL3_2_DParserdfa26_transition117[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition118[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		99, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition119[] = [
    	105
    ];
    const static short PLSQL3_2_DParserdfa26_transition120[] = [
    	141
    ];
    const static short PLSQL3_2_DParserdfa26_transition121[] = [
    	168
    ];
    const static short PLSQL3_2_DParserdfa26_transition122[] = [
    	44, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, 44, 44, 44, 44, 44, -1, -1, 44, 44, 44, -1, -1, -1, 
    		-1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 
    		44, -1, -1, -1, -1, -1, 44, -1, -1, 44, -1, 44, 44, 44, 44, -1, -1, 
    		-1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, 44, -1, 
    		-1, -1, -1, -1, 44, 44, 87, -1, -1, -1, -1, 44, -1, -1, 82, -1, -1, 
    		44, -1, -1, 85, -1, -1, -1, -1, -1, -1, 44, -1, 44, 44
    ];
    const static short PLSQL3_2_DParserdfa26_transition123[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa26_transition124[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];

    const static short DFA26_transition[][] = [
    	PLSQL3_2_DParserdfa26_transition25,
    	PLSQL3_2_DParserdfa26_transition49,
    	PLSQL3_2_DParserdfa26_transition53,
    	PLSQL3_2_DParserdfa26_transition66,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition123,
    	PLSQL3_2_DParserdfa26_transition92,
    	PLSQL3_2_DParserdfa26_transition86,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition108,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition47,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition115,
    	PLSQL3_2_DParserdfa26_transition111,
    	PLSQL3_2_DParserdfa26_transition124,
    	PLSQL3_2_DParserdfa26_transition57,
    	PLSQL3_2_DParserdfa26_transition114,
    	PLSQL3_2_DParserdfa26_transition64,
    	PLSQL3_2_DParserdfa26_transition10,
    	PLSQL3_2_DParserdfa26_transition56,
    	PLSQL3_2_DParserdfa26_transition59,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition45,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition117,
    	PLSQL3_2_DParserdfa26_transition46,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition112,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition103,
    	PLSQL3_2_DParserdfa26_transition60,
    	PLSQL3_2_DParserdfa26_transition87,
    	PLSQL3_2_DParserdfa26_transition96,
    	PLSQL3_2_DParserdfa26_transition22,
    	PLSQL3_2_DParserdfa26_transition24,
    	PLSQL3_2_DParserdfa26_transition42,
    	PLSQL3_2_DParserdfa26_transition73,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition122,
    	PLSQL3_2_DParserdfa26_transition93,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition94,
    	PLSQL3_2_DParserdfa26_transition80,
    	PLSQL3_2_DParserdfa26_transition105,
    	PLSQL3_2_DParserdfa26_transition26,
    	PLSQL3_2_DParserdfa26_transition72,
    	PLSQL3_2_DParserdfa26_transition90,
    	PLSQL3_2_DParserdfa26_transition84,
    	PLSQL3_2_DParserdfa26_transition51,
    	PLSQL3_2_DParserdfa26_transition101,
    	PLSQL3_2_DParserdfa26_transition85,
    	PLSQL3_2_DParserdfa26_transition9,
    	PLSQL3_2_DParserdfa26_transition67,
    	PLSQL3_2_DParserdfa26_transition50,
    	PLSQL3_2_DParserdfa26_transition118,
    	PLSQL3_2_DParserdfa26_transition104,
    	PLSQL3_2_DParserdfa26_transition8,
    	PLSQL3_2_DParserdfa26_transition97,
    	PLSQL3_2_DParserdfa26_transition44,
    	PLSQL3_2_DParserdfa26_transition76,
    	PLSQL3_2_DParserdfa26_transition89,
    	PLSQL3_2_DParserdfa26_transition98,
    	PLSQL3_2_DParserdfa26_transition30,
    	PLSQL3_2_DParserdfa26_transition12,
    	PLSQL3_2_DParserdfa26_transition78,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition23,
    	PLSQL3_2_DParserdfa26_transition113,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition81,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition95,
    	PLSQL3_2_DParserdfa26_transition106,
    	PLSQL3_2_DParserdfa26_transition83,
    	PLSQL3_2_DParserdfa26_transition29,
    	PLSQL3_2_DParserdfa26_transition110,
    	PLSQL3_2_DParserdfa26_transition52,
    	PLSQL3_2_DParserdfa26_transition16,
    	PLSQL3_2_DParserdfa26_transition109,
    	PLSQL3_2_DParserdfa26_transition3,
    	PLSQL3_2_DParserdfa26_transition65,
    	PLSQL3_2_DParserdfa26_transition48,
    	PLSQL3_2_DParserdfa26_transition62,
    	PLSQL3_2_DParserdfa26_transition77,
    	PLSQL3_2_DParserdfa26_transition7,
    	PLSQL3_2_DParserdfa26_transition6,
    	PLSQL3_2_DParserdfa26_transition88,
    	PLSQL3_2_DParserdfa26_transition120,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition13,
    	PLSQL3_2_DParserdfa26_transition41,
    	PLSQL3_2_DParserdfa26_transition99,
    	PLSQL3_2_DParserdfa26_transition100,
    	PLSQL3_2_DParserdfa26_transition82,
    	PLSQL3_2_DParserdfa26_transition55,
    	PLSQL3_2_DParserdfa26_transition91,
    	PLSQL3_2_DParserdfa26_transition39,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition58,
    	PLSQL3_2_DParserdfa26_transition58,
    	PLSQL3_2_DParserdfa26_transition15,
    	PLSQL3_2_DParserdfa26_transition31,
    	PLSQL3_2_DParserdfa26_transition79,
    	PLSQL3_2_DParserdfa26_transition4,
    	PLSQL3_2_DParserdfa26_transition4,
    	PLSQL3_2_DParserdfa26_transition5,
    	PLSQL3_2_DParserdfa26_transition71,
    	PLSQL3_2_DParserdfa26_transition116,
    	PLSQL3_2_DParserdfa26_transition27,
    	PLSQL3_2_DParserdfa26_transition27,
    	PLSQL3_2_DParserdfa26_transition70,
    	PLSQL3_2_DParserdfa26_transition107,
    	PLSQL3_2_DParserdfa26_transition2,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition75,
    	PLSQL3_2_DParserdfa26_transition38,
    	PLSQL3_2_DParserdfa26_transition68,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition119,
    	PLSQL3_2_DParserdfa26_transition40,
    	PLSQL3_2_DParserdfa26_transition11,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition0,
    	PLSQL3_2_DParserdfa26_transition28,
    	PLSQL3_2_DParserdfa26_transition21,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition20,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition19,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition18,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition14,
    	PLSQL3_2_DParserdfa26_transition121,
    	PLSQL3_2_DParserdfa26_transition102,
    	PLSQL3_2_DParserdfa26_transition54,
    	PLSQL3_2_DParserdfa26_transition54,
    	PLSQL3_2_DParserdfa26_transition36,
    	PLSQL3_2_DParserdfa26_transition36,
    	PLSQL3_2_DParserdfa26_transition69,
    	PLSQL3_2_DParserdfa26_transition69,
    	PLSQL3_2_DParserdfa26_transition61,
    	PLSQL3_2_DParserdfa26_transition61,
    	PLSQL3_2_DParserdfa26_transition1,
    	PLSQL3_2_DParserdfa26_transition43,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa26_transition35,
    	PLSQL3_2_DParserdfa26_transition34,
    	PLSQL3_2_DParserdfa26_transition33,
    	PLSQL3_2_DParserdfa26_transition32,
    	PLSQL3_2_DParserdfa26_transition37,
    	PLSQL3_2_DParserdfa26_transition37,
    	PLSQL3_2_DParserdfa26_transition63,
    	PLSQL3_2_DParserdfa26_transition63,
    	PLSQL3_2_DParserdfa26_transition17,
    	PLSQL3_2_DParserdfa26_transition17,
    	PLSQL3_2_DParserdfa26_transition74,
    	PLSQL3_2_DParserdfa26_transition74,
    ];







    /*static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;
    */
    /*static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }*/

    class DFA26 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = cast(short[])DFA26_eot;
            this.eof = cast(short[])DFA26_eof;
            this.min = cast(int[])DFA26_min;
            this.max = cast(int[])DFA26_max;
            this.accept = cast(short[])DFA26_accept;
            this.special = cast(short[])DFA26_special;
            this.transition = cast(short[][])DFA26_transition;
        }
        public string getDescription() {
            return "482:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );";
        }
    }


    const static short DFA36_eot[342] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1
    ];
    const static short DFA36_eof[342] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1
    ];
    const static int DFA36_min[342] = [
    	15,13,13,107,-1,-1,-1,-1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,5,5,5,5,
    	     5,5,5,77,5,5,5,5,5,5,5,5,5,-1,22,15,34,5,34,34,27,15,22,15,5,5,
    	     15,34,5,5,34,166,34,166,34,166,5,34,5,34,34,34,5,166,34,15,107,
    	     22,22,22,22,22,22,22,22,22,22,13,22,22,22,22,22,22,22,22,22,22,
    	     22,22,22,77,22,22,22,22,22,22,22,22,13,-1,11,52,52,34,22,52,-1,
    	     22,5,-1,13,-1,52,22,15,22,15,22,15,52,52,52,52,5,34,15,52,52,136,
    	     -1,0,34,22,34,34,13,15,22,15,22,22,34,22,22,34,166,34,166,34,166,
    	     22,34,22,34,34,34,22,166,34,34,34,5,5,5,52,5,5,5,34,15,13,15,5,
    	     52,52,5,5,9,52,52,5,5,9,52,52,5,5,9,5,5,5,5,52,5,9,5,5,53,11,52,
    	     52,34,22,6,22,13,52,22,15,22,15,22,15,52,52,52,52,22,34,15,52,
    	     52,52,173,34,5,34,6,15,5,15,5,15,5,5,15,5,34,22,22,22,52,22,22,
    	     22,22,52,52,22,9,9,52,52,22,9,9,52,52,22,9,9,22,22,22,22,52,9,
    	     9,22,22,52,52,22,9,9,9,9,9,9,9,9,52,53,34,22,15,22,15,22,15,22,
    	     22,15,22,5,53,-1,15,15,15,15,52,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
    	     9,22,15,15,15,15,9,9,9,9,9,9,9,9
    ];
    const static int DFA36_max[342] = [
    	152,181,181,152,-1,-1,-1,-1,134,134,134,134,134,134,155,134,134,134,
    	     185,134,134,134,134,134,22,134,134,134,134,134,134,134,78,134,
    	     134,134,134,134,134,134,134,134,-1,22,181,34,134,34,34,173,34,
    	     22,22,134,134,181,34,134,134,34,166,34,166,34,166,134,34,134,34,
    	     34,34,134,166,34,34,152,134,134,134,134,134,134,155,134,134,134,
    	     185,134,134,134,134,134,22,134,134,134,134,134,134,134,78,134,
    	     134,134,134,134,134,134,134,134,-1,52,52,52,34,22,52,-1,22,134,
    	     -1,185,-1,52,77,162,77,162,77,162,52,52,52,52,134,34,162,52,52,
    	     136,-1,0,34,134,34,34,185,174,22,22,134,134,34,134,134,34,166,
    	     34,166,34,166,134,34,134,34,34,34,134,166,34,34,34,134,134,134,
    	     52,134,185,134,34,181,185,174,134,52,52,134,134,13,52,52,134,134,
    	     13,52,52,134,134,13,134,134,134,134,52,134,13,134,134,53,52,52,
    	     52,34,22,144,22,134,52,77,162,77,162,77,162,52,52,52,52,134,34,
    	     162,52,52,52,173,34,134,34,144,162,134,162,134,162,134,134,162,
    	     134,34,134,134,134,52,134,185,134,134,52,52,134,134,13,52,52,134,
    	     134,13,52,52,134,134,13,134,134,134,134,52,134,13,134,134,52,52,
    	     185,13,13,13,13,13,13,13,13,52,185,34,134,162,134,162,134,162,
    	     134,134,162,134,134,185,-1,162,162,162,162,52,13,13,13,13,13,13,
    	     13,13,9,9,9,9,9,9,9,9,134,162,162,162,162,9,9,9,9,9,9,9,9
    ];
    const static short DFA36_accept[342] = [
    	-1,-1,-1,-1,8,9,11,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,10,-1,-1,-1,-1,-1,-1,3,-1,-1,6,-1,5,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1
    ];
    const static short DFA36_special[342] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1
    ];

    /*const static short DFA36_transition[][]=[
     [
    	299, -1, -1, -1, 298
    ],
     [
    	191
    ],
     [
    	225
    ],
     [
    	183
    ],
     [
    	312
    ],
     [
    	264
    ],
     [
    	140, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	329
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	252
    ],
     [
    	123
    ],
     [
    	299, -1, -1, -1, 298, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	242, -1, -1, -1, 241
    ],
     [
    	186
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	130
    ],
     [
    	273
    ],
     [
    	113
    ],
     [
    	240
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	140, -1, -1, -1, -1, 169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	224
    ],
     [
    	141
    ],
     [
    	242, -1, -1, -1, 309
    ],
     [
    	272
    ],
     [
    	293
    ],
     [
    	112
    ],
     [
    	304
    ],
     [
    	173
    ],
     [
    	192, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193
    ],
     [
    	244, -1, -1, -1, 310
    ],
     [
    	297, -1, -1, -1, 330
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    ],
     [
    	275
    ],
     [
    	140, -1, -1, -1, -1, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	227
    ],
     [
    	299, -1, -1, -1, 331
    ],
     [
    	257, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 258
    ],
     [
    	253
    ],
     [
    	109, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, 
    		-1, -1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 
    		105, -1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 
    		102, 80, -1, -1, -1, -1, -1, 83, 91, 122, -1, -1, -1, -1, 107, -1, 
    		-1, 117, -1, -1, 89, -1, -1, 120, -1, -1, -1, -1, -1, -1, 108, -1, 
    		94, 95
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	251
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ],
     [
    	277, -1, -1, -1, -1, -1, -1, 277, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278
    ],
     [
    	211
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ],
     [
    	187, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 188
    ],
     [
    	233
    ],
     [
    	226
    ],
     [
    	153
    ],
     [
    	260, -1, -1, -1, -1, -1, -1, 260, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 261
    ],
     [
    	207
    ],
     [
    	282
    ],
     [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 4
    ],
     [
    	297
    ],
     [
    	124
    ],
     [
    	177
    ],
     [
    	199
    ],
     [
    	-1
    ],
     [
    	140, -1, -1, -1, -1, 164, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	304, -1, -1, -1, 333
    ],
     [
    	138
    ],
     [
    	299
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	274
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	340, -1, -1, -1, -1, -1, -1, 340, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 341
    ],
     [
    	338, -1, -1, -1, -1, -1, -1, 338, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 339
    ],
     [
    	336, -1, -1, -1, -1, -1, -1, 336, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337
    ],
     [
    	334, -1, -1, -1, -1, -1, -1, 334, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 335
    ],
     [
    	196
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		58, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	110, -1, 110, -1, -1, 110, 110, -1, -1, -1, 110, 110, 110, 110, 110, 
    		110, -1, 110, -1, 110, -1, -1, 110, 110, -1, -1, 110, 110, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 
    		254, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		-1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 110, -1, 110, -1, 
    		-1, -1, -1, 214, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 110, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, 
    		110, -1, -1, -1, 110, -1, -1, -1, -1, 110
    ],
     [
    	7, -1, -1, -1, 240, -1, -1, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	132
    ],
     [
    	149, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, 170, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 139
    ],
     [
    	319, -1, -1, -1, -1, -1, -1, 319, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320
    ],
     [
    	317, -1, -1, -1, -1, -1, -1, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 318
    ],
     [
    	315, -1, -1, -1, -1, -1, -1, 315, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 316
    ],
     [
    	313, -1, -1, -1, -1, -1, -1, 313, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 314
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	305
    ],
     [
    	201
    ],
     [
    	240, -1, -1, -1, 239
    ],
     [
    	149, -1, 110, -1, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, 182, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, 110, 110, -1, -1, 
    		110, 110, 110, -1, -1, -1, -1, -1, 110, 110, 110, -1, -1, -1, -1, 
    		-1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 110, 
    		-1, -1, 110, -1, 110, 110, 110, 110, -1, -1, 139, -1, -1, -1, 110, 
    		110, 110, 110, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 
    		110, 110, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 110, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, -1, 110, 110, -1, -1, -1, 148
    ],
     [
    	223
    ],
     [
    	247, -1, -1, -1, 311
    ],
     [
    	281
    ],
     [
    	163, -1, -1, -1, -1, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	280
    ],
     [
    	200
    ],
     [
    	232
    ],
     [
    	131
    ],
     [
    	304, -1, -1, -1, 303
    ],
     [
    	140, -1, -1, -1, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	125
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	222
    ],
     [
    	301, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	255
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	240, -1, -1, -1, 308
    ],
     [
    	306
    ],
     [
    	202
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		67, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ],
     [
    	304, -1, -1, -1, 303, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 190
    ],
     [
    	265, -1, -1, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 266
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ],
     [
    	71, 71
    ],
     [
    	117, -1, -1, -1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 138
    ],
     [
    	75
    ],
     [
    	208
    ],
     [
    	140, -1, -1, -1, -1, 152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	234
    ],
     [
    	174
    ],
     [
    	297, -1, -1, -1, 296
    ],
     [
    	172
    ],
     [
    	197, -1, -1, -1, -1, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 198
    ],
     [
    	126
    ],
     [
    	133
    ],
     [
    	161, -1, -1, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	140, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	279
    ],
     [
    	269
    ],
     [
    	231
    ],
     [
    	7, -1, -1, -1, 242, -1, -1, -1, 241, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 237, -1, 
    		140, -1, -1, -1, -1, 140, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 140, -1, -1, -1, -1, 110, -1, 110, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110
    ],
     [
    	301, -1, -1, -1, 332
    ],
     [
    	220
    ],
     [
    	301
    ],
     [
    	245
    ],
     [
    	203
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		134, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	127
    ],
     [
    	175
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	247
    ],
     [
    	140, -1, -1, -1, -1, 155, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		4
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	109, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, -1, 
    		-1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 105, 
    		-1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 102, 
    		80, -1, -1, -1, -1, -1, 83, 91, -1, -1, -1, -1, -1, 107, -1, -1, -1, 
    		-1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 94, 95
    ],
     [
    	140, -1, -1, -1, -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143
    ],
     [
    	140, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	140, -1, -1, -1, -1, 229, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	140, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	176
    ],
     [
    	270, -1, -1, -1, -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271
    ],
     [
    	140, -1, -1, -1, -1, 162, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	136
    ],
     [
    	42, -1, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, -1, 7, 
    		-1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 42, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 
    		-1, -1, -1, 7, -1, -1, 7, -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    		-1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, -1, 7, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	149, -1, 110, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 147, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, 110, 110, -1, -1, 
    		110, 110, 110, -1, -1, -1, -1, -1, 110, 110, 110, -1, -1, -1, -1, 
    		-1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 110, 
    		-1, -1, 110, -1, 110, 110, 110, 110, -1, -1, 139, -1, -1, -1, 110, 
    		110, 110, 110, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 
    		110, 110, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 110, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, -1, 110, 110, -1, -1, -1, 148
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	244
    ],
     [
    	221
    ],
     [
    	242
    ],
     [
    	140, -1, -1, -1, -1, 294, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		49, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ],
     [
    	259
    ],
     [
    	178
    ],
     [
    	171, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 172
    ],
     [
    	119, -1, -1, -1, -1, -1, -1, 119
    ],
     [
    	290, -1, -1, -1, -1, -1, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 291
    ],
     [
    	288, -1, -1, -1, -1, -1, -1, 288, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 289
    ],
     [
    	286, -1, -1, -1, -1, -1, -1, 286, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 287
    ],
     [
    	284, -1, -1, -1, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 285
    ],
     [
    	118
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46
    ],
     [
    	276
    ],
     [
    	140, -1, -1, -1, -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	167, 167
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	128
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 212, -1, 
    		140, -1, -1, -1, -1, 140, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 140, -1, -1, -1, -1, 110, -1, 110, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110
    ],
     [
    	297, -1, -1, -1, 296, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	210
    ],
     [
    	248, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 249
    ],
     [
    	250
    ],
     [
    	111
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	215
    ],
     [
    	327, -1, -1, -1, -1, -1, -1, 327, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328
    ],
     [
    	325, -1, -1, -1, -1, -1, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 326
    ],
     [
    	323, -1, -1, -1, -1, -1, -1, 323, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324
    ],
     [
    	321, -1, -1, -1, -1, -1, -1, 321, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 322
    ],
     [
    	154, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		65, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 263
    ],
     [
    	204, -1, -1, -1, -1, -1, -1, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205
    ],
     [
    	7, -1, -1, -1, 244, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	228, -1, -1, -1, -1, 229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	301, -1, -1, -1, 300
    ],
     [
    	302
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	217
    ],
     [
    	244, -1, -1, -1, 243
    ],
     [
    	256
    ],
     [
    	114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115
    ],
     [
    	219
    ],
     [
    	129
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	230
    ],
     [
    	140, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	295, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	137
    ],
     [
    	109, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, 
    		-1, -1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 
    		105, -1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 
    		102, 80, -1, -1, -1, -1, -1, 83, 91, 122, -1, -1, -1, -1, 107, -1, 
    		-1, -1, -1, -1, 89, -1, -1, 120, -1, -1, -1, -1, -1, -1, 108, -1, 
    		94, 95
    ],
     [
    	216, -1, -1, -1, -1, -1, -1, 216
    ],
     [
    	206
    ],
     [
    	7, -1, -1, -1, 247, -1, -1, -1, 246, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	209
    ],
     [
    	42, -1, 41, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 38, 10, 9, 8, 35, 16, -1, -1, 25, 28, 36, -1, 
    		-1, -1, 7, -1, 17, 13, 13, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 
    		42, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 20, 19, -1, -1, -1, -1, -1, 14, -1, -1, 33, -1, 32, 11, 29, 37, 
    		-1, -1, -1, -1, -1, -1, 13, 13, 30, 31, -1, -1, -1, -1, -1, -1, 34, 
    		12, -1, -1, -1, -1, -1, 15, 23, -1, -1, -1, -1, -1, 39, -1, -1, -1, 
    		-1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 27
    ],
     [
    	110, -1, 110, -1, -1, 110, 110, -1, -1, -1, 110, 110, 110, 110, 110, 
    		110, -1, 110, -1, 110, -1, -1, 110, 110, -1, -1, 110, 110, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 
    		283, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		-1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ],
     [
    	57
    ],
     [
    	117, -1, -1, -1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 116
    ],
     [
    	194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 195
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	292
    ],
     [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ],
     [
    	267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 269, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 268
    ],
     [
    	110, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 110, -1, 110, -1, 
    		-1, -1, -1, 238, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 110, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, 
    		110, -1, -1, -1, 110, -1, -1, -1, -1, 110
    ],
     [
    	249
    ],
     [
    	218
    ],
     [
    	115
    ],
     [
    	247, -1, -1, -1, 246
    ],
     [
    	184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 185
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa36_transition0[] = [
    	299, -1, -1, -1, 298
    ];
    const static short PLSQL3_2_DParserdfa36_transition1[] = [
    	191
    ];
    const static short PLSQL3_2_DParserdfa36_transition2[] = [
    	225
    ];
    const static short PLSQL3_2_DParserdfa36_transition3[] = [
    	183
    ];
    const static short PLSQL3_2_DParserdfa36_transition4[] = [
    	312
    ];
    const static short PLSQL3_2_DParserdfa36_transition5[] = [
    	264
    ];
    const static short PLSQL3_2_DParserdfa36_transition6[] = [
    	140, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition7[] = [
    	329
    ];
    const static short PLSQL3_2_DParserdfa36_transition8[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition9[] = [
    	252
    ];
    const static short PLSQL3_2_DParserdfa36_transition10[] = [
    	123
    ];
    const static short PLSQL3_2_DParserdfa36_transition11[] = [
    	299, -1, -1, -1, 298, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition12[] = [
    	242, -1, -1, -1, 241
    ];
    const static short PLSQL3_2_DParserdfa36_transition13[] = [
    	186
    ];
    const static short PLSQL3_2_DParserdfa36_transition14[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition15[] = [
    	130
    ];
    const static short PLSQL3_2_DParserdfa36_transition16[] = [
    	273
    ];
    const static short PLSQL3_2_DParserdfa36_transition17[] = [
    	113
    ];
    const static short PLSQL3_2_DParserdfa36_transition18[] = [
    	240
    ];
    const static short PLSQL3_2_DParserdfa36_transition19[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition20[] = [
    	140, -1, -1, -1, -1, 169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition21[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition22[] = [
    	224
    ];
    const static short PLSQL3_2_DParserdfa36_transition23[] = [
    	141
    ];
    const static short PLSQL3_2_DParserdfa36_transition24[] = [
    	242, -1, -1, -1, 309
    ];
    const static short PLSQL3_2_DParserdfa36_transition25[] = [
    	272
    ];
    const static short PLSQL3_2_DParserdfa36_transition26[] = [
    	293
    ];
    const static short PLSQL3_2_DParserdfa36_transition27[] = [
    	112
    ];
    const static short PLSQL3_2_DParserdfa36_transition28[] = [
    	304
    ];
    const static short PLSQL3_2_DParserdfa36_transition29[] = [
    	173
    ];
    const static short PLSQL3_2_DParserdfa36_transition30[] = [
    	192, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193
    ];
    const static short PLSQL3_2_DParserdfa36_transition31[] = [
    	244, -1, -1, -1, 310
    ];
    const static short PLSQL3_2_DParserdfa36_transition32[] = [
    	297, -1, -1, -1, 330
    ];
    const static short PLSQL3_2_DParserdfa36_transition33[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition34[] = [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    ];
    const static short PLSQL3_2_DParserdfa36_transition35[] = [
    	275
    ];
    const static short PLSQL3_2_DParserdfa36_transition36[] = [
    	140, -1, -1, -1, -1, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition37[] = [
    	227
    ];
    const static short PLSQL3_2_DParserdfa36_transition38[] = [
    	299, -1, -1, -1, 331
    ];
    const static short PLSQL3_2_DParserdfa36_transition39[] = [
    	257, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 258
    ];
    const static short PLSQL3_2_DParserdfa36_transition40[] = [
    	253
    ];
    const static short PLSQL3_2_DParserdfa36_transition41[] = [
    	109, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, 
    		-1, -1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 
    		105, -1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 
    		102, 80, -1, -1, -1, -1, -1, 83, 91, 122, -1, -1, -1, -1, 107, -1, 
    		-1, 117, -1, -1, 89, -1, -1, 120, -1, -1, -1, -1, -1, -1, 108, -1, 
    		94, 95
    ];
    const static short PLSQL3_2_DParserdfa36_transition42[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition43[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition44[] = [
    	251
    ];
    const static short PLSQL3_2_DParserdfa36_transition45[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ];
    const static short PLSQL3_2_DParserdfa36_transition46[] = [
    	277, -1, -1, -1, -1, -1, -1, 277, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278
    ];
    const static short PLSQL3_2_DParserdfa36_transition47[] = [
    	211
    ];
    const static short PLSQL3_2_DParserdfa36_transition48[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    ];
    const static short PLSQL3_2_DParserdfa36_transition49[] = [
    	187, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 188
    ];
    const static short PLSQL3_2_DParserdfa36_transition50[] = [
    	233
    ];
    const static short PLSQL3_2_DParserdfa36_transition51[] = [
    	226
    ];
    const static short PLSQL3_2_DParserdfa36_transition52[] = [
    	153
    ];
    const static short PLSQL3_2_DParserdfa36_transition53[] = [
    	260, -1, -1, -1, -1, -1, -1, 260, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 261
    ];
    const static short PLSQL3_2_DParserdfa36_transition54[] = [
    	207
    ];
    const static short PLSQL3_2_DParserdfa36_transition55[] = [
    	282
    ];
    const static short PLSQL3_2_DParserdfa36_transition56[] = [
    	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 4
    ];
    const static short PLSQL3_2_DParserdfa36_transition57[] = [
    	297
    ];
    const static short PLSQL3_2_DParserdfa36_transition58[] = [
    	124
    ];
    const static short PLSQL3_2_DParserdfa36_transition59[] = [
    	177
    ];
    const static short PLSQL3_2_DParserdfa36_transition60[] = [
    	199
    ];
    const static short PLSQL3_2_DParserdfa36_transition61[] = [
    	-1
    ];
    const static short PLSQL3_2_DParserdfa36_transition62[] = [
    	140, -1, -1, -1, -1, 164, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition63[] = [
    	304, -1, -1, -1, 333
    ];
    const static short PLSQL3_2_DParserdfa36_transition64[] = [
    	138
    ];
    const static short PLSQL3_2_DParserdfa36_transition65[] = [
    	299
    ];
    const static short PLSQL3_2_DParserdfa36_transition66[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition67[] = [
    	274
    ];
    const static short PLSQL3_2_DParserdfa36_transition68[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition69[] = [
    	340, -1, -1, -1, -1, -1, -1, 340, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 341
    ];
    const static short PLSQL3_2_DParserdfa36_transition70[] = [
    	338, -1, -1, -1, -1, -1, -1, 338, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 339
    ];
    const static short PLSQL3_2_DParserdfa36_transition71[] = [
    	336, -1, -1, -1, -1, -1, -1, 336, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337
    ];
    const static short PLSQL3_2_DParserdfa36_transition72[] = [
    	334, -1, -1, -1, -1, -1, -1, 334, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 335
    ];
    const static short PLSQL3_2_DParserdfa36_transition73[] = [
    	196
    ];
    const static short PLSQL3_2_DParserdfa36_transition74[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		58, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition75[] = [
    	110, -1, 110, -1, -1, 110, 110, -1, -1, -1, 110, 110, 110, 110, 110, 
    		110, -1, 110, -1, 110, -1, -1, 110, 110, -1, -1, 110, 110, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 
    		254, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		-1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition76[] = [
    	110, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 110, -1, 110, -1, 
    		-1, -1, -1, 214, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 110, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, 
    		110, -1, -1, -1, 110, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition77[] = [
    	7, -1, -1, -1, 240, -1, -1, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition78[] = [
    	132
    ];
    const static short PLSQL3_2_DParserdfa36_transition79[] = [
    	149, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, 170, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition80[] = [
    	319, -1, -1, -1, -1, -1, -1, 319, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320
    ];
    const static short PLSQL3_2_DParserdfa36_transition81[] = [
    	317, -1, -1, -1, -1, -1, -1, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 318
    ];
    const static short PLSQL3_2_DParserdfa36_transition82[] = [
    	315, -1, -1, -1, -1, -1, -1, 315, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 316
    ];
    const static short PLSQL3_2_DParserdfa36_transition83[] = [
    	313, -1, -1, -1, -1, -1, -1, 313, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 314
    ];
    const static short PLSQL3_2_DParserdfa36_transition84[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition85[] = [
    	305
    ];
    const static short PLSQL3_2_DParserdfa36_transition86[] = [
    	201
    ];
    const static short PLSQL3_2_DParserdfa36_transition87[] = [
    	240, -1, -1, -1, 239
    ];
    const static short PLSQL3_2_DParserdfa36_transition88[] = [
    	149, -1, 110, -1, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, 182, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, 110, 110, -1, -1, 
    		110, 110, 110, -1, -1, -1, -1, -1, 110, 110, 110, -1, -1, -1, -1, 
    		-1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 110, 
    		-1, -1, 110, -1, 110, 110, 110, 110, -1, -1, 139, -1, -1, -1, 110, 
    		110, 110, 110, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 
    		110, 110, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 110, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, -1, 110, 110, -1, -1, -1, 148
    ];
    const static short PLSQL3_2_DParserdfa36_transition89[] = [
    	223
    ];
    const static short PLSQL3_2_DParserdfa36_transition90[] = [
    	247, -1, -1, -1, 311
    ];
    const static short PLSQL3_2_DParserdfa36_transition91[] = [
    	281
    ];
    const static short PLSQL3_2_DParserdfa36_transition92[] = [
    	163, -1, -1, -1, -1, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition93[] = [
    	280
    ];
    const static short PLSQL3_2_DParserdfa36_transition94[] = [
    	200
    ];
    const static short PLSQL3_2_DParserdfa36_transition95[] = [
    	232
    ];
    const static short PLSQL3_2_DParserdfa36_transition96[] = [
    	131
    ];
    const static short PLSQL3_2_DParserdfa36_transition97[] = [
    	304, -1, -1, -1, 303
    ];
    const static short PLSQL3_2_DParserdfa36_transition98[] = [
    	140, -1, -1, -1, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition99[] = [
    	125
    ];
    const static short PLSQL3_2_DParserdfa36_transition100[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition101[] = [
    	222
    ];
    const static short PLSQL3_2_DParserdfa36_transition102[] = [
    	301, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition103[] = [
    	255
    ];
    const static short PLSQL3_2_DParserdfa36_transition104[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition105[] = [
    	240, -1, -1, -1, 308
    ];
    const static short PLSQL3_2_DParserdfa36_transition106[] = [
    	306
    ];
    const static short PLSQL3_2_DParserdfa36_transition107[] = [
    	202
    ];
    const static short PLSQL3_2_DParserdfa36_transition108[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ];
    const static short PLSQL3_2_DParserdfa36_transition109[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		67, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition110[] = [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition111[] = [
    	304, -1, -1, -1, 303, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition112[] = [
    	189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 190
    ];
    const static short PLSQL3_2_DParserdfa36_transition113[] = [
    	265, -1, -1, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 266
    ];
    const static short PLSQL3_2_DParserdfa36_transition114[] = [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition115[] = [
    	71, 71
    ];
    const static short PLSQL3_2_DParserdfa36_transition116[] = [
    	117, -1, -1, -1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 138
    ];
    const static short PLSQL3_2_DParserdfa36_transition117[] = [
    	75
    ];
    const static short PLSQL3_2_DParserdfa36_transition118[] = [
    	208
    ];
    const static short PLSQL3_2_DParserdfa36_transition119[] = [
    	140, -1, -1, -1, -1, 152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition120[] = [
    	234
    ];
    const static short PLSQL3_2_DParserdfa36_transition121[] = [
    	174
    ];
    const static short PLSQL3_2_DParserdfa36_transition122[] = [
    	297, -1, -1, -1, 296
    ];
    const static short PLSQL3_2_DParserdfa36_transition123[] = [
    	172
    ];
    const static short PLSQL3_2_DParserdfa36_transition124[] = [
    	197, -1, -1, -1, -1, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 198
    ];
    const static short PLSQL3_2_DParserdfa36_transition125[] = [
    	126
    ];
    const static short PLSQL3_2_DParserdfa36_transition126[] = [
    	133
    ];
    const static short PLSQL3_2_DParserdfa36_transition127[] = [
    	161, -1, -1, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition128[] = [
    	140, -1, -1, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition129[] = [
    	279
    ];
    const static short PLSQL3_2_DParserdfa36_transition130[] = [
    	269
    ];
    const static short PLSQL3_2_DParserdfa36_transition131[] = [
    	231
    ];
    const static short PLSQL3_2_DParserdfa36_transition132[] = [
    	7, -1, -1, -1, 242, -1, -1, -1, 241, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition133[] = [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 237, -1, 
    		140, -1, -1, -1, -1, 140, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 140, -1, -1, -1, -1, 110, -1, 110, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition134[] = [
    	301, -1, -1, -1, 332
    ];
    const static short PLSQL3_2_DParserdfa36_transition135[] = [
    	220
    ];
    const static short PLSQL3_2_DParserdfa36_transition136[] = [
    	301
    ];
    const static short PLSQL3_2_DParserdfa36_transition137[] = [
    	245
    ];
    const static short PLSQL3_2_DParserdfa36_transition138[] = [
    	203
    ];
    const static short PLSQL3_2_DParserdfa36_transition139[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition140[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		134, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition141[] = [
    	127
    ];
    const static short PLSQL3_2_DParserdfa36_transition142[] = [
    	175
    ];
    const static short PLSQL3_2_DParserdfa36_transition143[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition144[] = [
    	247
    ];
    const static short PLSQL3_2_DParserdfa36_transition145[] = [
    	140, -1, -1, -1, -1, 155, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition146[] = [
    	2, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    		4
    ];
    const static short PLSQL3_2_DParserdfa36_transition147[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition148[] = [
    	109, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, -1, 
    		-1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 105, 
    		-1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 102, 
    		80, -1, -1, -1, -1, -1, 83, 91, -1, -1, -1, -1, -1, 107, -1, -1, -1, 
    		-1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 94, 95
    ];
    const static short PLSQL3_2_DParserdfa36_transition149[] = [
    	140, -1, -1, -1, -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143
    ];
    const static short PLSQL3_2_DParserdfa36_transition150[] = [
    	140, -1, -1, -1, -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition151[] = [
    	140, -1, -1, -1, -1, 229, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition152[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition153[] = [
    	140, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition154[] = [
    	176
    ];
    const static short PLSQL3_2_DParserdfa36_transition155[] = [
    	270, -1, -1, -1, -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271
    ];
    const static short PLSQL3_2_DParserdfa36_transition156[] = [
    	140, -1, -1, -1, -1, 162, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition157[] = [
    	136
    ];
    const static short PLSQL3_2_DParserdfa36_transition158[] = [
    	42, -1, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, -1, 7, 7, 7, -1, -1, -1, 7, 
    		-1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 42, -1, -1, -1, 
    		-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, 
    		-1, -1, -1, 7, -1, -1, 7, -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    		7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    		-1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 7, -1, 7, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition159[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition160[] = [
    	149, -1, 110, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, 147, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 150, -1, 141, -1, -1, 151, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, 110, 110, -1, -1, 
    		110, 110, 110, -1, -1, -1, -1, -1, 110, 110, 110, -1, -1, -1, -1, 
    		-1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 110, 
    		-1, -1, 110, -1, 110, 110, 110, 110, -1, -1, 139, -1, -1, -1, 110, 
    		110, 110, 110, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, 
    		110, 110, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 110, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 110, -1, 110, 110, -1, -1, -1, 148
    ];
    const static short PLSQL3_2_DParserdfa36_transition161[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition162[] = [
    	244
    ];
    const static short PLSQL3_2_DParserdfa36_transition163[] = [
    	221
    ];
    const static short PLSQL3_2_DParserdfa36_transition164[] = [
    	242
    ];
    const static short PLSQL3_2_DParserdfa36_transition165[] = [
    	140, -1, -1, -1, -1, 294, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition166[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    		49, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 7, -1, -1, 
    		54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    ];
    const static short PLSQL3_2_DParserdfa36_transition167[] = [
    	259
    ];
    const static short PLSQL3_2_DParserdfa36_transition168[] = [
    	178
    ];
    const static short PLSQL3_2_DParserdfa36_transition169[] = [
    	171, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 172
    ];
    const static short PLSQL3_2_DParserdfa36_transition170[] = [
    	119, -1, -1, -1, -1, -1, -1, 119
    ];
    const static short PLSQL3_2_DParserdfa36_transition171[] = [
    	290, -1, -1, -1, -1, -1, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 291
    ];
    const static short PLSQL3_2_DParserdfa36_transition172[] = [
    	288, -1, -1, -1, -1, -1, -1, 288, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 289
    ];
    const static short PLSQL3_2_DParserdfa36_transition173[] = [
    	286, -1, -1, -1, -1, -1, -1, 286, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 287
    ];
    const static short PLSQL3_2_DParserdfa36_transition174[] = [
    	284, -1, -1, -1, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 285
    ];
    const static short PLSQL3_2_DParserdfa36_transition175[] = [
    	118
    ];
    const static short PLSQL3_2_DParserdfa36_transition176[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46
    ];
    const static short PLSQL3_2_DParserdfa36_transition177[] = [
    	276
    ];
    const static short PLSQL3_2_DParserdfa36_transition178[] = [
    	140, -1, -1, -1, -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition179[] = [
    	167, 167
    ];
    const static short PLSQL3_2_DParserdfa36_transition180[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition181[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition182[] = [
    	128
    ];
    const static short PLSQL3_2_DParserdfa36_transition183[] = [
    	110, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 212, -1, 
    		140, -1, -1, -1, -1, 140, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 140, -1, -1, -1, -1, 110, -1, 110, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition184[] = [
    	297, -1, -1, -1, 296, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition185[] = [
    	210
    ];
    const static short PLSQL3_2_DParserdfa36_transition186[] = [
    	248, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 249
    ];
    const static short PLSQL3_2_DParserdfa36_transition187[] = [
    	250
    ];
    const static short PLSQL3_2_DParserdfa36_transition188[] = [
    	111
    ];
    const static short PLSQL3_2_DParserdfa36_transition189[] = [
    	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition190[] = [
    	215
    ];
    const static short PLSQL3_2_DParserdfa36_transition191[] = [
    	327, -1, -1, -1, -1, -1, -1, 327, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328
    ];
    const static short PLSQL3_2_DParserdfa36_transition192[] = [
    	325, -1, -1, -1, -1, -1, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 326
    ];
    const static short PLSQL3_2_DParserdfa36_transition193[] = [
    	323, -1, -1, -1, -1, -1, -1, 323, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324
    ];
    const static short PLSQL3_2_DParserdfa36_transition194[] = [
    	321, -1, -1, -1, -1, -1, -1, 321, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 322
    ];
    const static short PLSQL3_2_DParserdfa36_transition195[] = [
    	154, -1, -1, -1, -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition196[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		65, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition197[] = [
    	262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 263
    ];
    const static short PLSQL3_2_DParserdfa36_transition198[] = [
    	204, -1, -1, -1, -1, -1, -1, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205
    ];
    const static short PLSQL3_2_DParserdfa36_transition199[] = [
    	7, -1, -1, -1, 244, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition200[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition201[] = [
    	228, -1, -1, -1, -1, 229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition202[] = [
    	301, -1, -1, -1, 300
    ];
    const static short PLSQL3_2_DParserdfa36_transition203[] = [
    	302
    ];
    const static short PLSQL3_2_DParserdfa36_transition204[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition205[] = [
    	217
    ];
    const static short PLSQL3_2_DParserdfa36_transition206[] = [
    	244, -1, -1, -1, 243
    ];
    const static short PLSQL3_2_DParserdfa36_transition207[] = [
    	256
    ];
    const static short PLSQL3_2_DParserdfa36_transition208[] = [
    	114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115
    ];
    const static short PLSQL3_2_DParserdfa36_transition209[] = [
    	219
    ];
    const static short PLSQL3_2_DParserdfa36_transition210[] = [
    	129
    ];
    const static short PLSQL3_2_DParserdfa36_transition211[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition212[] = [
    	230
    ];
    const static short PLSQL3_2_DParserdfa36_transition213[] = [
    	140, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, 140, -1, 140, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, 141, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition214[] = [
    	295, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    ];
    const static short PLSQL3_2_DParserdfa36_transition215[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition216[] = [
    	137
    ];
    const static short PLSQL3_2_DParserdfa36_transition217[] = [
    	109, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1, 110, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 106, 78, 77, 76, 103, 84, -1, -1, 93, 96, 104, -1, 
    		-1, -1, -1, -1, 85, 81, 81, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 88, 87, -1, -1, -1, -1, -1, 82, -1, -1, 101, -1, 100, 79, 97, 
    		105, -1, -1, -1, -1, -1, -1, 81, 81, 98, 99, -1, -1, -1, -1, -1, -1, 
    		102, 80, -1, -1, -1, -1, -1, 83, 91, 122, -1, -1, -1, -1, 107, -1, 
    		-1, -1, -1, -1, 89, -1, -1, 120, -1, -1, -1, -1, -1, -1, 108, -1, 
    		94, 95
    ];
    const static short PLSQL3_2_DParserdfa36_transition218[] = [
    	216, -1, -1, -1, -1, -1, -1, 216
    ];
    const static short PLSQL3_2_DParserdfa36_transition219[] = [
    	206
    ];
    const static short PLSQL3_2_DParserdfa36_transition220[] = [
    	7, -1, -1, -1, 247, -1, -1, -1, 246, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition221[] = [
    	209
    ];
    const static short PLSQL3_2_DParserdfa36_transition222[] = [
    	42, -1, 41, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 38, 10, 9, 8, 35, 16, -1, -1, 25, 28, 36, -1, 
    		-1, -1, 7, -1, 17, 13, 13, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 
    		42, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, 20, 19, -1, -1, -1, -1, -1, 14, -1, -1, 33, -1, 32, 11, 29, 37, 
    		-1, -1, -1, -1, -1, -1, 13, 13, 30, 31, -1, -1, -1, -1, -1, -1, 34, 
    		12, -1, -1, -1, -1, -1, 15, 23, -1, -1, -1, -1, -1, 39, -1, -1, -1, 
    		-1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 27
    ];
    const static short PLSQL3_2_DParserdfa36_transition223[] = [
    	110, -1, 110, -1, -1, 110, 110, -1, -1, -1, 110, 110, 110, 110, 110, 
    		110, -1, 110, -1, 110, -1, -1, 110, 110, -1, -1, 110, 110, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 
    		283, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    		-1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition224[] = [
    	57
    ];
    const static short PLSQL3_2_DParserdfa36_transition225[] = [
    	117, -1, -1, -1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 116
    ];
    const static short PLSQL3_2_DParserdfa36_transition226[] = [
    	194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 195
    ];
    const static short PLSQL3_2_DParserdfa36_transition227[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition228[] = [
    	292
    ];
    const static short PLSQL3_2_DParserdfa36_transition229[] = [
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    ];
    const static short PLSQL3_2_DParserdfa36_transition230[] = [
    	267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 269, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 268
    ];
    const static short PLSQL3_2_DParserdfa36_transition231[] = [
    	110, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 110, -1, 110, -1, 
    		-1, -1, -1, 238, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    		-1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, 110, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, 
    		110, -1, -1, -1, 110, -1, -1, -1, -1, 110
    ];
    const static short PLSQL3_2_DParserdfa36_transition232[] = [
    	249
    ];
    const static short PLSQL3_2_DParserdfa36_transition233[] = [
    	218
    ];
    const static short PLSQL3_2_DParserdfa36_transition234[] = [
    	115
    ];
    const static short PLSQL3_2_DParserdfa36_transition235[] = [
    	247, -1, -1, -1, 246
    ];
    const static short PLSQL3_2_DParserdfa36_transition236[] = [
    	184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, 185
    ];

    const static short DFA36_transition[][] = [
    	PLSQL3_2_DParserdfa36_transition146,
    	PLSQL3_2_DParserdfa36_transition222,
    	PLSQL3_2_DParserdfa36_transition158,
    	PLSQL3_2_DParserdfa36_transition56,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition100,
    	PLSQL3_2_DParserdfa36_transition176,
    	PLSQL3_2_DParserdfa36_transition227,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition166,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition200,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition224,
    	PLSQL3_2_DParserdfa36_transition74,
    	PLSQL3_2_DParserdfa36_transition42,
    	PLSQL3_2_DParserdfa36_transition21,
    	PLSQL3_2_DParserdfa36_transition196,
    	PLSQL3_2_DParserdfa36_transition109,
    	PLSQL3_2_DParserdfa36_transition104,
    	PLSQL3_2_DParserdfa36_transition204,
    	PLSQL3_2_DParserdfa36_transition115,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition161,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition180,
    	PLSQL3_2_DParserdfa36_transition159,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition117,
    	PLSQL3_2_DParserdfa36_transition148,
    	PLSQL3_2_DParserdfa36_transition188,
    	PLSQL3_2_DParserdfa36_transition33,
    	PLSQL3_2_DParserdfa36_transition27,
    	PLSQL3_2_DParserdfa36_transition17,
    	PLSQL3_2_DParserdfa36_transition208,
    	PLSQL3_2_DParserdfa36_transition225,
    	PLSQL3_2_DParserdfa36_transition175,
    	PLSQL3_2_DParserdfa36_transition170,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition41,
    	PLSQL3_2_DParserdfa36_transition10,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition211,
    	PLSQL3_2_DParserdfa36_transition58,
    	PLSQL3_2_DParserdfa36_transition99,
    	PLSQL3_2_DParserdfa36_transition125,
    	PLSQL3_2_DParserdfa36_transition141,
    	PLSQL3_2_DParserdfa36_transition182,
    	PLSQL3_2_DParserdfa36_transition210,
    	PLSQL3_2_DParserdfa36_transition152,
    	PLSQL3_2_DParserdfa36_transition15,
    	PLSQL3_2_DParserdfa36_transition147,
    	PLSQL3_2_DParserdfa36_transition96,
    	PLSQL3_2_DParserdfa36_transition78,
    	PLSQL3_2_DParserdfa36_transition126,
    	PLSQL3_2_DParserdfa36_transition140,
    	PLSQL3_2_DParserdfa36_transition157,
    	PLSQL3_2_DParserdfa36_transition216,
    	PLSQL3_2_DParserdfa36_transition116,
    	PLSQL3_2_DParserdfa36_transition34,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition153,
    	PLSQL3_2_DParserdfa36_transition149,
    	PLSQL3_2_DParserdfa36_transition98,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition160,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition119,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition52,
    	PLSQL3_2_DParserdfa36_transition195,
    	PLSQL3_2_DParserdfa36_transition150,
    	PLSQL3_2_DParserdfa36_transition6,
    	PLSQL3_2_DParserdfa36_transition127,
    	PLSQL3_2_DParserdfa36_transition92,
    	PLSQL3_2_DParserdfa36_transition128,
    	PLSQL3_2_DParserdfa36_transition36,
    	PLSQL3_2_DParserdfa36_transition179,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition189,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition20,
    	PLSQL3_2_DParserdfa36_transition79,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition169,
    	PLSQL3_2_DParserdfa36_transition29,
    	PLSQL3_2_DParserdfa36_transition121,
    	PLSQL3_2_DParserdfa36_transition142,
    	PLSQL3_2_DParserdfa36_transition154,
    	PLSQL3_2_DParserdfa36_transition59,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition168,
    	PLSQL3_2_DParserdfa36_transition139,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition88,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition3,
    	PLSQL3_2_DParserdfa36_transition236,
    	PLSQL3_2_DParserdfa36_transition49,
    	PLSQL3_2_DParserdfa36_transition112,
    	PLSQL3_2_DParserdfa36_transition30,
    	PLSQL3_2_DParserdfa36_transition226,
    	PLSQL3_2_DParserdfa36_transition124,
    	PLSQL3_2_DParserdfa36_transition60,
    	PLSQL3_2_DParserdfa36_transition94,
    	PLSQL3_2_DParserdfa36_transition86,
    	PLSQL3_2_DParserdfa36_transition107,
    	PLSQL3_2_DParserdfa36_transition43,
    	PLSQL3_2_DParserdfa36_transition138,
    	PLSQL3_2_DParserdfa36_transition198,
    	PLSQL3_2_DParserdfa36_transition219,
    	PLSQL3_2_DParserdfa36_transition54,
    	PLSQL3_2_DParserdfa36_transition118,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition61,
    	PLSQL3_2_DParserdfa36_transition221,
    	PLSQL3_2_DParserdfa36_transition178,
    	PLSQL3_2_DParserdfa36_transition185,
    	PLSQL3_2_DParserdfa36_transition47,
    	PLSQL3_2_DParserdfa36_transition183,
    	PLSQL3_2_DParserdfa36_transition76,
    	PLSQL3_2_DParserdfa36_transition190,
    	PLSQL3_2_DParserdfa36_transition218,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition205,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition145,
    	PLSQL3_2_DParserdfa36_transition233,
    	PLSQL3_2_DParserdfa36_transition209,
    	PLSQL3_2_DParserdfa36_transition135,
    	PLSQL3_2_DParserdfa36_transition163,
    	PLSQL3_2_DParserdfa36_transition101,
    	PLSQL3_2_DParserdfa36_transition89,
    	PLSQL3_2_DParserdfa36_transition156,
    	PLSQL3_2_DParserdfa36_transition22,
    	PLSQL3_2_DParserdfa36_transition62,
    	PLSQL3_2_DParserdfa36_transition2,
    	PLSQL3_2_DParserdfa36_transition51,
    	PLSQL3_2_DParserdfa36_transition37,
    	PLSQL3_2_DParserdfa36_transition201,
    	PLSQL3_2_DParserdfa36_transition212,
    	PLSQL3_2_DParserdfa36_transition131,
    	PLSQL3_2_DParserdfa36_transition95,
    	PLSQL3_2_DParserdfa36_transition50,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition120,
    	PLSQL3_2_DParserdfa36_transition143,
    	PLSQL3_2_DParserdfa36_transition108,
    	PLSQL3_2_DParserdfa36_transition68,
    	PLSQL3_2_DParserdfa36_transition64,
    	PLSQL3_2_DParserdfa36_transition217,
    	PLSQL3_2_DParserdfa36_transition133,
    	PLSQL3_2_DParserdfa36_transition231,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition13,
    	PLSQL3_2_DParserdfa36_transition13,
    	PLSQL3_2_DParserdfa36_transition19,
    	PLSQL3_2_DParserdfa36_transition77,
    	PLSQL3_2_DParserdfa36_transition87,
    	PLSQL3_2_DParserdfa36_transition1,
    	PLSQL3_2_DParserdfa36_transition1,
    	PLSQL3_2_DParserdfa36_transition215,
    	PLSQL3_2_DParserdfa36_transition132,
    	PLSQL3_2_DParserdfa36_transition12,
    	PLSQL3_2_DParserdfa36_transition73,
    	PLSQL3_2_DParserdfa36_transition73,
    	PLSQL3_2_DParserdfa36_transition229,
    	PLSQL3_2_DParserdfa36_transition199,
    	PLSQL3_2_DParserdfa36_transition206,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition137,
    	PLSQL3_2_DParserdfa36_transition220,
    	PLSQL3_2_DParserdfa36_transition235,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition23,
    	PLSQL3_2_DParserdfa36_transition186,
    	PLSQL3_2_DParserdfa36_transition187,
    	PLSQL3_2_DParserdfa36_transition44,
    	PLSQL3_2_DParserdfa36_transition9,
    	PLSQL3_2_DParserdfa36_transition40,
    	PLSQL3_2_DParserdfa36_transition75,
    	PLSQL3_2_DParserdfa36_transition103,
    	PLSQL3_2_DParserdfa36_transition79,
    	PLSQL3_2_DParserdfa36_transition207,
    	PLSQL3_2_DParserdfa36_transition39,
    	PLSQL3_2_DParserdfa36_transition53,
    	PLSQL3_2_DParserdfa36_transition197,
    	PLSQL3_2_DParserdfa36_transition113,
    	PLSQL3_2_DParserdfa36_transition230,
    	PLSQL3_2_DParserdfa36_transition155,
    	PLSQL3_2_DParserdfa36_transition25,
    	PLSQL3_2_DParserdfa36_transition16,
    	PLSQL3_2_DParserdfa36_transition67,
    	PLSQL3_2_DParserdfa36_transition35,
    	PLSQL3_2_DParserdfa36_transition151,
    	PLSQL3_2_DParserdfa36_transition177,
    	PLSQL3_2_DParserdfa36_transition46,
    	PLSQL3_2_DParserdfa36_transition129,
    	PLSQL3_2_DParserdfa36_transition93,
    	PLSQL3_2_DParserdfa36_transition123,
    	PLSQL3_2_DParserdfa36_transition234,
    	PLSQL3_2_DParserdfa36_transition91,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition55,
    	PLSQL3_2_DParserdfa36_transition223,
    	PLSQL3_2_DParserdfa36_transition174,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition173,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition172,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition171,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition228,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition26,
    	PLSQL3_2_DParserdfa36_transition165,
    	PLSQL3_2_DParserdfa36_transition45,
    	PLSQL3_2_DParserdfa36_transition214,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition167,
    	PLSQL3_2_DParserdfa36_transition167,
    	PLSQL3_2_DParserdfa36_transition181,
    	PLSQL3_2_DParserdfa36_transition184,
    	PLSQL3_2_DParserdfa36_transition122,
    	PLSQL3_2_DParserdfa36_transition5,
    	PLSQL3_2_DParserdfa36_transition5,
    	PLSQL3_2_DParserdfa36_transition84,
    	PLSQL3_2_DParserdfa36_transition11,
    	PLSQL3_2_DParserdfa36_transition0,
    	PLSQL3_2_DParserdfa36_transition130,
    	PLSQL3_2_DParserdfa36_transition130,
    	PLSQL3_2_DParserdfa36_transition66,
    	PLSQL3_2_DParserdfa36_transition102,
    	PLSQL3_2_DParserdfa36_transition202,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition203,
    	PLSQL3_2_DParserdfa36_transition111,
    	PLSQL3_2_DParserdfa36_transition97,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition85,
    	PLSQL3_2_DParserdfa36_transition106,
    	PLSQL3_2_DParserdfa36_transition48,
    	PLSQL3_2_DParserdfa36_transition105,
    	PLSQL3_2_DParserdfa36_transition105,
    	PLSQL3_2_DParserdfa36_transition24,
    	PLSQL3_2_DParserdfa36_transition24,
    	PLSQL3_2_DParserdfa36_transition31,
    	PLSQL3_2_DParserdfa36_transition31,
    	PLSQL3_2_DParserdfa36_transition90,
    	PLSQL3_2_DParserdfa36_transition90,
    	PLSQL3_2_DParserdfa36_transition232,
    	PLSQL3_2_DParserdfa36_transition114,
    	PLSQL3_2_DParserdfa36_transition4,
    	PLSQL3_2_DParserdfa36_transition213,
    	PLSQL3_2_DParserdfa36_transition83,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition82,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition81,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition80,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition8,
    	PLSQL3_2_DParserdfa36_transition110,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa36_transition194,
    	PLSQL3_2_DParserdfa36_transition193,
    	PLSQL3_2_DParserdfa36_transition192,
    	PLSQL3_2_DParserdfa36_transition191,
    	PLSQL3_2_DParserdfa36_transition7,
    	PLSQL3_2_DParserdfa36_transition32,
    	PLSQL3_2_DParserdfa36_transition32,
    	PLSQL3_2_DParserdfa36_transition38,
    	PLSQL3_2_DParserdfa36_transition38,
    	PLSQL3_2_DParserdfa36_transition134,
    	PLSQL3_2_DParserdfa36_transition134,
    	PLSQL3_2_DParserdfa36_transition63,
    	PLSQL3_2_DParserdfa36_transition63,
    	PLSQL3_2_DParserdfa36_transition18,
    	PLSQL3_2_DParserdfa36_transition18,
    	PLSQL3_2_DParserdfa36_transition164,
    	PLSQL3_2_DParserdfa36_transition164,
    	PLSQL3_2_DParserdfa36_transition162,
    	PLSQL3_2_DParserdfa36_transition162,
    	PLSQL3_2_DParserdfa36_transition144,
    	PLSQL3_2_DParserdfa36_transition144,
    	PLSQL3_2_DParserdfa36_transition14,
    	PLSQL3_2_DParserdfa36_transition72,
    	PLSQL3_2_DParserdfa36_transition71,
    	PLSQL3_2_DParserdfa36_transition70,
    	PLSQL3_2_DParserdfa36_transition69,
    	PLSQL3_2_DParserdfa36_transition57,
    	PLSQL3_2_DParserdfa36_transition57,
    	PLSQL3_2_DParserdfa36_transition65,
    	PLSQL3_2_DParserdfa36_transition65,
    	PLSQL3_2_DParserdfa36_transition136,
    	PLSQL3_2_DParserdfa36_transition136,
    	PLSQL3_2_DParserdfa36_transition28,
    	PLSQL3_2_DParserdfa36_transition28,
    ];







    /*static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;
    */
    /*static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }*/

    class DFA36 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = cast(short[])DFA36_eot;
            this.eof = cast(short[])DFA36_eof;
            this.min = cast(int[])DFA36_min;
            this.max = cast(int[])DFA36_max;
            this.accept = cast(short[])DFA36_accept;
            this.special = cast(short[])DFA36_special;
            this.transition = cast(short[][])DFA36_transition;
        }
        public string getDescription() {
            return "524:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_141 = input.LA(1);

                         
                        int index36_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((toUpper(input.LT(1).getText)== "SUBTYPE")&&(toUpper(input.LT(1).getText)== "SUBTYPE"))&&synpred81_PLSQL3_2_D())) ) {s = 140;}

                        else if ( ((((toUpper(input.LT(1).getText)== "TYPE")&&(toUpper(input.LT(1).getText)== "TYPE"))&&synpred89_PLSQL3_2_D())) ) {s = 110;}

                         
                        input.seek(index36_141);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA39_eot[33] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA39_eof[33] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA39_min[33] = [
    	22,27,15,-1,-1,-1,11,11,34,11,15,-1,0,15,15,34,11,11,11,-1,-1,-1,-1,
    	     -1,34,11,11,34,11,11,11,0,0
    ];
    const static int DFA39_max[33] = [
    	22,27,90,-1,-1,-1,52,52,34,52,46,-1,0,46,46,34,52,52,52,-1,-1,-1,-1,
    	     -1,34,52,52,34,52,52,52,0,0
    ];
    const static short DFA39_accept[33] = [
    	-1,-1,-1,3,4,1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,5,6,7,8,9,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA39_special[33] = [
    	-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,3,1
    ];

    /*const static short DFA39_transition[][]=[
     [
    	18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 24, -1, -1, 
    		-1, -1, 25, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26
    ],
     [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 32
    ],
     [
    	28
    ],
     [
    	9
    ],
     [
    	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ],
     [
    	30, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, 27, -1, -1, 
    		-1, -1, 28, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29
    ],
     [
    	16
    ],
     [
    	-1
    ],
     [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 31
    ],
     [
    	1
    ],
     [
    	2
    ],
     [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ],
     [
    	6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 
    		-1, 9, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 5
    ],
     [
    	25
    ],
     [
    	10, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ],
     [
    	18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 15, -1, -1, 
    		-1, -1, 16, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa39_transition0[] = [
    	18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 24, -1, -1, 
    		-1, -1, 25, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26
    ];
    const static short PLSQL3_2_DParserdfa39_transition1[] = [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 32
    ];
    const static short PLSQL3_2_DParserdfa39_transition2[] = [
    	28
    ];
    const static short PLSQL3_2_DParserdfa39_transition3[] = [
    	9
    ];
    const static short PLSQL3_2_DParserdfa39_transition4[] = [
    	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ];
    const static short PLSQL3_2_DParserdfa39_transition5[] = [
    	30, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, 27, -1, -1, 
    		-1, -1, 28, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29
    ];
    const static short PLSQL3_2_DParserdfa39_transition6[] = [
    	16
    ];
    const static short PLSQL3_2_DParserdfa39_transition7[] = [
    	-1
    ];
    const static short PLSQL3_2_DParserdfa39_transition8[] = [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 31
    ];
    const static short PLSQL3_2_DParserdfa39_transition9[] = [
    	1
    ];
    const static short PLSQL3_2_DParserdfa39_transition10[] = [
    	2
    ];
    const static short PLSQL3_2_DParserdfa39_transition11[] = [
    	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ];
    const static short PLSQL3_2_DParserdfa39_transition12[] = [
    	6, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 
    		-1, 9, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, 5
    ];
    const static short PLSQL3_2_DParserdfa39_transition13[] = [
    	25
    ];
    const static short PLSQL3_2_DParserdfa39_transition14[] = [
    	10, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		-1, -1, -1, -1, -1, -1, -1, 12
    ];
    const static short PLSQL3_2_DParserdfa39_transition15[] = [
    	18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 15, -1, -1, 
    		-1, -1, 16, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17
    ];

    const static short DFA39_transition[][] = [
    	PLSQL3_2_DParserdfa39_transition9,
    	PLSQL3_2_DParserdfa39_transition10,
    	PLSQL3_2_DParserdfa39_transition12,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa39_transition14,
    	PLSQL3_2_DParserdfa39_transition11,
    	PLSQL3_2_DParserdfa39_transition3,
    	PLSQL3_2_DParserdfa39_transition4,
    	PLSQL3_2_DParserdfa39_transition15,
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa39_transition7,
    	PLSQL3_2_DParserdfa39_transition0,
    	PLSQL3_2_DParserdfa39_transition5,
    	PLSQL3_2_DParserdfa39_transition6,
    	PLSQL3_2_DParserdfa39_transition8,
    	PLSQL3_2_DParserdfa39_transition8,
    	PLSQL3_2_DParserdfa39_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa39_transition13,
    	PLSQL3_2_DParserdfa39_transition1,
    	PLSQL3_2_DParserdfa39_transition1,
    	PLSQL3_2_DParserdfa39_transition2,
    	PLSQL3_2_DParserdfa39_transition4,
    	PLSQL3_2_DParserdfa39_transition4,
    	PLSQL3_2_DParserdfa39_transition4,
    	PLSQL3_2_DParserdfa39_transition7,
    	PLSQL3_2_DParserdfa39_transition7,
    ];







    /*static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;
    */
    /*static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }*/

    class DFA39 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = cast(short[])DFA39_eot;
            this.eof = cast(short[])DFA39_eof;
            this.min = cast(int[])DFA39_min;
            this.max = cast(int[])DFA39_max;
            this.accept = cast(short[])DFA39_accept;
            this.special = cast(short[])DFA39_special;
            this.transition = cast(short[][])DFA39_transition;
        }
        public string getDescription() {
            return "540:3: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((toUpper(input.LT(1).getText)== "BUILTIN")&&(toUpper(input.LT(1).getText)== "BUILTIN"))&&synpred96_PLSQL3_2_D())) ) {s = 19;}

                        else if ( ((((toUpper(input.LT(1).getText)== "FIPSFLAG")&&(toUpper(input.LT(1).getText)== "FIPSFLAG"))&&synpred97_PLSQL3_2_D())) ) {s = 20;}

                        else if ( ((((toUpper(input.LT(1).getText)== "INTERFACE")&&(toUpper(input.LT(1).getText)== "INTERFACE"))&&synpred98_PLSQL3_2_D())) ) {s = 21;}

                        else if ( ((((toUpper(input.LT(1).getText)== "NEW_NAMES")&&(toUpper(input.LT(1).getText)== "NEW_NAMES"))&&synpred99_PLSQL3_2_D())) ) {s = 22;}

                        else if ( ((toUpper(input.LT(1).getText)== "TIMESTAMP")) ) {s = 23;}

                         
                        input.seek(index39_12);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((toUpper(input.LT(1).getText)== "RESTRICT_REFERENCES")&&(toUpper(input.LT(1).getText)== "RESTRICT_REFERENCES"))&&synpred92_PLSQL3_2_D())) ) {s = 5;}

                        else if ( ((((toUpper(input.LT(1).getText)== "BUILTIN")&&(toUpper(input.LT(1).getText)== "BUILTIN"))&&synpred96_PLSQL3_2_D())) ) {s = 19;}

                        else if ( ((((toUpper(input.LT(1).getText)== "FIPSFLAG")&&(toUpper(input.LT(1).getText)== "FIPSFLAG"))&&synpred97_PLSQL3_2_D())) ) {s = 20;}

                        else if ( ((((toUpper(input.LT(1).getText)== "INTERFACE")&&(toUpper(input.LT(1).getText)== "INTERFACE"))&&synpred98_PLSQL3_2_D())) ) {s = 21;}

                        else if ( ((((toUpper(input.LT(1).getText)== "NEW_NAMES")&&(toUpper(input.LT(1).getText)== "NEW_NAMES"))&&synpred99_PLSQL3_2_D())) ) {s = 22;}

                        else if ( ((toUpper(input.LT(1).getText)== "TIMESTAMP")) ) {s = 23;}

                         
                        input.seek(index39_32);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA39_1==LPAREN) ) {s = 2;}

                        else if ( (((synpred94_PLSQL3_2_D()&&synpred94_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "AUTONOMOUS_TRANSACTION"))) ) {s = 3;}

                        else if ( ((((toUpper(input.LT(1).getText)== "SERIALLY_REUSABLE")&&(toUpper(input.LT(1).getText)== "SERIALLY_REUSABLE"))&&synpred95_PLSQL3_2_D())) ) {s = 4;}

                         
                        input.seek(index39_1);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((toUpper(input.LT(1).getText)== "RESTRICT_REFERENCES")&&(toUpper(input.LT(1).getText)== "RESTRICT_REFERENCES"))&&synpred92_PLSQL3_2_D())) ) {s = 5;}

                        else if ( ((((toUpper(input.LT(1).getText)== "EXCEPTION_INIT")&&(toUpper(input.LT(1).getText)== "EXCEPTION_INIT"))&&synpred93_PLSQL3_2_D())) ) {s = 11;}

                        else if ( ((((toUpper(input.LT(1).getText)== "BUILTIN")&&(toUpper(input.LT(1).getText)== "BUILTIN"))&&synpred96_PLSQL3_2_D())) ) {s = 19;}

                        else if ( ((((toUpper(input.LT(1).getText)== "FIPSFLAG")&&(toUpper(input.LT(1).getText)== "FIPSFLAG"))&&synpred97_PLSQL3_2_D())) ) {s = 20;}

                        else if ( ((((toUpper(input.LT(1).getText)== "INTERFACE")&&(toUpper(input.LT(1).getText)== "INTERFACE"))&&synpred98_PLSQL3_2_D())) ) {s = 21;}

                        else if ( ((((toUpper(input.LT(1).getText)== "NEW_NAMES")&&(toUpper(input.LT(1).getText)== "NEW_NAMES"))&&synpred99_PLSQL3_2_D())) ) {s = 22;}

                        else if ( ((toUpper(input.LT(1).getText)== "TIMESTAMP")) ) {s = 23;}

                         
                        input.seek(index39_31);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA133_eot[64] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA133_eof[64] = [
    	2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA133_min[64] = [
    	6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA133_max[64] = [
    	183,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA133_accept[64] = [
    	-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1
    ];
    const static short DFA133_special[64] = [
    	-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA133_transition[][]=[
     [
    	2, -1, 2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 
    		1, 2, 2, -1, -1, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, 2, -1, 2, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
    		2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 2, 
    		2, -1, -1, -1, -1, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 
    		2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, 2, -1, 2, 
    		2, -1, -1, -1, -1, -1, -1, 2, 2
    ],
     [
    	-1
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa133_transition0[] = [
    	2, -1, 2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 
    		1, 2, 2, -1, -1, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, 2, -1, 2, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
    		2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 2, 
    		2, -1, -1, -1, -1, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 
    		2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, 2, -1, 2, 
    		2, -1, -1, -1, -1, -1, -1, 2, 2
    ];
    const static short PLSQL3_2_DParserdfa133_transition1[] = [
    	-1
    ];

    const static short DFA133_transition[][] = [
    	PLSQL3_2_DParserdfa133_transition0,
    	PLSQL3_2_DParserdfa133_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;
    */
    /*static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }*/

    class DFA133 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = cast(short[])DFA133_eot;
            this.eof = cast(short[])DFA133_eof;
            this.min = cast(int[])DFA133_min;
            this.max = cast(int[])DFA133_max;
            this.accept = cast(short[])DFA133_accept;
            this.special = cast(short[])DFA133_special;
            this.transition = cast(short[][])DFA133_transition;
        }
        public string getDescription() {
            return "856:26: ({...}? LPAREN ( call_parameters )? RPAREN )?";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )&&( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ))&&synpred251_PLSQL3_2_D())) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_1);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA166_eot[64] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA166_eof[64] = [
    	1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA166_min[64] = [
    	6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA166_max[64] = [
    	183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA166_accept[64] = [
    	-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1
    ];
    const static short DFA166_special[64] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA166_transition[][]=[
     [
    	1, -1, 1, -1, -1, 34, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 
    		1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 
    		1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 
    		1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 
    		1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 
    		-1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
    		-1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 
    		1, -1, -1, -1, 1, -1, -1, 1, 1
    ],
     [
    	-1
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa166_transition0[] = [
    	1, -1, 1, -1, -1, 34, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 
    		1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 
    		1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 
    		1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 
    		1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 
    		-1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
    		-1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 
    		1, -1, -1, -1, 1, -1, -1, 1, 1
    ];
    const static short PLSQL3_2_DParserdfa166_transition1[] = [
    	-1
    ];

    const static short DFA166_transition[][] = [
    	PLSQL3_2_DParserdfa166_transition0,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	PLSQL3_2_DParserdfa166_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;
    */
    /*static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }*/

    class DFA166 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = cast(short[])DFA166_eot;
            this.eof = cast(short[])DFA166_eof;
            this.min = cast(int[])DFA166_min;
            this.max = cast(int[])DFA166_max;
            this.accept = cast(short[])DFA166_accept;
            this.special = cast(short[])DFA166_special;
            this.transition = cast(short[][])DFA166_transition;
        }
        public string getDescription() {
            return "()* loopback of 1012:19: ( COMMA selected_table )*";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_34 = input.LA(1);

                         
                        int index166_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred298_PLSQL3_2_D()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index166_34);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }

    }


    const static short DFA175_eot[63] = [
    	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA175_eof[63] = [
    	2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA175_min[63] = [
    	6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static int DFA175_max[63] = [
    	183,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];
    const static short DFA175_accept[63] = [
    	-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1
    ];
    const static short DFA175_special[63] = [
    	-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    	     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    ];

    /*const static short DFA175_transition[][]=[
     [
    	2, -1, 2, -1, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, -1, 2, -1, 
    		2, 2, 2, -1, -1, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, 2, -1, 2, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
    		2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 2, 
    		2, -1, -1, -1, -1, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 
    		2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, 2, -1, 2, 
    		2, -1, -1, -1, -1, -1, -1, 2, 2
    ],
     [
    	-1
    ],

    []];*/

    const static short PLSQL3_2_DParserdfa175_transition0[] = [
    	2, -1, 2, -1, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, -1, 2, -1, 
    		2, 2, 2, -1, -1, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    		2, -1, 2, -1, 2, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
    		2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 
    		-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 2, 
    		2, -1, -1, -1, -1, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 
    		2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, 
    		-1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
    		-1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, -1, 2, -1, 2, 
    		2, -1, -1, -1, -1, -1, -1, 2, 2
    ];
    const static short PLSQL3_2_DParserdfa175_transition1[] = [
    	-1
    ];

    const static short DFA175_transition[][] = [
    	PLSQL3_2_DParserdfa175_transition0,
    	PLSQL3_2_DParserdfa175_transition1,
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    	null, /* fixme? */
    ];







    /*static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;
    */
    /*static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }*/

    class DFA175 : DFA {

        public this(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = cast(short[])DFA175_eot;
            this.eof = cast(short[])DFA175_eof;
            this.min = cast(int[])DFA175_min;
            this.max = cast(int[])DFA175_max;
            this.accept = cast(short[])DFA175_accept;
            this.special = cast(short[])DFA175_special;
            this.transition = cast(short[][])DFA175_transition;
        }
        public string getDescription() {
            return "1027:18: ( query_partition_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input)  {
            TokenStream input = cast(TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_1 = input.LA(1);

                         
                        int index175_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred308_PLSQL3_2_D()&&synpred308_PLSQL3_2_D())&&(toUpper(input.LT(1).getText)== "PARTITION"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_1);

                        if ( s>=0 ) return s;
                        break;
            default:
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static BitSet FOLLOW_create_package_in_start_rule96 ;

    //public static final BitSet FOLLOW_create_package_in_start_rule96 = new BitSet(new long[]{0x1800000004409000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_create_package_in_start_rule96 = new BitSet([0x1800000004409000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_DIVIDE_in_start_rule98 ;

    //public static final BitSet FOLLOW_DIVIDE_in_start_rule98 = new BitSet(new long[]{0x1800000004408000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_DIVIDE_in_start_rule98 = new BitSet([0x1800000004408000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_plsql_block_in_start_rule113 ;

    //public static final BitSet FOLLOW_plsql_block_in_start_rule113 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_plsql_block_in_start_rule113 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_start_rule115 ;

    //public static final BitSet FOLLOW_SEMI_in_start_rule115 = new BitSet(new long[]{0x1800000004409000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_SEMI_in_start_rule115 = new BitSet([0x1800000004409000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_DIVIDE_in_start_rule117 ;

    //public static final BitSet FOLLOW_DIVIDE_in_start_rule117 = new BitSet(new long[]{0x1800000004408000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_DIVIDE_in_start_rule117 = new BitSet([0x1800000004408000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_sql_plus_in_start_rule139 ;

    //public static final BitSet FOLLOW_sql_plus_in_start_rule139 = new BitSet(new long[]{0x1800000004408000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_sql_plus_in_start_rule139 = new BitSet([0x1800000004408000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_EOF_in_start_rule155 ;

    //public static final BitSet FOLLOW_EOF_in_start_rule155 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_EOF_in_start_rule155 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_set_in_sql_plus165 ;

    //public static final BitSet FOLLOW_set_in_sql_plus165 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_set_in_sql_plus165 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_variable_in_sql_plus172 ;

    //public static final BitSet FOLLOW_variable_in_sql_plus172 = new BitSet(new long[]{0x0000000000000002L,0x00008300062020C0L,0x0000000002000630L});


    static this()
    {
    //FOLLOW_variable_in_sql_plus172 = new BitSet([0x0000000000000002L,0x00008300062020C0L,0x0000000002000630L]);

    }public static BitSet FOLLOW_set_in_sql_plus215 ;

    //public static final BitSet FOLLOW_set_in_sql_plus215 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_set_in_sql_plus215 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_format_in_sql_plus221 ;

    //public static final BitSet FOLLOW_format_in_sql_plus221 = new BitSet(new long[]{0x0000000000000002L,0x0000800006000000L,0x0000000002000030L});


    static this()
    {
    //FOLLOW_format_in_sql_plus221 = new BitSet([0x0000000000000002L,0x0000800006000000L,0x0000000002000030L]);

    }public static BitSet FOLLOW_set_in_sql_plus226 ;

    //public static final BitSet FOLLOW_set_in_sql_plus226 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_set_in_sql_plus226 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_defaultvalue_in_sql_plus232 ;

    //public static final BitSet FOLLOW_defaultvalue_in_sql_plus232 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000030L});


    static this()
    {
    //FOLLOW_defaultvalue_in_sql_plus232 = new BitSet([0x0000000000000002L,0x0000800000000000L,0x0000000002000030L]);

    }public static BitSet FOLLOW_153_in_sql_plus237 ;

    //public static final BitSet FOLLOW_153_in_sql_plus237 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_153_in_sql_plus237 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_text_in_sql_plus239 ;

    //public static final BitSet FOLLOW_text_in_sql_plus239 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});


    static this()
    {
    //FOLLOW_text_in_sql_plus239 = new BitSet([0x0000000000000002L,0x0000800000000000L]);

    }public static BitSet FOLLOW_set_in_sql_plus241 ;

    //public static final BitSet FOLLOW_set_in_sql_plus241 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});


    static this()
    {
    //FOLLOW_set_in_sql_plus241 = new BitSet([0x0000000000000002L,0x0000800000000000L]);

    }public static BitSet FOLLOW_111_in_sql_plus249 ;

    //public static final BitSet FOLLOW_111_in_sql_plus249 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_111_in_sql_plus249 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_variable259 ;

    //public static final BitSet FOLLOW_identifier_in_variable259 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_variable259 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_format266 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_format266 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_format266 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_defaultvalue273 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_defaultvalue273 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_defaultvalue273 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_text281 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_text281 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_text281 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_84_in_create_package301 ;

    //public static final BitSet FOLLOW_84_in_create_package301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});


    static this()
    {
    //FOLLOW_84_in_create_package301 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000090000L]);

    }public static BitSet FOLLOW_144_in_create_package305 ;

    //public static final BitSet FOLLOW_144_in_create_package305 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_144_in_create_package305 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyREPLACE_in_create_package307 ;

    //public static final BitSet FOLLOW_keyREPLACE_in_create_package307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});


    static this()
    {
    //FOLLOW_keyREPLACE_in_create_package307 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000080000L]);

    }public static BitSet FOLLOW_package_spec_in_create_package316 ;

    //public static final BitSet FOLLOW_package_spec_in_create_package316 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_package_spec_in_create_package316 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_package_body_in_create_package320 ;

    //public static final BitSet FOLLOW_package_body_in_create_package320 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_package_body_in_create_package320 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyPACKAGE_in_package_spec334 ;

    //public static final BitSet FOLLOW_keyPACKAGE_in_package_spec334 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyPACKAGE_in_package_spec334 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_package_name_in_package_spec336 ;

    //public static final BitSet FOLLOW_package_name_in_package_spec336 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000001L});


    static this()
    {
    //FOLLOW_package_name_in_package_spec336 = new BitSet([0x0000000000000000L,0x0100000000000001L]);

    }public static BitSet FOLLOW_set_in_package_spec338 ;

    //public static final BitSet FOLLOW_set_in_package_spec338 = new BitSet(new long[]{0x0000000000408000L,0x0000080200000000L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_set_in_package_spec338 = new BitSet([0x0000000000408000L,0x0000080200000000L,0x0000000001400000L]);

    }public static BitSet FOLLOW_package_obj_spec_in_package_spec353 ;

    //public static final BitSet FOLLOW_package_obj_spec_in_package_spec353 = new BitSet(new long[]{0x0000000000408000L,0x0000080200000000L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_package_obj_spec_in_package_spec353 = new BitSet([0x0000000000408000L,0x0000080200000000L,0x0000000001400000L]);

    }public static BitSet FOLLOW_97_in_package_spec360 ;

    //public static final BitSet FOLLOW_97_in_package_spec360 = new BitSet(new long[]{0x0020000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_97_in_package_spec360 = new BitSet([0x0020000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_package_name_in_package_spec363 ;

    //public static final BitSet FOLLOW_package_name_in_package_spec363 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_package_name_in_package_spec363 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_package_spec367 ;

    //public static final BitSet FOLLOW_SEMI_in_package_spec367 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_package_spec367 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyPACKAGE_in_package_body379 ;

    //public static final BitSet FOLLOW_keyPACKAGE_in_package_body379 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyPACKAGE_in_package_body379 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyBODY_in_package_body383 ;

    //public static final BitSet FOLLOW_keyBODY_in_package_body383 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyBODY_in_package_body383 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_package_name_in_package_body387 ;

    //public static final BitSet FOLLOW_package_name_in_package_body387 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000001L});


    static this()
    {
    //FOLLOW_package_name_in_package_body387 = new BitSet([0x0000000000000000L,0x0100000000000001L]);

    }public static BitSet FOLLOW_set_in_package_body389 ;

    //public static final BitSet FOLLOW_set_in_package_body389 = new BitSet(new long[]{0x0000000000408000L,0x0000080200100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_set_in_package_body389 = new BitSet([0x0000000000408000L,0x0000080200100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_package_obj_body_in_package_body403 ;

    //public static final BitSet FOLLOW_package_obj_body_in_package_body403 = new BitSet(new long[]{0x0000000000408000L,0x0000080200100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_package_obj_body_in_package_body403 = new BitSet([0x0000000000408000L,0x0000080200100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_67_in_package_body412 ;

    //public static final BitSet FOLLOW_67_in_package_body412 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_67_in_package_body412 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_package_body414 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_package_body414 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_package_body414 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_97_in_package_body423 ;

    //public static final BitSet FOLLOW_97_in_package_body423 = new BitSet(new long[]{0x0020000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_97_in_package_body423 = new BitSet([0x0020000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_package_name_in_package_body427 ;

    //public static final BitSet FOLLOW_package_name_in_package_body427 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_package_name_in_package_body427 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_package_body432 ;

    //public static final BitSet FOLLOW_SEMI_in_package_body432 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_package_body432 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_schema_name_in_package_name445 ;

    //public static final BitSet FOLLOW_schema_name_in_package_name445 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_schema_name_in_package_name445 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_package_name447 ;

    //public static final BitSet FOLLOW_DOT_in_package_name447 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_package_name447 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_package_name452 ;

    //public static final BitSet FOLLOW_identifier_in_package_name452 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_package_name452 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_variable_declaration_in_package_obj_spec464 ;

    //public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec464 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_variable_declaration_in_package_obj_spec464 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_declaration_in_package_obj_spec470 ;

    //public static final BitSet FOLLOW_type_declaration_in_package_obj_spec470 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_declaration_in_package_obj_spec470 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subtype_declaration_in_package_obj_spec475 ;

    //public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec475 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subtype_declaration_in_package_obj_spec475 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_declaration_in_package_obj_spec481 ;

    //public static final BitSet FOLLOW_record_declaration_in_package_obj_spec481 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_record_declaration_in_package_obj_spec481 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec487 ;

    //public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec487 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_table_declaration_in_package_obj_spec487 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_varray_declaration_in_package_obj_spec493 ;

    //public static final BitSet FOLLOW_varray_declaration_in_package_obj_spec493 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_varray_declaration_in_package_obj_spec493 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_declaration_in_package_obj_spec498 ;

    //public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec498 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_declaration_in_package_obj_spec498 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_spec_in_package_obj_spec504 ;

    //public static final BitSet FOLLOW_cursor_spec_in_package_obj_spec504 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_spec_in_package_obj_spec504 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_procedure_spec_in_package_obj_spec510 ;

    //public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec510 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_procedure_spec_in_package_obj_spec510 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_spec_in_package_obj_spec516 ;

    //public static final BitSet FOLLOW_function_spec_in_package_obj_spec516 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_spec_in_package_obj_spec516 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exception_declaration_in_package_obj_spec522 ;

    //public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec522 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exception_declaration_in_package_obj_spec522 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_pragma_declaration_in_package_obj_spec528 ;

    //public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec528 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_pragma_declaration_in_package_obj_spec528 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_variable_name_in_variable_declaration539 ;

    //public static final BitSet FOLLOW_variable_name_in_variable_declaration539 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E8E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_variable_name_in_variable_declaration539 = new BitSet([0x0000000000408000L,0x4830008040E8E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_83_in_variable_declaration542 ;

    //public static final BitSet FOLLOW_83_in_variable_declaration542 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_83_in_variable_declaration542 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_variable_declaration548 ;

    //public static final BitSet FOLLOW_type_spec_in_variable_declaration548 = new BitSet(new long[]{0x0020000000000020L,0x0000000004000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_variable_declaration548 = new BitSet([0x0020000000000020L,0x0000000004000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_variable_declaration551 ;

    //public static final BitSet FOLLOW_134_in_variable_declaration551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_variable_declaration551 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_variable_declaration553 ;

    //public static final BitSet FOLLOW_136_in_variable_declaration553 = new BitSet(new long[]{0x0020000000000020L,0x0000000004000000L});


    static this()
    {
    //FOLLOW_136_in_variable_declaration553 = new BitSet([0x0020000000000020L,0x0000000004000000L]);

    }public static BitSet FOLLOW_set_in_variable_declaration562 ;

    //public static final BitSet FOLLOW_set_in_variable_declaration562 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_set_in_variable_declaration562 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_variable_declaration572 ;

    //public static final BitSet FOLLOW_plsql_expression_in_variable_declaration572 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_plsql_expression_in_variable_declaration572 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_variable_declaration576 ;

    //public static final BitSet FOLLOW_SEMI_in_variable_declaration576 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_variable_declaration576 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTYPE_in_type_declaration589 ;

    //public static final BitSet FOLLOW_keyTYPE_in_type_declaration589 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyTYPE_in_type_declaration589 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_type_declaration591 ;

    //public static final BitSet FOLLOW_type_spec_in_type_declaration591 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_type_spec_in_type_declaration591 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_type_declaration593 ;

    //public static final BitSet FOLLOW_120_in_type_declaration593 = new BitSet(new long[]{0x0000000008408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_120_in_type_declaration593 = new BitSet([0x0000000008408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_keyNEW_in_type_declaration597 ;

    //public static final BitSet FOLLOW_keyNEW_in_type_declaration597 = new BitSet(new long[]{0x0000000008408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyNEW_in_type_declaration597 = new BitSet([0x0000000008408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_type_declaration604 ;

    //public static final BitSet FOLLOW_type_spec_in_type_declaration604 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_type_declaration604 = new BitSet([0x0020000000000000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_type_declaration608 ;

    //public static final BitSet FOLLOW_134_in_type_declaration608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_type_declaration608 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_type_declaration610 ;

    //public static final BitSet FOLLOW_136_in_type_declaration610 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_136_in_type_declaration610 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_type_declaration617 ;

    //public static final BitSet FOLLOW_LPAREN_in_type_declaration617 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_type_declaration617 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expressions_in_type_declaration619 ;

    //public static final BitSet FOLLOW_plsql_expressions_in_type_declaration619 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_plsql_expressions_in_type_declaration619 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_type_declaration621 ;

    //public static final BitSet FOLLOW_RPAREN_in_type_declaration621 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_type_declaration621 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_type_declaration625 ;

    //public static final BitSet FOLLOW_SEMI_in_type_declaration625 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_type_declaration625 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keySUBTYPE_in_subtype_declaration638 ;

    //public static final BitSet FOLLOW_keySUBTYPE_in_subtype_declaration638 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keySUBTYPE_in_subtype_declaration638 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_subtype_declaration640 ;

    //public static final BitSet FOLLOW_type_spec_in_subtype_declaration640 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_type_spec_in_subtype_declaration640 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_subtype_declaration642 ;

    //public static final BitSet FOLLOW_120_in_subtype_declaration642 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_120_in_subtype_declaration642 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_subtype_declaration644 ;

    //public static final BitSet FOLLOW_type_spec_in_subtype_declaration644 = new BitSet(new long[]{0x0020000000400000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_subtype_declaration644 = new BitSet([0x0020000000400000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_subtype_declaration648 ;

    //public static final BitSet FOLLOW_134_in_subtype_declaration648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_subtype_declaration648 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_subtype_declaration650 ;

    //public static final BitSet FOLLOW_136_in_subtype_declaration650 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_136_in_subtype_declaration650 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyRANGE_in_subtype_declaration654 ;

    //public static final BitSet FOLLOW_keyRANGE_in_subtype_declaration654 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_keyRANGE_in_subtype_declaration654 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_subtype_declaration656 ;

    //public static final BitSet FOLLOW_literal_in_subtype_declaration656 = new BitSet(new long[]{0x0000000000004000L});


    static this()
    {
    //FOLLOW_literal_in_subtype_declaration656 = new BitSet([0x0000000000004000L]);

    }public static BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration658 ;

    //public static final BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration658 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_DOUBLEDOT_in_subtype_declaration658 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_subtype_declaration660 ;

    //public static final BitSet FOLLOW_literal_in_subtype_declaration660 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_literal_in_subtype_declaration660 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_subtype_declaration665 ;

    //public static final BitSet FOLLOW_SEMI_in_subtype_declaration665 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_subtype_declaration665 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCURSOR_in_cursor_declaration678 ;

    //public static final BitSet FOLLOW_keyCURSOR_in_cursor_declaration678 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyCURSOR_in_cursor_declaration678 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_cursor_declaration680 ;

    //public static final BitSet FOLLOW_cursor_name_in_cursor_declaration680 = new BitSet(new long[]{0x0000000008000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_cursor_name_in_cursor_declaration680 = new BitSet([0x0000000008000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_cursor_declaration686 ;

    //public static final BitSet FOLLOW_LPAREN_in_cursor_declaration686 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_cursor_declaration686 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_parameter_specs_in_cursor_declaration688 ;

    //public static final BitSet FOLLOW_parameter_specs_in_cursor_declaration688 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_parameter_specs_in_cursor_declaration688 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_cursor_declaration690 ;

    //public static final BitSet FOLLOW_RPAREN_in_cursor_declaration690 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_cursor_declaration690 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_cursor_declaration697 ;

    //public static final BitSet FOLLOW_120_in_cursor_declaration697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_120_in_cursor_declaration697 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_cursor_declaration699 ;

    //public static final BitSet FOLLOW_select_command_in_cursor_declaration699 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_cursor_declaration699 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_cursor_declaration701 ;

    //public static final BitSet FOLLOW_SEMI_in_cursor_declaration701 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_cursor_declaration701 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_variable_declaration_in_package_obj_body711 ;

    //public static final BitSet FOLLOW_variable_declaration_in_package_obj_body711 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_variable_declaration_in_package_obj_body711 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subtype_declaration_in_package_obj_body717 ;

    //public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body717 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subtype_declaration_in_package_obj_body717 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_declaration_in_package_obj_body723 ;

    //public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body723 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_declaration_in_package_obj_body723 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exception_declaration_in_package_obj_body729 ;

    //public static final BitSet FOLLOW_exception_declaration_in_package_obj_body729 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exception_declaration_in_package_obj_body729 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_declaration_in_package_obj_body735 ;

    //public static final BitSet FOLLOW_record_declaration_in_package_obj_body735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_record_declaration_in_package_obj_body735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_declaration_in_package_obj_body741 ;

    //public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_body741 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_table_declaration_in_package_obj_body741 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_varray_declaration_in_package_obj_body747 ;

    //public static final BitSet FOLLOW_varray_declaration_in_package_obj_body747 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_varray_declaration_in_package_obj_body747 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_procedure_body_in_package_obj_body752 ;

    //public static final BitSet FOLLOW_procedure_body_in_package_obj_body752 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_procedure_body_in_package_obj_body752 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_body_in_package_obj_body758 ;

    //public static final BitSet FOLLOW_function_body_in_package_obj_body758 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_body_in_package_obj_body758 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_pragma_declaration_in_package_obj_body764 ;

    //public static final BitSet FOLLOW_pragma_declaration_in_package_obj_body764 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_pragma_declaration_in_package_obj_body764 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_statement_in_seq_of_statements775 ;

    //public static final BitSet FOLLOW_statement_in_seq_of_statements775 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_statement_in_seq_of_statements775 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_seq_of_statements777 ;

    //public static final BitSet FOLLOW_SEMI_in_seq_of_statements777 = new BitSet(new long[]{0x0000000004408402L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_SEMI_in_seq_of_statements777 = new BitSet([0x0000000004408402L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_statement_in_seq_of_statements781 ;

    //public static final BitSet FOLLOW_statement_in_seq_of_statements781 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_statement_in_seq_of_statements781 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_seq_of_statements783 ;

    //public static final BitSet FOLLOW_SEMI_in_seq_of_statements783 = new BitSet(new long[]{0x0000000004408402L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_SEMI_in_seq_of_statements783 = new BitSet([0x0000000004408402L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_assignment_statement_in_statement798 ;

    //public static final BitSet FOLLOW_assignment_statement_in_statement798 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignment_statement_in_statement798 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exit_statement_in_statement803 ;

    //public static final BitSet FOLLOW_exit_statement_in_statement803 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exit_statement_in_statement803 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_goto_statement_in_statement808 ;

    //public static final BitSet FOLLOW_goto_statement_in_statement808 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_goto_statement_in_statement808 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_case_statement_in_statement813 ;

    //public static final BitSet FOLLOW_case_statement_in_statement813 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_case_statement_in_statement813 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_if_statement_in_statement818 ;

    //public static final BitSet FOLLOW_if_statement_in_statement818 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_if_statement_in_statement818 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_loop_statement_in_statement824 ;

    //public static final BitSet FOLLOW_loop_statement_in_statement824 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_loop_statement_in_statement824 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_null_statement_in_statement830 ;

    //public static final BitSet FOLLOW_null_statement_in_statement830 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_null_statement_in_statement830 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_raise_statement_in_statement835 ;

    //public static final BitSet FOLLOW_raise_statement_in_statement835 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_raise_statement_in_statement835 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_return_statement_in_statement840 ;

    //public static final BitSet FOLLOW_return_statement_in_statement840 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_return_statement_in_statement840 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_statement_in_statement845 ;

    //public static final BitSet FOLLOW_sql_statement_in_statement845 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_statement_in_statement845 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_block_in_statement850 ;

    //public static final BitSet FOLLOW_plsql_block_in_statement850 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_block_in_statement850 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_call_in_statement856 ;

    //public static final BitSet FOLLOW_function_call_in_statement856 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_call_in_statement856 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LLABEL_in_plsql_block877 ;

    //public static final BitSet FOLLOW_LLABEL_in_plsql_block877 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LLABEL_in_plsql_block877 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_label_name_in_plsql_block879 ;

    //public static final BitSet FOLLOW_label_name_in_plsql_block879 = new BitSet(new long[]{0x0002000000000000L});


    static this()
    {
    //FOLLOW_label_name_in_plsql_block879 = new BitSet([0x0002000000000000L]);

    }public static BitSet FOLLOW_RLABEL_in_plsql_block881 ;

    //public static final BitSet FOLLOW_RLABEL_in_plsql_block881 = new BitSet(new long[]{0x0000000000408000L,0x0000080001100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_RLABEL_in_plsql_block881 = new BitSet([0x0000000000408000L,0x0000080001100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_88_in_plsql_block892 ;

    //public static final BitSet FOLLOW_88_in_plsql_block892 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100000L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_88_in_plsql_block892 = new BitSet([0x0000000000408000L,0x0000080000100000L,0x0000000001400000L]);

    }public static BitSet FOLLOW_declare_spec_in_plsql_block898 ;

    //public static final BitSet FOLLOW_declare_spec_in_plsql_block898 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_declare_spec_in_plsql_block898 = new BitSet([0x0000000000408000L,0x0000080000100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_67_in_plsql_block910 ;

    //public static final BitSet FOLLOW_67_in_plsql_block910 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_67_in_plsql_block910 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_plsql_block916 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_plsql_block916 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_plsql_block916 = new BitSet([0x0000000000000000L,0x0000000600000000L]);

    }public static BitSet FOLLOW_98_in_plsql_block922 ;

    //public static final BitSet FOLLOW_98_in_plsql_block922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_98_in_plsql_block922 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_exception_handler_in_plsql_block926 ;

    //public static final BitSet FOLLOW_exception_handler_in_plsql_block926 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_exception_handler_in_plsql_block926 = new BitSet([0x0000000000000000L,0x0000000200000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_97_in_plsql_block939 ;

    //public static final BitSet FOLLOW_97_in_plsql_block939 = new BitSet(new long[]{0x0000000000408002L});


    static this()
    {
    //FOLLOW_97_in_plsql_block939 = new BitSet([0x0000000000408002L]);

    }public static BitSet FOLLOW_label_name_in_plsql_block943 ;

    //public static final BitSet FOLLOW_label_name_in_plsql_block943 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_label_name_in_plsql_block943 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_variable_declaration_in_declare_spec959 ;

    //public static final BitSet FOLLOW_variable_declaration_in_declare_spec959 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_variable_declaration_in_declare_spec959 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subtype_declaration_in_declare_spec965 ;

    //public static final BitSet FOLLOW_subtype_declaration_in_declare_spec965 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subtype_declaration_in_declare_spec965 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_declaration_in_declare_spec971 ;

    //public static final BitSet FOLLOW_cursor_declaration_in_declare_spec971 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_declaration_in_declare_spec971 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exception_declaration_in_declare_spec977 ;

    //public static final BitSet FOLLOW_exception_declaration_in_declare_spec977 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exception_declaration_in_declare_spec977 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_declaration_in_declare_spec983 ;

    //public static final BitSet FOLLOW_record_declaration_in_declare_spec983 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_record_declaration_in_declare_spec983 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_declaration_in_declare_spec989 ;

    //public static final BitSet FOLLOW_plsql_table_declaration_in_declare_spec989 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_table_declaration_in_declare_spec989 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_varray_declaration_in_declare_spec995 ;

    //public static final BitSet FOLLOW_varray_declaration_in_declare_spec995 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_varray_declaration_in_declare_spec995 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_procedure_declaration_in_declare_spec1000 ;

    //public static final BitSet FOLLOW_procedure_declaration_in_declare_spec1000 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_procedure_declaration_in_declare_spec1000 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_declaration_in_declare_spec1006 ;

    //public static final BitSet FOLLOW_function_declaration_in_declare_spec1006 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_declaration_in_declare_spec1006 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_declaration_in_declare_spec1011 ;

    //public static final BitSet FOLLOW_type_declaration_in_declare_spec1011 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_declaration_in_declare_spec1011 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_pragma_declaration_in_declare_spec1017 ;

    //public static final BitSet FOLLOW_pragma_declaration_in_declare_spec1017 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_pragma_declaration_in_declare_spec1017 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyPRAGMA_in_pragma_declaration1028 ;

    //public static final BitSet FOLLOW_keyPRAGMA_in_pragma_declaration1028 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyPRAGMA_in_pragma_declaration1028 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration1035 ;

    //public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration1035 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration1035 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1037 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1037 = new BitSet(new long[]{0x0000400000408000L,0x0000000004000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1037 = new BitSet([0x0000400000408000L,0x0000000004000000L]);

    }public static BitSet FOLLOW_90_in_pragma_declaration1041 ;

    //public static final BitSet FOLLOW_90_in_pragma_declaration1041 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_90_in_pragma_declaration1041 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_function_name_in_pragma_declaration1045 ;

    //public static final BitSet FOLLOW_function_name_in_pragma_declaration1045 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_function_name_in_pragma_declaration1045 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_pragma_declaration1051 ;

    //public static final BitSet FOLLOW_COMMA_in_pragma_declaration1051 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_COMMA_in_pragma_declaration1051 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_param_in_pragma_declaration1053 ;

    //public static final BitSet FOLLOW_pragma_param_in_pragma_declaration1053 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_pragma_param_in_pragma_declaration1053 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1058 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1058 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1058 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration1065 ;

    //public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration1065 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration1065 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1067 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1067 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1067 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_exception_name_in_pragma_declaration1069 ;

    //public static final BitSet FOLLOW_exception_name_in_pragma_declaration1069 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_exception_name_in_pragma_declaration1069 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_pragma_declaration1071 ;

    //public static final BitSet FOLLOW_COMMA_in_pragma_declaration1071 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_COMMA_in_pragma_declaration1071 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_pragma_declaration1073 ;

    //public static final BitSet FOLLOW_literal_in_pragma_declaration1073 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_literal_in_pragma_declaration1073 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1075 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1075 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1075 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration1081 ;

    //public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration1081 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration1081 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration1087 ;

    //public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration1087 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration1087 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyBUILTIN_in_pragma_declaration1093 ;

    //public static final BitSet FOLLOW_keyBUILTIN_in_pragma_declaration1093 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyBUILTIN_in_pragma_declaration1093 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1095 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1095 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1095 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_pragma_declaration1097 ;

    //public static final BitSet FOLLOW_pragma_params_in_pragma_declaration1097 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_pragma_declaration1097 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1099 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1099 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1099 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration1105 ;

    //public static final BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration1105 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyFIPSFLAG_in_pragma_declaration1105 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1107 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1107 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1107 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_pragma_declaration1109 ;

    //public static final BitSet FOLLOW_pragma_params_in_pragma_declaration1109 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_pragma_declaration1109 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1111 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1111 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1111 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyINTERFACE_in_pragma_declaration1117 ;

    //public static final BitSet FOLLOW_keyINTERFACE_in_pragma_declaration1117 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyINTERFACE_in_pragma_declaration1117 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1119 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1119 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1119 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_pragma_declaration1121 ;

    //public static final BitSet FOLLOW_pragma_params_in_pragma_declaration1121 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_pragma_declaration1121 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1123 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1123 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1123 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration1129 ;

    //public static final BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration1129 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyNEW_NAMES_in_pragma_declaration1129 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1131 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1131 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1131 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_pragma_declaration1133 ;

    //public static final BitSet FOLLOW_pragma_params_in_pragma_declaration1133 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_pragma_declaration1133 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1135 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1135 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1135 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration1141 ;

    //public static final BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration1141 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyTIMESTAMP_in_pragma_declaration1141 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_pragma_declaration1143 ;

    //public static final BitSet FOLLOW_LPAREN_in_pragma_declaration1143 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_pragma_declaration1143 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_pragma_declaration1145 ;

    //public static final BitSet FOLLOW_pragma_params_in_pragma_declaration1145 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_pragma_declaration1145 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_pragma_declaration1147 ;

    //public static final BitSet FOLLOW_RPAREN_in_pragma_declaration1147 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_pragma_declaration1147 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_pragma_declaration1155 ;

    //public static final BitSet FOLLOW_SEMI_in_pragma_declaration1155 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_pragma_declaration1155 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_pragma_param_in_pragma_params1166 ;

    //public static final BitSet FOLLOW_pragma_param_in_pragma_params1166 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_pragma_param_in_pragma_params1166 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_pragma_params1170 ;

    //public static final BitSet FOLLOW_COMMA_in_pragma_params1170 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_COMMA_in_pragma_params1170 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_param_in_pragma_params1172 ;

    //public static final BitSet FOLLOW_pragma_param_in_pragma_params1172 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_pragma_param_in_pragma_params1172 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_NUMBER_in_pragma_param1197 ;

    //public static final BitSet FOLLOW_NUMBER_in_pragma_param1197 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_pragma_param1197 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_pragma_param1202 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_pragma_param1202 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_pragma_param1202 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_pragma_param1207 ;

    //public static final BitSet FOLLOW_identifier_in_pragma_param1207 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_pragma_param1207 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_lvalue_in_assignment_statement1223 ;

    //public static final BitSet FOLLOW_lvalue_in_assignment_statement1223 = new BitSet(new long[]{0x0000000000000020L});


    static this()
    {
    //FOLLOW_lvalue_in_assignment_statement1223 = new BitSet([0x0000000000000020L]);

    }public static BitSet FOLLOW_ASSIGN_in_assignment_statement1225 ;

    //public static final BitSet FOLLOW_ASSIGN_in_assignment_statement1225 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_ASSIGN_in_assignment_statement1225 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_assignment_statement1227 ;

    //public static final BitSet FOLLOW_plsql_expression_in_assignment_statement1227 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_assignment_statement1227 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_lvalue_in_lvalues1239 ;

    //public static final BitSet FOLLOW_lvalue_in_lvalues1239 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_lvalue_in_lvalues1239 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_lvalues1243 ;

    //public static final BitSet FOLLOW_COMMA_in_lvalues1243 = new BitSet(new long[]{0x0000000000408400L});


    static this()
    {
    //FOLLOW_COMMA_in_lvalues1243 = new BitSet([0x0000000000408400L]);

    }public static BitSet FOLLOW_lvalue_in_lvalues1245 ;

    //public static final BitSet FOLLOW_lvalue_in_lvalues1245 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_lvalue_in_lvalues1245 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_variable_name_in_lvalue1258 ;

    //public static final BitSet FOLLOW_variable_name_in_lvalue1258 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_variable_name_in_lvalue1258 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_name_in_lvalue1263 ;

    //public static final BitSet FOLLOW_record_name_in_lvalue1263 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_record_name_in_lvalue1263 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_lvalue1265 ;

    //public static final BitSet FOLLOW_DOT_in_lvalue1265 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_lvalue1265 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_field_name_in_lvalue1267 ;

    //public static final BitSet FOLLOW_field_name_in_lvalue1267 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_field_name_in_lvalue1267 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_name_in_lvalue1272 ;

    //public static final BitSet FOLLOW_plsql_table_name_in_lvalue1272 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_plsql_table_name_in_lvalue1272 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_lvalue1274 ;

    //public static final BitSet FOLLOW_LPAREN_in_lvalue1274 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_lvalue1274 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_subscript_in_lvalue1276 ;

    //public static final BitSet FOLLOW_subscript_in_lvalue1276 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_subscript_in_lvalue1276 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_lvalue1278 ;

    //public static final BitSet FOLLOW_RPAREN_in_lvalue1278 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_RPAREN_in_lvalue1278 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_lvalue1282 ;

    //public static final BitSet FOLLOW_DOT_in_lvalue1282 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_lvalue1282 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_field_name_in_lvalue1284 ;

    //public static final BitSet FOLLOW_field_name_in_lvalue1284 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_field_name_in_lvalue1284 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_COLON_in_lvalue1292 ;

    //public static final BitSet FOLLOW_COLON_in_lvalue1292 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COLON_in_lvalue1292 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_host_variable_in_lvalue1294 ;

    //public static final BitSet FOLLOW_host_variable_in_lvalue1294 = new BitSet(new long[]{0x0000000000000402L});


    static this()
    {
    //FOLLOW_host_variable_in_lvalue1294 = new BitSet([0x0000000000000402L]);

    }public static BitSet FOLLOW_COLON_in_lvalue1298 ;

    //public static final BitSet FOLLOW_COLON_in_lvalue1298 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COLON_in_lvalue1298 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_host_variable_in_lvalue1300 ;

    //public static final BitSet FOLLOW_host_variable_in_lvalue1300 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_host_variable_in_lvalue1300 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_field_name1314 ;

    //public static final BitSet FOLLOW_identifier_in_field_name1314 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_field_name1314 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_expression_in_subscript1326 ;

    //public static final BitSet FOLLOW_plsql_expression_in_subscript1326 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_subscript1326 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_host_variable1339 ;

    //public static final BitSet FOLLOW_identifier_in_host_variable1339 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_host_variable1339 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_108_in_goto_statement1351 ;

    //public static final BitSet FOLLOW_108_in_goto_statement1351 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_108_in_goto_statement1351 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_label_name_in_goto_statement1353 ;

    //public static final BitSet FOLLOW_label_name_in_goto_statement1353 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_label_name_in_goto_statement1353 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_label_name1365 ;

    //public static final BitSet FOLLOW_identifier_in_label_name1365 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_label_name1365 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyEXIT_in_exit_statement1377 ;

    //public static final BitSet FOLLOW_keyEXIT_in_exit_statement1377 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_keyEXIT_in_exit_statement1377 = new BitSet([0x0000000000408002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_label_name_in_exit_statement1381 ;

    //public static final BitSet FOLLOW_label_name_in_exit_statement1381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_label_name_in_exit_statement1381 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_exit_statement1388 ;

    //public static final BitSet FOLLOW_182_in_exit_statement1388 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_182_in_exit_statement1388 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_condition_in_exit_statement1390 ;

    //public static final BitSet FOLLOW_plsql_condition_in_exit_statement1390 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_condition_in_exit_statement1390 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_72_in_datatype1405 ;

    //public static final BitSet FOLLOW_72_in_datatype1405 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_72_in_datatype1405 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_71_in_datatype1411 ;

    //public static final BitSet FOLLOW_71_in_datatype1411 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_71_in_datatype1411 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_70_in_datatype1416 ;

    //public static final BitSet FOLLOW_70_in_datatype1416 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_70_in_datatype1416 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_129_in_datatype1421 ;

    //public static final BitSet FOLLOW_129_in_datatype1421 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_129_in_datatype1421 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_149_in_datatype1427 ;

    //public static final BitSet FOLLOW_149_in_datatype1427 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_149_in_datatype1427 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_set_in_datatype1433 ;

    //public static final BitSet FOLLOW_set_in_datatype1433 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_set_in_datatype1433 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1453 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1453 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1453 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1455 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1455 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1455 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_datatype1459 ;

    //public static final BitSet FOLLOW_COMMA_in_datatype1459 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_datatype1459 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1461 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1461 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1461 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1466 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1466 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1466 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_123_in_datatype1474 ;

    //public static final BitSet FOLLOW_123_in_datatype1474 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000008000000L});


    static this()
    {
    //FOLLOW_123_in_datatype1474 = new BitSet([0x0000000008000002L,0x0000000000000000L,0x0000000008000000L]);

    }public static BitSet FOLLOW_155_in_datatype1478 ;

    //public static final BitSet FOLLOW_155_in_datatype1478 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_155_in_datatype1478 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1484 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1484 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1484 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1486 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1486 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1486 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1488 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1488 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1488 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_155_in_datatype1496 ;

    //public static final BitSet FOLLOW_155_in_datatype1496 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_155_in_datatype1496 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1500 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1500 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1500 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1502 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1502 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1502 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1504 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1504 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1504 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_74_in_datatype1512 ;

    //public static final BitSet FOLLOW_74_in_datatype1512 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_74_in_datatype1512 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_85_in_datatype1517 ;

    //public static final BitSet FOLLOW_85_in_datatype1517 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_85_in_datatype1517 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINTERVAL_in_datatype1522 ;

    //public static final BitSet FOLLOW_keyINTERVAL_in_datatype1522 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINTERVAL_in_datatype1522 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyDAY_in_datatype1524 ;

    //public static final BitSet FOLLOW_keyDAY_in_datatype1524 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyDAY_in_datatype1524 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1528 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1528 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1528 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1530 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1530 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1530 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1532 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1532 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_datatype1537 ;

    //public static final BitSet FOLLOW_173_in_datatype1537 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_datatype1537 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySECOND_in_datatype1539 ;

    //public static final BitSet FOLLOW_keySECOND_in_datatype1539 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keySECOND_in_datatype1539 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1543 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1543 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1543 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1545 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1545 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1545 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1547 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1547 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1547 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINTERVAL_in_datatype1555 ;

    //public static final BitSet FOLLOW_keyINTERVAL_in_datatype1555 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINTERVAL_in_datatype1555 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyYEAR_in_datatype1557 ;

    //public static final BitSet FOLLOW_keyYEAR_in_datatype1557 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyYEAR_in_datatype1557 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1561 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1561 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1561 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1563 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1563 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1563 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1565 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1565 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_datatype1570 ;

    //public static final BitSet FOLLOW_173_in_datatype1570 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_datatype1570 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyMONTH_in_datatype1572 ;

    //public static final BitSet FOLLOW_keyMONTH_in_datatype1572 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyMONTH_in_datatype1572 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTIME_in_datatype1579 ;

    //public static final BitSet FOLLOW_keyTIME_in_datatype1579 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_keyTIME_in_datatype1579 = new BitSet([0x0000000008000002L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_keyTIMESTAMP_in_datatype1583 ;

    //public static final BitSet FOLLOW_keyTIMESTAMP_in_datatype1583 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_keyTIMESTAMP_in_datatype1583 = new BitSet([0x0000000008000002L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1589 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1589 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1589 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1591 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1591 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1591 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1593 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1593 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_datatype1600 ;

    //public static final BitSet FOLLOW_185_in_datatype1600 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_185_in_datatype1600 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyLOCAL_in_datatype1604 ;

    //public static final BitSet FOLLOW_keyLOCAL_in_datatype1604 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyLOCAL_in_datatype1604 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyTIME_in_datatype1609 ;

    //public static final BitSet FOLLOW_keyTIME_in_datatype1609 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyTIME_in_datatype1609 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyZONE_in_datatype1611 ;

    //public static final BitSet FOLLOW_keyZONE_in_datatype1611 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyZONE_in_datatype1611 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_117_in_datatype1618 ;

    //public static final BitSet FOLLOW_117_in_datatype1618 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_117_in_datatype1618 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_116_in_datatype1623 ;

    //public static final BitSet FOLLOW_116_in_datatype1623 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_116_in_datatype1623 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_168_in_datatype1628 ;

    //public static final BitSet FOLLOW_168_in_datatype1628 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_168_in_datatype1628 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_103_in_datatype1633 ;

    //public static final BitSet FOLLOW_103_in_datatype1633 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_103_in_datatype1633 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1637 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1637 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1637 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1639 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1639 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1639 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1641 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1641 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1641 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_156_in_datatype1649 ;

    //public static final BitSet FOLLOW_156_in_datatype1649 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_156_in_datatype1649 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_94_in_datatype1654 ;

    //public static final BitSet FOLLOW_94_in_datatype1654 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_94_in_datatype1654 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyPRECISION_in_datatype1656 ;

    //public static final BitSet FOLLOW_keyPRECISION_in_datatype1656 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyPRECISION_in_datatype1656 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_77_in_datatype1661 ;

    //public static final BitSet FOLLOW_77_in_datatype1661 = new BitSet(new long[]{0x0000000008400002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_77_in_datatype1661 = new BitSet([0x0000000008400002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_keyVARYING_in_datatype1670 ;

    //public static final BitSet FOLLOW_keyVARYING_in_datatype1670 = new BitSet(new long[]{0x0000000008000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_keyVARYING_in_datatype1670 = new BitSet([0x0000000008000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1677 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1677 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1677 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1679 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1679 = new BitSet(new long[]{0x0010000000400000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1679 = new BitSet([0x0010000000400000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_keyBYTE_in_datatype1683 ;

    //public static final BitSet FOLLOW_keyBYTE_in_datatype1683 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_keyBYTE_in_datatype1683 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_77_in_datatype1687 ;

    //public static final BitSet FOLLOW_77_in_datatype1687 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_77_in_datatype1687 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1692 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1692 = new BitSet([0x0000000000000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_78_in_datatype1699 ;

    //public static final BitSet FOLLOW_78_in_datatype1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_78_in_datatype1699 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_datatype1701 ;

    //public static final BitSet FOLLOW_166_in_datatype1701 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_166_in_datatype1701 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_identifier_in_datatype1705 ;

    //public static final BitSet FOLLOW_identifier_in_datatype1705 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_datatype1705 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_datatype1709 ;

    //public static final BitSet FOLLOW_column_spec_in_datatype1709 = new BitSet(new long[]{0x0000000000000200L});


    static this()
    {
    //FOLLOW_column_spec_in_datatype1709 = new BitSet([0x0000000000000200L]);

    }public static BitSet FOLLOW_CHARSET_ATTR_in_datatype1711 ;

    //public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1711 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CHARSET_ATTR_in_datatype1711 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_180_in_datatype1721 ;

    //public static final BitSet FOLLOW_180_in_datatype1721 = new BitSet(new long[]{0x0000000008000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_180_in_datatype1721 = new BitSet([0x0000000008000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1743 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1743 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1743 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1745 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1745 = new BitSet(new long[]{0x0010000000400000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1745 = new BitSet([0x0010000000400000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_keyBYTE_in_datatype1749 ;

    //public static final BitSet FOLLOW_keyBYTE_in_datatype1749 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_keyBYTE_in_datatype1749 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_77_in_datatype1753 ;

    //public static final BitSet FOLLOW_77_in_datatype1753 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_77_in_datatype1753 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1758 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1758 = new BitSet([0x0000000000000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_78_in_datatype1765 ;

    //public static final BitSet FOLLOW_78_in_datatype1765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_78_in_datatype1765 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_datatype1767 ;

    //public static final BitSet FOLLOW_166_in_datatype1767 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_166_in_datatype1767 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_identifier_in_datatype1771 ;

    //public static final BitSet FOLLOW_identifier_in_datatype1771 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_datatype1771 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_datatype1775 ;

    //public static final BitSet FOLLOW_column_spec_in_datatype1775 = new BitSet(new long[]{0x0000000000000200L});


    static this()
    {
    //FOLLOW_column_spec_in_datatype1775 = new BitSet([0x0000000000000200L]);

    }public static BitSet FOLLOW_CHARSET_ATTR_in_datatype1777 ;

    //public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1777 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CHARSET_ATTR_in_datatype1777 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_181_in_datatype1787 ;

    //public static final BitSet FOLLOW_181_in_datatype1787 = new BitSet(new long[]{0x0000000008000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_181_in_datatype1787 = new BitSet([0x0000000008000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1808 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1808 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1808 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1810 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1810 = new BitSet(new long[]{0x0010000000400000L,0x0000000000002000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1810 = new BitSet([0x0010000000400000L,0x0000000000002000L]);

    }public static BitSet FOLLOW_keyBYTE_in_datatype1814 ;

    //public static final BitSet FOLLOW_keyBYTE_in_datatype1814 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_keyBYTE_in_datatype1814 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_77_in_datatype1818 ;

    //public static final BitSet FOLLOW_77_in_datatype1818 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_77_in_datatype1818 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1823 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1823 = new BitSet([0x0000000000000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_78_in_datatype1830 ;

    //public static final BitSet FOLLOW_78_in_datatype1830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_78_in_datatype1830 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_datatype1832 ;

    //public static final BitSet FOLLOW_166_in_datatype1832 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_166_in_datatype1832 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_identifier_in_datatype1836 ;

    //public static final BitSet FOLLOW_identifier_in_datatype1836 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_datatype1836 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_datatype1840 ;

    //public static final BitSet FOLLOW_column_spec_in_datatype1840 = new BitSet(new long[]{0x0000000000000200L});


    static this()
    {
    //FOLLOW_column_spec_in_datatype1840 = new BitSet([0x0000000000000200L]);

    }public static BitSet FOLLOW_CHARSET_ATTR_in_datatype1842 ;

    //public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1842 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CHARSET_ATTR_in_datatype1842 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_78_in_datatype1852 ;

    //public static final BitSet FOLLOW_78_in_datatype1852 = new BitSet(new long[]{0x0000000008400002L});


    static this()
    {
    //FOLLOW_78_in_datatype1852 = new BitSet([0x0000000008400002L]);

    }public static BitSet FOLLOW_keyVARYING_in_datatype1856 ;

    //public static final BitSet FOLLOW_keyVARYING_in_datatype1856 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keyVARYING_in_datatype1856 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1863 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1863 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1863 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1865 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1865 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1865 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1867 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1867 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1867 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_130_in_datatype1875 ;

    //public static final BitSet FOLLOW_130_in_datatype1875 = new BitSet(new long[]{0x0000000008400002L});


    static this()
    {
    //FOLLOW_130_in_datatype1875 = new BitSet([0x0000000008400002L]);

    }public static BitSet FOLLOW_keyVARYING_in_datatype1883 ;

    //public static final BitSet FOLLOW_keyVARYING_in_datatype1883 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keyVARYING_in_datatype1883 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1890 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1890 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1890 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1892 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1892 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1892 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1894 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1894 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1894 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_140_in_datatype1902 ;

    //public static final BitSet FOLLOW_140_in_datatype1902 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_140_in_datatype1902 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1907 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1907 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1907 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1909 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1909 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1909 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1911 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1911 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1911 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_141_in_datatype1919 ;

    //public static final BitSet FOLLOW_141_in_datatype1919 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_141_in_datatype1919 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1923 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1923 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1923 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1925 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1925 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1925 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1927 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1927 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1927 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_128_in_datatype1935 ;

    //public static final BitSet FOLLOW_128_in_datatype1935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006000L});


    static this()
    {
    //FOLLOW_128_in_datatype1935 = new BitSet([0x0000000000000000L,0x0000000000006000L]);

    }public static BitSet FOLLOW_set_in_datatype1938 ;

    //public static final BitSet FOLLOW_set_in_datatype1938 = new BitSet(new long[]{0x0000000008400002L});


    static this()
    {
    //FOLLOW_set_in_datatype1938 = new BitSet([0x0000000008400002L]);

    }public static BitSet FOLLOW_keyVARYING_in_datatype1950 ;

    //public static final BitSet FOLLOW_keyVARYING_in_datatype1950 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keyVARYING_in_datatype1950 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype1957 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype1957 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype1957 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype1959 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype1959 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype1959 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype1961 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype1961 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype1961 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_126_in_datatype1969 ;

    //public static final BitSet FOLLOW_126_in_datatype1969 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_126_in_datatype1969 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_148_in_datatype1974 ;

    //public static final BitSet FOLLOW_148_in_datatype1974 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_148_in_datatype1974 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_73_in_datatype1979 ;

    //public static final BitSet FOLLOW_73_in_datatype1979 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_73_in_datatype1979 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_79_in_datatype1984 ;

    //public static final BitSet FOLLOW_79_in_datatype1984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_79_in_datatype1984 = new BitSet([0x0000000000000002L,0x0000000000004000L]);

    }public static BitSet FOLLOW_78_in_datatype1988 ;

    //public static final BitSet FOLLOW_78_in_datatype1988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_78_in_datatype1988 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_datatype1990 ;

    //public static final BitSet FOLLOW_166_in_datatype1990 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_166_in_datatype1990 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_identifier_in_datatype1994 ;

    //public static final BitSet FOLLOW_identifier_in_datatype1994 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_datatype1994 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_datatype1998 ;

    //public static final BitSet FOLLOW_column_spec_in_datatype1998 = new BitSet(new long[]{0x0000000000000200L});


    static this()
    {
    //FOLLOW_column_spec_in_datatype1998 = new BitSet([0x0000000000000200L]);

    }public static BitSet FOLLOW_CHARSET_ATTR_in_datatype2000 ;

    //public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype2000 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_CHARSET_ATTR_in_datatype2000 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_131_in_datatype2010 ;

    //public static final BitSet FOLLOW_131_in_datatype2010 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_131_in_datatype2010 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_69_in_datatype2015 ;

    //public static final BitSet FOLLOW_69_in_datatype2015 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_69_in_datatype2015 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_162_in_datatype2020 ;

    //public static final BitSet FOLLOW_162_in_datatype2020 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_162_in_datatype2020 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_178_in_datatype2026 ;

    //public static final BitSet FOLLOW_178_in_datatype2026 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_178_in_datatype2026 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_datatype2030 ;

    //public static final BitSet FOLLOW_LPAREN_in_datatype2030 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_datatype2030 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_datatype2032 ;

    //public static final BitSet FOLLOW_NUMBER_in_datatype2032 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_datatype2032 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_datatype2034 ;

    //public static final BitSet FOLLOW_RPAREN_in_datatype2034 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_datatype2034 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_datatype_in_type_spec2048 ;

    //public static final BitSet FOLLOW_datatype_in_type_spec2048 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_datatype_in_type_spec2048 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_name_in_type_spec2066 ;

    //public static final BitSet FOLLOW_type_name_in_type_spec2066 = new BitSet(new long[]{0x0108000008000000L});


    static this()
    {
    //FOLLOW_type_name_in_type_spec2066 = new BitSet([0x0108000008000000L]);

    }public static BitSet FOLLOW_type_variants_in_type_spec2068 ;

    //public static final BitSet FOLLOW_type_variants_in_type_spec2068 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_variants_in_type_spec2068 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_name_in_type_spec22095 ;

    //public static final BitSet FOLLOW_type_name_in_type_spec22095 = new BitSet(new long[]{0x0108000008000000L});


    static this()
    {
    //FOLLOW_type_name_in_type_spec22095 = new BitSet([0x0108000008000000L]);

    }public static BitSet FOLLOW_type_variants_in_type_spec22097 ;

    //public static final BitSet FOLLOW_type_variants_in_type_spec22097 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_variants_in_type_spec22097 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_type_variants2109 ;

    //public static final BitSet FOLLOW_LPAREN_in_type_variants2109 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_type_variants2109 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_type_variants2111 ;

    //public static final BitSet FOLLOW_NUMBER_in_type_variants2111 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_type_variants2111 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_type_variants2113 ;

    //public static final BitSet FOLLOW_RPAREN_in_type_variants2113 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_type_variants2113 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ROWTYPE_ATTR_in_type_variants2125 ;

    //public static final BitSet FOLLOW_ROWTYPE_ATTR_in_type_variants2125 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ROWTYPE_ATTR_in_type_variants2125 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_TYPE_ATTR_in_type_variants2134 ;

    //public static final BitSet FOLLOW_TYPE_ATTR_in_type_variants2134 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_TYPE_ATTR_in_type_variants2134 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_type_name2144 ;

    //public static final BitSet FOLLOW_identifier_in_type_name2144 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_type_name2144 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_type_name2148 ;

    //public static final BitSet FOLLOW_DOT_in_type_name2148 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_type_name2148 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_type_name2150 ;

    //public static final BitSet FOLLOW_identifier_in_type_name2150 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_type_name2150 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_parameter_spec_in_parameter_specs2164 ;

    //public static final BitSet FOLLOW_parameter_spec_in_parameter_specs2164 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_parameter_spec_in_parameter_specs2164 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_parameter_specs2168 ;

    //public static final BitSet FOLLOW_COMMA_in_parameter_specs2168 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_parameter_specs2168 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_parameter_spec_in_parameter_specs2170 ;

    //public static final BitSet FOLLOW_parameter_spec_in_parameter_specs2170 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_parameter_spec_in_parameter_specs2170 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_parameter_name_in_parameter_spec2184 ;

    //public static final BitSet FOLLOW_parameter_name_in_parameter_spec2184 = new BitSet(new long[]{0x0000000000408002L,0x4832008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_parameter_name_in_parameter_spec2184 = new BitSet([0x0000000000408002L,0x4832008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_113_in_parameter_spec2188 ;

    //public static final BitSet FOLLOW_113_in_parameter_spec2188 = new BitSet(new long[]{0x0000000000408002L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_113_in_parameter_spec2188 = new BitSet([0x0000000000408002L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_parameter_spec2195 ;

    //public static final BitSet FOLLOW_type_spec_in_parameter_spec2195 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_spec_in_parameter_spec2195 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_parameter_name2210 ;

    //public static final BitSet FOLLOW_identifier_in_parameter_name2210 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_parameter_name2210 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCURSOR_in_cursor_spec2221 ;

    //public static final BitSet FOLLOW_keyCURSOR_in_cursor_spec2221 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyCURSOR_in_cursor_spec2221 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_cursor_spec2223 ;

    //public static final BitSet FOLLOW_cursor_name_in_cursor_spec2223 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_cursor_name_in_cursor_spec2223 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_LPAREN_in_cursor_spec2230 ;

    //public static final BitSet FOLLOW_LPAREN_in_cursor_spec2230 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_cursor_spec2230 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_parameter_specs_in_cursor_spec2232 ;

    //public static final BitSet FOLLOW_parameter_specs_in_cursor_spec2232 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_parameter_specs_in_cursor_spec2232 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_cursor_spec2234 ;

    //public static final BitSet FOLLOW_RPAREN_in_cursor_spec2234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_cursor_spec2234 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_keyRETURN_in_cursor_spec2241 ;

    //public static final BitSet FOLLOW_keyRETURN_in_cursor_spec2241 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyRETURN_in_cursor_spec2241 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_return_type_in_cursor_spec2243 ;

    //public static final BitSet FOLLOW_return_type_in_cursor_spec2243 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_return_type_in_cursor_spec2243 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_cursor_spec2245 ;

    //public static final BitSet FOLLOW_SEMI_in_cursor_spec2245 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_cursor_spec2245 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_152_in_procedure_spec2258 ;

    //public static final BitSet FOLLOW_152_in_procedure_spec2258 = new BitSet(new long[]{0x0000400000408000L});


    static this()
    {
    //FOLLOW_152_in_procedure_spec2258 = new BitSet([0x0000400000408000L]);

    }public static BitSet FOLLOW_procedure_name_in_procedure_spec2260 ;

    //public static final BitSet FOLLOW_procedure_name_in_procedure_spec2260 = new BitSet(new long[]{0x0020000008000000L});


    static this()
    {
    //FOLLOW_procedure_name_in_procedure_spec2260 = new BitSet([0x0020000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_procedure_spec2266 ;

    //public static final BitSet FOLLOW_LPAREN_in_procedure_spec2266 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_procedure_spec2266 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_arguments_in_procedure_spec2268 ;

    //public static final BitSet FOLLOW_arguments_in_procedure_spec2268 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_arguments_in_procedure_spec2268 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_procedure_spec2270 ;

    //public static final BitSet FOLLOW_RPAREN_in_procedure_spec2270 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_procedure_spec2270 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_procedure_spec2275 ;

    //public static final BitSet FOLLOW_SEMI_in_procedure_spec2275 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_procedure_spec2275 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_107_in_function_spec2286 ;

    //public static final BitSet FOLLOW_107_in_function_spec2286 = new BitSet(new long[]{0x0000400000408000L});


    static this()
    {
    //FOLLOW_107_in_function_spec2286 = new BitSet([0x0000400000408000L]);

    }public static BitSet FOLLOW_function_name_in_function_spec2288 ;

    //public static final BitSet FOLLOW_function_name_in_function_spec2288 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_function_name_in_function_spec2288 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_LPAREN_in_function_spec2295 ;

    //public static final BitSet FOLLOW_LPAREN_in_function_spec2295 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_function_spec2295 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_arguments_in_function_spec2297 ;

    //public static final BitSet FOLLOW_arguments_in_function_spec2297 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_arguments_in_function_spec2297 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_function_spec2299 ;

    //public static final BitSet FOLLOW_RPAREN_in_function_spec2299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_function_spec2299 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_keyRETURN_in_function_spec2306 ;

    //public static final BitSet FOLLOW_keyRETURN_in_function_spec2306 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyRETURN_in_function_spec2306 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_return_type_in_function_spec2308 ;

    //public static final BitSet FOLLOW_return_type_in_function_spec2308 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_return_type_in_function_spec2308 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_function_spec2310 ;

    //public static final BitSet FOLLOW_SEMI_in_function_spec2310 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_function_spec2310 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exception_name_in_exception_declaration2321 ;

    //public static final BitSet FOLLOW_exception_name_in_exception_declaration2321 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_exception_name_in_exception_declaration2321 = new BitSet([0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_98_in_exception_declaration2323 ;

    //public static final BitSet FOLLOW_98_in_exception_declaration2323 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_98_in_exception_declaration2323 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_exception_declaration2325 ;

    //public static final BitSet FOLLOW_SEMI_in_exception_declaration2325 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_exception_declaration2325 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exception_name_in_exception_names2336 ;

    //public static final BitSet FOLLOW_exception_name_in_exception_names2336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_exception_name_in_exception_names2336 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_144_in_exception_names2340 ;

    //public static final BitSet FOLLOW_144_in_exception_names2340 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_144_in_exception_names2340 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_exception_name_in_exception_names2342 ;

    //public static final BitSet FOLLOW_exception_name_in_exception_names2342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_exception_name_in_exception_names2342 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_exception_package_name_in_exception_name2358 ;

    //public static final BitSet FOLLOW_exception_package_name_in_exception_name2358 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_exception_package_name_in_exception_name2358 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_exception_name2360 ;

    //public static final BitSet FOLLOW_DOT_in_exception_name2360 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_exception_name2360 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_exception_name2365 ;

    //public static final BitSet FOLLOW_identifier_in_exception_name2365 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_exception_name2365 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_exception_package_name2376 ;

    //public static final BitSet FOLLOW_identifier_in_exception_package_name2376 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_exception_package_name2376 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_type_dec_in_record_declaration2395 ;

    //public static final BitSet FOLLOW_record_type_dec_in_record_declaration2395 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_record_type_dec_in_record_declaration2395 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTYPE_in_record_type_dec2408 ;

    //public static final BitSet FOLLOW_keyTYPE_in_record_type_dec2408 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyTYPE_in_record_type_dec2408 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_record_type_dec2410 ;

    //public static final BitSet FOLLOW_type_name_in_record_type_dec2410 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_type_name_in_record_type_dec2410 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_record_type_dec2412 ;

    //public static final BitSet FOLLOW_120_in_record_type_dec2412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});


    static this()
    {
    //FOLLOW_120_in_record_type_dec2412 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000020000000L]);

    }public static BitSet FOLLOW_keyRECORD_in_record_type_dec2414 ;

    //public static final BitSet FOLLOW_keyRECORD_in_record_type_dec2414 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyRECORD_in_record_type_dec2414 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_record_type_dec2419 ;

    //public static final BitSet FOLLOW_LPAREN_in_record_type_dec2419 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_record_type_dec2419 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_field_specs_in_record_type_dec2421 ;

    //public static final BitSet FOLLOW_field_specs_in_record_type_dec2421 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_field_specs_in_record_type_dec2421 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_record_type_dec2423 ;

    //public static final BitSet FOLLOW_RPAREN_in_record_type_dec2423 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_record_type_dec2423 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_record_type_dec2425 ;

    //public static final BitSet FOLLOW_SEMI_in_record_type_dec2425 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_record_type_dec2425 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_field_spec_in_field_specs2440 ;

    //public static final BitSet FOLLOW_field_spec_in_field_specs2440 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_field_spec_in_field_specs2440 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_field_specs2444 ;

    //public static final BitSet FOLLOW_COMMA_in_field_specs2444 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_field_specs2444 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_field_spec_in_field_specs2446 ;

    //public static final BitSet FOLLOW_field_spec_in_field_specs2446 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_field_spec_in_field_specs2446 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_column_name_in_field_spec2459 ;

    //public static final BitSet FOLLOW_column_name_in_field_spec2459 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_column_name_in_field_spec2459 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_field_spec2461 ;

    //public static final BitSet FOLLOW_type_spec_in_field_spec2461 = new BitSet(new long[]{0x0000000000000022L,0x0000000004000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_field_spec2461 = new BitSet([0x0000000000000022L,0x0000000004000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_field_spec2466 ;

    //public static final BitSet FOLLOW_134_in_field_spec2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_field_spec2466 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_field_spec2468 ;

    //public static final BitSet FOLLOW_136_in_field_spec2468 = new BitSet(new long[]{0x0000000000000022L,0x0000000004000000L});


    static this()
    {
    //FOLLOW_136_in_field_spec2468 = new BitSet([0x0000000000000022L,0x0000000004000000L]);

    }public static BitSet FOLLOW_set_in_field_spec2477 ;

    //public static final BitSet FOLLOW_set_in_field_spec2477 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_set_in_field_spec2477 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_field_spec2487 ;

    //public static final BitSet FOLLOW_plsql_expression_in_field_spec2487 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_field_spec2487 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_table_type_dec_in_plsql_table_declaration2500 ;

    //public static final BitSet FOLLOW_table_type_dec_in_plsql_table_declaration2500 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_table_type_dec_in_plsql_table_declaration2500 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTYPE_in_table_type_dec2512 ;

    //public static final BitSet FOLLOW_keyTYPE_in_table_type_dec2512 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyTYPE_in_table_type_dec2512 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_table_type_dec2514 ;

    //public static final BitSet FOLLOW_type_name_in_table_type_dec2514 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_type_name_in_table_type_dec2514 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_table_type_dec2516 ;

    //public static final BitSet FOLLOW_120_in_table_type_dec2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_120_in_table_type_dec2516 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_table_type_dec2518 ;

    //public static final BitSet FOLLOW_171_in_table_type_dec2518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_171_in_table_type_dec2518 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000004000L]);

    }public static BitSet FOLLOW_142_in_table_type_dec2523 ;

    //public static final BitSet FOLLOW_142_in_table_type_dec2523 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_142_in_table_type_dec2523 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_table_type_dec2525 ;

    //public static final BitSet FOLLOW_type_spec_in_table_type_dec2525 = new BitSet(new long[]{0x0020000000000000L,0x0004000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_table_type_dec2525 = new BitSet([0x0020000000000000L,0x0004000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_table_type_dec2529 ;

    //public static final BitSet FOLLOW_134_in_table_type_dec2529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_table_type_dec2529 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_table_type_dec2531 ;

    //public static final BitSet FOLLOW_136_in_table_type_dec2531 = new BitSet(new long[]{0x0020000000000000L,0x0004000000000000L});


    static this()
    {
    //FOLLOW_136_in_table_type_dec2531 = new BitSet([0x0020000000000000L,0x0004000000000000L]);

    }public static BitSet FOLLOW_114_in_table_type_dec2540 ;

    //public static final BitSet FOLLOW_114_in_table_type_dec2540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_114_in_table_type_dec2540 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_table_type_dec2542 ;

    //public static final BitSet FOLLOW_75_in_table_type_dec2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0020000000100000L});


    static this()
    {
    //FOLLOW_75_in_table_type_dec2542 = new BitSet([0x0000000000000000L,0x0000000000000100L,0x0020000000100000L]);

    }public static BitSet FOLLOW_72_in_table_type_dec2550 ;

    //public static final BitSet FOLLOW_72_in_table_type_dec2550 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_72_in_table_type_dec2550 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_148_in_table_type_dec2557 ;

    //public static final BitSet FOLLOW_148_in_table_type_dec2557 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_148_in_table_type_dec2557 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_181_in_table_type_dec2564 ;

    //public static final BitSet FOLLOW_181_in_table_type_dec2564 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_181_in_table_type_dec2564 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_table_type_dec2566 ;

    //public static final BitSet FOLLOW_LPAREN_in_table_type_dec2566 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_table_type_dec2566 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_integer_in_table_type_dec2568 ;

    //public static final BitSet FOLLOW_integer_in_table_type_dec2568 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_integer_in_table_type_dec2568 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_table_type_dec2570 ;

    //public static final BitSet FOLLOW_RPAREN_in_table_type_dec2570 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_table_type_dec2570 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_table_type_dec2584 ;

    //public static final BitSet FOLLOW_SEMI_in_table_type_dec2584 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_table_type_dec2584 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_name_in_table_var_dec2595 ;

    //public static final BitSet FOLLOW_plsql_table_name_in_table_var_dec2595 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_plsql_table_name_in_table_var_dec2595 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_table_var_dec2597 ;

    //public static final BitSet FOLLOW_type_name_in_table_var_dec2597 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_type_name_in_table_var_dec2597 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_table_var_dec2599 ;

    //public static final BitSet FOLLOW_SEMI_in_table_var_dec2599 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_table_var_dec2599 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_plsql_table_name2610 ;

    //public static final BitSet FOLLOW_identifier_in_plsql_table_name2610 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_plsql_table_name2610 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_plsql_table_name2614 ;

    //public static final BitSet FOLLOW_DOT_in_plsql_table_name2614 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_plsql_table_name2614 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_plsql_table_name2616 ;

    //public static final BitSet FOLLOW_identifier_in_plsql_table_name2616 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_plsql_table_name2616 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_keyTYPE_in_varray_declaration2630 ;

    //public static final BitSet FOLLOW_keyTYPE_in_varray_declaration2630 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyTYPE_in_varray_declaration2630 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_varray_declaration2632 ;

    //public static final BitSet FOLLOW_type_name_in_varray_declaration2632 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_type_name_in_varray_declaration2632 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_varray_declaration2634 ;

    //public static final BitSet FOLLOW_120_in_varray_declaration2634 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_120_in_varray_declaration2634 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyVARRAY_in_varray_declaration2641 ;

    //public static final BitSet FOLLOW_keyVARRAY_in_varray_declaration2641 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyVARRAY_in_varray_declaration2641 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keyVARYING_in_varray_declaration2645 ;

    //public static final BitSet FOLLOW_keyVARYING_in_varray_declaration2645 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyVARYING_in_varray_declaration2645 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyARRAY_in_varray_declaration2647 ;

    //public static final BitSet FOLLOW_keyARRAY_in_varray_declaration2647 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyARRAY_in_varray_declaration2647 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_varray_declaration2651 ;

    //public static final BitSet FOLLOW_LPAREN_in_varray_declaration2651 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_varray_declaration2651 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_integer_in_varray_declaration2653 ;

    //public static final BitSet FOLLOW_integer_in_varray_declaration2653 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_integer_in_varray_declaration2653 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_varray_declaration2655 ;

    //public static final BitSet FOLLOW_RPAREN_in_varray_declaration2655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_RPAREN_in_varray_declaration2655 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000004000L]);

    }public static BitSet FOLLOW_142_in_varray_declaration2659 ;

    //public static final BitSet FOLLOW_142_in_varray_declaration2659 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_142_in_varray_declaration2659 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_type_spec_in_varray_declaration2661 ;

    //public static final BitSet FOLLOW_type_spec_in_varray_declaration2661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_type_spec_in_varray_declaration2661 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_varray_declaration2665 ;

    //public static final BitSet FOLLOW_134_in_varray_declaration2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_varray_declaration2665 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_varray_declaration2667 ;

    //public static final BitSet FOLLOW_136_in_varray_declaration2667 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_varray_declaration2667 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_procedure_body_in_procedure_declaration2681 ;

    //public static final BitSet FOLLOW_procedure_body_in_procedure_declaration2681 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_procedure_body_in_procedure_declaration2681 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_proc_fun_start_in_procedure_body2694 ;

    //public static final BitSet FOLLOW_proc_fun_start_in_procedure_body2694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});


    static this()
    {
    //FOLLOW_proc_fun_start_in_procedure_body2694 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000001000000L]);

    }public static BitSet FOLLOW_152_in_procedure_body2699 ;

    //public static final BitSet FOLLOW_152_in_procedure_body2699 = new BitSet(new long[]{0x0000400000408000L});


    static this()
    {
    //FOLLOW_152_in_procedure_body2699 = new BitSet([0x0000400000408000L]);

    }public static BitSet FOLLOW_procedure_name_in_procedure_body2702 ;

    //public static final BitSet FOLLOW_procedure_name_in_procedure_body2702 = new BitSet(new long[]{0x0000000008000000L,0x0100000000000001L});


    static this()
    {
    //FOLLOW_procedure_name_in_procedure_body2702 = new BitSet([0x0000000008000000L,0x0100000000000001L]);

    }public static BitSet FOLLOW_LPAREN_in_procedure_body2709 ;

    //public static final BitSet FOLLOW_LPAREN_in_procedure_body2709 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_procedure_body2709 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_argument_in_procedure_body2711 ;

    //public static final BitSet FOLLOW_argument_in_procedure_body2711 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_argument_in_procedure_body2711 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_procedure_body2715 ;

    //public static final BitSet FOLLOW_COMMA_in_procedure_body2715 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_procedure_body2715 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_argument_in_procedure_body2717 ;

    //public static final BitSet FOLLOW_argument_in_procedure_body2717 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_argument_in_procedure_body2717 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_RPAREN_in_procedure_body2722 ;

    //public static final BitSet FOLLOW_RPAREN_in_procedure_body2722 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000001L});


    static this()
    {
    //FOLLOW_RPAREN_in_procedure_body2722 = new BitSet([0x0000000000000000L,0x0100000000000001L]);

    }public static BitSet FOLLOW_set_in_procedure_body2730 ;

    //public static final BitSet FOLLOW_set_in_procedure_body2730 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_set_in_procedure_body2730 = new BitSet([0x0000000000408000L,0x0000080000100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_declare_spec_in_procedure_body2757 ;

    //public static final BitSet FOLLOW_declare_spec_in_procedure_body2757 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_declare_spec_in_procedure_body2757 = new BitSet([0x0000000000408000L,0x0000080000100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_67_in_procedure_body2768 ;

    //public static final BitSet FOLLOW_67_in_procedure_body2768 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_67_in_procedure_body2768 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_procedure_body2776 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_procedure_body2776 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_procedure_body2776 = new BitSet([0x0000000000000000L,0x0000000600000000L]);

    }public static BitSet FOLLOW_98_in_procedure_body2784 ;

    //public static final BitSet FOLLOW_98_in_procedure_body2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_98_in_procedure_body2784 = new BitSet([0x0000000000000000L,0x0000000200000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_exception_handler_in_procedure_body2788 ;

    //public static final BitSet FOLLOW_exception_handler_in_procedure_body2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_exception_handler_in_procedure_body2788 = new BitSet([0x0000000000000000L,0x0000000200000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_97_in_procedure_body2798 ;

    //public static final BitSet FOLLOW_97_in_procedure_body2798 = new BitSet(new long[]{0x0020400000408000L});


    static this()
    {
    //FOLLOW_97_in_procedure_body2798 = new BitSet([0x0020400000408000L]);

    }public static BitSet FOLLOW_procedure_name_in_procedure_body2802 ;

    //public static final BitSet FOLLOW_procedure_name_in_procedure_body2802 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_procedure_name_in_procedure_body2802 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_procedure_body2807 ;

    //public static final BitSet FOLLOW_SEMI_in_procedure_body2807 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_procedure_body2807 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_67_in_begin_block2818 ;

    //public static final BitSet FOLLOW_67_in_begin_block2818 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_67_in_begin_block2818 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_begin_block2824 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_begin_block2824 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_begin_block2824 = new BitSet([0x0000000000000000L,0x0000000600000000L]);

    }public static BitSet FOLLOW_98_in_begin_block2832 ;

    //public static final BitSet FOLLOW_98_in_begin_block2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_98_in_begin_block2832 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_exception_handler_in_begin_block2836 ;

    //public static final BitSet FOLLOW_exception_handler_in_begin_block2836 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_exception_handler_in_begin_block2836 = new BitSet([0x0000000000000000L,0x0000000200000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_97_in_begin_block2846 ;

    //public static final BitSet FOLLOW_97_in_begin_block2846 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_97_in_begin_block2846 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_182_in_exception_handler2858 ;

    //public static final BitSet FOLLOW_182_in_exception_handler2858 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_182_in_exception_handler2858 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_exception_names_in_exception_handler2860 ;

    //public static final BitSet FOLLOW_exception_names_in_exception_handler2860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_exception_names_in_exception_handler2860 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_exception_handler2862 ;

    //public static final BitSet FOLLOW_172_in_exception_handler2862 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_172_in_exception_handler2862 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_exception_handler2866 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_exception_handler2866 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_exception_handler2866 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_84_in_proc_fun_start2877 ;

    //public static final BitSet FOLLOW_84_in_proc_fun_start2877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_84_in_proc_fun_start2877 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_144_in_proc_fun_start2881 ;

    //public static final BitSet FOLLOW_144_in_proc_fun_start2881 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_144_in_proc_fun_start2881 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyREPLACE_in_proc_fun_start2883 ;

    //public static final BitSet FOLLOW_keyREPLACE_in_proc_fun_start2883 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyREPLACE_in_proc_fun_start2883 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_proc_fun_start_in_function_body2899 ;

    //public static final BitSet FOLLOW_proc_fun_start_in_function_body2899 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_proc_fun_start_in_function_body2899 = new BitSet([0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_107_in_function_body2904 ;

    //public static final BitSet FOLLOW_107_in_function_body2904 = new BitSet(new long[]{0x0000400000408000L});


    static this()
    {
    //FOLLOW_107_in_function_body2904 = new BitSet([0x0000400000408000L]);

    }public static BitSet FOLLOW_function_name_in_function_body2907 ;

    //public static final BitSet FOLLOW_function_name_in_function_body2907 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_function_name_in_function_body2907 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_LPAREN_in_function_body2914 ;

    //public static final BitSet FOLLOW_LPAREN_in_function_body2914 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_function_body2914 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_arguments_in_function_body2916 ;

    //public static final BitSet FOLLOW_arguments_in_function_body2916 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_arguments_in_function_body2916 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_function_body2918 ;

    //public static final BitSet FOLLOW_RPAREN_in_function_body2918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_function_body2918 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_keyRETURN_in_function_body2926 ;

    //public static final BitSet FOLLOW_keyRETURN_in_function_body2926 = new BitSet(new long[]{0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyRETURN_in_function_body2926 = new BitSet([0x0000000000408000L,0x4830008040E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_return_type_in_function_body2928 ;

    //public static final BitSet FOLLOW_return_type_in_function_body2928 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000001L});


    static this()
    {
    //FOLLOW_return_type_in_function_body2928 = new BitSet([0x0000000000000000L,0x0100000000000001L]);

    }public static BitSet FOLLOW_set_in_function_body2930 ;

    //public static final BitSet FOLLOW_set_in_function_body2930 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_set_in_function_body2930 = new BitSet([0x0000000000408000L,0x0000080000100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_declare_spec_in_function_body2957 ;

    //public static final BitSet FOLLOW_declare_spec_in_function_body2957 = new BitSet(new long[]{0x0000000000408000L,0x0000080000100008L,0x0000000001400000L});


    static this()
    {
    //FOLLOW_declare_spec_in_function_body2957 = new BitSet([0x0000000000408000L,0x0000080000100008L,0x0000000001400000L]);

    }public static BitSet FOLLOW_67_in_function_body2968 ;

    //public static final BitSet FOLLOW_67_in_function_body2968 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_67_in_function_body2968 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_function_body2976 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_function_body2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_function_body2976 = new BitSet([0x0000000000000000L,0x0000000600000000L]);

    }public static BitSet FOLLOW_98_in_function_body2984 ;

    //public static final BitSet FOLLOW_98_in_function_body2984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_98_in_function_body2984 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_exception_handler_in_function_body2988 ;

    //public static final BitSet FOLLOW_exception_handler_in_function_body2988 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_exception_handler_in_function_body2988 = new BitSet([0x0000000000000000L,0x0000000200000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_97_in_function_body2998 ;

    //public static final BitSet FOLLOW_97_in_function_body2998 = new BitSet(new long[]{0x0020400000408000L});


    static this()
    {
    //FOLLOW_97_in_function_body2998 = new BitSet([0x0020400000408000L]);

    }public static BitSet FOLLOW_function_name_in_function_body3002 ;

    //public static final BitSet FOLLOW_function_name_in_function_body3002 = new BitSet(new long[]{0x0020000000000000L});


    static this()
    {
    //FOLLOW_function_name_in_function_body3002 = new BitSet([0x0020000000000000L]);

    }public static BitSet FOLLOW_SEMI_in_function_body3007 ;

    //public static final BitSet FOLLOW_SEMI_in_function_body3007 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_SEMI_in_function_body3007 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_function_name3020 ;

    //public static final BitSet FOLLOW_identifier_in_function_name3020 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_function_name3020 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_function_name3024 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_function_name3024 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_function_name3024 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_procedure_name3036 ;

    //public static final BitSet FOLLOW_identifier_in_procedure_name3036 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_procedure_name3036 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_procedure_name3040 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_procedure_name3040 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_procedure_name3040 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_argument_in_arguments3052 ;

    //public static final BitSet FOLLOW_argument_in_arguments3052 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_argument_in_arguments3052 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_arguments3056 ;

    //public static final BitSet FOLLOW_COMMA_in_arguments3056 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_arguments3056 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_argument_in_arguments3058 ;

    //public static final BitSet FOLLOW_argument_in_arguments3058 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_argument_in_arguments3058 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_argument_name_in_argument3072 ;

    //public static final BitSet FOLLOW_argument_name_in_argument3072 = new BitSet(new long[]{0x0000000000408022L,0x4832008044E0E7E0L,0x0034010418343C0FL});


    static this()
    {
    //FOLLOW_argument_name_in_argument3072 = new BitSet([0x0000000000408022L,0x4832008044E0E7E0L,0x0034010418343C0FL]);

    }public static BitSet FOLLOW_keyOUT_in_argument3076 ;

    //public static final BitSet FOLLOW_keyOUT_in_argument3076 = new BitSet(new long[]{0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyOUT_in_argument3076 = new BitSet([0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_113_in_argument3080 ;

    //public static final BitSet FOLLOW_113_in_argument3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});


    static this()
    {
    //FOLLOW_113_in_argument3080 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000040000L]);

    }public static BitSet FOLLOW_keyOUT_in_argument3082 ;

    //public static final BitSet FOLLOW_keyOUT_in_argument3082 = new BitSet(new long[]{0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_keyOUT_in_argument3082 = new BitSet([0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_113_in_argument3086 ;

    //public static final BitSet FOLLOW_113_in_argument3086 = new BitSet(new long[]{0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL});


    static this()
    {
    //FOLLOW_113_in_argument3086 = new BitSet([0x0000000000408022L,0x4830008044E0E7E0L,0x0034010418303C0FL]);

    }public static BitSet FOLLOW_argument_type_in_argument3092 ;

    //public static final BitSet FOLLOW_argument_type_in_argument3092 = new BitSet(new long[]{0x0000000000000022L,0x0000000004000000L});


    static this()
    {
    //FOLLOW_argument_type_in_argument3092 = new BitSet([0x0000000000000022L,0x0000000004000000L]);

    }public static BitSet FOLLOW_set_in_argument3101 ;

    //public static final BitSet FOLLOW_set_in_argument3101 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_set_in_argument3101 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_argument3111 ;

    //public static final BitSet FOLLOW_plsql_expression_in_argument3111 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_argument3111 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_argument_name3125 ;

    //public static final BitSet FOLLOW_identifier_in_argument_name3125 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_argument_name3125 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_spec_in_argument_type3136 ;

    //public static final BitSet FOLLOW_type_spec_in_argument_type3136 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_spec_in_argument_type3136 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NUMBER_in_value3158 ;

    //public static final BitSet FOLLOW_NUMBER_in_value3158 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_value3158 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_quoted_string_in_value3163 ;

    //public static final BitSet FOLLOW_quoted_string_in_value3163 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_quoted_string_in_value3163 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_174_in_value3168 ;

    //public static final BitSet FOLLOW_174_in_value3168 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_174_in_value3168 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_101_in_value3172 ;

    //public static final BitSet FOLLOW_101_in_value3172 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_101_in_value3172 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_136_in_value3177 ;

    //public static final BitSet FOLLOW_136_in_value3177 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_value3177 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_spec_in_return_type3188 ;

    //public static final BitSet FOLLOW_type_spec_in_return_type3188 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_spec_in_return_type3188 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_body_in_function_declaration3199 ;

    //public static final BitSet FOLLOW_function_body_in_function_declaration3199 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_body_in_function_declaration3199 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_user_defined_function_in_function_call3210 ;

    //public static final BitSet FOLLOW_user_defined_function_in_function_call3210 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_user_defined_function_in_function_call3210 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_function_call3216 ;

    //public static final BitSet FOLLOW_LPAREN_in_function_call3216 = new BitSet(new long[]{0x0010401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_function_call3216 = new BitSet([0x0010401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_call_parameters_in_function_call3220 ;

    //public static final BitSet FOLLOW_call_parameters_in_function_call3220 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_call_parameters_in_function_call3220 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_function_call3225 ;

    //public static final BitSet FOLLOW_RPAREN_in_function_call3225 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_function_call3225 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_table_name_in_collection_function_call3244 ;

    //public static final BitSet FOLLOW_plsql_table_name_in_collection_function_call3244 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_table_name_in_collection_function_call3244 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_variable_name_in_variable_names3255 ;

    //public static final BitSet FOLLOW_variable_name_in_variable_names3255 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_variable_name_in_variable_names3255 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_variable_names3259 ;

    //public static final BitSet FOLLOW_COMMA_in_variable_names3259 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_variable_names3259 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_variable_name_in_variable_names3261 ;

    //public static final BitSet FOLLOW_variable_name_in_variable_names3261 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_variable_name_in_variable_names3261 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_identifier_in_variable_name3274 ;

    //public static final BitSet FOLLOW_identifier_in_variable_name3274 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_variable_name3274 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_full_variable_name3293 ;

    //public static final BitSet FOLLOW_identifier_in_full_variable_name3293 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_full_variable_name3293 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_full_variable_name3296 ;

    //public static final BitSet FOLLOW_DOT_in_full_variable_name3296 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_full_variable_name3296 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_full_variable_name3299 ;

    //public static final BitSet FOLLOW_identifier_in_full_variable_name3299 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_full_variable_name3299 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_136_in_null_statement3314 ;

    //public static final BitSet FOLLOW_136_in_null_statement3314 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_null_statement3314 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRAISE_in_raise_statement3326 ;

    //public static final BitSet FOLLOW_keyRAISE_in_raise_statement3326 = new BitSet(new long[]{0x0000000000408002L});


    static this()
    {
    //FOLLOW_keyRAISE_in_raise_statement3326 = new BitSet([0x0000000000408002L]);

    }public static BitSet FOLLOW_exception_name_in_raise_statement3330 ;

    //public static final BitSet FOLLOW_exception_name_in_raise_statement3330 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exception_name_in_raise_statement3330 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRETURN_in_return_statement3345 ;

    //public static final BitSet FOLLOW_keyRETURN_in_return_statement3345 = new BitSet(new long[]{0x0000401428408002L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_keyRETURN_in_return_statement3345 = new BitSet([0x0000401428408002L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_return_statement3349 ;

    //public static final BitSet FOLLOW_plsql_expression_in_return_statement3349 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_return_statement3349 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LLABEL_in_loop_statement3365 ;

    //public static final BitSet FOLLOW_LLABEL_in_loop_statement3365 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LLABEL_in_loop_statement3365 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_label_name_in_loop_statement3367 ;

    //public static final BitSet FOLLOW_label_name_in_loop_statement3367 = new BitSet(new long[]{0x0002000000000000L});


    static this()
    {
    //FOLLOW_label_name_in_loop_statement3367 = new BitSet([0x0002000000000000L]);

    }public static BitSet FOLLOW_RLABEL_in_loop_statement3369 ;

    //public static final BitSet FOLLOW_RLABEL_in_loop_statement3369 = new BitSet(new long[]{0x0000000000000000L,0x1000010000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_RLABEL_in_loop_statement3369 = new BitSet([0x0000000000000000L,0x1000010000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_keyWHILE_in_loop_statement3378 ;

    //public static final BitSet FOLLOW_keyWHILE_in_loop_statement3378 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_keyWHILE_in_loop_statement3378 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_condition_in_loop_statement3381 ;

    //public static final BitSet FOLLOW_plsql_condition_in_loop_statement3381 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});


    static this()
    {
    //FOLLOW_plsql_condition_in_loop_statement3381 = new BitSet([0x0000000000000000L,0x1000000000000000L]);

    }public static BitSet FOLLOW_104_in_loop_statement3390 ;

    //public static final BitSet FOLLOW_104_in_loop_statement3390 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_104_in_loop_statement3390 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_numeric_loop_param_in_loop_statement3407 ;

    //public static final BitSet FOLLOW_numeric_loop_param_in_loop_statement3407 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});


    static this()
    {
    //FOLLOW_numeric_loop_param_in_loop_statement3407 = new BitSet([0x0000000000000000L,0x1000000000000000L]);

    }public static BitSet FOLLOW_cursor_loop_param_in_loop_statement3423 ;

    //public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement3423 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});


    static this()
    {
    //FOLLOW_cursor_loop_param_in_loop_statement3423 = new BitSet([0x0000000000000000L,0x1000000000000000L]);

    }public static BitSet FOLLOW_keyLOOP_in_loop_statement3444 ;

    //public static final BitSet FOLLOW_keyLOOP_in_loop_statement3444 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_keyLOOP_in_loop_statement3444 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_loop_statement3448 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_loop_statement3448 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_loop_statement3448 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_97_in_loop_statement3452 ;

    //public static final BitSet FOLLOW_97_in_loop_statement3452 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});


    static this()
    {
    //FOLLOW_97_in_loop_statement3452 = new BitSet([0x0000000000000000L,0x1000000000000000L]);

    }public static BitSet FOLLOW_keyLOOP_in_loop_statement3454 ;

    //public static final BitSet FOLLOW_keyLOOP_in_loop_statement3454 = new BitSet(new long[]{0x0000000000408002L});


    static this()
    {
    //FOLLOW_keyLOOP_in_loop_statement3454 = new BitSet([0x0000000000408002L]);

    }public static BitSet FOLLOW_label_name_in_loop_statement3461 ;

    //public static final BitSet FOLLOW_label_name_in_loop_statement3461 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_label_name_in_loop_statement3461 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_index_name_in_numeric_loop_param3475 ;

    //public static final BitSet FOLLOW_index_name_in_numeric_loop_param3475 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_index_name_in_numeric_loop_param3475 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_numeric_loop_param3477 ;

    //public static final BitSet FOLLOW_113_in_numeric_loop_param3477 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_113_in_numeric_loop_param3477 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyREVERSE_in_numeric_loop_param3481 ;

    //public static final BitSet FOLLOW_keyREVERSE_in_numeric_loop_param3481 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyREVERSE_in_numeric_loop_param3481 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_integer_expr_in_numeric_loop_param3486 ;

    //public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param3486 = new BitSet(new long[]{0x0000000000004000L});


    static this()
    {
    //FOLLOW_integer_expr_in_numeric_loop_param3486 = new BitSet([0x0000000000004000L]);

    }public static BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param3488 ;

    //public static final BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param3488 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_DOUBLEDOT_in_numeric_loop_param3488 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_integer_expr_in_numeric_loop_param3490 ;

    //public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param3490 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_expr_in_numeric_loop_param3490 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_index_name3501 ;

    //public static final BitSet FOLLOW_identifier_in_index_name3501 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_index_name3501 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_integer_expr3513 ;

    //public static final BitSet FOLLOW_sql_expression_in_integer_expr3513 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_integer_expr3513 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_cursor_name3524 ;

    //public static final BitSet FOLLOW_identifier_in_cursor_name3524 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_cursor_name3524 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_record_name_in_cursor_loop_param3535 ;

    //public static final BitSet FOLLOW_record_name_in_cursor_loop_param3535 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_record_name_in_cursor_loop_param3535 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_cursor_loop_param3537 ;

    //public static final BitSet FOLLOW_113_in_cursor_loop_param3537 = new BitSet(new long[]{0x0000000008408000L});


    static this()
    {
    //FOLLOW_113_in_cursor_loop_param3537 = new BitSet([0x0000000008408000L]);

    }public static BitSet FOLLOW_cursor_name_in_cursor_loop_param3543 ;

    //public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param3543 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_cursor_name_in_cursor_loop_param3543 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_cursor_loop_param3547 ;

    //public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param3547 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_cursor_loop_param3547 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expressions_in_cursor_loop_param3549 ;

    //public static final BitSet FOLLOW_plsql_expressions_in_cursor_loop_param3549 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_plsql_expressions_in_cursor_loop_param3549 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_cursor_loop_param3551 ;

    //public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param3551 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_cursor_loop_param3551 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_cursor_loop_param3560 ;

    //public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param3560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_cursor_loop_param3560 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_statement_in_cursor_loop_param3562 ;

    //public static final BitSet FOLLOW_select_statement_in_cursor_loop_param3562 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_statement_in_cursor_loop_param3562 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_cursor_loop_param3564 ;

    //public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param3564 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_cursor_loop_param3564 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_record_name3579 ;

    //public static final BitSet FOLLOW_identifier_in_record_name3579 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_record_name3579 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_81_in_commit_statement3590 ;

    //public static final BitSet FOLLOW_81_in_commit_statement3590 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_81_in_commit_statement3590 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_112_in_if_statement3601 ;

    //public static final BitSet FOLLOW_112_in_if_statement3601 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_112_in_if_statement3601 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_condition_in_if_statement3604 ;

    //public static final BitSet FOLLOW_plsql_condition_in_if_statement3604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_plsql_condition_in_if_statement3604 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_if_statement3606 ;

    //public static final BitSet FOLLOW_172_in_if_statement3606 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_172_in_if_statement3606 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_if_statement3608 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_if_statement3608 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_if_statement3608 = new BitSet([0x0000000000000000L,0x0000000380000000L]);

    }public static BitSet FOLLOW_keyELSIF_in_if_statement3618 ;

    //public static final BitSet FOLLOW_keyELSIF_in_if_statement3618 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_keyELSIF_in_if_statement3618 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_condition_in_if_statement3620 ;

    //public static final BitSet FOLLOW_plsql_condition_in_if_statement3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_plsql_condition_in_if_statement3620 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_if_statement3622 ;

    //public static final BitSet FOLLOW_172_in_if_statement3622 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_172_in_if_statement3622 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_if_statement3624 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_if_statement3624 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_if_statement3624 = new BitSet([0x0000000000000000L,0x0000000380000000L]);

    }public static BitSet FOLLOW_95_in_if_statement3635 ;

    //public static final BitSet FOLLOW_95_in_if_statement3635 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_95_in_if_statement3635 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_if_statement3637 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_if_statement3637 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_if_statement3637 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_97_in_if_statement3644 ;

    //public static final BitSet FOLLOW_97_in_if_statement3644 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});


    static this()
    {
    //FOLLOW_97_in_if_statement3644 = new BitSet([0x0000000000000000L,0x0001000000000000L]);

    }public static BitSet FOLLOW_112_in_if_statement3646 ;

    //public static final BitSet FOLLOW_112_in_if_statement3646 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_112_in_if_statement3646 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_command_in_sql_statement3657 ;

    //public static final BitSet FOLLOW_sql_command_in_sql_statement3657 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_command_in_sql_statement3657 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_to_modify_data_in_sql_command3668 ;

    //public static final BitSet FOLLOW_to_modify_data_in_sql_command3668 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_to_modify_data_in_sql_command3668 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_to_control_data_in_sql_command3673 ;

    //public static final BitSet FOLLOW_to_control_data_in_sql_command3673 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_to_control_data_in_sql_command3673 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_select_command_in_to_modify_data3684 ;

    //public static final BitSet FOLLOW_select_command_in_to_modify_data3684 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_command_in_to_modify_data3684 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_insert_command_in_to_modify_data3689 ;

    //public static final BitSet FOLLOW_insert_command_in_to_modify_data3689 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_insert_command_in_to_modify_data3689 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_update_command_in_to_modify_data3694 ;

    //public static final BitSet FOLLOW_update_command_in_to_modify_data3694 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_update_command_in_to_modify_data3694 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_delete_command_in_to_modify_data3699 ;

    //public static final BitSet FOLLOW_delete_command_in_to_modify_data3699 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_delete_command_in_to_modify_data3699 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_set_transaction_command_in_to_modify_data3704 ;

    //public static final BitSet FOLLOW_set_transaction_command_in_to_modify_data3704 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_set_transaction_command_in_to_modify_data3704 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_close_statement_in_to_control_data3715 ;

    //public static final BitSet FOLLOW_close_statement_in_to_control_data3715 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_close_statement_in_to_control_data3715 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_commit_statement_in_to_control_data3720 ;

    //public static final BitSet FOLLOW_commit_statement_in_to_control_data3720 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_commit_statement_in_to_control_data3720 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_fetch_statement_in_to_control_data3725 ;

    //public static final BitSet FOLLOW_fetch_statement_in_to_control_data3725 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_fetch_statement_in_to_control_data3725 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_lock_table_statement_in_to_control_data3730 ;

    //public static final BitSet FOLLOW_lock_table_statement_in_to_control_data3730 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lock_table_statement_in_to_control_data3730 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_open_statement_in_to_control_data3735 ;

    //public static final BitSet FOLLOW_open_statement_in_to_control_data3735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_open_statement_in_to_control_data3735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_rollback_statement_in_to_control_data3740 ;

    //public static final BitSet FOLLOW_rollback_statement_in_to_control_data3740 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_rollback_statement_in_to_control_data3740 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_savepoint_statement_in_to_control_data3745 ;

    //public static final BitSet FOLLOW_savepoint_statement_in_to_control_data3745 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_savepoint_statement_in_to_control_data3745 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_select_statement_in_select_command3756 ;

    //public static final BitSet FOLLOW_select_statement_in_select_command3756 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_statement_in_select_command3756 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_select_expression_in_select_statement3770 ;

    //public static final BitSet FOLLOW_select_expression_in_select_statement3770 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_expression_in_select_statement3770 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_165_in_select_expression3785 ;

    //public static final BitSet FOLLOW_165_in_select_expression3785 = new BitSet(new long[]{0x2000401428408040L,0x0000002020001000L,0x0001422400000100L});


    static this()
    {
    //FOLLOW_165_in_select_expression3785 = new BitSet([0x2000401428408040L,0x0000002020001000L,0x0001422400000100L]);

    }public static BitSet FOLLOW_select_list_in_select_expression3804 ;

    //public static final BitSet FOLLOW_select_list_in_select_expression3804 = new BitSet(new long[]{0x0000000000400000L,0x0080040000000000L});


    static this()
    {
    //FOLLOW_select_list_in_select_expression3804 = new BitSet([0x0000000000400000L,0x0080040000000000L]);

    }public static BitSet FOLLOW_keyBULK_in_select_expression3810 ;

    //public static final BitSet FOLLOW_keyBULK_in_select_expression3810 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyBULK_in_select_expression3810 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyCOLLECT_in_select_expression3812 ;

    //public static final BitSet FOLLOW_keyCOLLECT_in_select_expression3812 = new BitSet(new long[]{0x0000000000000000L,0x0080040000000000L});


    static this()
    {
    //FOLLOW_keyCOLLECT_in_select_expression3812 = new BitSet([0x0000000000000000L,0x0080040000000000L]);

    }public static BitSet FOLLOW_119_in_select_expression3821 ;

    //public static final BitSet FOLLOW_119_in_select_expression3821 = new BitSet(new long[]{0x0000000000408400L});


    static this()
    {
    //FOLLOW_119_in_select_expression3821 = new BitSet([0x0000000000408400L]);

    }public static BitSet FOLLOW_lvalues_in_select_expression3823 ;

    //public static final BitSet FOLLOW_lvalues_in_select_expression3823 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_lvalues_in_select_expression3823 = new BitSet([0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_106_in_select_expression3830 ;

    //public static final BitSet FOLLOW_106_in_select_expression3830 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_106_in_select_expression3830 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_join_clause_in_select_expression3834 ;

    //public static final BitSet FOLLOW_join_clause_in_select_expression3834 = new BitSet(new long[]{0x0000000000400002L,0x2040600000040000L,0x0080840000020000L});


    static this()
    {
    //FOLLOW_join_clause_in_select_expression3834 = new BitSet([0x0000000000400002L,0x2040600000040000L,0x0080840000020000L]);

    }public static BitSet FOLLOW_LPAREN_in_select_expression3838 ;

    //public static final BitSet FOLLOW_LPAREN_in_select_expression3838 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_select_expression3838 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_join_clause_in_select_expression3840 ;

    //public static final BitSet FOLLOW_join_clause_in_select_expression3840 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_join_clause_in_select_expression3840 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_select_expression3842 ;

    //public static final BitSet FOLLOW_RPAREN_in_select_expression3842 = new BitSet(new long[]{0x0000000000400002L,0x2040600000040000L,0x0080840000020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_select_expression3842 = new BitSet([0x0000000000400002L,0x2040600000040000L,0x0080840000020000L]);

    }public static BitSet FOLLOW_table_reference_list_in_select_expression3846 ;

    //public static final BitSet FOLLOW_table_reference_list_in_select_expression3846 = new BitSet(new long[]{0x0000000000400002L,0x2040600000040000L,0x0080840000020000L});


    static this()
    {
    //FOLLOW_table_reference_list_in_select_expression3846 = new BitSet([0x0000000000400002L,0x2040600000040000L,0x0080840000020000L]);

    }public static BitSet FOLLOW_where_clause_in_select_expression3854 ;

    //public static final BitSet FOLLOW_where_clause_in_select_expression3854 = new BitSet(new long[]{0x0000000000400002L,0x2040600000040000L,0x0000840000020000L});


    static this()
    {
    //FOLLOW_where_clause_in_select_expression3854 = new BitSet([0x0000000000400002L,0x2040600000040000L,0x0000840000020000L]);

    }public static BitSet FOLLOW_hierarchical_query_clause_in_select_expression3861 ;

    //public static final BitSet FOLLOW_hierarchical_query_clause_in_select_expression3861 = new BitSet(new long[]{0x0000000000400002L,0x2040600000000000L,0x0000800000020000L});


    static this()
    {
    //FOLLOW_hierarchical_query_clause_in_select_expression3861 = new BitSet([0x0000000000400002L,0x2040600000000000L,0x0000800000020000L]);

    }public static BitSet FOLLOW_group_by_clause_in_select_expression3868 ;

    //public static final BitSet FOLLOW_group_by_clause_in_select_expression3868 = new BitSet(new long[]{0x0000000000400002L,0x2040400000000000L,0x0000800000020000L});


    static this()
    {
    //FOLLOW_group_by_clause_in_select_expression3868 = new BitSet([0x0000000000400002L,0x2040400000000000L,0x0000800000020000L]);

    }public static BitSet FOLLOW_110_in_select_expression3877 ;

    //public static final BitSet FOLLOW_110_in_select_expression3877 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_110_in_select_expression3877 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_select_expression3879 ;

    //public static final BitSet FOLLOW_sql_condition_in_select_expression3879 = new BitSet(new long[]{0x0000000000400002L,0x2040000000000000L,0x0000800000020000L});


    static this()
    {
    //FOLLOW_sql_condition_in_select_expression3879 = new BitSet([0x0000000000400002L,0x2040000000000000L,0x0000800000020000L]);

    }public static BitSet FOLLOW_model_clause_in_select_expression3886 ;

    //public static final BitSet FOLLOW_model_clause_in_select_expression3886 = new BitSet(new long[]{0x0000000000000002L,0x2040000000000000L,0x0000800000020000L});


    static this()
    {
    //FOLLOW_model_clause_in_select_expression3886 = new BitSet([0x0000000000000002L,0x2040000000000000L,0x0000800000020000L]);

    }public static BitSet FOLLOW_175_in_select_expression3897 ;

    //public static final BitSet FOLLOW_175_in_select_expression3897 = new BitSet(new long[]{0x2000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_175_in_select_expression3897 = new BitSet([0x2000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_61_in_select_expression3901 ;

    //public static final BitSet FOLLOW_61_in_select_expression3901 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_61_in_select_expression3901 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_118_in_select_expression3911 ;

    //public static final BitSet FOLLOW_118_in_select_expression3911 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_118_in_select_expression3911 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_125_in_select_expression3918 ;

    //public static final BitSet FOLLOW_125_in_select_expression3918 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_125_in_select_expression3918 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_expression_in_select_expression3930 ;

    //public static final BitSet FOLLOW_select_expression_in_select_expression3930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_select_expression_in_select_expression3930 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_subquery_in_select_expression3938 ;

    //public static final BitSet FOLLOW_subquery_in_select_expression3938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_subquery_in_select_expression3938 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_order_by_clause_in_select_expression3954 ;

    //public static final BitSet FOLLOW_order_by_clause_in_select_expression3954 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_order_by_clause_in_select_expression3954 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ASTERISK_in_select_list3970 ;

    //public static final BitSet FOLLOW_ASTERISK_in_select_list3970 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ASTERISK_in_select_list3970 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_displayed_column_in_select_list3975 ;

    //public static final BitSet FOLLOW_displayed_column_in_select_list3975 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_displayed_column_in_select_list3975 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_select_list3979 ;

    //public static final BitSet FOLLOW_COMMA_in_select_list3979 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_select_list3979 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_displayed_column_in_select_list3981 ;

    //public static final BitSet FOLLOW_displayed_column_in_select_list3981 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_displayed_column_in_select_list3981 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_106_in_table_reference_list_from3995 ;

    //public static final BitSet FOLLOW_106_in_table_reference_list_from3995 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_106_in_table_reference_list_from3995 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_table_reference_list_in_table_reference_list_from3997 ;

    //public static final BitSet FOLLOW_table_reference_list_in_table_reference_list_from3997 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_table_reference_list_in_table_reference_list_from3997 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_selected_table_in_table_reference_list4008 ;

    //public static final BitSet FOLLOW_selected_table_in_table_reference_list4008 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_selected_table_in_table_reference_list4008 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_table_reference_list4012 ;

    //public static final BitSet FOLLOW_COMMA_in_table_reference_list4012 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_table_reference_list4012 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_selected_table_in_table_reference_list4014 ;

    //public static final BitSet FOLLOW_selected_table_in_table_reference_list4014 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_selected_table_in_table_reference_list4014 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_selected_table_in_join_clause4028 ;

    //public static final BitSet FOLLOW_selected_table_in_join_clause4028 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_selected_table_in_join_clause4028 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_inner_cross_join_clause_in_join_clause4032 ;

    //public static final BitSet FOLLOW_inner_cross_join_clause_in_join_clause4032 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_inner_cross_join_clause_in_join_clause4032 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_outer_join_clause_in_join_clause4036 ;

    //public static final BitSet FOLLOW_outer_join_clause_in_join_clause4036 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_outer_join_clause_in_join_clause4036 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_keyINNER_in_inner_cross_join_clause4051 ;

    //public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause4051 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINNER_in_inner_cross_join_clause4051 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause4056 ;

    //public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause4056 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyJOIN_in_inner_cross_join_clause4056 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_inner_cross_join_clause4058 ;

    //public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause4058 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000008000L});


    static this()
    {
    //FOLLOW_table_name_in_inner_cross_join_clause4058 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000008000L]);

    }public static BitSet FOLLOW_143_in_inner_cross_join_clause4062 ;

    //public static final BitSet FOLLOW_143_in_inner_cross_join_clause4062 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_143_in_inner_cross_join_clause4062 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_inner_cross_join_clause4064 ;

    //public static final BitSet FOLLOW_sql_condition_in_inner_cross_join_clause4064 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_inner_cross_join_clause4064 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyUSING_in_inner_cross_join_clause4068 ;

    //public static final BitSet FOLLOW_keyUSING_in_inner_cross_join_clause4068 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUSING_in_inner_cross_join_clause4068 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_inner_cross_join_clause4070 ;

    //public static final BitSet FOLLOW_LPAREN_in_inner_cross_join_clause4070 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_inner_cross_join_clause4070 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_inner_cross_join_clause4072 ;

    //public static final BitSet FOLLOW_column_specs_in_inner_cross_join_clause4072 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_inner_cross_join_clause4072 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_inner_cross_join_clause4074 ;

    //public static final BitSet FOLLOW_RPAREN_in_inner_cross_join_clause4074 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_inner_cross_join_clause4074 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause4083 ;

    //public static final BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause4083 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyCROSS_in_inner_cross_join_clause4083 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause4087 ;

    //public static final BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause4087 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNATURAL_in_inner_cross_join_clause4087 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyINNER_in_inner_cross_join_clause4091 ;

    //public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause4091 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINNER_in_inner_cross_join_clause4091 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause4097 ;

    //public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause4097 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyJOIN_in_inner_cross_join_clause4097 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_inner_cross_join_clause4099 ;

    //public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause4099 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_table_name_in_inner_cross_join_clause4099 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_query_partition_clause_in_outer_join_clause4111 ;

    //public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause4111 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_query_partition_clause_in_outer_join_clause4111 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_outer_join_type_in_outer_join_clause4120 ;

    //public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause4120 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_outer_join_type_in_outer_join_clause4120 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_outer_join_clause4122 ;

    //public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause4122 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_keyJOIN_in_outer_join_clause4122 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_keyNATURAL_in_outer_join_clause4128 ;

    //public static final BitSet FOLLOW_keyNATURAL_in_outer_join_clause4128 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNATURAL_in_outer_join_clause4128 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_outer_join_type_in_outer_join_clause4132 ;

    //public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause4132 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_outer_join_type_in_outer_join_clause4132 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_outer_join_clause4137 ;

    //public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause4137 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_keyJOIN_in_outer_join_clause4137 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_selected_table_in_outer_join_clause4145 ;

    //public static final BitSet FOLLOW_selected_table_in_outer_join_clause4145 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000008000L});


    static this()
    {
    //FOLLOW_selected_table_in_outer_join_clause4145 = new BitSet([0x0000000000400002L,0x0000000000000000L,0x0000000000008000L]);

    }public static BitSet FOLLOW_query_partition_clause_in_outer_join_clause4149 ;

    //public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause4149 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000008000L});


    static this()
    {
    //FOLLOW_query_partition_clause_in_outer_join_clause4149 = new BitSet([0x0000000000400002L,0x0000000000000000L,0x0000000000008000L]);

    }public static BitSet FOLLOW_143_in_outer_join_clause4158 ;

    //public static final BitSet FOLLOW_143_in_outer_join_clause4158 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_143_in_outer_join_clause4158 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_outer_join_clause4160 ;

    //public static final BitSet FOLLOW_sql_condition_in_outer_join_clause4160 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_outer_join_clause4160 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyUSING_in_outer_join_clause4164 ;

    //public static final BitSet FOLLOW_keyUSING_in_outer_join_clause4164 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUSING_in_outer_join_clause4164 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_outer_join_clause4166 ;

    //public static final BitSet FOLLOW_LPAREN_in_outer_join_clause4166 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_outer_join_clause4166 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_outer_join_clause4168 ;

    //public static final BitSet FOLLOW_column_specs_in_outer_join_clause4168 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_outer_join_clause4168 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_outer_join_clause4170 ;

    //public static final BitSet FOLLOW_RPAREN_in_outer_join_clause4170 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_outer_join_clause4170 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyPARTITION_in_query_partition_clause4183 ;

    //public static final BitSet FOLLOW_keyPARTITION_in_query_partition_clause4183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_keyPARTITION_in_query_partition_clause4183 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_query_partition_clause4185 ;

    //public static final BitSet FOLLOW_75_in_query_partition_clause4185 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_75_in_query_partition_clause4185 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expression_list_in_query_partition_clause4187 ;

    //public static final BitSet FOLLOW_expression_list_in_query_partition_clause4187 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_list_in_query_partition_clause4187 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyFULL_in_outer_join_type4199 ;

    //public static final BitSet FOLLOW_keyFULL_in_outer_join_type4199 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_keyFULL_in_outer_join_type4199 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_keyLEFT_in_outer_join_type4203 ;

    //public static final BitSet FOLLOW_keyLEFT_in_outer_join_type4203 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_keyLEFT_in_outer_join_type4203 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_keyRIGHT_in_outer_join_type4207 ;

    //public static final BitSet FOLLOW_keyRIGHT_in_outer_join_type4207 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_keyRIGHT_in_outer_join_type4207 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_keyOUTER_in_outer_join_type4213 ;

    //public static final BitSet FOLLOW_keyOUTER_in_outer_join_type4213 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyOUTER_in_outer_join_type4213 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_outer_join_sign4226 ;

    //public static final BitSet FOLLOW_LPAREN_in_outer_join_sign4226 = new BitSet(new long[]{0x0000001000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_outer_join_sign4226 = new BitSet([0x0000001000000000L]);

    }public static BitSet FOLLOW_PLUS_in_outer_join_sign4228 ;

    //public static final BitSet FOLLOW_PLUS_in_outer_join_sign4228 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_PLUS_in_outer_join_sign4228 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_outer_join_sign4230 ;

    //public static final BitSet FOLLOW_RPAREN_in_outer_join_sign4230 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_outer_join_sign4230 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_183_in_where_clause4240 ;

    //public static final BitSet FOLLOW_183_in_where_clause4240 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_183_in_where_clause4240 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_where_clause4242 ;

    //public static final BitSet FOLLOW_sql_condition_in_where_clause4242 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_where_clause4242 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_170_in_hierarchical_query_clause4254 ;

    //public static final BitSet FOLLOW_170_in_hierarchical_query_clause4254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_170_in_hierarchical_query_clause4254 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_hierarchical_query_clause4256 ;

    //public static final BitSet FOLLOW_185_in_hierarchical_query_clause4256 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_185_in_hierarchical_query_clause4256 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_hierarchical_query_clause4258 ;

    //public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause4258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});


    static this()
    {
    //FOLLOW_sql_condition_in_hierarchical_query_clause4258 = new BitSet([0x0000000000000000L,0x0000000000040000L]);

    }public static BitSet FOLLOW_82_in_hierarchical_query_clause4263 ;

    //public static final BitSet FOLLOW_82_in_hierarchical_query_clause4263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_82_in_hierarchical_query_clause4263 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_hierarchical_query_clause4265 ;

    //public static final BitSet FOLLOW_75_in_hierarchical_query_clause4265 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_75_in_hierarchical_query_clause4265 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause4269 ;

    //public static final BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause4269 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_keyNOCYCLE_in_hierarchical_query_clause4269 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_hierarchical_query_clause4274 ;

    //public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause4274 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_hierarchical_query_clause4274 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_109_in_group_by_clause4284 ;

    //public static final BitSet FOLLOW_109_in_group_by_clause4284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_109_in_group_by_clause4284 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_group_by_clause4286 ;

    //public static final BitSet FOLLOW_75_in_group_by_clause4286 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_75_in_group_by_clause4286 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_group_by_exprs_in_group_by_clause4288 ;

    //public static final BitSet FOLLOW_group_by_exprs_in_group_by_clause4288 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_group_by_exprs_in_group_by_clause4288 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_group_by_expr_in_group_by_exprs4298 ;

    //public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs4298 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_group_by_expr_in_group_by_exprs4298 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_group_by_exprs4302 ;

    //public static final BitSet FOLLOW_COMMA_in_group_by_exprs4302 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_group_by_exprs4302 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_group_by_expr_in_group_by_exprs4304 ;

    //public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs4304 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_group_by_expr_in_group_by_exprs4304 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_rollup_cube_clause_in_group_by_expr4317 ;

    //public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_expr4317 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_rollup_cube_clause_in_group_by_expr4317 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_sets_clause_in_group_by_expr4322 ;

    //public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_expr4322 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_sets_clause_in_group_by_expr4322 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_group_by_expr4327 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_group_by_expr4327 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_group_by_expr4327 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause4339 ;

    //public static final BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause4339 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyROLLUP_in_rollup_cube_clause4339 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keyCUBE_in_rollup_cube_clause4343 ;

    //public static final BitSet FOLLOW_keyCUBE_in_rollup_cube_clause4343 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCUBE_in_rollup_cube_clause4343 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_rollup_cube_clause4347 ;

    //public static final BitSet FOLLOW_LPAREN_in_rollup_cube_clause4347 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_rollup_cube_clause4347 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause4349 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause4349 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_rollup_cube_clause4349 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_rollup_cube_clause4351 ;

    //public static final BitSet FOLLOW_RPAREN_in_rollup_cube_clause4351 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_rollup_cube_clause4351 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause4361 ;

    //public static final BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause4361 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyGROUPING_in_grouping_sets_clause4361 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySETS_in_grouping_sets_clause4363 ;

    //public static final BitSet FOLLOW_keySETS_in_grouping_sets_clause4363 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keySETS_in_grouping_sets_clause4363 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_grouping_sets_clause4365 ;

    //public static final BitSet FOLLOW_LPAREN_in_grouping_sets_clause4365 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_grouping_sets_clause4365 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause4367 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause4367 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_grouping_sets_clause4367 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_grouping_sets_clause4369 ;

    //public static final BitSet FOLLOW_RPAREN_in_grouping_sets_clause4369 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_grouping_sets_clause4369 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4379 ;

    //public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4379 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4379 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_grouping_sets_exprs4383 ;

    //public static final BitSet FOLLOW_COMMA_in_grouping_sets_exprs4383 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_grouping_sets_exprs4383 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4385 ;

    //public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4385 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4385 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_expr4398 ;

    //public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_expr4398 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_rollup_cube_clause_in_grouping_sets_expr4398 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_grouping_sets_expr4402 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_expr4402 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_grouping_sets_expr4402 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyMODEL_in_model_clause4412 ;

    //public static final BitSet FOLLOW_keyMODEL_in_model_clause4412 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0001000040000000L});


    static this()
    {
    //FOLLOW_keyMODEL_in_model_clause4412 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0001000040000000L]);

    }public static BitSet FOLLOW_cell_reference_options_in_model_clause4416 ;

    //public static final BitSet FOLLOW_cell_reference_options_in_model_clause4416 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000040000000L});


    static this()
    {
    //FOLLOW_cell_reference_options_in_model_clause4416 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000040000000L]);

    }public static BitSet FOLLOW_return_rows_clause_in_model_clause4424 ;

    //public static final BitSet FOLLOW_return_rows_clause_in_model_clause4424 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_return_rows_clause_in_model_clause4424 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_reference_model_in_model_clause4433 ;

    //public static final BitSet FOLLOW_reference_model_in_model_clause4433 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_reference_model_in_model_clause4433 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_main_model_in_model_clause4438 ;

    //public static final BitSet FOLLOW_main_model_in_model_clause4438 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_main_model_in_model_clause4438 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyIGNORE_in_cell_reference_options4452 ;

    //public static final BitSet FOLLOW_keyIGNORE_in_cell_reference_options4452 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyIGNORE_in_cell_reference_options4452 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyKEEP_in_cell_reference_options4456 ;

    //public static final BitSet FOLLOW_keyKEEP_in_cell_reference_options4456 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyKEEP_in_cell_reference_options4456 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyNAV_in_cell_reference_options4460 ;

    //public static final BitSet FOLLOW_keyNAV_in_cell_reference_options4460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});


    static this()
    {
    //FOLLOW_keyNAV_in_cell_reference_options4460 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0001000000000000L]);

    }public static BitSet FOLLOW_176_in_cell_reference_options4469 ;

    //public static final BitSet FOLLOW_176_in_cell_reference_options4469 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_176_in_cell_reference_options4469 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyDIMENSION_in_cell_reference_options4473 ;

    //public static final BitSet FOLLOW_keyDIMENSION_in_cell_reference_options4473 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyDIMENSION_in_cell_reference_options4473 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keySINGLE_in_cell_reference_options4477 ;

    //public static final BitSet FOLLOW_keySINGLE_in_cell_reference_options4477 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keySINGLE_in_cell_reference_options4477 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyREFERENCE_in_cell_reference_options4479 ;

    //public static final BitSet FOLLOW_keyREFERENCE_in_cell_reference_options4479 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyREFERENCE_in_cell_reference_options4479 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRETURN_in_return_rows_clause4494 ;

    //public static final BitSet FOLLOW_keyRETURN_in_return_rows_clause4494 = new BitSet(new long[]{0x2000000000400000L});


    static this()
    {
    //FOLLOW_keyRETURN_in_return_rows_clause4494 = new BitSet([0x2000000000400000L]);

    }public static BitSet FOLLOW_keyUPDATED_in_return_rows_clause4498 ;

    //public static final BitSet FOLLOW_keyUPDATED_in_return_rows_clause4498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});


    static this()
    {
    //FOLLOW_keyUPDATED_in_return_rows_clause4498 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000800000000L]);

    }public static BitSet FOLLOW_61_in_return_rows_clause4502 ;

    //public static final BitSet FOLLOW_61_in_return_rows_clause4502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});


    static this()
    {
    //FOLLOW_61_in_return_rows_clause4502 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000800000000L]);

    }public static BitSet FOLLOW_163_in_return_rows_clause4506 ;

    //public static final BitSet FOLLOW_163_in_return_rows_clause4506 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_163_in_return_rows_clause4506 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyREFERENCE_in_reference_model4516 ;

    //public static final BitSet FOLLOW_keyREFERENCE_in_reference_model4516 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyREFERENCE_in_reference_model4516 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_reference_model_name_in_reference_model4518 ;

    //public static final BitSet FOLLOW_reference_model_name_in_reference_model4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});


    static this()
    {
    //FOLLOW_reference_model_name_in_reference_model4518 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000008000L]);

    }public static BitSet FOLLOW_143_in_reference_model4520 ;

    //public static final BitSet FOLLOW_143_in_reference_model4520 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_143_in_reference_model4520 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_reference_model4522 ;

    //public static final BitSet FOLLOW_LPAREN_in_reference_model4522 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_reference_model4522 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_subquery_in_reference_model4524 ;

    //public static final BitSet FOLLOW_subquery_in_reference_model4524 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_subquery_in_reference_model4524 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_reference_model4526 ;

    //public static final BitSet FOLLOW_RPAREN_in_reference_model4526 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_RPAREN_in_reference_model4526 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_model_column_clauses_in_reference_model4530 ;

    //public static final BitSet FOLLOW_model_column_clauses_in_reference_model4530 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0001000000000000L});


    static this()
    {
    //FOLLOW_model_column_clauses_in_reference_model4530 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0001000000000000L]);

    }public static BitSet FOLLOW_cell_reference_options_in_reference_model4534 ;

    //public static final BitSet FOLLOW_cell_reference_options_in_reference_model4534 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cell_reference_options_in_reference_model4534 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_reference_model_name4546 ;

    //public static final BitSet FOLLOW_identifier_in_reference_model_name4546 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_reference_model_name4546 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyMAIN_in_main_model4558 ;

    //public static final BitSet FOLLOW_keyMAIN_in_main_model4558 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyMAIN_in_main_model4558 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_main_model_name_in_main_model4560 ;

    //public static final BitSet FOLLOW_main_model_name_in_main_model4560 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_main_model_name_in_main_model4560 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_model_column_clauses_in_main_model4565 ;

    //public static final BitSet FOLLOW_model_column_clauses_in_main_model4565 = new BitSet(new long[]{0x0000000008400000L,0x0000000000000000L,0x0001000000000000L});


    static this()
    {
    //FOLLOW_model_column_clauses_in_main_model4565 = new BitSet([0x0000000008400000L,0x0000000000000000L,0x0001000000000000L]);

    }public static BitSet FOLLOW_cell_reference_options_in_main_model4571 ;

    //public static final BitSet FOLLOW_cell_reference_options_in_main_model4571 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_cell_reference_options_in_main_model4571 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_model_rules_clause_in_main_model4575 ;

    //public static final BitSet FOLLOW_model_rules_clause_in_main_model4575 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_model_rules_clause_in_main_model4575 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_main_model_name4585 ;

    //public static final BitSet FOLLOW_identifier_in_main_model_name4585 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_main_model_name4585 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_query_partition_clause_in_model_column_clauses4597 ;

    //public static final BitSet FOLLOW_query_partition_clause_in_model_column_clauses4597 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_query_partition_clause_in_model_column_clauses4597 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_spec_in_model_column_clauses4601 ;

    //public static final BitSet FOLLOW_column_spec_in_model_column_clauses4601 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_column_spec_in_model_column_clauses4601 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyDIMENSION_in_model_column_clauses4611 ;

    //public static final BitSet FOLLOW_keyDIMENSION_in_model_column_clauses4611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_keyDIMENSION_in_model_column_clauses4611 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_model_column_clauses4613 ;

    //public static final BitSet FOLLOW_75_in_model_column_clauses4613 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_75_in_model_column_clauses4613 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_model_column_clauses4615 ;

    //public static final BitSet FOLLOW_LPAREN_in_model_column_clauses4615 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_model_column_clauses4615 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_model_columns_in_model_column_clauses4617 ;

    //public static final BitSet FOLLOW_model_columns_in_model_column_clauses4617 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_model_columns_in_model_column_clauses4617 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_model_column_clauses4619 ;

    //public static final BitSet FOLLOW_RPAREN_in_model_column_clauses4619 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_RPAREN_in_model_column_clauses4619 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyMEASURES_in_model_column_clauses4623 ;

    //public static final BitSet FOLLOW_keyMEASURES_in_model_column_clauses4623 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyMEASURES_in_model_column_clauses4623 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_model_column_clauses4625 ;

    //public static final BitSet FOLLOW_LPAREN_in_model_column_clauses4625 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_model_column_clauses4625 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_model_columns_in_model_column_clauses4627 ;

    //public static final BitSet FOLLOW_model_columns_in_model_column_clauses4627 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_model_columns_in_model_column_clauses4627 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_model_column_clauses4629 ;

    //public static final BitSet FOLLOW_RPAREN_in_model_column_clauses4629 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_model_column_clauses4629 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_model_column_in_model_columns4639 ;

    //public static final BitSet FOLLOW_model_column_in_model_columns4639 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_model_column_in_model_columns4639 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_model_columns4643 ;

    //public static final BitSet FOLLOW_COMMA_in_model_columns4643 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_model_columns4643 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_model_column_in_model_columns4645 ;

    //public static final BitSet FOLLOW_model_column_in_model_columns4645 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_model_column_in_model_columns4645 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_expression_in_model_column4658 ;

    //public static final BitSet FOLLOW_sql_expression_in_model_column4658 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_model_column4658 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_64_in_model_column4664 ;

    //public static final BitSet FOLLOW_64_in_model_column4664 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_64_in_model_column4664 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_spec_in_model_column4669 ;

    //public static final BitSet FOLLOW_column_spec_in_model_column4669 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_spec_in_model_column4669 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRULES_in_model_rules_clause4684 ;

    //public static final BitSet FOLLOW_keyRULES_in_model_rules_clause4684 = new BitSet(new long[]{0x0000000008400000L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_keyRULES_in_model_rules_clause4684 = new BitSet([0x0000000008400000L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_model_rules_clause4688 ;

    //public static final BitSet FOLLOW_177_in_model_rules_clause4688 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_177_in_model_rules_clause4688 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_keyUPSERT_in_model_rules_clause4692 ;

    //public static final BitSet FOLLOW_keyUPSERT_in_model_rules_clause4692 = new BitSet(new long[]{0x2000000008400000L});


    static this()
    {
    //FOLLOW_keyUPSERT_in_model_rules_clause4692 = new BitSet([0x2000000008400000L]);

    }public static BitSet FOLLOW_61_in_model_rules_clause4696 ;

    //public static final BitSet FOLLOW_61_in_model_rules_clause4696 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_61_in_model_rules_clause4696 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause4708 ;

    //public static final BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause4708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_keyAUTOMATIC_in_model_rules_clause4708 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause4712 ;

    //public static final BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause4712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_keySEQUENTIAL_in_model_rules_clause4712 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_145_in_model_rules_clause4716 ;

    //public static final BitSet FOLLOW_145_in_model_rules_clause4716 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_145_in_model_rules_clause4716 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_keyITERATE_in_model_rules_clause4728 ;

    //public static final BitSet FOLLOW_keyITERATE_in_model_rules_clause4728 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyITERATE_in_model_rules_clause4728 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_model_rules_clause4730 ;

    //public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4730 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_model_rules_clause4730 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_model_rules_clause4732 ;

    //public static final BitSet FOLLOW_NUMBER_in_model_rules_clause4732 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_model_rules_clause4732 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_model_rules_clause4734 ;

    //public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4734 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_RPAREN_in_model_rules_clause4734 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_keyUNTIL_in_model_rules_clause4738 ;

    //public static final BitSet FOLLOW_keyUNTIL_in_model_rules_clause4738 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUNTIL_in_model_rules_clause4738 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_model_rules_clause4740 ;

    //public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4740 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_LPAREN_in_model_rules_clause4740 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_model_rules_clause4742 ;

    //public static final BitSet FOLLOW_sql_condition_in_model_rules_clause4742 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_model_rules_clause4742 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_model_rules_clause4744 ;

    //public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4744 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_model_rules_clause4744 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_model_rules_clause4754 ;

    //public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4754 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0002000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_model_rules_clause4754 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0002000400000000L]);

    }public static BitSet FOLLOW_model_rules_exprs_in_model_rules_clause4756 ;

    //public static final BitSet FOLLOW_model_rules_exprs_in_model_rules_clause4756 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_model_rules_exprs_in_model_rules_clause4756 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_model_rules_clause4758 ;

    //public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4758 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_model_rules_clause4758 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4768 ;

    //public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4768 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_model_rules_expr_in_model_rules_exprs4768 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_model_rules_exprs4772 ;

    //public static final BitSet FOLLOW_COMMA_in_model_rules_exprs4772 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0002000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_model_rules_exprs4772 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0002000400000000L]);

    }public static BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4774 ;

    //public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4774 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_model_rules_expr_in_model_rules_exprs4774 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_177_in_model_rules_expr4789 ;

    //public static final BitSet FOLLOW_177_in_model_rules_expr4789 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_177_in_model_rules_expr4789 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_keyUPSERT_in_model_rules_expr4793 ;

    //public static final BitSet FOLLOW_keyUPSERT_in_model_rules_expr4793 = new BitSet(new long[]{0x2000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyUPSERT_in_model_rules_expr4793 = new BitSet([0x2000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_61_in_model_rules_expr4797 ;

    //public static final BitSet FOLLOW_61_in_model_rules_expr4797 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_61_in_model_rules_expr4797 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_cell_assignment_in_model_rules_expr4805 ;

    //public static final BitSet FOLLOW_cell_assignment_in_model_rules_expr4805 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000020000L});


    static this()
    {
    //FOLLOW_cell_assignment_in_model_rules_expr4805 = new BitSet([0x0000000000020000L,0x0000000000000000L,0x0000000000020000L]);

    }public static BitSet FOLLOW_order_by_clause_in_model_rules_expr4809 ;

    //public static final BitSet FOLLOW_order_by_clause_in_model_rules_expr4809 = new BitSet(new long[]{0x0000000000020000L});


    static this()
    {
    //FOLLOW_order_by_clause_in_model_rules_expr4809 = new BitSet([0x0000000000020000L]);

    }public static BitSet FOLLOW_EQ_in_model_rules_expr4814 ;

    //public static final BitSet FOLLOW_EQ_in_model_rules_expr4814 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_EQ_in_model_rules_expr4814 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_model_rules_expr4816 ;

    //public static final BitSet FOLLOW_sql_expression_in_model_rules_expr4816 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_model_rules_expr4816 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_measure_column_in_cell_assignment4826 ;

    //public static final BitSet FOLLOW_measure_column_in_cell_assignment4826 = new BitSet(new long[]{0x0000000001000000L});


    static this()
    {
    //FOLLOW_measure_column_in_cell_assignment4826 = new BitSet([0x0000000001000000L]);

    }public static BitSet FOLLOW_LBRACK_in_cell_assignment4828 ;

    //public static final BitSet FOLLOW_LBRACK_in_cell_assignment4828 = new BitSet(new long[]{0x8000401428408000L,0x0000013020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_LBRACK_in_cell_assignment4828 = new BitSet([0x8000401428408000L,0x0000013020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_multi_column_for_loop_in_cell_assignment4832 ;

    //public static final BitSet FOLLOW_multi_column_for_loop_in_cell_assignment4832 = new BitSet(new long[]{0x0001000000000000L});


    static this()
    {
    //FOLLOW_multi_column_for_loop_in_cell_assignment4832 = new BitSet([0x0001000000000000L]);

    }public static BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment4836 ;

    //public static final BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment4836 = new BitSet(new long[]{0x0001000000000000L});


    static this()
    {
    //FOLLOW_cell_assignment_exprs_in_cell_assignment4836 = new BitSet([0x0001000000000000L]);

    }public static BitSet FOLLOW_RBRACK_in_cell_assignment4840 ;

    //public static final BitSet FOLLOW_RBRACK_in_cell_assignment4840 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RBRACK_in_cell_assignment4840 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4850 ;

    //public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4850 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4850 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_cell_assignment_exprs4854 ;

    //public static final BitSet FOLLOW_COMMA_in_cell_assignment_exprs4854 = new BitSet(new long[]{0x8000401428408000L,0x0000013020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_COMMA_in_cell_assignment_exprs4854 = new BitSet([0x8000401428408000L,0x0000013020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4856 ;

    //public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4856 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4856 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_condition_in_cell_assignment_expr4869 ;

    //public static final BitSet FOLLOW_sql_condition_in_cell_assignment_expr4869 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_cell_assignment_expr4869 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_cell_assignment_expr4873 ;

    //public static final BitSet FOLLOW_sql_expression_in_cell_assignment_expr4873 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_cell_assignment_expr4873 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr4877 ;

    //public static final BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr4877 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_single_column_for_loop_in_cell_assignment_expr4877 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_name_in_measure_column4887 ;

    //public static final BitSet FOLLOW_column_name_in_measure_column4887 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_name_in_measure_column4887 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_104_in_single_column_for_loop4897 ;

    //public static final BitSet FOLLOW_104_in_single_column_for_loop4897 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_104_in_single_column_for_loop4897 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_single_column_for_loop4899 ;

    //public static final BitSet FOLLOW_column_name_in_single_column_for_loop4899 = new BitSet(new long[]{0x0000000000000000L,0x0202040000000000L});


    static this()
    {
    //FOLLOW_column_name_in_single_column_for_loop4899 = new BitSet([0x0000000000000000L,0x0202040000000000L]);

    }public static BitSet FOLLOW_113_in_single_column_for_loop4905 ;

    //public static final BitSet FOLLOW_113_in_single_column_for_loop4905 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_single_column_for_loop4905 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_single_column_for_loop4907 ;

    //public static final BitSet FOLLOW_LPAREN_in_single_column_for_loop4907 = new BitSet(new long[]{0x0000401428000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_single_column_for_loop4907 = new BitSet([0x0000401428000000L]);

    }public static BitSet FOLLOW_literals_in_single_column_for_loop4911 ;

    //public static final BitSet FOLLOW_literals_in_single_column_for_loop4911 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_literals_in_single_column_for_loop4911 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_subquery_in_single_column_for_loop4915 ;

    //public static final BitSet FOLLOW_subquery_in_single_column_for_loop4915 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_subquery_in_single_column_for_loop4915 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_single_column_for_loop4919 ;

    //public static final BitSet FOLLOW_RPAREN_in_single_column_for_loop4919 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_single_column_for_loop4919 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_121_in_single_column_for_loop4927 ;

    //public static final BitSet FOLLOW_121_in_single_column_for_loop4927 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_121_in_single_column_for_loop4927 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_pattern_in_single_column_for_loop4929 ;

    //public static final BitSet FOLLOW_pattern_in_single_column_for_loop4929 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_pattern_in_single_column_for_loop4929 = new BitSet([0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_106_in_single_column_for_loop4934 ;

    //public static final BitSet FOLLOW_106_in_single_column_for_loop4934 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_106_in_single_column_for_loop4934 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_single_column_for_loop4936 ;

    //public static final BitSet FOLLOW_literal_in_single_column_for_loop4936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_literal_in_single_column_for_loop4936 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_single_column_for_loop4938 ;

    //public static final BitSet FOLLOW_173_in_single_column_for_loop4938 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_173_in_single_column_for_loop4938 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_single_column_for_loop4940 ;

    //public static final BitSet FOLLOW_literal_in_single_column_for_loop4940 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_literal_in_single_column_for_loop4940 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop4944 ;

    //public static final BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop4944 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_keyINCREMENT_in_single_column_for_loop4944 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop4948 ;

    //public static final BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop4948 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_keyDECREMENT_in_single_column_for_loop4948 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_single_column_for_loop4952 ;

    //public static final BitSet FOLLOW_literal_in_single_column_for_loop4952 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_literal_in_single_column_for_loop4952 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NUMBER_in_literal4977 ;

    //public static final BitSet FOLLOW_NUMBER_in_literal4977 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_literal4977 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_literal4982 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_literal4982 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_literal4982 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_literal_in_literals4992 ;

    //public static final BitSet FOLLOW_literal_in_literals4992 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_literal_in_literals4992 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_literals4996 ;

    //public static final BitSet FOLLOW_COMMA_in_literals4996 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_COMMA_in_literals4996 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_literals4998 ;

    //public static final BitSet FOLLOW_literal_in_literals4998 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_literal_in_literals4998 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_LPAREN_in_bracket_literals5011 ;

    //public static final BitSet FOLLOW_LPAREN_in_bracket_literals5011 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_bracket_literals5011 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literals_in_bracket_literals5013 ;

    //public static final BitSet FOLLOW_literals_in_bracket_literals5013 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_literals_in_bracket_literals5013 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_bracket_literals5015 ;

    //public static final BitSet FOLLOW_RPAREN_in_bracket_literals5015 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_bracket_literals5015 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_bracket_literals_in_bracket_literals_list5025 ;

    //public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list5025 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_bracket_literals_in_bracket_literals_list5025 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_bracket_literals_list5029 ;

    //public static final BitSet FOLLOW_COMMA_in_bracket_literals_list5029 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_COMMA_in_bracket_literals_list5029 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_bracket_literals_in_bracket_literals_list5031 ;

    //public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list5031 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_bracket_literals_in_bracket_literals_list5031 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_pattern5044 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_pattern5044 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_pattern5044 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_104_in_multi_column_for_loop5054 ;

    //public static final BitSet FOLLOW_104_in_multi_column_for_loop5054 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_104_in_multi_column_for_loop5054 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_multi_column_for_loop5056 ;

    //public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop5056 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_multi_column_for_loop5056 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_multi_column_for_loop5058 ;

    //public static final BitSet FOLLOW_column_specs_in_multi_column_for_loop5058 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_multi_column_for_loop5058 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_multi_column_for_loop5060 ;

    //public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop5060 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_multi_column_for_loop5060 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_multi_column_for_loop5062 ;

    //public static final BitSet FOLLOW_113_in_multi_column_for_loop5062 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_multi_column_for_loop5062 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_multi_column_for_loop5064 ;

    //public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop5064 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_multi_column_for_loop5064 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop5068 ;

    //public static final BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop5068 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_bracket_literals_list_in_multi_column_for_loop5068 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_subquery_in_multi_column_for_loop5072 ;

    //public static final BitSet FOLLOW_subquery_in_multi_column_for_loop5072 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_subquery_in_multi_column_for_loop5072 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_multi_column_for_loop5076 ;

    //public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop5076 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_multi_column_for_loop5076 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_145_in_order_by_clause5086 ;

    //public static final BitSet FOLLOW_145_in_order_by_clause5086 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_145_in_order_by_clause5086 = new BitSet([0x0000000000400000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_keySIBLINGS_in_order_by_clause5090 ;

    //public static final BitSet FOLLOW_keySIBLINGS_in_order_by_clause5090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_keySIBLINGS_in_order_by_clause5090 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_order_by_clause5095 ;

    //public static final BitSet FOLLOW_75_in_order_by_clause5095 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_75_in_order_by_clause5095 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_order_by_exprs_in_order_by_clause5097 ;

    //public static final BitSet FOLLOW_order_by_exprs_in_order_by_clause5097 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_order_by_exprs_in_order_by_clause5097 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_order_by_expr_in_order_by_exprs5107 ;

    //public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs5107 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_order_by_expr_in_order_by_exprs5107 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_order_by_exprs5111 ;

    //public static final BitSet FOLLOW_COMMA_in_order_by_exprs5111 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_order_by_exprs5111 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_order_by_expr_in_order_by_exprs5113 ;

    //public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs5113 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_order_by_expr_in_order_by_exprs5113 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_expression_in_order_by_expr5128 ;

    //public static final BitSet FOLLOW_sql_expression_in_order_by_expr5128 = new BitSet(new long[]{0x0000000000400002L,0x0000000010000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_order_by_expr5128 = new BitSet([0x0000000000400002L,0x0000000010000002L]);

    }public static BitSet FOLLOW_keyNULLS_in_order_by_expr5151 ;

    //public static final BitSet FOLLOW_keyNULLS_in_order_by_expr5151 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNULLS_in_order_by_expr5151 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyFIRST_in_order_by_expr5153 ;

    //public static final BitSet FOLLOW_keyFIRST_in_order_by_expr5153 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyFIRST_in_order_by_expr5153 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNULLS_in_order_by_expr5157 ;

    //public static final BitSet FOLLOW_keyNULLS_in_order_by_expr5157 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNULLS_in_order_by_expr5157 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyLAST_in_order_by_expr5159 ;

    //public static final BitSet FOLLOW_keyLAST_in_order_by_expr5159 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLAST_in_order_by_expr5159 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_104_in_for_update_clause5172 ;

    //public static final BitSet FOLLOW_104_in_for_update_clause5172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_104_in_for_update_clause5172 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_for_update_clause5174 ;

    //public static final BitSet FOLLOW_177_in_for_update_clause5174 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000004080L});


    static this()
    {
    //FOLLOW_177_in_for_update_clause5174 = new BitSet([0x0000000000400002L,0x0000000000000000L,0x0000000000004080L]);

    }public static BitSet FOLLOW_142_in_for_update_clause5178 ;

    //public static final BitSet FOLLOW_142_in_for_update_clause5178 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_142_in_for_update_clause5178 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_for_update_clause5180 ;

    //public static final BitSet FOLLOW_column_specs_in_for_update_clause5180 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000080L});


    static this()
    {
    //FOLLOW_column_specs_in_for_update_clause5180 = new BitSet([0x0000000000400002L,0x0000000000000000L,0x0000000000000080L]);

    }public static BitSet FOLLOW_keyWAIT_in_for_update_clause5187 ;

    //public static final BitSet FOLLOW_keyWAIT_in_for_update_clause5187 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyWAIT_in_for_update_clause5187 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_integer_in_for_update_clause5189 ;

    //public static final BitSet FOLLOW_integer_in_for_update_clause5189 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_in_for_update_clause5189 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_135_in_for_update_clause5193 ;

    //public static final BitSet FOLLOW_135_in_for_update_clause5193 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_135_in_for_update_clause5193 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_183_in_where_condition_whole5207 ;

    //public static final BitSet FOLLOW_183_in_where_condition_whole5207 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_183_in_where_condition_whole5207 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_where_condition_whole5209 ;

    //public static final BitSet FOLLOW_sql_condition_in_where_condition_whole5209 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_where_condition_whole5209 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_condition_in_where_condition5220 ;

    //public static final BitSet FOLLOW_sql_condition_in_where_condition5220 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_where_condition5220 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_displayed_column5233 ;

    //public static final BitSet FOLLOW_column_spec_in_displayed_column5233 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_column_spec_in_displayed_column5233 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_displayed_column5235 ;

    //public static final BitSet FOLLOW_DOT_in_displayed_column5235 = new BitSet(new long[]{0x0000000000000040L});


    static this()
    {
    //FOLLOW_DOT_in_displayed_column5235 = new BitSet([0x0000000000000040L]);

    }public static BitSet FOLLOW_ASTERISK_in_displayed_column5237 ;

    //public static final BitSet FOLLOW_ASTERISK_in_displayed_column5237 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_ASTERISK_in_displayed_column5237 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_expression_in_displayed_column5245 ;

    //public static final BitSet FOLLOW_sql_expression_in_displayed_column5245 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_displayed_column5245 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_alias__in_displayed_column5255 ;

    //public static final BitSet FOLLOW_alias__in_displayed_column5255 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_alias__in_displayed_column5255 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_schema_name5269 ;

    //public static final BitSet FOLLOW_sql_identifier_in_schema_name5269 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_schema_name5269 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_table_name5280 ;

    //public static final BitSet FOLLOW_sql_identifier_in_table_name5280 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_table_name5280 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_expression_in_nested_expressions5291 ;

    //public static final BitSet FOLLOW_nested_expression_in_nested_expressions5291 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_nested_expression_in_nested_expressions5291 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_nested_expressions5295 ;

    //public static final BitSet FOLLOW_COMMA_in_nested_expressions5295 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_COMMA_in_nested_expressions5295 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_nested_expressions5297 ;

    //public static final BitSet FOLLOW_nested_expression_in_nested_expressions5297 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_nested_expression_in_nested_expressions5297 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_expression_in_nested_expression5313 ;

    //public static final BitSet FOLLOW_sql_expression_in_nested_expression5313 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_nested_expression5313 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_expression_in_nested_expression5320 ;

    //public static final BitSet FOLLOW_plsql_expression_in_nested_expression5320 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_expression_in_nested_expression5320 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_bool_in_plsql_condition5337 ;

    //public static final BitSet FOLLOW_expr_bool_in_plsql_condition5337 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_bool_in_plsql_condition5337 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_expression_in_plsql_expressions5348 ;

    //public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions5348 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_plsql_expression_in_plsql_expressions5348 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_plsql_expressions5352 ;

    //public static final BitSet FOLLOW_COMMA_in_plsql_expressions5352 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_COMMA_in_plsql_expressions5352 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_plsql_expressions5354 ;

    //public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions5354 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_plsql_expression_in_plsql_expressions5354 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_expr_bool_in_plsql_expression5375 ;

    //public static final BitSet FOLLOW_expr_bool_in_plsql_expression5375 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_bool_in_plsql_expression5375 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_or_in_expr_bool5387 ;

    //public static final BitSet FOLLOW_expr_or_in_expr_bool5387 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_expr_or_in_expr_bool5387 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_144_in_expr_bool5391 ;

    //public static final BitSet FOLLOW_144_in_expr_bool5391 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_144_in_expr_bool5391 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_expr_or_in_expr_bool5393 ;

    //public static final BitSet FOLLOW_expr_or_in_expr_bool5393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_expr_or_in_expr_bool5393 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_expr_and_in_expr_or5406 ;

    //public static final BitSet FOLLOW_expr_and_in_expr_or5406 = new BitSet(new long[]{0x4000000000000002L});


    static this()
    {
    //FOLLOW_expr_and_in_expr_or5406 = new BitSet([0x4000000000000002L]);

    }public static BitSet FOLLOW_62_in_expr_or5410 ;

    //public static final BitSet FOLLOW_62_in_expr_or5410 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_62_in_expr_or5410 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_expr_and_in_expr_or5412 ;

    //public static final BitSet FOLLOW_expr_and_in_expr_or5412 = new BitSet(new long[]{0x4000000000000002L});


    static this()
    {
    //FOLLOW_expr_and_in_expr_or5412 = new BitSet([0x4000000000000002L]);

    }public static BitSet FOLLOW_134_in_expr_and5427 ;

    //public static final BitSet FOLLOW_134_in_expr_and5427 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_134_in_expr_and5427 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_not_in_expr_and5432 ;

    //public static final BitSet FOLLOW_expr_not_in_expr_and5432 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_not_in_expr_and5432 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_add_in_expr_not5442 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_not5442 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_not5442 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_relational_op_in_expr_not5449 ;

    //public static final BitSet FOLLOW_relational_op_in_expr_not5449 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_relational_op_in_expr_not5449 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_expr_not5451 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_not5451 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_not5451 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_FOUND_ATTR_in_expr_not5457 ;

    //public static final BitSet FOLLOW_FOUND_ATTR_in_expr_not5457 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_FOUND_ATTR_in_expr_not5457 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not5461 ;

    //public static final BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not5461 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_NOTFOUND_ATTR_in_expr_not5461 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_ISOPEN_ATTR_in_expr_not5465 ;

    //public static final BitSet FOLLOW_ISOPEN_ATTR_in_expr_not5465 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_ISOPEN_ATTR_in_expr_not5465 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not5469 ;

    //public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not5469 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_ROWCOUNT_ATTR_in_expr_not5469 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5473 ;

    //public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5473 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5473 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_120_in_expr_not5479 ;

    //public static final BitSet FOLLOW_120_in_expr_not5479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});


    static this()
    {
    //FOLLOW_120_in_expr_not5479 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000140L]);

    }public static BitSet FOLLOW_134_in_expr_not5483 ;

    //public static final BitSet FOLLOW_134_in_expr_not5483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_expr_not5483 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_expr_not5488 ;

    //public static final BitSet FOLLOW_136_in_expr_not5488 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_136_in_expr_not5488 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_expr_not5496 ;

    //public static final BitSet FOLLOW_134_in_expr_not5496 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_134_in_expr_not5496 = new BitSet([0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_121_in_expr_not5501 ;

    //public static final BitSet FOLLOW_121_in_expr_not5501 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_121_in_expr_not5501 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_expr_not5503 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_not5503 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_not5503 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_expr_not5511 ;

    //public static final BitSet FOLLOW_134_in_expr_not5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});


    static this()
    {
    //FOLLOW_134_in_expr_not5511 = new BitSet([0x0000000000000000L,0x0000000000000010L]);

    }public static BitSet FOLLOW_68_in_expr_not5516 ;

    //public static final BitSet FOLLOW_68_in_expr_not5516 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_68_in_expr_not5516 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_expr_not5518 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_not5518 = new BitSet(new long[]{0x4000000000000000L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_not5518 = new BitSet([0x4000000000000000L]);

    }public static BitSet FOLLOW_62_in_expr_not5520 ;

    //public static final BitSet FOLLOW_62_in_expr_not5520 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_62_in_expr_not5520 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_expr_not5522 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_not5522 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_not5522 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_expr_not5530 ;

    //public static final BitSet FOLLOW_134_in_expr_not5530 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_134_in_expr_not5530 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_expr_not5535 ;

    //public static final BitSet FOLLOW_113_in_expr_not5535 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_expr_not5535 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_expr_not5537 ;

    //public static final BitSet FOLLOW_LPAREN_in_expr_not5537 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_expr_not5537 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expressions_in_expr_not5539 ;

    //public static final BitSet FOLLOW_nested_expressions_in_expr_not5539 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expressions_in_expr_not5539 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_expr_not5541 ;

    //public static final BitSet FOLLOW_RPAREN_in_expr_not5541 = new BitSet(new long[]{0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_RPAREN_in_expr_not5541 = new BitSet([0x0004000312BA0102L,0x0302000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_sql_expression_in_sql_expressions5572 ;

    //public static final BitSet FOLLOW_sql_expression_in_sql_expressions5572 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_sql_expression_in_sql_expressions5572 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_sql_expressions5576 ;

    //public static final BitSet FOLLOW_COMMA_in_sql_expressions5576 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_sql_expressions5576 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_sql_expressions5578 ;

    //public static final BitSet FOLLOW_sql_expression_in_sql_expressions5578 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_sql_expression_in_sql_expressions5578 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_expr_add_in_sql_expression5598 ;

    //public static final BitSet FOLLOW_expr_add_in_sql_expression5598 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_add_in_sql_expression5598 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_mul_in_expr_add5608 ;

    //public static final BitSet FOLLOW_expr_mul_in_expr_add5608 = new BitSet(new long[]{0x0000001020010002L});


    static this()
    {
    //FOLLOW_expr_mul_in_expr_add5608 = new BitSet([0x0000001020010002L]);

    }public static BitSet FOLLOW_set_in_expr_add5612 ;

    //public static final BitSet FOLLOW_set_in_expr_add5612 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_set_in_expr_add5612 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_mul_in_expr_add5626 ;

    //public static final BitSet FOLLOW_expr_mul_in_expr_add5626 = new BitSet(new long[]{0x0000001020010002L});


    static this()
    {
    //FOLLOW_expr_mul_in_expr_add5626 = new BitSet([0x0000001020010002L]);

    }public static BitSet FOLLOW_expr_sign_in_expr_mul5639 ;

    //public static final BitSet FOLLOW_expr_sign_in_expr_mul5639 = new BitSet(new long[]{0x0000000000001042L});


    static this()
    {
    //FOLLOW_expr_sign_in_expr_mul5639 = new BitSet([0x0000000000001042L]);

    }public static BitSet FOLLOW_set_in_expr_mul5643 ;

    //public static final BitSet FOLLOW_set_in_expr_mul5643 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_set_in_expr_mul5643 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_sign_in_expr_mul5653 ;

    //public static final BitSet FOLLOW_expr_sign_in_expr_mul5653 = new BitSet(new long[]{0x0000000000001042L});


    static this()
    {
    //FOLLOW_expr_sign_in_expr_mul5653 = new BitSet([0x0000000000001042L]);

    }public static BitSet FOLLOW_expr_pow_in_expr_sign5677 ;

    //public static final BitSet FOLLOW_expr_pow_in_expr_sign5677 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_pow_in_expr_sign5677 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_expr_in_expr_pow5687 ;

    //public static final BitSet FOLLOW_expr_expr_in_expr_pow5687 = new BitSet(new long[]{0x0000000000040002L});


    static this()
    {
    //FOLLOW_expr_expr_in_expr_pow5687 = new BitSet([0x0000000000040002L]);

    }public static BitSet FOLLOW_EXPONENT_in_expr_pow5691 ;

    //public static final BitSet FOLLOW_EXPONENT_in_expr_pow5691 = new BitSet(new long[]{0x0000400408408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_EXPONENT_in_expr_pow5691 = new BitSet([0x0000400408408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_expr_in_expr_pow5693 ;

    //public static final BitSet FOLLOW_expr_expr_in_expr_pow5693 = new BitSet(new long[]{0x0000000000040002L});


    static this()
    {
    //FOLLOW_expr_expr_in_expr_pow5693 = new BitSet([0x0000000000040002L]);

    }public static BitSet FOLLOW_expr_paren_in_expr_expr5714 ;

    //public static final BitSet FOLLOW_expr_paren_in_expr_expr5714 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_paren_in_expr_expr5714 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_case_expression_in_expr_expr5730 ;

    //public static final BitSet FOLLOW_case_expression_in_expr_expr5730 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_case_expression_in_expr_expr5730 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_expression_in_expr_expr5743 ;

    //public static final BitSet FOLLOW_cursor_expression_in_expr_expr5743 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_expression_in_expr_expr5743 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_expression_in_expr_expr5756 ;

    //public static final BitSet FOLLOW_function_expression_in_expr_expr5756 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_expression_in_expr_expr5756 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_simple_expression_in_expr_expr5769 ;

    //public static final BitSet FOLLOW_simple_expression_in_expr_expr5769 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_simple_expression_in_expr_expr5769 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_select_expression_in_expr_expr5782 ;

    //public static final BitSet FOLLOW_select_expression_in_expr_expr5782 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_expression_in_expr_expr5782 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_boolean_literal_in_simple_expression5803 ;

    //public static final BitSet FOLLOW_boolean_literal_in_simple_expression5803 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_boolean_literal_in_simple_expression5803 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_169_in_simple_expression5808 ;

    //public static final BitSet FOLLOW_169_in_simple_expression5808 = new BitSet(new long[]{0x0004000100880100L});


    static this()
    {
    //FOLLOW_169_in_simple_expression5808 = new BitSet([0x0004000100880100L]);

    }public static BitSet FOLLOW_set_in_simple_expression5810 ;

    //public static final BitSet FOLLOW_set_in_simple_expression5810 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_set_in_simple_expression5810 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_simple_expression5835 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_simple_expression5835 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_simple_expression5835 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_simple_expression5848 ;

    //public static final BitSet FOLLOW_column_spec_in_simple_expression5848 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_spec_in_simple_expression5848 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NUMBER_in_simple_expression5853 ;

    //public static final BitSet FOLLOW_NUMBER_in_simple_expression5853 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_simple_expression5853 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_136_in_simple_expression5861 ;

    //public static final BitSet FOLLOW_136_in_simple_expression5861 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_simple_expression5861 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_prior_in_compound_expression5873 ;

    //public static final BitSet FOLLOW_expr_prior_in_compound_expression5873 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_prior_in_compound_expression5873 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_expr_paren5885 ;

    //public static final BitSet FOLLOW_LPAREN_in_expr_paren5885 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_expr_paren5885 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_expr_paren5887 ;

    //public static final BitSet FOLLOW_nested_expression_in_expr_paren5887 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_expr_paren5887 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_expr_paren5889 ;

    //public static final BitSet FOLLOW_RPAREN_in_expr_paren5889 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_expr_paren5889 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_151_in_expr_prior5899 ;

    //public static final BitSet FOLLOW_151_in_expr_prior5899 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_151_in_expr_prior5899 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_expr_prior5901 ;

    //public static final BitSet FOLLOW_expr_add_in_expr_prior5901 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_add_in_expr_prior5901 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_76_in_case_expression5911 ;

    //public static final BitSet FOLLOW_76_in_case_expression5911 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0040422400000140L});


    static this()
    {
    //FOLLOW_76_in_case_expression5911 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0040422400000140L]);

    }public static BitSet FOLLOW_simple_case_expression_in_case_expression5915 ;

    //public static final BitSet FOLLOW_simple_case_expression_in_case_expression5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000280000000L});


    static this()
    {
    //FOLLOW_simple_case_expression_in_case_expression5915 = new BitSet([0x0000000000000000L,0x0000000280000000L]);

    }public static BitSet FOLLOW_searched_case_expression_in_case_expression5919 ;

    //public static final BitSet FOLLOW_searched_case_expression_in_case_expression5919 = new BitSet(new long[]{0x0000000000000000L,0x0000000280000000L});


    static this()
    {
    //FOLLOW_searched_case_expression_in_case_expression5919 = new BitSet([0x0000000000000000L,0x0000000280000000L]);

    }public static BitSet FOLLOW_else_case_expression_in_case_expression5925 ;

    //public static final BitSet FOLLOW_else_case_expression_in_case_expression5925 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_else_case_expression_in_case_expression5925 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_97_in_case_expression5930 ;

    //public static final BitSet FOLLOW_97_in_case_expression5930 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_97_in_case_expression5930 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_expression_in_simple_case_expression5940 ;

    //public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_simple_case_expression5940 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_simple_case_expression5944 ;

    //public static final BitSet FOLLOW_182_in_simple_case_expression5944 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_182_in_simple_case_expression5944 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_simple_case_expression5946 ;

    //public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_simple_case_expression5946 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_simple_case_expression5948 ;

    //public static final BitSet FOLLOW_172_in_simple_case_expression5948 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_172_in_simple_case_expression5948 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_simple_case_expression5950 ;

    //public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_simple_case_expression5950 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_searched_case_expression5965 ;

    //public static final BitSet FOLLOW_182_in_searched_case_expression5965 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_182_in_searched_case_expression5965 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_nested_condition_in_searched_case_expression5967 ;

    //public static final BitSet FOLLOW_nested_condition_in_searched_case_expression5967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_nested_condition_in_searched_case_expression5967 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_searched_case_expression5969 ;

    //public static final BitSet FOLLOW_172_in_searched_case_expression5969 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_172_in_searched_case_expression5969 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_searched_case_expression5971 ;

    //public static final BitSet FOLLOW_nested_expression_in_searched_case_expression5971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_searched_case_expression5971 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_95_in_else_case_expression5984 ;

    //public static final BitSet FOLLOW_95_in_else_case_expression5984 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_95_in_else_case_expression5984 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_else_case_expression5986 ;

    //public static final BitSet FOLLOW_nested_expression_in_else_case_expression5986 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_else_case_expression5986 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_label_name_in_case_statement5998 ;

    //public static final BitSet FOLLOW_label_name_in_case_statement5998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_label_name_in_case_statement5998 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_76_in_case_statement6003 ;

    //public static final BitSet FOLLOW_76_in_case_statement6003 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0040422400000140L});


    static this()
    {
    //FOLLOW_76_in_case_statement6003 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0040422400000140L]);

    }public static BitSet FOLLOW_simple_case_statement_in_case_statement6008 ;

    //public static final BitSet FOLLOW_simple_case_statement_in_case_statement6008 = new BitSet(new long[]{0x0000000000000000L,0x0000000280000000L});


    static this()
    {
    //FOLLOW_simple_case_statement_in_case_statement6008 = new BitSet([0x0000000000000000L,0x0000000280000000L]);

    }public static BitSet FOLLOW_searched_case_statement_in_case_statement6012 ;

    //public static final BitSet FOLLOW_searched_case_statement_in_case_statement6012 = new BitSet(new long[]{0x0000000000000000L,0x0000000280000000L});


    static this()
    {
    //FOLLOW_searched_case_statement_in_case_statement6012 = new BitSet([0x0000000000000000L,0x0000000280000000L]);

    }public static BitSet FOLLOW_else_case_statement_in_case_statement6018 ;

    //public static final BitSet FOLLOW_else_case_statement_in_case_statement6018 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_else_case_statement_in_case_statement6018 = new BitSet([0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_97_in_case_statement6023 ;

    //public static final BitSet FOLLOW_97_in_case_statement6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});


    static this()
    {
    //FOLLOW_97_in_case_statement6023 = new BitSet([0x0000000000000000L,0x0000000000001000L]);

    }public static BitSet FOLLOW_76_in_case_statement6025 ;

    //public static final BitSet FOLLOW_76_in_case_statement6025 = new BitSet(new long[]{0x0000000000408002L});


    static this()
    {
    //FOLLOW_76_in_case_statement6025 = new BitSet([0x0000000000408002L]);

    }public static BitSet FOLLOW_label_name_in_case_statement6029 ;

    //public static final BitSet FOLLOW_label_name_in_case_statement6029 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_label_name_in_case_statement6029 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_expression_in_simple_case_statement6042 ;

    //public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement6042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_plsql_expression_in_simple_case_statement6042 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_simple_case_statement6046 ;

    //public static final BitSet FOLLOW_182_in_simple_case_statement6046 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_182_in_simple_case_statement6046 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_simple_case_statement6048 ;

    //public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement6048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_plsql_expression_in_simple_case_statement6048 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_simple_case_statement6050 ;

    //public static final BitSet FOLLOW_172_in_simple_case_statement6050 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_172_in_simple_case_statement6050 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_simple_case_statement6052 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_simple_case_statement6052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_simple_case_statement6052 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_182_in_searched_case_statement6067 ;

    //public static final BitSet FOLLOW_182_in_searched_case_statement6067 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_182_in_searched_case_statement6067 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expression_in_searched_case_statement6069 ;

    //public static final BitSet FOLLOW_plsql_expression_in_searched_case_statement6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});


    static this()
    {
    //FOLLOW_plsql_expression_in_searched_case_statement6069 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000100000000000L]);

    }public static BitSet FOLLOW_172_in_searched_case_statement6071 ;

    //public static final BitSet FOLLOW_172_in_searched_case_statement6071 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_172_in_searched_case_statement6071 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_searched_case_statement6073 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_searched_case_statement6073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_searched_case_statement6073 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0040000000000000L]);

    }public static BitSet FOLLOW_95_in_else_case_statement6086 ;

    //public static final BitSet FOLLOW_95_in_else_case_statement6086 = new BitSet(new long[]{0x0000000004408400L,0x1409194009121008L,0x0102007545400100L});


    static this()
    {
    //FOLLOW_95_in_else_case_statement6086 = new BitSet([0x0000000004408400L,0x1409194009121008L,0x0102007545400100L]);

    }public static BitSet FOLLOW_seq_of_statements_in_else_case_statement6088 ;

    //public static final BitSet FOLLOW_seq_of_statements_in_else_case_statement6088 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_seq_of_statements_in_else_case_statement6088 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCURSOR_in_cursor_expression6098 ;

    //public static final BitSet FOLLOW_keyCURSOR_in_cursor_expression6098 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCURSOR_in_cursor_expression6098 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_cursor_expression6100 ;

    //public static final BitSet FOLLOW_LPAREN_in_cursor_expression6100 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_cursor_expression6100 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_subquery_in_cursor_expression6102 ;

    //public static final BitSet FOLLOW_subquery_in_cursor_expression6102 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_subquery_in_cursor_expression6102 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_cursor_expression6104 ;

    //public static final BitSet FOLLOW_RPAREN_in_cursor_expression6104 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_cursor_expression6104 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_datetime_expression6114 ;

    //public static final BitSet FOLLOW_sql_expression_in_datetime_expression6114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});


    static this()
    {
    //FOLLOW_sql_expression_in_datetime_expression6114 = new BitSet([0x0000000000000000L,0x0000000000000004L]);

    }public static BitSet FOLLOW_66_in_datetime_expression6116 ;

    //public static final BitSet FOLLOW_66_in_datetime_expression6116 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_66_in_datetime_expression6116 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyLOCAL_in_datetime_expression6122 ;

    //public static final BitSet FOLLOW_keyLOCAL_in_datetime_expression6122 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLOCAL_in_datetime_expression6122 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTIME_in_datetime_expression6128 ;

    //public static final BitSet FOLLOW_keyTIME_in_datetime_expression6128 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyTIME_in_datetime_expression6128 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyZONE_in_datetime_expression6130 ;

    //public static final BitSet FOLLOW_keyZONE_in_datetime_expression6130 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyZONE_in_datetime_expression6130 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyDBTIMEZONE_in_datetime_expression6134 ;

    //public static final BitSet FOLLOW_keyDBTIMEZONE_in_datetime_expression6134 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyDBTIMEZONE_in_datetime_expression6134 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keySESSIONTIMEZONE_in_datetime_expression6138 ;

    //public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_datetime_expression6138 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keySESSIONTIMEZONE_in_datetime_expression6138 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_datetime_expression6142 ;

    //public static final BitSet FOLLOW_sql_expression_in_datetime_expression6142 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_datetime_expression6142 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCOUNT_in_function_expression6167 ;

    //public static final BitSet FOLLOW_keyCOUNT_in_function_expression6167 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCOUNT_in_function_expression6167 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_function_expression6169 ;

    //public static final BitSet FOLLOW_LPAREN_in_function_expression6169 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_function_expression6169 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_ASTERISK_in_function_expression6173 ;

    //public static final BitSet FOLLOW_ASTERISK_in_function_expression6173 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_ASTERISK_in_function_expression6173 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_nested_expression_in_function_expression6177 ;

    //public static final BitSet FOLLOW_nested_expression_in_function_expression6177 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_function_expression6177 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_function_expression6181 ;

    //public static final BitSet FOLLOW_RPAREN_in_function_expression6181 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_function_expression6181 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_93_in_function_expression6187 ;

    //public static final BitSet FOLLOW_93_in_function_expression6187 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_93_in_function_expression6187 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_LPAREN_in_function_expression6191 ;

    //public static final BitSet FOLLOW_LPAREN_in_function_expression6191 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_function_expression6191 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_function_expression6193 ;

    //public static final BitSet FOLLOW_nested_expression_in_function_expression6193 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_function_expression6193 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_function_expression6195 ;

    //public static final BitSet FOLLOW_RPAREN_in_function_expression6195 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_function_expression6195 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_expression_in_function_expression6199 ;

    //public static final BitSet FOLLOW_nested_expression_in_function_expression6199 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_function_expression6199 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_call_in_function_expression6213 ;

    //public static final BitSet FOLLOW_function_call_in_function_expression6213 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_function_call_in_function_expression6213 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_function_expression6217 ;

    //public static final BitSet FOLLOW_DOT_in_function_expression6217 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_DOT_in_function_expression6217 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_function_expression6219 ;

    //public static final BitSet FOLLOW_nested_expression_in_function_expression6219 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_function_expression6219 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_call_in_function_expression6234 ;

    //public static final BitSet FOLLOW_function_call_in_function_expression6234 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_function_call_in_function_expression6234 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_function_expression6238 ;

    //public static final BitSet FOLLOW_DOT_in_function_expression6238 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_DOT_in_function_expression6238 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_function_expression6240 ;

    //public static final BitSet FOLLOW_nested_expression_in_function_expression6240 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_function_expression6240 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCOUNT_in_special_expression6259 ;

    //public static final BitSet FOLLOW_keyCOUNT_in_special_expression6259 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCOUNT_in_special_expression6259 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_special_expression6261 ;

    //public static final BitSet FOLLOW_LPAREN_in_special_expression6261 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_special_expression6261 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_ASTERISK_in_special_expression6265 ;

    //public static final BitSet FOLLOW_ASTERISK_in_special_expression6265 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_ASTERISK_in_special_expression6265 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_nested_expression_in_special_expression6269 ;

    //public static final BitSet FOLLOW_nested_expression_in_special_expression6269 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_special_expression6269 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_special_expression6273 ;

    //public static final BitSet FOLLOW_RPAREN_in_special_expression6273 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_special_expression6273 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_93_in_special_expression6279 ;

    //public static final BitSet FOLLOW_93_in_special_expression6279 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_93_in_special_expression6279 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_special_expression6281 ;

    //public static final BitSet FOLLOW_LPAREN_in_special_expression6281 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_special_expression6281 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_special_expression6283 ;

    //public static final BitSet FOLLOW_nested_expression_in_special_expression6283 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_special_expression6283 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_special_expression6285 ;

    //public static final BitSet FOLLOW_RPAREN_in_special_expression6285 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_special_expression6285 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_interval_expression6299 ;

    //public static final BitSet FOLLOW_sql_expression_in_interval_expression6299 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_sql_expression_in_interval_expression6299 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyDAY_in_interval_expression6305 ;

    //public static final BitSet FOLLOW_keyDAY_in_interval_expression6305 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyDAY_in_interval_expression6305 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_interval_expression6309 ;

    //public static final BitSet FOLLOW_LPAREN_in_interval_expression6309 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_interval_expression6309 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_leading_field_precision_in_interval_expression6311 ;

    //public static final BitSet FOLLOW_leading_field_precision_in_interval_expression6311 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_leading_field_precision_in_interval_expression6311 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_interval_expression6313 ;

    //public static final BitSet FOLLOW_RPAREN_in_interval_expression6313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_interval_expression6313 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_interval_expression6318 ;

    //public static final BitSet FOLLOW_173_in_interval_expression6318 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_interval_expression6318 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySECOND_in_interval_expression6320 ;

    //public static final BitSet FOLLOW_keySECOND_in_interval_expression6320 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keySECOND_in_interval_expression6320 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_interval_expression6324 ;

    //public static final BitSet FOLLOW_LPAREN_in_interval_expression6324 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_interval_expression6324 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_fractional_second_precision_in_interval_expression6326 ;

    //public static final BitSet FOLLOW_fractional_second_precision_in_interval_expression6326 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_fractional_second_precision_in_interval_expression6326 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_interval_expression6328 ;

    //public static final BitSet FOLLOW_RPAREN_in_interval_expression6328 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_interval_expression6328 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyYEAR_in_interval_expression6337 ;

    //public static final BitSet FOLLOW_keyYEAR_in_interval_expression6337 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyYEAR_in_interval_expression6337 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_interval_expression6341 ;

    //public static final BitSet FOLLOW_LPAREN_in_interval_expression6341 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_interval_expression6341 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_leading_field_precision_in_interval_expression6343 ;

    //public static final BitSet FOLLOW_leading_field_precision_in_interval_expression6343 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_leading_field_precision_in_interval_expression6343 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_interval_expression6345 ;

    //public static final BitSet FOLLOW_RPAREN_in_interval_expression6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_interval_expression6345 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_interval_expression6350 ;

    //public static final BitSet FOLLOW_173_in_interval_expression6350 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_interval_expression6350 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyMONTH_in_interval_expression6352 ;

    //public static final BitSet FOLLOW_keyMONTH_in_interval_expression6352 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyMONTH_in_interval_expression6352 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_integer_in_leading_field_precision6366 ;

    //public static final BitSet FOLLOW_integer_in_leading_field_precision6366 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_in_leading_field_precision6366 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_integer_in_fractional_second_precision6377 ;

    //public static final BitSet FOLLOW_integer_in_fractional_second_precision6377 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_in_fractional_second_precision6377 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_sequence_name6428 ;

    //public static final BitSet FOLLOW_identifier_in_sequence_name6428 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_sequence_name6428 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NUMBER_in_integer6438 ;

    //public static final BitSet FOLLOW_NUMBER_in_integer6438 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_integer6438 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_64_in_alias_6452 ;

    //public static final BitSet FOLLOW_64_in_alias_6452 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_64_in_alias_6452 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_identifier_in_alias_6457 ;

    //public static final BitSet FOLLOW_sql_identifier_in_alias_6457 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_alias_6457 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_column_specs6468 ;

    //public static final BitSet FOLLOW_column_spec_in_column_specs6468 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_column_spec_in_column_specs6468 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_column_specs6472 ;

    //public static final BitSet FOLLOW_COMMA_in_column_specs6472 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_column_specs6472 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_spec_in_column_specs6474 ;

    //public static final BitSet FOLLOW_column_spec_in_column_specs6474 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_column_spec_in_column_specs6474 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_identifier_in_column_spec6488 ;

    //public static final BitSet FOLLOW_sql_identifier_in_column_spec6488 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_column_spec6488 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_column_spec6492 ;

    //public static final BitSet FOLLOW_DOT_in_column_spec6492 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_column_spec6492 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_identifier_in_column_spec6494 ;

    //public static final BitSet FOLLOW_sql_identifier_in_column_spec6494 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_column_spec6494 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_column_spec6498 ;

    //public static final BitSet FOLLOW_DOT_in_column_spec6498 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_column_spec6498 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_identifier_in_column_spec6500 ;

    //public static final BitSet FOLLOW_sql_identifier_in_column_spec6500 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_column_spec6500 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_column_name6522 ;

    //public static final BitSet FOLLOW_sql_identifier_in_column_name6522 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_column_name6522 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_nested_table6532 ;

    //public static final BitSet FOLLOW_sql_identifier_in_nested_table6532 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_nested_table6532 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_schema_name_in_nested_table_column_name6544 ;

    //public static final BitSet FOLLOW_schema_name_in_nested_table_column_name6544 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_schema_name_in_nested_table_column_name6544 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_nested_table_column_name6546 ;

    //public static final BitSet FOLLOW_DOT_in_nested_table_column_name6546 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_nested_table_column_name6546 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_nested_table_column_name6551 ;

    //public static final BitSet FOLLOW_table_name_in_nested_table_column_name6551 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_table_name_in_nested_table_column_name6551 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_nested_table_column_name6553 ;

    //public static final BitSet FOLLOW_DOT_in_nested_table_column_name6553 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_nested_table_column_name6553 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_nested_table_in_nested_table_column_name6555 ;

    //public static final BitSet FOLLOW_nested_table_in_nested_table_column_name6555 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_nested_table_in_nested_table_column_name6555 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_nested_table_column_name6557 ;

    //public static final BitSet FOLLOW_DOT_in_nested_table_column_name6557 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_nested_table_column_name6557 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_nested_table_column_name6559 ;

    //public static final BitSet FOLLOW_column_name_in_nested_table_column_name6559 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_name_in_nested_table_column_name6559 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_user_defined_function6570 ;

    //public static final BitSet FOLLOW_sql_identifier_in_user_defined_function6570 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_user_defined_function6570 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_user_defined_function6574 ;

    //public static final BitSet FOLLOW_DOT_in_user_defined_function6574 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_user_defined_function6574 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_identifier_in_user_defined_function6576 ;

    //public static final BitSet FOLLOW_sql_identifier_in_user_defined_function6576 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_user_defined_function6576 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_user_defined_function6583 ;

    //public static final BitSet FOLLOW_DOT_in_user_defined_function6583 = new BitSet(new long[]{0x0000000000000000L,0x0000001008000000L,0x0000000000800000L});


    static this()
    {
    //FOLLOW_DOT_in_user_defined_function6583 = new BitSet([0x0000000000000000L,0x0000001008000000L,0x0000000000800000L]);

    }public static BitSet FOLLOW_set_in_user_defined_function6585 ;

    //public static final BitSet FOLLOW_set_in_user_defined_function6585 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_set_in_user_defined_function6585 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_table_spec_in_selected_table6623 ;

    //public static final BitSet FOLLOW_table_spec_in_selected_table6623 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_table_spec_in_selected_table6623 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_171_in_selected_table6629 ;

    //public static final BitSet FOLLOW_171_in_selected_table6629 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_171_in_selected_table6629 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keyTHE_in_selected_table6633 ;

    //public static final BitSet FOLLOW_keyTHE_in_selected_table6633 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyTHE_in_selected_table6633 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_subquery_in_selected_table6638 ;

    //public static final BitSet FOLLOW_subquery_in_selected_table6638 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_subquery_in_selected_table6638 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_alias__in_selected_table6644 ;

    //public static final BitSet FOLLOW_alias__in_selected_table6644 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_alias__in_selected_table6644 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_schema_name_in_table_spec6660 ;

    //public static final BitSet FOLLOW_schema_name_in_table_spec6660 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_schema_name_in_table_spec6660 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_table_spec6662 ;

    //public static final BitSet FOLLOW_DOT_in_table_spec6662 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_table_spec6662 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_table_spec6667 ;

    //public static final BitSet FOLLOW_table_name_in_table_spec6667 = new BitSet(new long[]{0x0000000000000082L});


    static this()
    {
    //FOLLOW_table_name_in_table_spec6667 = new BitSet([0x0000000000000082L]);

    }public static BitSet FOLLOW_AT_SIGN_in_table_spec6671 ;

    //public static final BitSet FOLLOW_AT_SIGN_in_table_spec6671 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_AT_SIGN_in_table_spec6671 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_link_name_in_table_spec6673 ;

    //public static final BitSet FOLLOW_link_name_in_table_spec6673 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_link_name_in_table_spec6673 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_schema_name_in_table_alias6689 ;

    //public static final BitSet FOLLOW_schema_name_in_table_alias6689 = new BitSet(new long[]{0x0000000000002000L});


    static this()
    {
    //FOLLOW_schema_name_in_table_alias6689 = new BitSet([0x0000000000002000L]);

    }public static BitSet FOLLOW_DOT_in_table_alias6691 ;

    //public static final BitSet FOLLOW_DOT_in_table_alias6691 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_table_alias6691 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_table_alias6696 ;

    //public static final BitSet FOLLOW_table_name_in_table_alias6696 = new BitSet(new long[]{0x0000000000408082L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_table_name_in_table_alias6696 = new BitSet([0x0000000000408082L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_AT_SIGN_in_table_alias6700 ;

    //public static final BitSet FOLLOW_AT_SIGN_in_table_alias6700 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_AT_SIGN_in_table_alias6700 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_link_name_in_table_alias6702 ;

    //public static final BitSet FOLLOW_link_name_in_table_alias6702 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000001L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_link_name_in_table_alias6702 = new BitSet([0x0000000000408002L,0x0000000000000001L,0x0000000400000000L]);

    }public static BitSet FOLLOW_alias__in_table_alias6709 ;

    //public static final BitSet FOLLOW_alias__in_table_alias6709 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_alias__in_table_alias6709 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_link_name6723 ;

    //public static final BitSet FOLLOW_sql_identifier_in_link_name6723 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_link_name6723 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_or_in_nested_condition6735 ;

    //public static final BitSet FOLLOW_condition_or_in_nested_condition6735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_or_in_nested_condition6735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_bool_in_nested_condition6742 ;

    //public static final BitSet FOLLOW_expr_bool_in_nested_condition6742 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_bool_in_nested_condition6742 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_or_in_sql_condition6759 ;

    //public static final BitSet FOLLOW_condition_or_in_sql_condition6759 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_or_in_sql_condition6759 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_paren6770 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_paren6770 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_paren6770 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_condition_paren6772 ;

    //public static final BitSet FOLLOW_sql_condition_in_condition_paren6772 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_condition_paren6772 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_paren6774 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_paren6774 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_paren6774 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_and_in_condition_or6784 ;

    //public static final BitSet FOLLOW_condition_and_in_condition_or6784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_condition_and_in_condition_or6784 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_144_in_condition_or6788 ;

    //public static final BitSet FOLLOW_144_in_condition_or6788 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_144_in_condition_or6788 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_condition_and_in_condition_or6790 ;

    //public static final BitSet FOLLOW_condition_and_in_condition_or6790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_condition_and_in_condition_or6790 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000010000L]);

    }public static BitSet FOLLOW_condition_not_in_condition_and6803 ;

    //public static final BitSet FOLLOW_condition_not_in_condition_and6803 = new BitSet(new long[]{0x4000000000000002L});


    static this()
    {
    //FOLLOW_condition_not_in_condition_and6803 = new BitSet([0x4000000000000002L]);

    }public static BitSet FOLLOW_62_in_condition_and6807 ;

    //public static final BitSet FOLLOW_62_in_condition_and6807 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_62_in_condition_and6807 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_condition_not_in_condition_and6809 ;

    //public static final BitSet FOLLOW_condition_not_in_condition_and6809 = new BitSet(new long[]{0x4000000000000002L});


    static this()
    {
    //FOLLOW_condition_not_in_condition_and6809 = new BitSet([0x4000000000000002L]);

    }public static BitSet FOLLOW_134_in_condition_not6822 ;

    //public static final BitSet FOLLOW_134_in_condition_not6822 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800100L});


    static this()
    {
    //FOLLOW_134_in_condition_not6822 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800100L]);

    }public static BitSet FOLLOW_condition_expr_in_condition_not6824 ;

    //public static final BitSet FOLLOW_condition_expr_in_condition_not6824 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_expr_in_condition_not6824 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_expr_in_condition_not6829 ;

    //public static final BitSet FOLLOW_condition_expr_in_condition_not6829 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_expr_in_condition_not6829 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_exists_in_condition_expr6839 ;

    //public static final BitSet FOLLOW_condition_exists_in_condition_expr6839 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_exists_in_condition_expr6839 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_in_condition_expr6844 ;

    //public static final BitSet FOLLOW_condition_is_in_condition_expr6844 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_in_condition_expr6844 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_comparison_in_condition_expr6849 ;

    //public static final BitSet FOLLOW_condition_comparison_in_condition_expr6849 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_comparison_in_condition_expr6849 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_group_comparison_in_condition_expr6854 ;

    //public static final BitSet FOLLOW_condition_group_comparison_in_condition_expr6854 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_group_comparison_in_condition_expr6854 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_in_in_condition_expr6859 ;

    //public static final BitSet FOLLOW_condition_in_in_condition_expr6859 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_in_in_condition_expr6859 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_a_set_in_condition_expr6864 ;

    //public static final BitSet FOLLOW_condition_is_a_set_in_condition_expr6864 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_a_set_in_condition_expr6864 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_any_in_condition_expr6869 ;

    //public static final BitSet FOLLOW_condition_is_any_in_condition_expr6869 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_any_in_condition_expr6869 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_empty_in_condition_expr6874 ;

    //public static final BitSet FOLLOW_condition_is_empty_in_condition_expr6874 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_empty_in_condition_expr6874 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_of_type_in_condition_expr6879 ;

    //public static final BitSet FOLLOW_condition_is_of_type_in_condition_expr6879 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_of_type_in_condition_expr6879 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_present_in_condition_expr6884 ;

    //public static final BitSet FOLLOW_condition_is_present_in_condition_expr6884 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_present_in_condition_expr6884 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_like_in_condition_expr6889 ;

    //public static final BitSet FOLLOW_condition_like_in_condition_expr6889 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_like_in_condition_expr6889 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_memeber_in_condition_expr6894 ;

    //public static final BitSet FOLLOW_condition_memeber_in_condition_expr6894 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_memeber_in_condition_expr6894 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_between_in_condition_expr6899 ;

    //public static final BitSet FOLLOW_condition_between_in_condition_expr6899 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_between_in_condition_expr6899 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_regexp_like_in_condition_expr6904 ;

    //public static final BitSet FOLLOW_condition_regexp_like_in_condition_expr6904 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_regexp_like_in_condition_expr6904 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_submultiset_in_condition_expr6909 ;

    //public static final BitSet FOLLOW_condition_submultiset_in_condition_expr6909 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_submultiset_in_condition_expr6909 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_equals_path_in_condition_expr6914 ;

    //public static final BitSet FOLLOW_condition_equals_path_in_condition_expr6914 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_equals_path_in_condition_expr6914 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_under_path_in_condition_expr6919 ;

    //public static final BitSet FOLLOW_condition_under_path_in_condition_expr6919 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_under_path_in_condition_expr6919 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_paren_in_condition_expr6924 ;

    //public static final BitSet FOLLOW_condition_paren_in_condition_expr6924 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_paren_in_condition_expr6924 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_100_in_condition_exists6934 ;

    //public static final BitSet FOLLOW_100_in_condition_exists6934 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_100_in_condition_exists6934 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_exists6936 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_exists6936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_exists6936 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_exists6938 ;

    //public static final BitSet FOLLOW_select_command_in_condition_exists6938 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_exists6938 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_exists6940 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_exists6940 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_exists6940 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_is6950 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_is6950 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_is6950 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is6952 ;

    //public static final BitSet FOLLOW_120_in_condition_is6952 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000140L});


    static this()
    {
    //FOLLOW_120_in_condition_is6952 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000140L]);

    }public static BitSet FOLLOW_134_in_condition_is6956 ;

    //public static final BitSet FOLLOW_134_in_condition_is6956 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_condition_is6956 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_keyNAN_in_condition_is6963 ;

    //public static final BitSet FOLLOW_keyNAN_in_condition_is6963 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyNAN_in_condition_is6963 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINFINITE_in_condition_is6967 ;

    //public static final BitSet FOLLOW_keyINFINITE_in_condition_is6967 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyINFINITE_in_condition_is6967 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_136_in_condition_is6971 ;

    //public static final BitSet FOLLOW_136_in_condition_is6971 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_condition_is6971 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_comparison6983 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_comparison6983 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_comparison6983 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_condition_comparison6985 ;

    //public static final BitSet FOLLOW_sql_expressions_in_condition_comparison6985 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_condition_comparison6985 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_comparison6987 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_comparison6987 = new BitSet(new long[]{0x0000000208020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_comparison6987 = new BitSet([0x0000000208020000L]);

    }public static BitSet FOLLOW_outer_join_sign_in_condition_comparison6991 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison6991 = new BitSet(new long[]{0x0000000200020000L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_condition_comparison6991 = new BitSet([0x0000000200020000L]);

    }public static BitSet FOLLOW_set_in_condition_comparison6996 ;

    //public static final BitSet FOLLOW_set_in_condition_comparison6996 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_set_in_condition_comparison6996 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_comparison7006 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_comparison7006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_comparison7006 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_comparison7008 ;

    //public static final BitSet FOLLOW_select_command_in_condition_comparison7008 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_comparison7008 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_comparison7010 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_comparison7010 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_comparison7010 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_outer_join_sign_in_condition_comparison7014 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison7014 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_condition_comparison7014 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_151_in_condition_comparison7024 ;

    //public static final BitSet FOLLOW_151_in_condition_comparison7024 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_151_in_condition_comparison7024 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_comparison7029 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_comparison7029 = new BitSet(new long[]{0x000000021A320000L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_comparison7029 = new BitSet([0x000000021A320000L]);

    }public static BitSet FOLLOW_outer_join_sign_in_condition_comparison7033 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison7033 = new BitSet(new long[]{0x0000000212320000L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_condition_comparison7033 = new BitSet([0x0000000212320000L]);

    }public static BitSet FOLLOW_set_in_condition_comparison7038 ;

    //public static final BitSet FOLLOW_set_in_condition_comparison7038 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400800100L});


    static this()
    {
    //FOLLOW_set_in_condition_comparison7038 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400800100L]);

    }public static BitSet FOLLOW_151_in_condition_comparison7066 ;

    //public static final BitSet FOLLOW_151_in_condition_comparison7066 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_151_in_condition_comparison7066 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_comparison7073 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_comparison7073 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_comparison7073 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_comparison7077 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_comparison7077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_comparison7077 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_comparison7079 ;

    //public static final BitSet FOLLOW_select_command_in_condition_comparison7079 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_comparison7079 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_comparison7081 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_comparison7081 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_comparison7081 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_outer_join_sign_in_condition_comparison7087 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison7087 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_condition_comparison7087 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_group_comparison7100 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison7100 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_group_comparison7100 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_condition_group_comparison7102 ;

    //public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison7102 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_condition_group_comparison7102 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_group_comparison7104 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison7104 = new BitSet(new long[]{0x0000000200020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_group_comparison7104 = new BitSet([0x0000000200020000L]);

    }public static BitSet FOLLOW_set_in_condition_group_comparison7106 ;

    //public static final BitSet FOLLOW_set_in_condition_group_comparison7106 = new BitSet(new long[]{0xA000000000400000L});


    static this()
    {
    //FOLLOW_set_in_condition_group_comparison7106 = new BitSet([0xA000000000400000L]);

    }public static BitSet FOLLOW_63_in_condition_group_comparison7118 ;

    //public static final BitSet FOLLOW_63_in_condition_group_comparison7118 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_63_in_condition_group_comparison7118 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keySOME_in_condition_group_comparison7122 ;

    //public static final BitSet FOLLOW_keySOME_in_condition_group_comparison7122 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keySOME_in_condition_group_comparison7122 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_61_in_condition_group_comparison7126 ;

    //public static final BitSet FOLLOW_61_in_condition_group_comparison7126 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_61_in_condition_group_comparison7126 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_group_comparison7130 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison7130 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_group_comparison7130 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison7134 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison7134 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_condition_group_comparison7134 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_group_comparison7138 ;

    //public static final BitSet FOLLOW_select_command_in_condition_group_comparison7138 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_group_comparison7138 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_group_comparison7142 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison7142 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_group_comparison7142 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_group_comparison7147 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_group_comparison7147 = new BitSet(new long[]{0x0000000212320000L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_group_comparison7147 = new BitSet([0x0000000212320000L]);

    }public static BitSet FOLLOW_set_in_condition_group_comparison7149 ;

    //public static final BitSet FOLLOW_set_in_condition_group_comparison7149 = new BitSet(new long[]{0xA000000000400000L});


    static this()
    {
    //FOLLOW_set_in_condition_group_comparison7149 = new BitSet([0xA000000000400000L]);

    }public static BitSet FOLLOW_63_in_condition_group_comparison7177 ;

    //public static final BitSet FOLLOW_63_in_condition_group_comparison7177 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_63_in_condition_group_comparison7177 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keySOME_in_condition_group_comparison7181 ;

    //public static final BitSet FOLLOW_keySOME_in_condition_group_comparison7181 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keySOME_in_condition_group_comparison7181 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_61_in_condition_group_comparison7185 ;

    //public static final BitSet FOLLOW_61_in_condition_group_comparison7185 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_61_in_condition_group_comparison7185 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_group_comparison7189 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison7189 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_group_comparison7189 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_condition_group_comparison7193 ;

    //public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison7193 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_condition_group_comparison7193 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_group_comparison7197 ;

    //public static final BitSet FOLLOW_select_command_in_condition_group_comparison7197 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_group_comparison7197 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_group_comparison7201 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison7201 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_group_comparison7201 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_in7211 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_in7211 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_in7211 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_condition_in7213 ;

    //public static final BitSet FOLLOW_sql_expressions_in_condition_in7213 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_condition_in7213 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_in7215 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_in7215 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_in7215 = new BitSet([0x0000000000000000L,0x0002000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_in7219 ;

    //public static final BitSet FOLLOW_134_in_condition_in7219 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_134_in_condition_in7219 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_condition_in7224 ;

    //public static final BitSet FOLLOW_113_in_condition_in7224 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_condition_in7224 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_in7226 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_in7226 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_in7226 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_condition_in7230 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_condition_in7230 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_condition_in7230 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_in7234 ;

    //public static final BitSet FOLLOW_select_command_in_condition_in7234 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_in7234 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_in7238 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_in7238 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_in7238 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_in7243 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_in7243 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_in7243 = new BitSet([0x0000000000000000L,0x0002000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_in7247 ;

    //public static final BitSet FOLLOW_134_in_condition_in7247 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_134_in_condition_in7247 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_condition_in7252 ;

    //public static final BitSet FOLLOW_113_in_condition_in7252 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_condition_in7252 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_in7254 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_in7254 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_in7254 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expression_list_in_condition_in7258 ;

    //public static final BitSet FOLLOW_expression_list_in_condition_in7258 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_expression_list_in_condition_in7258 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_condition_in7262 ;

    //public static final BitSet FOLLOW_select_command_in_condition_in7262 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_condition_in7262 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_in7266 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_in7266 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_in7266 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set7276 ;

    //public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set7276 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_nested_table_column_name_in_condition_is_a_set7276 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is_a_set7278 ;

    //public static final BitSet FOLLOW_120_in_condition_is_a_set7278 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_120_in_condition_is_a_set7278 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_is_a_set7282 ;

    //public static final BitSet FOLLOW_134_in_condition_is_a_set7282 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_134_in_condition_is_a_set7282 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyA_in_condition_is_a_set7287 ;

    //public static final BitSet FOLLOW_keyA_in_condition_is_a_set7287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_keyA_in_condition_is_a_set7287 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_condition_is_a_set7289 ;

    //public static final BitSet FOLLOW_166_in_condition_is_a_set7289 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_166_in_condition_is_a_set7289 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_name_in_condition_is_any7301 ;

    //public static final BitSet FOLLOW_column_name_in_condition_is_any7301 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_column_name_in_condition_is_any7301 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is_any7303 ;

    //public static final BitSet FOLLOW_120_in_condition_is_any7303 = new BitSet(new long[]{0x8000000000000000L});


    static this()
    {
    //FOLLOW_120_in_condition_is_any7303 = new BitSet([0x8000000000000000L]);

    }public static BitSet FOLLOW_63_in_condition_is_any7308 ;

    //public static final BitSet FOLLOW_63_in_condition_is_any7308 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_63_in_condition_is_any7308 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_table_column_name_in_condition_is_empty7318 ;

    //public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_empty7318 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_nested_table_column_name_in_condition_is_empty7318 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is_empty7320 ;

    //public static final BitSet FOLLOW_120_in_condition_is_empty7320 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_120_in_condition_is_empty7320 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_is_empty7324 ;

    //public static final BitSet FOLLOW_134_in_condition_is_empty7324 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_134_in_condition_is_empty7324 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyEMPTY_in_condition_is_empty7329 ;

    //public static final BitSet FOLLOW_keyEMPTY_in_condition_is_empty7329 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyEMPTY_in_condition_is_empty7329 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_is_of_type7339 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_is_of_type7339 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_is_of_type7339 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is_of_type7341 ;

    //public static final BitSet FOLLOW_120_in_condition_is_of_type7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004040L});


    static this()
    {
    //FOLLOW_120_in_condition_is_of_type7341 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000004040L]);

    }public static BitSet FOLLOW_134_in_condition_is_of_type7345 ;

    //public static final BitSet FOLLOW_134_in_condition_is_of_type7345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});


    static this()
    {
    //FOLLOW_134_in_condition_is_of_type7345 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000004000L]);

    }public static BitSet FOLLOW_142_in_condition_is_of_type7350 ;

    //public static final BitSet FOLLOW_142_in_condition_is_of_type7350 = new BitSet(new long[]{0x0000000008400000L});


    static this()
    {
    //FOLLOW_142_in_condition_is_of_type7350 = new BitSet([0x0000000008400000L]);

    }public static BitSet FOLLOW_keyTYPE_in_condition_is_of_type7354 ;

    //public static final BitSet FOLLOW_keyTYPE_in_condition_is_of_type7354 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyTYPE_in_condition_is_of_type7354 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_is_of_type7359 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_is_of_type7359 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_is_of_type7359 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_condition_is_of_type7361 ;

    //public static final BitSet FOLLOW_type_name_in_condition_is_of_type7361 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_type_name_in_condition_is_of_type7361 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_is_of_type7363 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_is_of_type7363 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_is_of_type7363 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7373 ;

    //public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7373 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7373 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_condition_is_of_type_names7377 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_is_of_type_names7377 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_is_of_type_names7377 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7379 ;

    //public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7379 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7379 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_keyONLY_in_condition_is_of_type_name7394 ;

    //public static final BitSet FOLLOW_keyONLY_in_condition_is_of_type_name7394 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyONLY_in_condition_is_of_type_name7394 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_type_name_in_condition_is_of_type_name7399 ;

    //public static final BitSet FOLLOW_type_name_in_condition_is_of_type_name7399 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_name_in_condition_is_of_type_name7399 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cell_reference_in_condition_is_present7409 ;

    //public static final BitSet FOLLOW_cell_reference_in_condition_is_present7409 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});


    static this()
    {
    //FOLLOW_cell_reference_in_condition_is_present7409 = new BitSet([0x0000000000000000L,0x0100000000000000L]);

    }public static BitSet FOLLOW_120_in_condition_is_present7411 ;

    //public static final BitSet FOLLOW_120_in_condition_is_present7411 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_120_in_condition_is_present7411 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyPRESENT_in_condition_is_present7413 ;

    //public static final BitSet FOLLOW_keyPRESENT_in_condition_is_present7413 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyPRESENT_in_condition_is_present7413 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_like7423 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_like7423 = new BitSet(new long[]{0x0000000000400000L,0x0200000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_like7423 = new BitSet([0x0000000000400000L,0x0200000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_like7427 ;

    //public static final BitSet FOLLOW_134_in_condition_like7427 = new BitSet(new long[]{0x0000000000400000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_134_in_condition_like7427 = new BitSet([0x0000000000400000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_121_in_condition_like7434 ;

    //public static final BitSet FOLLOW_121_in_condition_like7434 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_121_in_condition_like7434 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyLIKEC_in_condition_like7438 ;

    //public static final BitSet FOLLOW_keyLIKEC_in_condition_like7438 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyLIKEC_in_condition_like7438 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyLIKE2_in_condition_like7442 ;

    //public static final BitSet FOLLOW_keyLIKE2_in_condition_like7442 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyLIKE2_in_condition_like7442 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyLIKE4_in_condition_like7446 ;

    //public static final BitSet FOLLOW_keyLIKE4_in_condition_like7446 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyLIKE4_in_condition_like7446 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_like7450 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_like7450 = new BitSet(new long[]{0x0000000000400002L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_like7450 = new BitSet([0x0000000000400002L]);

    }public static BitSet FOLLOW_keyESCAPE_in_condition_like7454 ;

    //public static final BitSet FOLLOW_keyESCAPE_in_condition_like7454 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyESCAPE_in_condition_like7454 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_like7456 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_like7456 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_like7456 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_memeber7469 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_memeber7469 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_memeber7469 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_memeber7473 ;

    //public static final BitSet FOLLOW_134_in_condition_memeber7473 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_134_in_condition_memeber7473 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyMEMBER_in_condition_memeber7478 ;

    //public static final BitSet FOLLOW_keyMEMBER_in_condition_memeber7478 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400004000L});


    static this()
    {
    //FOLLOW_keyMEMBER_in_condition_memeber7478 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400004000L]);

    }public static BitSet FOLLOW_142_in_condition_memeber7482 ;

    //public static final BitSet FOLLOW_142_in_condition_memeber7482 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_142_in_condition_memeber7482 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_nested_table_column_name_in_condition_memeber7487 ;

    //public static final BitSet FOLLOW_nested_table_column_name_in_condition_memeber7487 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_table_column_name_in_condition_memeber7487 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_between7497 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_between7497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_between7497 = new BitSet([0x0000000000000000L,0x0000000000000010L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_between7501 ;

    //public static final BitSet FOLLOW_134_in_condition_between7501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});


    static this()
    {
    //FOLLOW_134_in_condition_between7501 = new BitSet([0x0000000000000000L,0x0000000000000010L]);

    }public static BitSet FOLLOW_68_in_condition_between7506 ;

    //public static final BitSet FOLLOW_68_in_condition_between7506 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_68_in_condition_between7506 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_between7508 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_between7508 = new BitSet(new long[]{0x4000000000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_between7508 = new BitSet([0x4000000000000000L]);

    }public static BitSet FOLLOW_62_in_condition_between7510 ;

    //public static final BitSet FOLLOW_62_in_condition_between7510 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_62_in_condition_between7510 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_condition_between7512 ;

    //public static final BitSet FOLLOW_sql_expression_in_condition_between7512 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_condition_between7512 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7522 ;

    //public static final BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7522 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7522 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_regexp_like7524 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_regexp_like7524 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_regexp_like7524 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_call_parameters_in_condition_regexp_like7526 ;

    //public static final BitSet FOLLOW_call_parameters_in_condition_regexp_like7526 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_call_parameters_in_condition_regexp_like7526 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_regexp_like7528 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_regexp_like7528 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_regexp_like7528 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7538 ;

    //public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7538 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_nested_table_column_name_in_condition_submultiset7538 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_condition_submultiset7542 ;

    //public static final BitSet FOLLOW_134_in_condition_submultiset7542 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_134_in_condition_submultiset7542 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset7547 ;

    //public static final BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset7547 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400004000L});


    static this()
    {
    //FOLLOW_keySUBMULTISET_in_condition_submultiset7547 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400004000L]);

    }public static BitSet FOLLOW_142_in_condition_submultiset7551 ;

    //public static final BitSet FOLLOW_142_in_condition_submultiset7551 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_142_in_condition_submultiset7551 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7556 ;

    //public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7556 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_table_column_name_in_condition_submultiset7556 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path7566 ;

    //public static final BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path7566 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyEQUALS_PATH_in_condition_equals_path7566 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_equals_path7568 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_equals_path7568 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_equals_path7568 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_condition_equals_path7570 ;

    //public static final BitSet FOLLOW_column_name_in_condition_equals_path7570 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_column_name_in_condition_equals_path7570 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_condition_equals_path7572 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_equals_path7572 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_equals_path7572 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_path_string_in_condition_equals_path7574 ;

    //public static final BitSet FOLLOW_path_string_in_condition_equals_path7574 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_path_string_in_condition_equals_path7574 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_condition_equals_path7578 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_equals_path7578 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_equals_path7578 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_correlation_integer_in_condition_equals_path7580 ;

    //public static final BitSet FOLLOW_correlation_integer_in_condition_equals_path7580 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_correlation_integer_in_condition_equals_path7580 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_equals_path7585 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_equals_path7585 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_equals_path7585 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path7595 ;

    //public static final BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path7595 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUNDER_PATH_in_condition_under_path7595 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_condition_under_path7597 ;

    //public static final BitSet FOLLOW_LPAREN_in_condition_under_path7597 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_condition_under_path7597 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_condition_under_path7599 ;

    //public static final BitSet FOLLOW_column_name_in_condition_under_path7599 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_column_name_in_condition_under_path7599 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_condition_under_path7603 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_under_path7603 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_under_path7603 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_levels_in_condition_under_path7605 ;

    //public static final BitSet FOLLOW_levels_in_condition_under_path7605 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_levels_in_condition_under_path7605 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_condition_under_path7610 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_under_path7610 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_under_path7610 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_path_string_in_condition_under_path7612 ;

    //public static final BitSet FOLLOW_path_string_in_condition_under_path7612 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_path_string_in_condition_under_path7612 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_condition_under_path7616 ;

    //public static final BitSet FOLLOW_COMMA_in_condition_under_path7616 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_condition_under_path7616 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_correlation_integer_in_condition_under_path7618 ;

    //public static final BitSet FOLLOW_correlation_integer_in_condition_under_path7618 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_correlation_integer_in_condition_under_path7618 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_condition_under_path7623 ;

    //public static final BitSet FOLLOW_RPAREN_in_condition_under_path7623 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_condition_under_path7623 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_integer_in_levels7633 ;

    //public static final BitSet FOLLOW_integer_in_levels7633 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_in_levels7633 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_integer_in_correlation_integer7643 ;

    //public static final BitSet FOLLOW_integer_in_correlation_integer7643 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_integer_in_correlation_integer7643 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_path_string7653 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_path_string7653 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_path_string7653 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expression_list_in_grouping_expression_list7663 ;

    //public static final BitSet FOLLOW_expression_list_in_grouping_expression_list7663 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_expression_list_in_grouping_expression_list7663 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_grouping_expression_list7667 ;

    //public static final BitSet FOLLOW_COMMA_in_grouping_expression_list7667 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_grouping_expression_list7667 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expression_list_in_grouping_expression_list7669 ;

    //public static final BitSet FOLLOW_expression_list_in_grouping_expression_list7669 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_expression_list_in_grouping_expression_list7669 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_LPAREN_in_expression_list7682 ;

    //public static final BitSet FOLLOW_LPAREN_in_expression_list7682 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_expression_list7682 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_expression_list7684 ;

    //public static final BitSet FOLLOW_sql_expressions_in_expression_list7684 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_expression_list7684 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_expression_list7686 ;

    //public static final BitSet FOLLOW_RPAREN_in_expression_list7686 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_expression_list7686 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expressions_in_expression_list7691 ;

    //public static final BitSet FOLLOW_sql_expressions_in_expression_list7691 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expressions_in_expression_list7691 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_identifier_in_cell_reference7701 ;

    //public static final BitSet FOLLOW_sql_identifier_in_cell_reference7701 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_cell_reference7701 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_call_parameter_in_call_parameters7711 ;

    //public static final BitSet FOLLOW_call_parameter_in_call_parameters7711 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_call_parameter_in_call_parameters7711 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_call_parameters7715 ;

    //public static final BitSet FOLLOW_COMMA_in_call_parameters7715 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_COMMA_in_call_parameters7715 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_call_parameter_in_call_parameters7717 ;

    //public static final BitSet FOLLOW_call_parameter_in_call_parameters7717 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_call_parameter_in_call_parameters7717 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_parameter_name_in_call_parameter7732 ;

    //public static final BitSet FOLLOW_parameter_name_in_call_parameter7732 = new BitSet(new long[]{0x0000000000000010L});


    static this()
    {
    //FOLLOW_parameter_name_in_call_parameter7732 = new BitSet([0x0000000000000010L]);

    }public static BitSet FOLLOW_ARROW_in_call_parameter7734 ;

    //public static final BitSet FOLLOW_ARROW_in_call_parameter7734 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_ARROW_in_call_parameter7734 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_call_parameter7739 ;

    //public static final BitSet FOLLOW_nested_expression_in_call_parameter7739 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_call_parameter7739 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_exp_set7789 ;

    //public static final BitSet FOLLOW_sql_expression_in_exp_set7789 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_exp_set7789 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subquery_in_exp_set7794 ;

    //public static final BitSet FOLLOW_subquery_in_exp_set7794 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subquery_in_exp_set7794 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_subquery7805 ;

    //public static final BitSet FOLLOW_LPAREN_in_subquery7805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_subquery7805 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_subquery7807 ;

    //public static final BitSet FOLLOW_select_command_in_subquery7807 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_subquery7807 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_subquery7809 ;

    //public static final BitSet FOLLOW_RPAREN_in_subquery7809 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_subquery7809 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_170_in_connect_clause7822 ;

    //public static final BitSet FOLLOW_170_in_connect_clause7822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_170_in_connect_clause7822 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_connect_clause7824 ;

    //public static final BitSet FOLLOW_185_in_connect_clause7824 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_185_in_connect_clause7824 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_connect_clause7826 ;

    //public static final BitSet FOLLOW_sql_condition_in_connect_clause7826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});


    static this()
    {
    //FOLLOW_sql_condition_in_connect_clause7826 = new BitSet([0x0000000000000000L,0x0000000000040000L]);

    }public static BitSet FOLLOW_82_in_connect_clause7833 ;

    //public static final BitSet FOLLOW_82_in_connect_clause7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_82_in_connect_clause7833 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_connect_clause7835 ;

    //public static final BitSet FOLLOW_75_in_connect_clause7835 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400800100L});


    static this()
    {
    //FOLLOW_75_in_connect_clause7835 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400800100L]);

    }public static BitSet FOLLOW_151_in_connect_clause7842 ;

    //public static final BitSet FOLLOW_151_in_connect_clause7842 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_151_in_connect_clause7842 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7844 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7844 = new BitSet(new long[]{0x0000000212320000L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7844 = new BitSet([0x0000000212320000L]);

    }public static BitSet FOLLOW_relational_op_in_connect_clause7846 ;

    //public static final BitSet FOLLOW_relational_op_in_connect_clause7846 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_relational_op_in_connect_clause7846 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7848 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7848 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7848 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7854 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7854 = new BitSet(new long[]{0x0000000212320000L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7854 = new BitSet([0x0000000212320000L]);

    }public static BitSet FOLLOW_relational_op_in_connect_clause7856 ;

    //public static final BitSet FOLLOW_relational_op_in_connect_clause7856 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_relational_op_in_connect_clause7856 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7858 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7858 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000800000L]);

    }public static BitSet FOLLOW_151_in_connect_clause7860 ;

    //public static final BitSet FOLLOW_151_in_connect_clause7860 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_151_in_connect_clause7860 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_151_in_connect_clause7886 ;

    //public static final BitSet FOLLOW_151_in_connect_clause7886 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_151_in_connect_clause7886 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_connect_clause7890 ;

    //public static final BitSet FOLLOW_sql_condition_in_connect_clause7890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_connect_clause7890 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7896 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7896 = new BitSet(new long[]{0x0000000212320000L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7896 = new BitSet([0x0000000212320000L]);

    }public static BitSet FOLLOW_relational_op_in_connect_clause7898 ;

    //public static final BitSet FOLLOW_relational_op_in_connect_clause7898 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400800100L});


    static this()
    {
    //FOLLOW_relational_op_in_connect_clause7898 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400800100L]);

    }public static BitSet FOLLOW_151_in_connect_clause7902 ;

    //public static final BitSet FOLLOW_151_in_connect_clause7902 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_151_in_connect_clause7902 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_connect_clause7907 ;

    //public static final BitSet FOLLOW_sql_expression_in_connect_clause7907 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_connect_clause7907 = new BitSet([0x4000000000000002L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_62_in_connect_clause7911 ;

    //public static final BitSet FOLLOW_62_in_connect_clause7911 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_62_in_connect_clause7911 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_connect_clause7913 ;

    //public static final BitSet FOLLOW_sql_condition_in_connect_clause7913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_connect_clause7913 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000040000000000L]);

    }public static BitSet FOLLOW_170_in_connect_clause7926 ;

    //public static final BitSet FOLLOW_170_in_connect_clause7926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_170_in_connect_clause7926 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_185_in_connect_clause7928 ;

    //public static final BitSet FOLLOW_185_in_connect_clause7928 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_185_in_connect_clause7928 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_connect_clause7930 ;

    //public static final BitSet FOLLOW_sql_condition_in_connect_clause7930 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_connect_clause7930 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_109_in_group_clause7944 ;

    //public static final BitSet FOLLOW_109_in_group_clause7944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_109_in_group_clause7944 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_group_clause7946 ;

    //public static final BitSet FOLLOW_75_in_group_clause7946 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_75_in_group_clause7946 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_group_clause7948 ;

    //public static final BitSet FOLLOW_sql_expression_in_group_clause7948 = new BitSet(new long[]{0x0000000000000802L,0x0000400000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_group_clause7948 = new BitSet([0x0000000000000802L,0x0000400000000000L]);

    }public static BitSet FOLLOW_COMMA_in_group_clause7952 ;

    //public static final BitSet FOLLOW_COMMA_in_group_clause7952 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_group_clause7952 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_group_clause7954 ;

    //public static final BitSet FOLLOW_sql_expression_in_group_clause7954 = new BitSet(new long[]{0x0000000000000802L,0x0000400000000000L});


    static this()
    {
    //FOLLOW_sql_expression_in_group_clause7954 = new BitSet([0x0000000000000802L,0x0000400000000000L]);

    }public static BitSet FOLLOW_110_in_group_clause7961 ;

    //public static final BitSet FOLLOW_110_in_group_clause7961 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_110_in_group_clause7961 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_group_clause7963 ;

    //public static final BitSet FOLLOW_sql_condition_in_group_clause7963 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_group_clause7963 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_175_in_set_clause7981 ;

    //public static final BitSet FOLLOW_175_in_set_clause7981 = new BitSet(new long[]{0x2000000000000000L});


    static this()
    {
    //FOLLOW_175_in_set_clause7981 = new BitSet([0x2000000000000000L]);

    }public static BitSet FOLLOW_61_in_set_clause7983 ;

    //public static final BitSet FOLLOW_61_in_set_clause7983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_61_in_set_clause7983 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_118_in_set_clause7989 ;

    //public static final BitSet FOLLOW_118_in_set_clause7989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_118_in_set_clause7989 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_125_in_set_clause7993 ;

    //public static final BitSet FOLLOW_125_in_set_clause7993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_125_in_set_clause7993 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_set_clause7997 ;

    //public static final BitSet FOLLOW_select_command_in_set_clause7997 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_command_in_set_clause7997 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_145_in_order_clause8009 ;

    //public static final BitSet FOLLOW_145_in_order_clause8009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});


    static this()
    {
    //FOLLOW_145_in_order_clause8009 = new BitSet([0x0000000000000000L,0x0000000000000800L]);

    }public static BitSet FOLLOW_75_in_order_clause8011 ;

    //public static final BitSet FOLLOW_75_in_order_clause8011 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_75_in_order_clause8011 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sorted_def_in_order_clause8013 ;

    //public static final BitSet FOLLOW_sorted_def_in_order_clause8013 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_sorted_def_in_order_clause8013 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_order_clause8017 ;

    //public static final BitSet FOLLOW_COMMA_in_order_clause8017 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_order_clause8017 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sorted_def_in_order_clause8019 ;

    //public static final BitSet FOLLOW_sorted_def_in_order_clause8019 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_sorted_def_in_order_clause8019 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_sql_expression_in_sorted_def8043 ;

    //public static final BitSet FOLLOW_sql_expression_in_sorted_def8043 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_sorted_def8043 = new BitSet([0x0000000000000002L,0x0000000010000002L]);

    }public static BitSet FOLLOW_NUMBER_in_sorted_def8055 ;

    //public static final BitSet FOLLOW_NUMBER_in_sorted_def8055 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_sorted_def8055 = new BitSet([0x0000000000000002L,0x0000000010000002L]);

    }public static BitSet FOLLOW_104_in_update_clause8079 ;

    //public static final BitSet FOLLOW_104_in_update_clause8079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_104_in_update_clause8079 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_update_clause8081 ;

    //public static final BitSet FOLLOW_177_in_update_clause8081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004080L});


    static this()
    {
    //FOLLOW_177_in_update_clause8081 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000004080L]);

    }public static BitSet FOLLOW_142_in_update_clause8085 ;

    //public static final BitSet FOLLOW_142_in_update_clause8085 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_142_in_update_clause8085 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_update_clause8087 ;

    //public static final BitSet FOLLOW_column_name_in_update_clause8087 = new BitSet(new long[]{0x0000000000000802L,0x0000000000000000L,0x0000000000000080L});


    static this()
    {
    //FOLLOW_column_name_in_update_clause8087 = new BitSet([0x0000000000000802L,0x0000000000000000L,0x0000000000000080L]);

    }public static BitSet FOLLOW_COMMA_in_update_clause8091 ;

    //public static final BitSet FOLLOW_COMMA_in_update_clause8091 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_update_clause8091 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_name_in_update_clause8093 ;

    //public static final BitSet FOLLOW_column_name_in_update_clause8093 = new BitSet(new long[]{0x0000000000000802L,0x0000000000000000L,0x0000000000000080L});


    static this()
    {
    //FOLLOW_column_name_in_update_clause8093 = new BitSet([0x0000000000000802L,0x0000000000000000L,0x0000000000000080L]);

    }public static BitSet FOLLOW_135_in_update_clause8103 ;

    //public static final BitSet FOLLOW_135_in_update_clause8103 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_135_in_update_clause8103 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_115_in_insert_command8117 ;

    //public static final BitSet FOLLOW_115_in_insert_command8117 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});


    static this()
    {
    //FOLLOW_115_in_insert_command8117 = new BitSet([0x0000000000000000L,0x0080000000000000L]);

    }public static BitSet FOLLOW_119_in_insert_command8119 ;

    //public static final BitSet FOLLOW_119_in_insert_command8119 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_119_in_insert_command8119 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_table_reference_list_in_insert_command8121 ;

    //public static final BitSet FOLLOW_table_reference_list_in_insert_command8121 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0008002000000000L});


    static this()
    {
    //FOLLOW_table_reference_list_in_insert_command8121 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0008002000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_insert_command8127 ;

    //public static final BitSet FOLLOW_LPAREN_in_insert_command8127 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_insert_command8127 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_insert_command8129 ;

    //public static final BitSet FOLLOW_column_specs_in_insert_command8129 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_insert_command8129 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_insert_command8131 ;

    //public static final BitSet FOLLOW_RPAREN_in_insert_command8131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008002000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_insert_command8131 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0008002000000000L]);

    }public static BitSet FOLLOW_179_in_insert_command8140 ;

    //public static final BitSet FOLLOW_179_in_insert_command8140 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_179_in_insert_command8140 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_insert_command8142 ;

    //public static final BitSet FOLLOW_LPAREN_in_insert_command8142 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_insert_command8142 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expressions_in_insert_command8144 ;

    //public static final BitSet FOLLOW_plsql_expressions_in_insert_command8144 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_plsql_expressions_in_insert_command8144 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_insert_command8146 ;

    //public static final BitSet FOLLOW_RPAREN_in_insert_command8146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_insert_command8146 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_select_statement_in_insert_command8152 ;

    //public static final BitSet FOLLOW_select_statement_in_insert_command8152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_select_statement_in_insert_command8152 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_returning_clause_in_insert_command8162 ;

    //public static final BitSet FOLLOW_returning_clause_in_insert_command8162 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_returning_clause_in_insert_command8162 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_177_in_update_command8176 ;

    //public static final BitSet FOLLOW_177_in_update_command8176 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_177_in_update_command8176 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_selected_table_in_update_command8178 ;

    //public static final BitSet FOLLOW_selected_table_in_update_command8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});


    static this()
    {
    //FOLLOW_selected_table_in_update_command8178 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000004000000000L]);

    }public static BitSet FOLLOW_166_in_update_command8182 ;

    //public static final BitSet FOLLOW_166_in_update_command8182 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_166_in_update_command8182 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_update_nested_column_specs_in_update_command8189 ;

    //public static final BitSet FOLLOW_update_nested_column_specs_in_update_command8189 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L});


    static this()
    {
    //FOLLOW_update_nested_column_specs_in_update_command8189 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L]);

    }public static BitSet FOLLOW_update_column_specs_in_update_command8195 ;

    //public static final BitSet FOLLOW_update_column_specs_in_update_command8195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L});


    static this()
    {
    //FOLLOW_update_column_specs_in_update_command8195 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L]);

    }public static BitSet FOLLOW_183_in_update_command8205 ;

    //public static final BitSet FOLLOW_183_in_update_command8205 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_183_in_update_command8205 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_keyCURRENT_OF_in_update_command8212 ;

    //public static final BitSet FOLLOW_keyCURRENT_OF_in_update_command8212 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyCURRENT_OF_in_update_command8212 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_update_command8214 ;

    //public static final BitSet FOLLOW_cursor_name_in_update_command8214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_cursor_name_in_update_command8214 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_sql_condition_in_update_command8221 ;

    //public static final BitSet FOLLOW_sql_condition_in_update_command8221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_update_command8221 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_returning_clause_in_update_command8237 ;

    //public static final BitSet FOLLOW_returning_clause_in_update_command8237 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_returning_clause_in_update_command8237 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_update_column_spec_in_update_column_specs8251 ;

    //public static final BitSet FOLLOW_update_column_spec_in_update_column_specs8251 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_update_column_spec_in_update_column_specs8251 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_update_column_specs8255 ;

    //public static final BitSet FOLLOW_COMMA_in_update_column_specs8255 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_update_column_specs8255 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_update_column_spec_in_update_column_specs8257 ;

    //public static final BitSet FOLLOW_update_column_spec_in_update_column_specs8257 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_update_column_spec_in_update_column_specs8257 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_column_spec_in_update_column_spec8271 ;

    //public static final BitSet FOLLOW_column_spec_in_update_column_spec8271 = new BitSet(new long[]{0x0000000000020000L});


    static this()
    {
    //FOLLOW_column_spec_in_update_column_spec8271 = new BitSet([0x0000000000020000L]);

    }public static BitSet FOLLOW_EQ_in_update_column_spec8273 ;

    //public static final BitSet FOLLOW_EQ_in_update_column_spec8273 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_EQ_in_update_column_spec8273 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_update_column_spec8275 ;

    //public static final BitSet FOLLOW_sql_expression_in_update_column_spec8275 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_update_column_spec8275 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs8286 ;

    //public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs8286 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_update_nested_column_spec_in_update_nested_column_specs8286 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_update_nested_column_specs8290 ;

    //public static final BitSet FOLLOW_COMMA_in_update_nested_column_specs8290 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_COMMA_in_update_nested_column_specs8290 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs8292 ;

    //public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs8292 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_update_nested_column_spec_in_update_nested_column_specs8292 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_LPAREN_in_update_nested_column_spec8306 ;

    //public static final BitSet FOLLOW_LPAREN_in_update_nested_column_spec8306 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_update_nested_column_spec8306 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_update_nested_column_spec8308 ;

    //public static final BitSet FOLLOW_column_specs_in_update_nested_column_spec8308 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_update_nested_column_spec8308 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_update_nested_column_spec8310 ;

    //public static final BitSet FOLLOW_RPAREN_in_update_nested_column_spec8310 = new BitSet(new long[]{0x0000000000020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_update_nested_column_spec8310 = new BitSet([0x0000000000020000L]);

    }public static BitSet FOLLOW_EQ_in_update_nested_column_spec8312 ;

    //public static final BitSet FOLLOW_EQ_in_update_nested_column_spec8312 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_EQ_in_update_nested_column_spec8312 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_subquery_in_update_nested_column_spec8314 ;

    //public static final BitSet FOLLOW_subquery_in_update_nested_column_spec8314 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subquery_in_update_nested_column_spec8314 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_91_in_delete_command8325 ;

    //public static final BitSet FOLLOW_91_in_delete_command8325 = new BitSet(new long[]{0x0000000008408000L,0x0000040000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_91_in_delete_command8325 = new BitSet([0x0000000008408000L,0x0000040000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_106_in_delete_command8329 ;

    //public static final BitSet FOLLOW_106_in_delete_command8329 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_106_in_delete_command8329 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_selected_table_in_delete_command8334 ;

    //public static final BitSet FOLLOW_selected_table_in_delete_command8334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L});


    static this()
    {
    //FOLLOW_selected_table_in_delete_command8334 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00800000C0000000L]);

    }public static BitSet FOLLOW_183_in_delete_command8340 ;

    //public static final BitSet FOLLOW_183_in_delete_command8340 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_183_in_delete_command8340 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_keyCURRENT_OF_in_delete_command8347 ;

    //public static final BitSet FOLLOW_keyCURRENT_OF_in_delete_command8347 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyCURRENT_OF_in_delete_command8347 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_delete_command8349 ;

    //public static final BitSet FOLLOW_cursor_name_in_delete_command8349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_cursor_name_in_delete_command8349 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_sql_condition_in_delete_command8356 ;

    //public static final BitSet FOLLOW_sql_condition_in_delete_command8356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L});


    static this()
    {
    //FOLLOW_sql_condition_in_delete_command8356 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x00000000C0000000L]);

    }public static BitSet FOLLOW_returning_clause_in_delete_command8372 ;

    //public static final BitSet FOLLOW_returning_clause_in_delete_command8372 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_returning_clause_in_delete_command8372 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRETURN_in_returning_clause8388 ;

    //public static final BitSet FOLLOW_keyRETURN_in_returning_clause8388 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyRETURN_in_returning_clause8388 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_keyRETURNING_in_returning_clause8392 ;

    //public static final BitSet FOLLOW_keyRETURNING_in_returning_clause8392 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyRETURNING_in_returning_clause8392 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_select_list_in_returning_clause8396 ;

    //public static final BitSet FOLLOW_select_list_in_returning_clause8396 = new BitSet(new long[]{0x0000000000400000L,0x0080000000000000L});


    static this()
    {
    //FOLLOW_select_list_in_returning_clause8396 = new BitSet([0x0000000000400000L,0x0080000000000000L]);

    }public static BitSet FOLLOW_keyBULK_in_returning_clause8400 ;

    //public static final BitSet FOLLOW_keyBULK_in_returning_clause8400 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyBULK_in_returning_clause8400 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyCOLLECT_in_returning_clause8402 ;

    //public static final BitSet FOLLOW_keyCOLLECT_in_returning_clause8402 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});


    static this()
    {
    //FOLLOW_keyCOLLECT_in_returning_clause8402 = new BitSet([0x0000000000000000L,0x0080000000000000L]);

    }public static BitSet FOLLOW_119_in_returning_clause8407 ;

    //public static final BitSet FOLLOW_119_in_returning_clause8407 = new BitSet(new long[]{0x0000000000408400L});


    static this()
    {
    //FOLLOW_119_in_returning_clause8407 = new BitSet([0x0000000000408400L]);

    }public static BitSet FOLLOW_lvalues_in_returning_clause8409 ;

    //public static final BitSet FOLLOW_lvalues_in_returning_clause8409 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_lvalues_in_returning_clause8409 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_166_in_set_transaction_command8420 ;

    //public static final BitSet FOLLOW_166_in_set_transaction_command8420 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_166_in_set_transaction_command8420 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command8422 ;

    //public static final BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command8422 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyTRANSACTION_in_set_transaction_command8422 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyREAD_in_set_transaction_command8424 ;

    //public static final BitSet FOLLOW_keyREAD_in_set_transaction_command8424 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyREAD_in_set_transaction_command8424 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyONLY_in_set_transaction_command8426 ;

    //public static final BitSet FOLLOW_keyONLY_in_set_transaction_command8426 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyONLY_in_set_transaction_command8426 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCLOSE_in_close_statement8437 ;

    //public static final BitSet FOLLOW_keyCLOSE_in_close_statement8437 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyCLOSE_in_close_statement8437 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_close_statement8439 ;

    //public static final BitSet FOLLOW_cursor_name_in_close_statement8439 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_name_in_close_statement8439 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_fetch_destination_item8454 ;

    //public static final BitSet FOLLOW_identifier_in_fetch_destination_item8454 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_fetch_destination_item8454 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_fetch_destination_item8457 ;

    //public static final BitSet FOLLOW_DOT_in_fetch_destination_item8457 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_DOT_in_fetch_destination_item8457 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_identifier_in_fetch_destination_item8459 ;

    //public static final BitSet FOLLOW_identifier_in_fetch_destination_item8459 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_identifier_in_fetch_destination_item8459 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_fetch_destination_item_in_fetch_destination_list8475 ;

    //public static final BitSet FOLLOW_fetch_destination_item_in_fetch_destination_list8475 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_fetch_destination_item_in_fetch_destination_list8475 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_COMMA_in_fetch_destination_list8479 ;

    //public static final BitSet FOLLOW_COMMA_in_fetch_destination_list8479 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_COMMA_in_fetch_destination_list8479 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_fetch_destination_item_in_fetch_destination_list8481 ;

    //public static final BitSet FOLLOW_fetch_destination_item_in_fetch_destination_list8481 = new BitSet(new long[]{0x0000000000000802L});


    static this()
    {
    //FOLLOW_fetch_destination_item_in_fetch_destination_list8481 = new BitSet([0x0000000000000802L]);

    }public static BitSet FOLLOW_102_in_fetch_statement8493 ;

    //public static final BitSet FOLLOW_102_in_fetch_statement8493 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_102_in_fetch_statement8493 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_fetch_statement8495 ;

    //public static final BitSet FOLLOW_cursor_name_in_fetch_statement8495 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});


    static this()
    {
    //FOLLOW_cursor_name_in_fetch_statement8495 = new BitSet([0x0000000000000000L,0x0080000000000000L]);

    }public static BitSet FOLLOW_119_in_fetch_statement8497 ;

    //public static final BitSet FOLLOW_119_in_fetch_statement8497 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_119_in_fetch_statement8497 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_fetch_destination_list_in_fetch_statement8499 ;

    //public static final BitSet FOLLOW_fetch_destination_list_in_fetch_statement8499 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_fetch_destination_list_in_fetch_statement8499 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_122_in_lock_table_statement8512 ;

    //public static final BitSet FOLLOW_122_in_lock_table_statement8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});


    static this()
    {
    //FOLLOW_122_in_lock_table_statement8512 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000080000000000L]);

    }public static BitSet FOLLOW_171_in_lock_table_statement8514 ;

    //public static final BitSet FOLLOW_171_in_lock_table_statement8514 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_171_in_lock_table_statement8514 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_table_reference_list_in_lock_table_statement8516 ;

    //public static final BitSet FOLLOW_table_reference_list_in_lock_table_statement8516 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_table_reference_list_in_lock_table_statement8516 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_lock_table_statement8520 ;

    //public static final BitSet FOLLOW_113_in_lock_table_statement8520 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000008200000000L});


    static this()
    {
    //FOLLOW_113_in_lock_table_statement8520 = new BitSet([0x0000000000000000L,0x0000000800000000L,0x0000008200000000L]);

    }public static BitSet FOLLOW_lock_mode_in_lock_table_statement8522 ;

    //public static final BitSet FOLLOW_lock_mode_in_lock_table_statement8522 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});


    static this()
    {
    //FOLLOW_lock_mode_in_lock_table_statement8522 = new BitSet([0x0000000000000000L,0x8000000000000000L]);

    }public static BitSet FOLLOW_127_in_lock_table_statement8524 ;

    //public static final BitSet FOLLOW_127_in_lock_table_statement8524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});


    static this()
    {
    //FOLLOW_127_in_lock_table_statement8524 = new BitSet([0x0000000000000002L,0x0000000000000000L,0x0000000000000080L]);

    }public static BitSet FOLLOW_135_in_lock_table_statement8528 ;

    //public static final BitSet FOLLOW_135_in_lock_table_statement8528 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_135_in_lock_table_statement8528 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_161_in_lock_mode8542 ;

    //public static final BitSet FOLLOW_161_in_lock_mode8542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});


    static this()
    {
    //FOLLOW_161_in_lock_mode8542 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000008000000000L]);

    }public static BitSet FOLLOW_167_in_lock_mode8544 ;

    //public static final BitSet FOLLOW_167_in_lock_mode8544 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_167_in_lock_mode8544 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_161_in_lock_mode8549 ;

    //public static final BitSet FOLLOW_161_in_lock_mode8549 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});


    static this()
    {
    //FOLLOW_161_in_lock_mode8549 = new BitSet([0x0000000000000000L,0x0000000800000000L]);

    }public static BitSet FOLLOW_99_in_lock_mode8551 ;

    //public static final BitSet FOLLOW_99_in_lock_mode8551 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_99_in_lock_mode8551 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_167_in_lock_mode8556 ;

    //public static final BitSet FOLLOW_167_in_lock_mode8556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_167_in_lock_mode8556 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_177_in_lock_mode8558 ;

    //public static final BitSet FOLLOW_177_in_lock_mode8558 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_177_in_lock_mode8558 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_167_in_lock_mode8563 ;

    //public static final BitSet FOLLOW_167_in_lock_mode8563 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_167_in_lock_mode8563 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_167_in_lock_mode8568 ;

    //public static final BitSet FOLLOW_167_in_lock_mode8568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});


    static this()
    {
    //FOLLOW_167_in_lock_mode8568 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000200000000L]);

    }public static BitSet FOLLOW_161_in_lock_mode8570 ;

    //public static final BitSet FOLLOW_161_in_lock_mode8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});


    static this()
    {
    //FOLLOW_161_in_lock_mode8570 = new BitSet([0x0000000000000000L,0x0000000800000000L]);

    }public static BitSet FOLLOW_99_in_lock_mode8572 ;

    //public static final BitSet FOLLOW_99_in_lock_mode8572 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_99_in_lock_mode8572 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_99_in_lock_mode8577 ;

    //public static final BitSet FOLLOW_99_in_lock_mode8577 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_99_in_lock_mode8577 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyOPEN_in_open_statement8588 ;

    //public static final BitSet FOLLOW_keyOPEN_in_open_statement8588 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_keyOPEN_in_open_statement8588 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_cursor_name_in_open_statement8590 ;

    //public static final BitSet FOLLOW_cursor_name_in_open_statement8590 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_cursor_name_in_open_statement8590 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_open_statement8594 ;

    //public static final BitSet FOLLOW_LPAREN_in_open_statement8594 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_open_statement8594 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_plsql_expressions_in_open_statement8596 ;

    //public static final BitSet FOLLOW_plsql_expressions_in_open_statement8596 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_plsql_expressions_in_open_statement8596 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_open_statement8598 ;

    //public static final BitSet FOLLOW_RPAREN_in_open_statement8598 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_open_statement8598 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyROLLBACK_in_rollback_statement8612 ;

    //public static final BitSet FOLLOW_keyROLLBACK_in_rollback_statement8612 = new BitSet(new long[]{0x0000000000400002L,0x0000000000010000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyROLLBACK_in_rollback_statement8612 = new BitSet([0x0000000000400002L,0x0000000000010000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_keyWORK_in_rollback_statement8616 ;

    //public static final BitSet FOLLOW_keyWORK_in_rollback_statement8616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyWORK_in_rollback_statement8616 = new BitSet([0x0000000000000002L,0x0000000000010000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_rollback_statement8625 ;

    //public static final BitSet FOLLOW_173_in_rollback_statement8625 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000001000000000L});


    static this()
    {
    //FOLLOW_173_in_rollback_statement8625 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000001000000000L]);

    }public static BitSet FOLLOW_164_in_rollback_statement8629 ;

    //public static final BitSet FOLLOW_164_in_rollback_statement8629 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_164_in_rollback_statement8629 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_savepoint_name_in_rollback_statement8634 ;

    //public static final BitSet FOLLOW_savepoint_name_in_rollback_statement8634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});


    static this()
    {
    //FOLLOW_savepoint_name_in_rollback_statement8634 = new BitSet([0x0000000000000002L,0x0000000000010000L]);

    }public static BitSet FOLLOW_80_in_rollback_statement8643 ;

    //public static final BitSet FOLLOW_80_in_rollback_statement8643 = new BitSet(new long[]{0x0000400000000000L});


    static this()
    {
    //FOLLOW_80_in_rollback_statement8643 = new BitSet([0x0000400000000000L]);

    }public static BitSet FOLLOW_quoted_string_in_rollback_statement8645 ;

    //public static final BitSet FOLLOW_quoted_string_in_rollback_statement8645 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_quoted_string_in_rollback_statement8645 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_164_in_savepoint_statement8659 ;

    //public static final BitSet FOLLOW_164_in_savepoint_statement8659 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_164_in_savepoint_statement8659 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_savepoint_name_in_savepoint_statement8661 ;

    //public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement8661 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_savepoint_name_in_savepoint_statement8661 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_savepoint_name8672 ;

    //public static final BitSet FOLLOW_identifier_in_savepoint_name8672 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_savepoint_name8672 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_quoted_string8704 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_quoted_string8704 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_quoted_string8704 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_QUOTED_STRING_in_match_string8715 ;

    //public static final BitSet FOLLOW_QUOTED_STRING_in_match_string8715 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_QUOTED_STRING_in_match_string8715 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyA8755 ;

    //public static final BitSet FOLLOW_ID_in_keyA8755 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyA8755 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyAUTOMATIC8784 ;

    //public static final BitSet FOLLOW_ID_in_keyAUTOMATIC8784 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyAUTOMATIC8784 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCOUNT8817 ;

    //public static final BitSet FOLLOW_ID_in_keyCOUNT8817 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCOUNT8817 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCROSS8850 ;

    //public static final BitSet FOLLOW_ID_in_keyCROSS8850 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCROSS8850 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCUBE8884 ;

    //public static final BitSet FOLLOW_ID_in_keyCUBE8884 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCUBE8884 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCURRENT_OF8912 ;

    //public static final BitSet FOLLOW_ID_in_keyCURRENT_OF8912 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCURRENT_OF8912 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyDAY8947 ;

    //public static final BitSet FOLLOW_ID_in_keyDAY8947 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyDAY8947 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyDBTIMEZONE8975 ;

    //public static final BitSet FOLLOW_ID_in_keyDBTIMEZONE8975 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyDBTIMEZONE8975 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyDECREMENT9004 ;

    //public static final BitSet FOLLOW_ID_in_keyDECREMENT9004 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyDECREMENT9004 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyDIMENSION9033 ;

    //public static final BitSet FOLLOW_ID_in_keyDIMENSION9033 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyDIMENSION9033 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyEMPTY9066 ;

    //public static final BitSet FOLLOW_ID_in_keyEMPTY9066 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyEMPTY9066 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyEQUALS_PATH9093 ;

    //public static final BitSet FOLLOW_ID_in_keyEQUALS_PATH9093 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyEQUALS_PATH9093 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyESCAPE9125 ;

    //public static final BitSet FOLLOW_ID_in_keyESCAPE9125 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyESCAPE9125 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyFIRST9158 ;

    //public static final BitSet FOLLOW_ID_in_keyFIRST9158 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyFIRST9158 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyFULL9192 ;

    //public static final BitSet FOLLOW_ID_in_keyFULL9192 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyFULL9192 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyGROUPING9222 ;

    //public static final BitSet FOLLOW_ID_in_keyGROUPING9222 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyGROUPING9222 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyIGNORE9254 ;

    //public static final BitSet FOLLOW_ID_in_keyIGNORE9254 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyIGNORE9254 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyINCREMENT9283 ;

    //public static final BitSet FOLLOW_ID_in_keyINCREMENT9283 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyINCREMENT9283 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyINFINITE9313 ;

    //public static final BitSet FOLLOW_ID_in_keyINFINITE9313 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyINFINITE9313 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyINNER9346 ;

    //public static final BitSet FOLLOW_ID_in_keyINNER9346 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyINNER9346 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyINTERVAL9376 ;

    //public static final BitSet FOLLOW_ID_in_keyINTERVAL9376 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyINTERVAL9376 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyITERATE9407 ;

    //public static final BitSet FOLLOW_ID_in_keyITERATE9407 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyITERATE9407 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyJOIN9441 ;

    //public static final BitSet FOLLOW_ID_in_keyJOIN9441 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyJOIN9441 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyKEEP9475 ;

    //public static final BitSet FOLLOW_ID_in_keyKEEP9475 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyKEEP9475 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLAST9509 ;

    //public static final BitSet FOLLOW_ID_in_keyLAST9509 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLAST9509 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLEFT9543 ;

    //public static final BitSet FOLLOW_ID_in_keyLEFT9543 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLEFT9543 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLIKE29576 ;

    //public static final BitSet FOLLOW_ID_in_keyLIKE29576 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLIKE29576 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLIKE49609 ;

    //public static final BitSet FOLLOW_ID_in_keyLIKE49609 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLIKE49609 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLIKEC9642 ;

    //public static final BitSet FOLLOW_ID_in_keyLIKEC9642 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLIKEC9642 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyLOCAL9675 ;

    //public static final BitSet FOLLOW_ID_in_keyLOCAL9675 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyLOCAL9675 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyMAIN9709 ;

    //public static final BitSet FOLLOW_ID_in_keyMAIN9709 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyMAIN9709 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyMEASURES9739 ;

    //public static final BitSet FOLLOW_ID_in_keyMEASURES9739 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyMEASURES9739 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyMEMBER9771 ;

    //public static final BitSet FOLLOW_ID_in_keyMEMBER9771 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyMEMBER9771 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyMODEL9804 ;

    //public static final BitSet FOLLOW_ID_in_keyMODEL9804 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyMODEL9804 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyMONTH9837 ;

    //public static final BitSet FOLLOW_ID_in_keyMONTH9837 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyMONTH9837 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNAN9872 ;

    //public static final BitSet FOLLOW_ID_in_keyNAN9872 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNAN9872 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNATURAL9903 ;

    //public static final BitSet FOLLOW_ID_in_keyNATURAL9903 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNATURAL9903 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNAV9938 ;

    //public static final BitSet FOLLOW_ID_in_keyNAV9938 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNAV9938 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNOCYCLE9969 ;

    //public static final BitSet FOLLOW_ID_in_keyNOCYCLE9969 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNOCYCLE9969 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNULLS10002 ;

    //public static final BitSet FOLLOW_ID_in_keyNULLS10002 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNULLS10002 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyONLY10036 ;

    //public static final BitSet FOLLOW_ID_in_keyONLY10036 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyONLY10036 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyOUTER10069 ;

    //public static final BitSet FOLLOW_ID_in_keyOUTER10069 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyOUTER10069 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyPARTITION10098 ;

    //public static final BitSet FOLLOW_ID_in_keyPARTITION10098 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyPARTITION10098 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyPRECISION10127 ;

    //public static final BitSet FOLLOW_ID_in_keyPRECISION10127 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyPRECISION10127 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyPRESENT10158 ;

    //public static final BitSet FOLLOW_ID_in_keyPRESENT10158 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyPRESENT10158 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREFERENCE10187 ;

    //public static final BitSet FOLLOW_ID_in_keyREFERENCE10187 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREFERENCE10187 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREGEXP_LIKE10214 ;

    //public static final BitSet FOLLOW_ID_in_keyREGEXP_LIKE10214 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREGEXP_LIKE10214 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyRIGHT10248 ;

    //public static final BitSet FOLLOW_ID_in_keyRIGHT10248 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyRIGHT10248 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyROLLUP10280 ;

    //public static final BitSet FOLLOW_ID_in_keyROLLUP10280 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyROLLUP10280 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyRULES10313 ;

    //public static final BitSet FOLLOW_ID_in_keyRULES10313 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyRULES10313 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySECOND10345 ;

    //public static final BitSet FOLLOW_ID_in_keySECOND10345 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySECOND10345 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySECONDS10376 ;

    //public static final BitSet FOLLOW_ID_in_keySECONDS10376 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySECONDS10376 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySEQUENTIAL10404 ;

    //public static final BitSet FOLLOW_ID_in_keySEQUENTIAL10404 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySEQUENTIAL10404 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySESSIONTIMEZONE10427 ;

    //public static final BitSet FOLLOW_ID_in_keySESSIONTIMEZONE10427 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySESSIONTIMEZONE10427 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySETS10461 ;

    //public static final BitSet FOLLOW_ID_in_keySETS10461 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySETS10461 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySIBLINGS10491 ;

    //public static final BitSet FOLLOW_ID_in_keySIBLINGS10491 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySIBLINGS10491 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySINGLE10523 ;

    //public static final BitSet FOLLOW_ID_in_keySINGLE10523 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySINGLE10523 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySOME10557 ;

    //public static final BitSet FOLLOW_ID_in_keySOME10557 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySOME10557 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySUBMULTISET10584 ;

    //public static final BitSet FOLLOW_ID_in_keySUBMULTISET10584 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySUBMULTISET10584 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyTIME10618 ;

    //public static final BitSet FOLLOW_ID_in_keyTIME10618 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyTIME10618 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyTIMESTAMP10647 ;

    //public static final BitSet FOLLOW_ID_in_keyTIMESTAMP10647 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyTIMESTAMP10647 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyTHE10682 ;

    //public static final BitSet FOLLOW_ID_in_keyTHE10682 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyTHE10682 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyUNDER_PATH10710 ;

    //public static final BitSet FOLLOW_ID_in_keyUNDER_PATH10710 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyUNDER_PATH10710 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyUNTIL10743 ;

    //public static final BitSet FOLLOW_ID_in_keyUNTIL10743 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyUNTIL10743 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyUPDATED10774 ;

    //public static final BitSet FOLLOW_ID_in_keyUPDATED10774 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyUPDATED10774 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyUPSERT10806 ;

    //public static final BitSet FOLLOW_ID_in_keyUPSERT10806 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyUPSERT10806 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyWAIT10840 ;

    //public static final BitSet FOLLOW_ID_in_keyWAIT10840 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyWAIT10840 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyYEAR10874 ;

    //public static final BitSet FOLLOW_ID_in_keyYEAR10874 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyYEAR10874 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyZONE10908 ;

    //public static final BitSet FOLLOW_ID_in_keyZONE10908 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyZONE10908 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyARRAY10942 ;

    //public static final BitSet FOLLOW_ID_in_keyARRAY10942 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyARRAY10942 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10958 ;

    //public static final BitSet FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10958 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10958 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyBODY10992 ;

    //public static final BitSet FOLLOW_ID_in_keyBODY10992 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyBODY10992 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyBUILTIN11023 ;

    //public static final BitSet FOLLOW_ID_in_keyBUILTIN11023 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyBUILTIN11023 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyBULK11057 ;

    //public static final BitSet FOLLOW_ID_in_keyBULK11057 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyBULK11057 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyBYTE11091 ;

    //public static final BitSet FOLLOW_ID_in_keyBYTE11091 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyBYTE11091 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCLOSE11124 ;

    //public static final BitSet FOLLOW_ID_in_keyCLOSE11124 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCLOSE11124 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCOLLECT11155 ;

    //public static final BitSet FOLLOW_ID_in_keyCOLLECT11155 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCOLLECT11155 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyCURSOR11187 ;

    //public static final BitSet FOLLOW_ID_in_keyCURSOR11187 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyCURSOR11187 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_96_in_keyELSIF11218 ;

    //public static final BitSet FOLLOW_96_in_keyELSIF11218 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_96_in_keyELSIF11218 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyEXCEPTION_INIT11243 ;

    //public static final BitSet FOLLOW_ID_in_keyEXCEPTION_INIT11243 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyEXCEPTION_INIT11243 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyEXIT11277 ;

    //public static final BitSet FOLLOW_ID_in_keyEXIT11277 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyEXIT11277 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyFIPSFLAG11307 ;

    //public static final BitSet FOLLOW_ID_in_keyFIPSFLAG11307 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyFIPSFLAG11307 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_107_in_keyFUNCTION11335 ;

    //public static final BitSet FOLLOW_107_in_keyFUNCTION11335 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_107_in_keyFUNCTION11335 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyINTERFACE11365 ;

    //public static final BitSet FOLLOW_ID_in_keyINTERFACE11365 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyINTERFACE11365 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_124_in_keyLOOP11397 ;

    //public static final BitSet FOLLOW_124_in_keyLOOP11397 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_124_in_keyLOOP11397 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNEW11433 ;

    //public static final BitSet FOLLOW_ID_in_keyNEW11433 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNEW11433 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyNEW_NAMES11462 ;

    //public static final BitSet FOLLOW_ID_in_keyNEW_NAMES11462 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyNEW_NAMES11462 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyOPEN11496 ;

    //public static final BitSet FOLLOW_ID_in_keyOPEN11496 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyOPEN11496 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_146_in_keyOUT11529 ;

    //public static final BitSet FOLLOW_146_in_keyOUT11529 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_146_in_keyOUT11529 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_147_in_keyPACKAGE11559 ;

    //public static final BitSet FOLLOW_147_in_keyPACKAGE11559 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_147_in_keyPACKAGE11559 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_150_in_keyPRAGMA11590 ;

    //public static final BitSet FOLLOW_150_in_keyPRAGMA11590 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_150_in_keyPRAGMA11590 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_154_in_keyRAISE11622 ;

    //public static final BitSet FOLLOW_154_in_keyRAISE11622 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_154_in_keyRAISE11622 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyRANGE11656 ;

    //public static final BitSet FOLLOW_ID_in_keyRANGE11656 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyRANGE11656 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREAD11690 ;

    //public static final BitSet FOLLOW_ID_in_keyREAD11690 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREAD11690 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_157_in_keyRECORD11720 ;

    //public static final BitSet FOLLOW_157_in_keyRECORD11720 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_157_in_keyRECORD11720 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREF11756 ;

    //public static final BitSet FOLLOW_ID_in_keyREF11756 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREF11756 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREPLACE11787 ;

    //public static final BitSet FOLLOW_ID_in_keyREPLACE11787 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREPLACE11787 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyRESTRICT_REFERENCES11806 ;

    //public static final BitSet FOLLOW_ID_in_keyRESTRICT_REFERENCES11806 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyRESTRICT_REFERENCES11806 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_158_in_keyRETURN11836 ;

    //public static final BitSet FOLLOW_158_in_keyRETURN11836 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_158_in_keyRETURN11836 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_159_in_keyRETURNING11864 ;

    //public static final BitSet FOLLOW_159_in_keyRETURNING11864 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_159_in_keyRETURNING11864 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyREVERSE11896 ;

    //public static final BitSet FOLLOW_ID_in_keyREVERSE11896 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyREVERSE11896 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_160_in_keyROLLBACK11924 ;

    //public static final BitSet FOLLOW_160_in_keyROLLBACK11924 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_160_in_keyROLLBACK11924 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySERIALLY_REUSABLE11946 ;

    //public static final BitSet FOLLOW_ID_in_keySERIALLY_REUSABLE11946 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySERIALLY_REUSABLE11946 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keySUBTYPE11977 ;

    //public static final BitSet FOLLOW_ID_in_keySUBTYPE11977 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keySUBTYPE11977 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyTRANSACTION12004 ;

    //public static final BitSet FOLLOW_ID_in_keyTRANSACTION12004 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyTRANSACTION12004 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyTYPE12038 ;

    //public static final BitSet FOLLOW_ID_in_keyTYPE12038 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyTYPE12038 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyUSING12071 ;

    //public static final BitSet FOLLOW_ID_in_keyUSING12071 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyUSING12071 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyVARRAY12103 ;

    //public static final BitSet FOLLOW_ID_in_keyVARRAY12103 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyVARRAY12103 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyVARYING12133 ;

    //public static final BitSet FOLLOW_ID_in_keyVARYING12133 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyVARYING12133 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_184_in_keyWHILE12164 ;

    //public static final BitSet FOLLOW_184_in_keyWHILE12164 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_184_in_keyWHILE12164 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ID_in_keyWORK12199 ;

    //public static final BitSet FOLLOW_ID_in_keyWORK12199 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ID_in_keyWORK12199 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_identifier_in_sql_identifier12209 ;

    //public static final BitSet FOLLOW_identifier_in_sql_identifier12209 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_identifier_in_sql_identifier12209 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_162_in_sql_identifier12214 ;

    //public static final BitSet FOLLOW_162_in_sql_identifier12214 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_162_in_sql_identifier12214 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_declaration_in_synpred32_PLSQL3_2_D470 ;

    //public static final BitSet FOLLOW_type_declaration_in_synpred32_PLSQL3_2_D470 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_declaration_in_synpred32_PLSQL3_2_D470 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subtype_declaration_in_synpred33_PLSQL3_2_D475 ;

    //public static final BitSet FOLLOW_subtype_declaration_in_synpred33_PLSQL3_2_D475 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subtype_declaration_in_synpred33_PLSQL3_2_D475 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNEW_in_synpred46_PLSQL3_2_D597 ;

    //public static final BitSet FOLLOW_keyNEW_in_synpred46_PLSQL3_2_D597 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyNEW_in_synpred46_PLSQL3_2_D597 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_assignment_statement_in_synpred62_PLSQL3_2_D798 ;

    //public static final BitSet FOLLOW_assignment_statement_in_synpred62_PLSQL3_2_D798 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_assignment_statement_in_synpred62_PLSQL3_2_D798 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_exit_statement_in_synpred63_PLSQL3_2_D803 ;

    //public static final BitSet FOLLOW_exit_statement_in_synpred63_PLSQL3_2_D803 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_exit_statement_in_synpred63_PLSQL3_2_D803 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_case_statement_in_synpred65_PLSQL3_2_D813 ;

    //public static final BitSet FOLLOW_case_statement_in_synpred65_PLSQL3_2_D813 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_case_statement_in_synpred65_PLSQL3_2_D813 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_loop_statement_in_synpred67_PLSQL3_2_D824 ;

    //public static final BitSet FOLLOW_loop_statement_in_synpred67_PLSQL3_2_D824 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_loop_statement_in_synpred67_PLSQL3_2_D824 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_statement_in_synpred71_PLSQL3_2_D845 ;

    //public static final BitSet FOLLOW_sql_statement_in_synpred71_PLSQL3_2_D845 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_statement_in_synpred71_PLSQL3_2_D845 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_plsql_block_in_synpred72_PLSQL3_2_D850 ;

    //public static final BitSet FOLLOW_plsql_block_in_synpred72_PLSQL3_2_D850 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_plsql_block_in_synpred72_PLSQL3_2_D850 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subtype_declaration_in_synpred81_PLSQL3_2_D965 ;

    //public static final BitSet FOLLOW_subtype_declaration_in_synpred81_PLSQL3_2_D965 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subtype_declaration_in_synpred81_PLSQL3_2_D965 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_type_declaration_in_synpred89_PLSQL3_2_D1011 ;

    //public static final BitSet FOLLOW_type_declaration_in_synpred89_PLSQL3_2_D1011 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_type_declaration_in_synpred89_PLSQL3_2_D1011 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyRESTRICT_REFERENCES_in_synpred92_PLSQL3_2_D1035 ;

    //public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_synpred92_PLSQL3_2_D1035 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyRESTRICT_REFERENCES_in_synpred92_PLSQL3_2_D1035 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred92_PLSQL3_2_D1037 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred92_PLSQL3_2_D1037 = new BitSet(new long[]{0x0000400000408000L,0x0000000004000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred92_PLSQL3_2_D1037 = new BitSet([0x0000400000408000L,0x0000000004000000L]);

    }public static BitSet FOLLOW_90_in_synpred92_PLSQL3_2_D1041 ;

    //public static final BitSet FOLLOW_90_in_synpred92_PLSQL3_2_D1041 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_90_in_synpred92_PLSQL3_2_D1041 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_function_name_in_synpred92_PLSQL3_2_D1045 ;

    //public static final BitSet FOLLOW_function_name_in_synpred92_PLSQL3_2_D1045 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_function_name_in_synpred92_PLSQL3_2_D1045 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_synpred92_PLSQL3_2_D1051 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred92_PLSQL3_2_D1051 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred92_PLSQL3_2_D1051 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_param_in_synpred92_PLSQL3_2_D1053 ;

    //public static final BitSet FOLLOW_pragma_param_in_synpred92_PLSQL3_2_D1053 = new BitSet(new long[]{0x0010000000000800L});


    static this()
    {
    //FOLLOW_pragma_param_in_synpred92_PLSQL3_2_D1053 = new BitSet([0x0010000000000800L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred92_PLSQL3_2_D1058 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred92_PLSQL3_2_D1058 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred92_PLSQL3_2_D1058 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyEXCEPTION_INIT_in_synpred93_PLSQL3_2_D1065 ;

    //public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_synpred93_PLSQL3_2_D1065 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyEXCEPTION_INIT_in_synpred93_PLSQL3_2_D1065 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred93_PLSQL3_2_D1067 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred93_PLSQL3_2_D1067 = new BitSet(new long[]{0x0000000000408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred93_PLSQL3_2_D1067 = new BitSet([0x0000000000408000L]);

    }public static BitSet FOLLOW_exception_name_in_synpred93_PLSQL3_2_D1069 ;

    //public static final BitSet FOLLOW_exception_name_in_synpred93_PLSQL3_2_D1069 = new BitSet(new long[]{0x0000000000000800L});


    static this()
    {
    //FOLLOW_exception_name_in_synpred93_PLSQL3_2_D1069 = new BitSet([0x0000000000000800L]);

    }public static BitSet FOLLOW_COMMA_in_synpred93_PLSQL3_2_D1071 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred93_PLSQL3_2_D1071 = new BitSet(new long[]{0x0000401420000000L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred93_PLSQL3_2_D1071 = new BitSet([0x0000401420000000L]);

    }public static BitSet FOLLOW_literal_in_synpred93_PLSQL3_2_D1073 ;

    //public static final BitSet FOLLOW_literal_in_synpred93_PLSQL3_2_D1073 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_literal_in_synpred93_PLSQL3_2_D1073 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred93_PLSQL3_2_D1075 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred93_PLSQL3_2_D1075 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred93_PLSQL3_2_D1075 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred94_PLSQL3_2_D1081 ;

    //public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred94_PLSQL3_2_D1081 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred94_PLSQL3_2_D1081 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keySERIALLY_REUSABLE_in_synpred95_PLSQL3_2_D1087 ;

    //public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_synpred95_PLSQL3_2_D1087 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keySERIALLY_REUSABLE_in_synpred95_PLSQL3_2_D1087 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyBUILTIN_in_synpred96_PLSQL3_2_D1093 ;

    //public static final BitSet FOLLOW_keyBUILTIN_in_synpred96_PLSQL3_2_D1093 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyBUILTIN_in_synpred96_PLSQL3_2_D1093 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred96_PLSQL3_2_D1095 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred96_PLSQL3_2_D1095 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred96_PLSQL3_2_D1095 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_synpred96_PLSQL3_2_D1097 ;

    //public static final BitSet FOLLOW_pragma_params_in_synpred96_PLSQL3_2_D1097 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_synpred96_PLSQL3_2_D1097 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred96_PLSQL3_2_D1099 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred96_PLSQL3_2_D1099 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred96_PLSQL3_2_D1099 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyFIPSFLAG_in_synpred97_PLSQL3_2_D1105 ;

    //public static final BitSet FOLLOW_keyFIPSFLAG_in_synpred97_PLSQL3_2_D1105 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyFIPSFLAG_in_synpred97_PLSQL3_2_D1105 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred97_PLSQL3_2_D1107 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred97_PLSQL3_2_D1107 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred97_PLSQL3_2_D1107 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_synpred97_PLSQL3_2_D1109 ;

    //public static final BitSet FOLLOW_pragma_params_in_synpred97_PLSQL3_2_D1109 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_synpred97_PLSQL3_2_D1109 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred97_PLSQL3_2_D1111 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred97_PLSQL3_2_D1111 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred97_PLSQL3_2_D1111 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINTERFACE_in_synpred98_PLSQL3_2_D1117 ;

    //public static final BitSet FOLLOW_keyINTERFACE_in_synpred98_PLSQL3_2_D1117 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyINTERFACE_in_synpred98_PLSQL3_2_D1117 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred98_PLSQL3_2_D1119 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred98_PLSQL3_2_D1119 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred98_PLSQL3_2_D1119 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_synpred98_PLSQL3_2_D1121 ;

    //public static final BitSet FOLLOW_pragma_params_in_synpred98_PLSQL3_2_D1121 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_synpred98_PLSQL3_2_D1121 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred98_PLSQL3_2_D1123 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred98_PLSQL3_2_D1123 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred98_PLSQL3_2_D1123 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNEW_NAMES_in_synpred99_PLSQL3_2_D1129 ;

    //public static final BitSet FOLLOW_keyNEW_NAMES_in_synpred99_PLSQL3_2_D1129 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyNEW_NAMES_in_synpred99_PLSQL3_2_D1129 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred99_PLSQL3_2_D1131 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred99_PLSQL3_2_D1131 = new BitSet(new long[]{0x0000401420408000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred99_PLSQL3_2_D1131 = new BitSet([0x0000401420408000L]);

    }public static BitSet FOLLOW_pragma_params_in_synpred99_PLSQL3_2_D1133 ;

    //public static final BitSet FOLLOW_pragma_params_in_synpred99_PLSQL3_2_D1133 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_pragma_params_in_synpred99_PLSQL3_2_D1133 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred99_PLSQL3_2_D1135 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred99_PLSQL3_2_D1135 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred99_PLSQL3_2_D1135 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINTERVAL_in_synpred133_PLSQL3_2_D1522 ;

    //public static final BitSet FOLLOW_keyINTERVAL_in_synpred133_PLSQL3_2_D1522 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINTERVAL_in_synpred133_PLSQL3_2_D1522 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyDAY_in_synpred133_PLSQL3_2_D1524 ;

    //public static final BitSet FOLLOW_keyDAY_in_synpred133_PLSQL3_2_D1524 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyDAY_in_synpred133_PLSQL3_2_D1524 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1528 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1528 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1528 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1530 ;

    //public static final BitSet FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1530 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1530 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1532 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1532 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_synpred133_PLSQL3_2_D1537 ;

    //public static final BitSet FOLLOW_173_in_synpred133_PLSQL3_2_D1537 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_synpred133_PLSQL3_2_D1537 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySECOND_in_synpred133_PLSQL3_2_D1539 ;

    //public static final BitSet FOLLOW_keySECOND_in_synpred133_PLSQL3_2_D1539 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keySECOND_in_synpred133_PLSQL3_2_D1539 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1543 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1543 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred133_PLSQL3_2_D1543 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1545 ;

    //public static final BitSet FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1545 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_synpred133_PLSQL3_2_D1545 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1547 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1547 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred133_PLSQL3_2_D1547 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINTERVAL_in_synpred135_PLSQL3_2_D1555 ;

    //public static final BitSet FOLLOW_keyINTERVAL_in_synpred135_PLSQL3_2_D1555 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINTERVAL_in_synpred135_PLSQL3_2_D1555 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyYEAR_in_synpred135_PLSQL3_2_D1557 ;

    //public static final BitSet FOLLOW_keyYEAR_in_synpred135_PLSQL3_2_D1557 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyYEAR_in_synpred135_PLSQL3_2_D1557 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred135_PLSQL3_2_D1561 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred135_PLSQL3_2_D1561 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred135_PLSQL3_2_D1561 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_NUMBER_in_synpred135_PLSQL3_2_D1563 ;

    //public static final BitSet FOLLOW_NUMBER_in_synpred135_PLSQL3_2_D1563 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_NUMBER_in_synpred135_PLSQL3_2_D1563 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred135_PLSQL3_2_D1565 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred135_PLSQL3_2_D1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred135_PLSQL3_2_D1565 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_synpred135_PLSQL3_2_D1570 ;

    //public static final BitSet FOLLOW_173_in_synpred135_PLSQL3_2_D1570 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_synpred135_PLSQL3_2_D1570 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyMONTH_in_synpred135_PLSQL3_2_D1572 ;

    //public static final BitSet FOLLOW_keyMONTH_in_synpred135_PLSQL3_2_D1572 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyMONTH_in_synpred135_PLSQL3_2_D1572 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyTIME_in_synpred136_PLSQL3_2_D1579 ;

    //public static final BitSet FOLLOW_keyTIME_in_synpred136_PLSQL3_2_D1579 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyTIME_in_synpred136_PLSQL3_2_D1579 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_datatype_in_synpred191_PLSQL3_2_D2048 ;

    //public static final BitSet FOLLOW_datatype_in_synpred191_PLSQL3_2_D2048 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_datatype_in_synpred191_PLSQL3_2_D2048 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred251_PLSQL3_2_D3216 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred251_PLSQL3_2_D3216 = new BitSet(new long[]{0x0010401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred251_PLSQL3_2_D3216 = new BitSet([0x0010401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_call_parameters_in_synpred251_PLSQL3_2_D3220 ;

    //public static final BitSet FOLLOW_call_parameters_in_synpred251_PLSQL3_2_D3220 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_call_parameters_in_synpred251_PLSQL3_2_D3220 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred251_PLSQL3_2_D3225 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred251_PLSQL3_2_D3225 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred251_PLSQL3_2_D3225 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_numeric_loop_param_in_synpred258_PLSQL3_2_D3401 ;

    //public static final BitSet FOLLOW_numeric_loop_param_in_synpred258_PLSQL3_2_D3401 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_numeric_loop_param_in_synpred258_PLSQL3_2_D3401 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_loop_param_in_synpred259_PLSQL3_2_D3417 ;

    //public static final BitSet FOLLOW_cursor_loop_param_in_synpred259_PLSQL3_2_D3417 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_loop_param_in_synpred259_PLSQL3_2_D3417 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyREVERSE_in_synpred262_PLSQL3_2_D3481 ;

    //public static final BitSet FOLLOW_keyREVERSE_in_synpred262_PLSQL3_2_D3481 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyREVERSE_in_synpred262_PLSQL3_2_D3481 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_close_statement_in_synpred272_PLSQL3_2_D3715 ;

    //public static final BitSet FOLLOW_close_statement_in_synpred272_PLSQL3_2_D3715 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_close_statement_in_synpred272_PLSQL3_2_D3715 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_open_statement_in_synpred276_PLSQL3_2_D3735 ;

    //public static final BitSet FOLLOW_open_statement_in_synpred276_PLSQL3_2_D3735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_open_statement_in_synpred276_PLSQL3_2_D3735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_join_clause_in_synpred283_PLSQL3_2_D3834 ;

    //public static final BitSet FOLLOW_join_clause_in_synpred283_PLSQL3_2_D3834 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_join_clause_in_synpred283_PLSQL3_2_D3834 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred284_PLSQL3_2_D3838 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred284_PLSQL3_2_D3838 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred284_PLSQL3_2_D3838 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_join_clause_in_synpred284_PLSQL3_2_D3840 ;

    //public static final BitSet FOLLOW_join_clause_in_synpred284_PLSQL3_2_D3840 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_join_clause_in_synpred284_PLSQL3_2_D3840 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred284_PLSQL3_2_D3842 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred284_PLSQL3_2_D3842 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred284_PLSQL3_2_D3842 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_where_clause_in_synpred285_PLSQL3_2_D3854 ;

    //public static final BitSet FOLLOW_where_clause_in_synpred285_PLSQL3_2_D3854 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_where_clause_in_synpred285_PLSQL3_2_D3854 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_hierarchical_query_clause_in_synpred286_PLSQL3_2_D3861 ;

    //public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred286_PLSQL3_2_D3861 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_hierarchical_query_clause_in_synpred286_PLSQL3_2_D3861 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_group_by_clause_in_synpred287_PLSQL3_2_D3868 ;

    //public static final BitSet FOLLOW_group_by_clause_in_synpred287_PLSQL3_2_D3868 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_group_by_clause_in_synpred287_PLSQL3_2_D3868 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_110_in_synpred288_PLSQL3_2_D3877 ;

    //public static final BitSet FOLLOW_110_in_synpred288_PLSQL3_2_D3877 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_110_in_synpred288_PLSQL3_2_D3877 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_synpred288_PLSQL3_2_D3879 ;

    //public static final BitSet FOLLOW_sql_condition_in_synpred288_PLSQL3_2_D3879 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_synpred288_PLSQL3_2_D3879 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_model_clause_in_synpred289_PLSQL3_2_D3886 ;

    //public static final BitSet FOLLOW_model_clause_in_synpred289_PLSQL3_2_D3886 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_model_clause_in_synpred289_PLSQL3_2_D3886 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_175_in_synpred294_PLSQL3_2_D3897 ;

    //public static final BitSet FOLLOW_175_in_synpred294_PLSQL3_2_D3897 = new BitSet(new long[]{0x2000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_175_in_synpred294_PLSQL3_2_D3897 = new BitSet([0x2000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_61_in_synpred294_PLSQL3_2_D3901 ;

    //public static final BitSet FOLLOW_61_in_synpred294_PLSQL3_2_D3901 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_61_in_synpred294_PLSQL3_2_D3901 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_118_in_synpred294_PLSQL3_2_D3911 ;

    //public static final BitSet FOLLOW_118_in_synpred294_PLSQL3_2_D3911 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_118_in_synpred294_PLSQL3_2_D3911 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_125_in_synpred294_PLSQL3_2_D3918 ;

    //public static final BitSet FOLLOW_125_in_synpred294_PLSQL3_2_D3918 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_125_in_synpred294_PLSQL3_2_D3918 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_expression_in_synpred294_PLSQL3_2_D3930 ;

    //public static final BitSet FOLLOW_select_expression_in_synpred294_PLSQL3_2_D3930 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_expression_in_synpred294_PLSQL3_2_D3930 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_subquery_in_synpred294_PLSQL3_2_D3938 ;

    //public static final BitSet FOLLOW_subquery_in_synpred294_PLSQL3_2_D3938 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_subquery_in_synpred294_PLSQL3_2_D3938 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_order_by_clause_in_synpred295_PLSQL3_2_D3954 ;

    //public static final BitSet FOLLOW_order_by_clause_in_synpred295_PLSQL3_2_D3954 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_order_by_clause_in_synpred295_PLSQL3_2_D3954 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_COMMA_in_synpred298_PLSQL3_2_D4012 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred298_PLSQL3_2_D4012 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000080400000000L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred298_PLSQL3_2_D4012 = new BitSet([0x0000000008408000L,0x0000000000000000L,0x0000080400000000L]);

    }public static BitSet FOLLOW_selected_table_in_synpred298_PLSQL3_2_D4014 ;

    //public static final BitSet FOLLOW_selected_table_in_synpred298_PLSQL3_2_D4014 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_selected_table_in_synpred298_PLSQL3_2_D4014 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_inner_cross_join_clause_in_synpred299_PLSQL3_2_D4032 ;

    //public static final BitSet FOLLOW_inner_cross_join_clause_in_synpred299_PLSQL3_2_D4032 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_inner_cross_join_clause_in_synpred299_PLSQL3_2_D4032 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_outer_join_clause_in_synpred300_PLSQL3_2_D4036 ;

    //public static final BitSet FOLLOW_outer_join_clause_in_synpred300_PLSQL3_2_D4036 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_clause_in_synpred300_PLSQL3_2_D4036 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINNER_in_synpred303_PLSQL3_2_D4051 ;

    //public static final BitSet FOLLOW_keyINNER_in_synpred303_PLSQL3_2_D4051 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyINNER_in_synpred303_PLSQL3_2_D4051 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_synpred303_PLSQL3_2_D4056 ;

    //public static final BitSet FOLLOW_keyJOIN_in_synpred303_PLSQL3_2_D4056 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_keyJOIN_in_synpred303_PLSQL3_2_D4056 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_table_name_in_synpred303_PLSQL3_2_D4058 ;

    //public static final BitSet FOLLOW_table_name_in_synpred303_PLSQL3_2_D4058 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000008000L});


    static this()
    {
    //FOLLOW_table_name_in_synpred303_PLSQL3_2_D4058 = new BitSet([0x0000000000400000L,0x0000000000000000L,0x0000000000008000L]);

    }public static BitSet FOLLOW_143_in_synpred303_PLSQL3_2_D4062 ;

    //public static final BitSet FOLLOW_143_in_synpred303_PLSQL3_2_D4062 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_143_in_synpred303_PLSQL3_2_D4062 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_synpred303_PLSQL3_2_D4064 ;

    //public static final BitSet FOLLOW_sql_condition_in_synpred303_PLSQL3_2_D4064 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_synpred303_PLSQL3_2_D4064 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyUSING_in_synpred303_PLSQL3_2_D4068 ;

    //public static final BitSet FOLLOW_keyUSING_in_synpred303_PLSQL3_2_D4068 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUSING_in_synpred303_PLSQL3_2_D4068 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred303_PLSQL3_2_D4070 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred303_PLSQL3_2_D4070 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred303_PLSQL3_2_D4070 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_synpred303_PLSQL3_2_D4072 ;

    //public static final BitSet FOLLOW_column_specs_in_synpred303_PLSQL3_2_D4072 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_synpred303_PLSQL3_2_D4072 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred303_PLSQL3_2_D4074 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred303_PLSQL3_2_D4074 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred303_PLSQL3_2_D4074 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCROSS_in_synpred304_PLSQL3_2_D4083 ;

    //public static final BitSet FOLLOW_keyCROSS_in_synpred304_PLSQL3_2_D4083 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyCROSS_in_synpred304_PLSQL3_2_D4083 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_outer_join_type_in_synpred306_PLSQL3_2_D4120 ;

    //public static final BitSet FOLLOW_outer_join_type_in_synpred306_PLSQL3_2_D4120 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_outer_join_type_in_synpred306_PLSQL3_2_D4120 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyJOIN_in_synpred306_PLSQL3_2_D4122 ;

    //public static final BitSet FOLLOW_keyJOIN_in_synpred306_PLSQL3_2_D4122 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyJOIN_in_synpred306_PLSQL3_2_D4122 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_outer_join_type_in_synpred307_PLSQL3_2_D4132 ;

    //public static final BitSet FOLLOW_outer_join_type_in_synpred307_PLSQL3_2_D4132 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_type_in_synpred307_PLSQL3_2_D4132 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_query_partition_clause_in_synpred308_PLSQL3_2_D4149 ;

    //public static final BitSet FOLLOW_query_partition_clause_in_synpred308_PLSQL3_2_D4149 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_query_partition_clause_in_synpred308_PLSQL3_2_D4149 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_143_in_synpred309_PLSQL3_2_D4158 ;

    //public static final BitSet FOLLOW_143_in_synpred309_PLSQL3_2_D4158 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_143_in_synpred309_PLSQL3_2_D4158 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_synpred309_PLSQL3_2_D4160 ;

    //public static final BitSet FOLLOW_sql_condition_in_synpred309_PLSQL3_2_D4160 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_synpred309_PLSQL3_2_D4160 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyUSING_in_synpred310_PLSQL3_2_D4164 ;

    //public static final BitSet FOLLOW_keyUSING_in_synpred310_PLSQL3_2_D4164 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyUSING_in_synpred310_PLSQL3_2_D4164 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred310_PLSQL3_2_D4166 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred310_PLSQL3_2_D4166 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred310_PLSQL3_2_D4166 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_specs_in_synpred310_PLSQL3_2_D4168 ;

    //public static final BitSet FOLLOW_column_specs_in_synpred310_PLSQL3_2_D4168 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_column_specs_in_synpred310_PLSQL3_2_D4168 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred310_PLSQL3_2_D4170 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred310_PLSQL3_2_D4170 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred310_PLSQL3_2_D4170 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyFULL_in_synpred311_PLSQL3_2_D4199 ;

    //public static final BitSet FOLLOW_keyFULL_in_synpred311_PLSQL3_2_D4199 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyFULL_in_synpred311_PLSQL3_2_D4199 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyLEFT_in_synpred312_PLSQL3_2_D4203 ;

    //public static final BitSet FOLLOW_keyLEFT_in_synpred312_PLSQL3_2_D4203 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLEFT_in_synpred312_PLSQL3_2_D4203 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyOUTER_in_synpred313_PLSQL3_2_D4213 ;

    //public static final BitSet FOLLOW_keyOUTER_in_synpred313_PLSQL3_2_D4213 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyOUTER_in_synpred313_PLSQL3_2_D4213 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNOCYCLE_in_synpred315_PLSQL3_2_D4269 ;

    //public static final BitSet FOLLOW_keyNOCYCLE_in_synpred315_PLSQL3_2_D4269 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyNOCYCLE_in_synpred315_PLSQL3_2_D4269 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_COMMA_in_synpred316_PLSQL3_2_D4302 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred316_PLSQL3_2_D4302 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred316_PLSQL3_2_D4302 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_group_by_expr_in_synpred316_PLSQL3_2_D4304 ;

    //public static final BitSet FOLLOW_group_by_expr_in_synpred316_PLSQL3_2_D4304 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_group_by_expr_in_synpred316_PLSQL3_2_D4304 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_rollup_cube_clause_in_synpred317_PLSQL3_2_D4317 ;

    //public static final BitSet FOLLOW_rollup_cube_clause_in_synpred317_PLSQL3_2_D4317 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_rollup_cube_clause_in_synpred317_PLSQL3_2_D4317 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_sets_clause_in_synpred318_PLSQL3_2_D4322 ;

    //public static final BitSet FOLLOW_grouping_sets_clause_in_synpred318_PLSQL3_2_D4322 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_sets_clause_in_synpred318_PLSQL3_2_D4322 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyROLLUP_in_synpred319_PLSQL3_2_D4339 ;

    //public static final BitSet FOLLOW_keyROLLUP_in_synpred319_PLSQL3_2_D4339 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyROLLUP_in_synpred319_PLSQL3_2_D4339 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_rollup_cube_clause_in_synpred321_PLSQL3_2_D4398 ;

    //public static final BitSet FOLLOW_rollup_cube_clause_in_synpred321_PLSQL3_2_D4398 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_rollup_cube_clause_in_synpred321_PLSQL3_2_D4398 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyIGNORE_in_synpred324_PLSQL3_2_D4452 ;

    //public static final BitSet FOLLOW_keyIGNORE_in_synpred324_PLSQL3_2_D4452 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyIGNORE_in_synpred324_PLSQL3_2_D4452 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyIGNORE_in_synpred325_PLSQL3_2_D4452 ;

    //public static final BitSet FOLLOW_keyIGNORE_in_synpred325_PLSQL3_2_D4452 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyIGNORE_in_synpred325_PLSQL3_2_D4452 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyKEEP_in_synpred325_PLSQL3_2_D4456 ;

    //public static final BitSet FOLLOW_keyKEEP_in_synpred325_PLSQL3_2_D4456 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyKEEP_in_synpred325_PLSQL3_2_D4456 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyNAV_in_synpred325_PLSQL3_2_D4460 ;

    //public static final BitSet FOLLOW_keyNAV_in_synpred325_PLSQL3_2_D4460 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyNAV_in_synpred325_PLSQL3_2_D4460 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyDIMENSION_in_synpred326_PLSQL3_2_D4473 ;

    //public static final BitSet FOLLOW_keyDIMENSION_in_synpred326_PLSQL3_2_D4473 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyDIMENSION_in_synpred326_PLSQL3_2_D4473 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_query_partition_clause_in_synpred331_PLSQL3_2_D4597 ;

    //public static final BitSet FOLLOW_query_partition_clause_in_synpred331_PLSQL3_2_D4597 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_query_partition_clause_in_synpred331_PLSQL3_2_D4597 = new BitSet([0x0000000000408002L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_column_spec_in_synpred331_PLSQL3_2_D4601 ;

    //public static final BitSet FOLLOW_column_spec_in_synpred331_PLSQL3_2_D4601 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_spec_in_synpred331_PLSQL3_2_D4601 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyAUTOMATIC_in_synpred338_PLSQL3_2_D4708 ;

    //public static final BitSet FOLLOW_keyAUTOMATIC_in_synpred338_PLSQL3_2_D4708 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyAUTOMATIC_in_synpred338_PLSQL3_2_D4708 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_condition_in_synpred350_PLSQL3_2_D4869 ;

    //public static final BitSet FOLLOW_sql_condition_in_synpred350_PLSQL3_2_D4869 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_synpred350_PLSQL3_2_D4869 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred351_PLSQL3_2_D4873 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred351_PLSQL3_2_D4873 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred351_PLSQL3_2_D4873 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINCREMENT_in_synpred355_PLSQL3_2_D4944 ;

    //public static final BitSet FOLLOW_keyINCREMENT_in_synpred355_PLSQL3_2_D4944 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyINCREMENT_in_synpred355_PLSQL3_2_D4944 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_COMMA_in_synpred363_PLSQL3_2_D5111 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred363_PLSQL3_2_D5111 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred363_PLSQL3_2_D5111 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_order_by_expr_in_synpred363_PLSQL3_2_D5113 ;

    //public static final BitSet FOLLOW_order_by_expr_in_synpred363_PLSQL3_2_D5113 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_order_by_expr_in_synpred363_PLSQL3_2_D5113 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNULLS_in_synpred366_PLSQL3_2_D5151 ;

    //public static final BitSet FOLLOW_keyNULLS_in_synpred366_PLSQL3_2_D5151 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNULLS_in_synpred366_PLSQL3_2_D5151 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyFIRST_in_synpred366_PLSQL3_2_D5153 ;

    //public static final BitSet FOLLOW_keyFIRST_in_synpred366_PLSQL3_2_D5153 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyFIRST_in_synpred366_PLSQL3_2_D5153 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNULLS_in_synpred367_PLSQL3_2_D5157 ;

    //public static final BitSet FOLLOW_keyNULLS_in_synpred367_PLSQL3_2_D5157 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_keyNULLS_in_synpred367_PLSQL3_2_D5157 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keyLAST_in_synpred367_PLSQL3_2_D5159 ;

    //public static final BitSet FOLLOW_keyLAST_in_synpred367_PLSQL3_2_D5159 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLAST_in_synpred367_PLSQL3_2_D5159 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred374_PLSQL3_2_D5313 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred374_PLSQL3_2_D5313 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred374_PLSQL3_2_D5313 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_144_in_synpred376_PLSQL3_2_D5391 ;

    //public static final BitSet FOLLOW_144_in_synpred376_PLSQL3_2_D5391 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_144_in_synpred376_PLSQL3_2_D5391 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_expr_or_in_synpred376_PLSQL3_2_D5393 ;

    //public static final BitSet FOLLOW_expr_or_in_synpred376_PLSQL3_2_D5393 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_or_in_synpred376_PLSQL3_2_D5393 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_62_in_synpred377_PLSQL3_2_D5410 ;

    //public static final BitSet FOLLOW_62_in_synpred377_PLSQL3_2_D5410 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_62_in_synpred377_PLSQL3_2_D5410 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_expr_and_in_synpred377_PLSQL3_2_D5412 ;

    //public static final BitSet FOLLOW_expr_and_in_synpred377_PLSQL3_2_D5412 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_and_in_synpred377_PLSQL3_2_D5412 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_relational_op_in_synpred379_PLSQL3_2_D5449 ;

    //public static final BitSet FOLLOW_relational_op_in_synpred379_PLSQL3_2_D5449 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_relational_op_in_synpred379_PLSQL3_2_D5449 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_synpred379_PLSQL3_2_D5451 ;

    //public static final BitSet FOLLOW_expr_add_in_synpred379_PLSQL3_2_D5451 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_add_in_synpred379_PLSQL3_2_D5451 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_FOUND_ATTR_in_synpred380_PLSQL3_2_D5457 ;

    //public static final BitSet FOLLOW_FOUND_ATTR_in_synpred380_PLSQL3_2_D5457 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_FOUND_ATTR_in_synpred380_PLSQL3_2_D5457 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NOTFOUND_ATTR_in_synpred381_PLSQL3_2_D5461 ;

    //public static final BitSet FOLLOW_NOTFOUND_ATTR_in_synpred381_PLSQL3_2_D5461 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NOTFOUND_ATTR_in_synpred381_PLSQL3_2_D5461 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ISOPEN_ATTR_in_synpred382_PLSQL3_2_D5465 ;

    //public static final BitSet FOLLOW_ISOPEN_ATTR_in_synpred382_PLSQL3_2_D5465 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ISOPEN_ATTR_in_synpred382_PLSQL3_2_D5465 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred383_PLSQL3_2_D5469 ;

    //public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred383_PLSQL3_2_D5469 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_ROWCOUNT_ATTR_in_synpred383_PLSQL3_2_D5469 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred384_PLSQL3_2_D5473 ;

    //public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred384_PLSQL3_2_D5473 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred384_PLSQL3_2_D5473 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_120_in_synpred386_PLSQL3_2_D5479 ;

    //public static final BitSet FOLLOW_120_in_synpred386_PLSQL3_2_D5479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});


    static this()
    {
    //FOLLOW_120_in_synpred386_PLSQL3_2_D5479 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000140L]);

    }public static BitSet FOLLOW_134_in_synpred386_PLSQL3_2_D5483 ;

    //public static final BitSet FOLLOW_134_in_synpred386_PLSQL3_2_D5483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});


    static this()
    {
    //FOLLOW_134_in_synpred386_PLSQL3_2_D5483 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000000000000100L]);

    }public static BitSet FOLLOW_136_in_synpred386_PLSQL3_2_D5488 ;

    //public static final BitSet FOLLOW_136_in_synpred386_PLSQL3_2_D5488 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_136_in_synpred386_PLSQL3_2_D5488 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_134_in_synpred388_PLSQL3_2_D5496 ;

    //public static final BitSet FOLLOW_134_in_synpred388_PLSQL3_2_D5496 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});


    static this()
    {
    //FOLLOW_134_in_synpred388_PLSQL3_2_D5496 = new BitSet([0x0000000000000000L,0x0200000000000000L]);

    }public static BitSet FOLLOW_121_in_synpred388_PLSQL3_2_D5501 ;

    //public static final BitSet FOLLOW_121_in_synpred388_PLSQL3_2_D5501 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_121_in_synpred388_PLSQL3_2_D5501 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_synpred388_PLSQL3_2_D5503 ;

    //public static final BitSet FOLLOW_expr_add_in_synpred388_PLSQL3_2_D5503 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_add_in_synpred388_PLSQL3_2_D5503 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_134_in_synpred390_PLSQL3_2_D5511 ;

    //public static final BitSet FOLLOW_134_in_synpred390_PLSQL3_2_D5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});


    static this()
    {
    //FOLLOW_134_in_synpred390_PLSQL3_2_D5511 = new BitSet([0x0000000000000000L,0x0000000000000010L]);

    }public static BitSet FOLLOW_68_in_synpred390_PLSQL3_2_D5516 ;

    //public static final BitSet FOLLOW_68_in_synpred390_PLSQL3_2_D5516 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_68_in_synpred390_PLSQL3_2_D5516 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5518 ;

    //public static final BitSet FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5518 = new BitSet(new long[]{0x4000000000000000L});


    static this()
    {
    //FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5518 = new BitSet([0x4000000000000000L]);

    }public static BitSet FOLLOW_62_in_synpred390_PLSQL3_2_D5520 ;

    //public static final BitSet FOLLOW_62_in_synpred390_PLSQL3_2_D5520 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_62_in_synpred390_PLSQL3_2_D5520 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5522 ;

    //public static final BitSet FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5522 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_add_in_synpred390_PLSQL3_2_D5522 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_134_in_synpred392_PLSQL3_2_D5530 ;

    //public static final BitSet FOLLOW_134_in_synpred392_PLSQL3_2_D5530 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_134_in_synpred392_PLSQL3_2_D5530 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_synpred392_PLSQL3_2_D5535 ;

    //public static final BitSet FOLLOW_113_in_synpred392_PLSQL3_2_D5535 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_synpred392_PLSQL3_2_D5535 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred392_PLSQL3_2_D5537 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred392_PLSQL3_2_D5537 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred392_PLSQL3_2_D5537 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expressions_in_synpred392_PLSQL3_2_D5539 ;

    //public static final BitSet FOLLOW_nested_expressions_in_synpred392_PLSQL3_2_D5539 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expressions_in_synpred392_PLSQL3_2_D5539 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred392_PLSQL3_2_D5541 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred392_PLSQL3_2_D5541 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred392_PLSQL3_2_D5541 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_COMMA_in_synpred394_PLSQL3_2_D5576 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred394_PLSQL3_2_D5576 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred394_PLSQL3_2_D5576 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred394_PLSQL3_2_D5578 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred394_PLSQL3_2_D5578 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred394_PLSQL3_2_D5578 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_set_in_synpred397_PLSQL3_2_D5612 ;

    //public static final BitSet FOLLOW_set_in_synpred397_PLSQL3_2_D5612 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_set_in_synpred397_PLSQL3_2_D5612 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_mul_in_synpred397_PLSQL3_2_D5626 ;

    //public static final BitSet FOLLOW_expr_mul_in_synpred397_PLSQL3_2_D5626 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_mul_in_synpred397_PLSQL3_2_D5626 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_set_in_synpred399_PLSQL3_2_D5643 ;

    //public static final BitSet FOLLOW_set_in_synpred399_PLSQL3_2_D5643 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_set_in_synpred399_PLSQL3_2_D5643 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_sign_in_synpred399_PLSQL3_2_D5653 ;

    //public static final BitSet FOLLOW_expr_sign_in_synpred399_PLSQL3_2_D5653 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_sign_in_synpred399_PLSQL3_2_D5653 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_EXPONENT_in_synpred402_PLSQL3_2_D5691 ;

    //public static final BitSet FOLLOW_EXPONENT_in_synpred402_PLSQL3_2_D5691 = new BitSet(new long[]{0x0000400408408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_EXPONENT_in_synpred402_PLSQL3_2_D5691 = new BitSet([0x0000400408408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expr_expr_in_synpred402_PLSQL3_2_D5693 ;

    //public static final BitSet FOLLOW_expr_expr_in_synpred402_PLSQL3_2_D5693 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_expr_in_synpred402_PLSQL3_2_D5693 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expr_paren_in_synpred403_PLSQL3_2_D5708 ;

    //public static final BitSet FOLLOW_expr_paren_in_synpred403_PLSQL3_2_D5708 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expr_paren_in_synpred403_PLSQL3_2_D5708 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_case_expression_in_synpred404_PLSQL3_2_D5724 ;

    //public static final BitSet FOLLOW_case_expression_in_synpred404_PLSQL3_2_D5724 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_case_expression_in_synpred404_PLSQL3_2_D5724 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_cursor_expression_in_synpred405_PLSQL3_2_D5737 ;

    //public static final BitSet FOLLOW_cursor_expression_in_synpred405_PLSQL3_2_D5737 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_cursor_expression_in_synpred405_PLSQL3_2_D5737 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_expression_in_synpred406_PLSQL3_2_D5750 ;

    //public static final BitSet FOLLOW_function_expression_in_synpred406_PLSQL3_2_D5750 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_function_expression_in_synpred406_PLSQL3_2_D5750 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_simple_expression_in_synpred407_PLSQL3_2_D5763 ;

    //public static final BitSet FOLLOW_simple_expression_in_synpred407_PLSQL3_2_D5763 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_simple_expression_in_synpred407_PLSQL3_2_D5763 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_select_expression_in_synpred408_PLSQL3_2_D5776 ;

    //public static final BitSet FOLLOW_select_expression_in_synpred408_PLSQL3_2_D5776 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_select_expression_in_synpred408_PLSQL3_2_D5776 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_column_spec_in_synpred416_PLSQL3_2_D5842 ;

    //public static final BitSet FOLLOW_column_spec_in_synpred416_PLSQL3_2_D5842 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_column_spec_in_synpred416_PLSQL3_2_D5842 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyDBTIMEZONE_in_synpred429_PLSQL3_2_D6134 ;

    //public static final BitSet FOLLOW_keyDBTIMEZONE_in_synpred429_PLSQL3_2_D6134 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyDBTIMEZONE_in_synpred429_PLSQL3_2_D6134 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keySESSIONTIMEZONE_in_synpred430_PLSQL3_2_D6138 ;

    //public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_synpred430_PLSQL3_2_D6138 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keySESSIONTIMEZONE_in_synpred430_PLSQL3_2_D6138 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCOUNT_in_synpred432_PLSQL3_2_D6167 ;

    //public static final BitSet FOLLOW_keyCOUNT_in_synpred432_PLSQL3_2_D6167 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCOUNT_in_synpred432_PLSQL3_2_D6167 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred432_PLSQL3_2_D6169 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred432_PLSQL3_2_D6169 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred432_PLSQL3_2_D6169 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_ASTERISK_in_synpred432_PLSQL3_2_D6173 ;

    //public static final BitSet FOLLOW_ASTERISK_in_synpred432_PLSQL3_2_D6173 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_ASTERISK_in_synpred432_PLSQL3_2_D6173 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred432_PLSQL3_2_D6177 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred432_PLSQL3_2_D6177 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred432_PLSQL3_2_D6177 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred432_PLSQL3_2_D6181 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred432_PLSQL3_2_D6181 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred432_PLSQL3_2_D6181 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred433_PLSQL3_2_D6191 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred433_PLSQL3_2_D6191 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred433_PLSQL3_2_D6191 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred433_PLSQL3_2_D6193 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred433_PLSQL3_2_D6193 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred433_PLSQL3_2_D6193 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred433_PLSQL3_2_D6195 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred433_PLSQL3_2_D6195 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred433_PLSQL3_2_D6195 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyCOUNT_in_synpred436_PLSQL3_2_D6167 ;

    //public static final BitSet FOLLOW_keyCOUNT_in_synpred436_PLSQL3_2_D6167 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keyCOUNT_in_synpred436_PLSQL3_2_D6167 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6169 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6169 = new BitSet(new long[]{0x0000401428408040L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6169 = new BitSet([0x0000401428408040L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_ASTERISK_in_synpred436_PLSQL3_2_D6173 ;

    //public static final BitSet FOLLOW_ASTERISK_in_synpred436_PLSQL3_2_D6173 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_ASTERISK_in_synpred436_PLSQL3_2_D6173 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6177 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6177 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6177 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6181 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6181 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6181 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_93_in_synpred436_PLSQL3_2_D6187 ;

    //public static final BitSet FOLLOW_93_in_synpred436_PLSQL3_2_D6187 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_93_in_synpred436_PLSQL3_2_D6187 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6191 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6191 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred436_PLSQL3_2_D6191 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6193 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6193 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6193 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6195 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6195 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred436_PLSQL3_2_D6195 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6199 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6199 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6199 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_function_call_in_synpred436_PLSQL3_2_D6213 ;

    //public static final BitSet FOLLOW_function_call_in_synpred436_PLSQL3_2_D6213 = new BitSet(new long[]{0x0000000000002002L});


    static this()
    {
    //FOLLOW_function_call_in_synpred436_PLSQL3_2_D6213 = new BitSet([0x0000000000002002L]);

    }public static BitSet FOLLOW_DOT_in_synpred436_PLSQL3_2_D6217 ;

    //public static final BitSet FOLLOW_DOT_in_synpred436_PLSQL3_2_D6217 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000140L});


    static this()
    {
    //FOLLOW_DOT_in_synpred436_PLSQL3_2_D6217 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000140L]);

    }public static BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6219 ;

    //public static final BitSet FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6219 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_nested_expression_in_synpred436_PLSQL3_2_D6219 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyDAY_in_synpred442_PLSQL3_2_D6305 ;

    //public static final BitSet FOLLOW_keyDAY_in_synpred442_PLSQL3_2_D6305 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_keyDAY_in_synpred442_PLSQL3_2_D6305 = new BitSet([0x0000000008000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6309 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6309 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6309 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_leading_field_precision_in_synpred442_PLSQL3_2_D6311 ;

    //public static final BitSet FOLLOW_leading_field_precision_in_synpred442_PLSQL3_2_D6311 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_leading_field_precision_in_synpred442_PLSQL3_2_D6311 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6313 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6313 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000200000000000L]);

    }public static BitSet FOLLOW_173_in_synpred442_PLSQL3_2_D6318 ;

    //public static final BitSet FOLLOW_173_in_synpred442_PLSQL3_2_D6318 = new BitSet(new long[]{0x0000000000400000L});


    static this()
    {
    //FOLLOW_173_in_synpred442_PLSQL3_2_D6318 = new BitSet([0x0000000000400000L]);

    }public static BitSet FOLLOW_keySECOND_in_synpred442_PLSQL3_2_D6320 ;

    //public static final BitSet FOLLOW_keySECOND_in_synpred442_PLSQL3_2_D6320 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_keySECOND_in_synpred442_PLSQL3_2_D6320 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6324 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6324 = new BitSet(new long[]{0x0000000400000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred442_PLSQL3_2_D6324 = new BitSet([0x0000000400000000L]);

    }public static BitSet FOLLOW_fractional_second_precision_in_synpred442_PLSQL3_2_D6326 ;

    //public static final BitSet FOLLOW_fractional_second_precision_in_synpred442_PLSQL3_2_D6326 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_fractional_second_precision_in_synpred442_PLSQL3_2_D6326 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6328 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6328 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred442_PLSQL3_2_D6328 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_DOT_in_synpred449_PLSQL3_2_D6574 ;

    //public static final BitSet FOLLOW_DOT_in_synpred449_PLSQL3_2_D6574 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000400000000L});


    static this()
    {
    //FOLLOW_DOT_in_synpred449_PLSQL3_2_D6574 = new BitSet([0x0000000000408000L,0x0000000000000000L,0x0000000400000000L]);

    }public static BitSet FOLLOW_sql_identifier_in_synpred449_PLSQL3_2_D6576 ;

    //public static final BitSet FOLLOW_sql_identifier_in_synpred449_PLSQL3_2_D6576 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_identifier_in_synpred449_PLSQL3_2_D6576 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_table_spec_in_synpred453_PLSQL3_2_D6623 ;

    //public static final BitSet FOLLOW_table_spec_in_synpred453_PLSQL3_2_D6623 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_table_spec_in_synpred453_PLSQL3_2_D6623 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_alias__in_synpred456_PLSQL3_2_D6644 ;

    //public static final BitSet FOLLOW_alias__in_synpred456_PLSQL3_2_D6644 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_alias__in_synpred456_PLSQL3_2_D6644 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_or_in_synpred462_PLSQL3_2_D6735 ;

    //public static final BitSet FOLLOW_condition_or_in_synpred462_PLSQL3_2_D6735 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_or_in_synpred462_PLSQL3_2_D6735 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_144_in_synpred463_PLSQL3_2_D6788 ;

    //public static final BitSet FOLLOW_144_in_synpred463_PLSQL3_2_D6788 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_144_in_synpred463_PLSQL3_2_D6788 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_condition_and_in_synpred463_PLSQL3_2_D6790 ;

    //public static final BitSet FOLLOW_condition_and_in_synpred463_PLSQL3_2_D6790 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_and_in_synpred463_PLSQL3_2_D6790 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_62_in_synpred464_PLSQL3_2_D6807 ;

    //public static final BitSet FOLLOW_62_in_synpred464_PLSQL3_2_D6807 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_62_in_synpred464_PLSQL3_2_D6807 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_condition_not_in_synpred464_PLSQL3_2_D6809 ;

    //public static final BitSet FOLLOW_condition_not_in_synpred464_PLSQL3_2_D6809 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_not_in_synpred464_PLSQL3_2_D6809 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_in_synpred467_PLSQL3_2_D6844 ;

    //public static final BitSet FOLLOW_condition_is_in_synpred467_PLSQL3_2_D6844 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_in_synpred467_PLSQL3_2_D6844 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_comparison_in_synpred468_PLSQL3_2_D6849 ;

    //public static final BitSet FOLLOW_condition_comparison_in_synpred468_PLSQL3_2_D6849 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_comparison_in_synpred468_PLSQL3_2_D6849 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_group_comparison_in_synpred469_PLSQL3_2_D6854 ;

    //public static final BitSet FOLLOW_condition_group_comparison_in_synpred469_PLSQL3_2_D6854 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_group_comparison_in_synpred469_PLSQL3_2_D6854 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_in_in_synpred470_PLSQL3_2_D6859 ;

    //public static final BitSet FOLLOW_condition_in_in_synpred470_PLSQL3_2_D6859 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_in_in_synpred470_PLSQL3_2_D6859 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_a_set_in_synpred471_PLSQL3_2_D6864 ;

    //public static final BitSet FOLLOW_condition_is_a_set_in_synpred471_PLSQL3_2_D6864 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_a_set_in_synpred471_PLSQL3_2_D6864 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_any_in_synpred472_PLSQL3_2_D6869 ;

    //public static final BitSet FOLLOW_condition_is_any_in_synpred472_PLSQL3_2_D6869 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_any_in_synpred472_PLSQL3_2_D6869 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_empty_in_synpred473_PLSQL3_2_D6874 ;

    //public static final BitSet FOLLOW_condition_is_empty_in_synpred473_PLSQL3_2_D6874 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_empty_in_synpred473_PLSQL3_2_D6874 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_of_type_in_synpred474_PLSQL3_2_D6879 ;

    //public static final BitSet FOLLOW_condition_is_of_type_in_synpred474_PLSQL3_2_D6879 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_of_type_in_synpred474_PLSQL3_2_D6879 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_is_present_in_synpred475_PLSQL3_2_D6884 ;

    //public static final BitSet FOLLOW_condition_is_present_in_synpred475_PLSQL3_2_D6884 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_is_present_in_synpred475_PLSQL3_2_D6884 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_like_in_synpred476_PLSQL3_2_D6889 ;

    //public static final BitSet FOLLOW_condition_like_in_synpred476_PLSQL3_2_D6889 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_like_in_synpred476_PLSQL3_2_D6889 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_memeber_in_synpred477_PLSQL3_2_D6894 ;

    //public static final BitSet FOLLOW_condition_memeber_in_synpred477_PLSQL3_2_D6894 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_memeber_in_synpred477_PLSQL3_2_D6894 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_between_in_synpred478_PLSQL3_2_D6899 ;

    //public static final BitSet FOLLOW_condition_between_in_synpred478_PLSQL3_2_D6899 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_between_in_synpred478_PLSQL3_2_D6899 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_regexp_like_in_synpred479_PLSQL3_2_D6904 ;

    //public static final BitSet FOLLOW_condition_regexp_like_in_synpred479_PLSQL3_2_D6904 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_regexp_like_in_synpred479_PLSQL3_2_D6904 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_submultiset_in_synpred480_PLSQL3_2_D6909 ;

    //public static final BitSet FOLLOW_condition_submultiset_in_synpred480_PLSQL3_2_D6909 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_submultiset_in_synpred480_PLSQL3_2_D6909 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_equals_path_in_synpred481_PLSQL3_2_D6914 ;

    //public static final BitSet FOLLOW_condition_equals_path_in_synpred481_PLSQL3_2_D6914 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_equals_path_in_synpred481_PLSQL3_2_D6914 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_condition_under_path_in_synpred482_PLSQL3_2_D6919 ;

    //public static final BitSet FOLLOW_condition_under_path_in_synpred482_PLSQL3_2_D6919 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_condition_under_path_in_synpred482_PLSQL3_2_D6919 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyNAN_in_synpred484_PLSQL3_2_D6963 ;

    //public static final BitSet FOLLOW_keyNAN_in_synpred484_PLSQL3_2_D6963 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyNAN_in_synpred484_PLSQL3_2_D6963 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyINFINITE_in_synpred485_PLSQL3_2_D6967 ;

    //public static final BitSet FOLLOW_keyINFINITE_in_synpred485_PLSQL3_2_D6967 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyINFINITE_in_synpred485_PLSQL3_2_D6967 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_outer_join_sign_in_synpred488_PLSQL3_2_D7014 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_synpred488_PLSQL3_2_D7014 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_synpred488_PLSQL3_2_D7014 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D6983 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D6983 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D6983 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_synpred489_PLSQL3_2_D6985 ;

    //public static final BitSet FOLLOW_sql_expressions_in_synpred489_PLSQL3_2_D6985 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_synpred489_PLSQL3_2_D6985 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D6987 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D6987 = new BitSet(new long[]{0x0000000208020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D6987 = new BitSet([0x0000000208020000L]);

    }public static BitSet FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D6991 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D6991 = new BitSet(new long[]{0x0000000200020000L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D6991 = new BitSet([0x0000000200020000L]);

    }public static BitSet FOLLOW_set_in_synpred489_PLSQL3_2_D6996 ;

    //public static final BitSet FOLLOW_set_in_synpred489_PLSQL3_2_D6996 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_set_in_synpred489_PLSQL3_2_D6996 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D7006 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D7006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred489_PLSQL3_2_D7006 = new BitSet([0x0000000000000000L,0x0000000000000000L,0x0000002000000000L]);

    }public static BitSet FOLLOW_select_command_in_synpred489_PLSQL3_2_D7008 ;

    //public static final BitSet FOLLOW_select_command_in_synpred489_PLSQL3_2_D7008 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_synpred489_PLSQL3_2_D7008 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D7010 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D7010 = new BitSet(new long[]{0x0000000008000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred489_PLSQL3_2_D7010 = new BitSet([0x0000000008000002L]);

    }public static BitSet FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D7014 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D7014 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_synpred489_PLSQL3_2_D7014 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred498_PLSQL3_2_D7073 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred498_PLSQL3_2_D7073 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred498_PLSQL3_2_D7073 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_outer_join_sign_in_synpred499_PLSQL3_2_D7087 ;

    //public static final BitSet FOLLOW_outer_join_sign_in_synpred499_PLSQL3_2_D7087 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_outer_join_sign_in_synpred499_PLSQL3_2_D7087 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_synpred503_PLSQL3_2_D7134 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_synpred503_PLSQL3_2_D7134 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_synpred503_PLSQL3_2_D7134 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7100 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7100 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7100 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_synpred504_PLSQL3_2_D7102 ;

    //public static final BitSet FOLLOW_sql_expressions_in_synpred504_PLSQL3_2_D7102 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_synpred504_PLSQL3_2_D7102 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7104 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7104 = new BitSet(new long[]{0x0000000200020000L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7104 = new BitSet([0x0000000200020000L]);

    }public static BitSet FOLLOW_set_in_synpred504_PLSQL3_2_D7106 ;

    //public static final BitSet FOLLOW_set_in_synpred504_PLSQL3_2_D7106 = new BitSet(new long[]{0xA000000000400000L});


    static this()
    {
    //FOLLOW_set_in_synpred504_PLSQL3_2_D7106 = new BitSet([0xA000000000400000L]);

    }public static BitSet FOLLOW_63_in_synpred504_PLSQL3_2_D7118 ;

    //public static final BitSet FOLLOW_63_in_synpred504_PLSQL3_2_D7118 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_63_in_synpred504_PLSQL3_2_D7118 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_keySOME_in_synpred504_PLSQL3_2_D7122 ;

    //public static final BitSet FOLLOW_keySOME_in_synpred504_PLSQL3_2_D7122 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_keySOME_in_synpred504_PLSQL3_2_D7122 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_61_in_synpred504_PLSQL3_2_D7126 ;

    //public static final BitSet FOLLOW_61_in_synpred504_PLSQL3_2_D7126 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_61_in_synpred504_PLSQL3_2_D7126 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7130 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7130 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred504_PLSQL3_2_D7130 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_synpred504_PLSQL3_2_D7134 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_synpred504_PLSQL3_2_D7134 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_synpred504_PLSQL3_2_D7134 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_synpred504_PLSQL3_2_D7138 ;

    //public static final BitSet FOLLOW_select_command_in_synpred504_PLSQL3_2_D7138 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_synpred504_PLSQL3_2_D7138 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7142 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7142 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred504_PLSQL3_2_D7142 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expressions_in_synpred512_PLSQL3_2_D7193 ;

    //public static final BitSet FOLLOW_sql_expressions_in_synpred512_PLSQL3_2_D7193 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expressions_in_synpred512_PLSQL3_2_D7193 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_synpred514_PLSQL3_2_D7230 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_synpred514_PLSQL3_2_D7230 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_synpred514_PLSQL3_2_D7230 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7211 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7211 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7211 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_synpred515_PLSQL3_2_D7213 ;

    //public static final BitSet FOLLOW_sql_expressions_in_synpred515_PLSQL3_2_D7213 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_synpred515_PLSQL3_2_D7213 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7215 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7215 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000000040L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7215 = new BitSet([0x0000000000000000L,0x0002000000000000L,0x0000000000000040L]);

    }public static BitSet FOLLOW_134_in_synpred515_PLSQL3_2_D7219 ;

    //public static final BitSet FOLLOW_134_in_synpred515_PLSQL3_2_D7219 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});


    static this()
    {
    //FOLLOW_134_in_synpred515_PLSQL3_2_D7219 = new BitSet([0x0000000000000000L,0x0002000000000000L]);

    }public static BitSet FOLLOW_113_in_synpred515_PLSQL3_2_D7224 ;

    //public static final BitSet FOLLOW_113_in_synpred515_PLSQL3_2_D7224 = new BitSet(new long[]{0x0000000008000000L});


    static this()
    {
    //FOLLOW_113_in_synpred515_PLSQL3_2_D7224 = new BitSet([0x0000000008000000L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7226 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7226 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred515_PLSQL3_2_D7226 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_grouping_expression_list_in_synpred515_PLSQL3_2_D7230 ;

    //public static final BitSet FOLLOW_grouping_expression_list_in_synpred515_PLSQL3_2_D7230 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_grouping_expression_list_in_synpred515_PLSQL3_2_D7230 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_select_command_in_synpred515_PLSQL3_2_D7234 ;

    //public static final BitSet FOLLOW_select_command_in_synpred515_PLSQL3_2_D7234 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_select_command_in_synpred515_PLSQL3_2_D7234 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7238 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7238 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred515_PLSQL3_2_D7238 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_expression_list_in_synpred517_PLSQL3_2_D7258 ;

    //public static final BitSet FOLLOW_expression_list_in_synpred517_PLSQL3_2_D7258 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_list_in_synpred517_PLSQL3_2_D7258 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyLIKEC_in_synpred527_PLSQL3_2_D7438 ;

    //public static final BitSet FOLLOW_keyLIKEC_in_synpred527_PLSQL3_2_D7438 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLIKEC_in_synpred527_PLSQL3_2_D7438 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyLIKE2_in_synpred528_PLSQL3_2_D7442 ;

    //public static final BitSet FOLLOW_keyLIKE2_in_synpred528_PLSQL3_2_D7442 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_keyLIKE2_in_synpred528_PLSQL3_2_D7442 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_keyESCAPE_in_synpred529_PLSQL3_2_D7454 ;

    //public static final BitSet FOLLOW_keyESCAPE_in_synpred529_PLSQL3_2_D7454 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_keyESCAPE_in_synpred529_PLSQL3_2_D7454 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred529_PLSQL3_2_D7456 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred529_PLSQL3_2_D7456 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred529_PLSQL3_2_D7456 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_COMMA_in_synpred538_PLSQL3_2_D7667 ;

    //public static final BitSet FOLLOW_COMMA_in_synpred538_PLSQL3_2_D7667 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_COMMA_in_synpred538_PLSQL3_2_D7667 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_expression_list_in_synpred538_PLSQL3_2_D7669 ;

    //public static final BitSet FOLLOW_expression_list_in_synpred538_PLSQL3_2_D7669 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_expression_list_in_synpred538_PLSQL3_2_D7669 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_LPAREN_in_synpred539_PLSQL3_2_D7682 ;

    //public static final BitSet FOLLOW_LPAREN_in_synpred539_PLSQL3_2_D7682 = new BitSet(new long[]{0x0000401428408000L,0x0000002020001000L,0x0000422400000100L});


    static this()
    {
    //FOLLOW_LPAREN_in_synpred539_PLSQL3_2_D7682 = new BitSet([0x0000401428408000L,0x0000002020001000L,0x0000422400000100L]);

    }public static BitSet FOLLOW_sql_expressions_in_synpred539_PLSQL3_2_D7684 ;

    //public static final BitSet FOLLOW_sql_expressions_in_synpred539_PLSQL3_2_D7684 = new BitSet(new long[]{0x0010000000000000L});


    static this()
    {
    //FOLLOW_sql_expressions_in_synpred539_PLSQL3_2_D7684 = new BitSet([0x0010000000000000L]);

    }public static BitSet FOLLOW_RPAREN_in_synpred539_PLSQL3_2_D7686 ;

    //public static final BitSet FOLLOW_RPAREN_in_synpred539_PLSQL3_2_D7686 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_RPAREN_in_synpred539_PLSQL3_2_D7686 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred547_PLSQL3_2_D7783 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred547_PLSQL3_2_D7783 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred547_PLSQL3_2_D7783 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_151_in_synpred550_PLSQL3_2_D7874 ;

    //public static final BitSet FOLLOW_151_in_synpred550_PLSQL3_2_D7874 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_151_in_synpred550_PLSQL3_2_D7874 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_151_in_synpred551_PLSQL3_2_D7874 ;

    //public static final BitSet FOLLOW_151_in_synpred551_PLSQL3_2_D7874 = new BitSet(new long[]{0x8000401428408000L,0x0000003020001000L,0x0000422400800140L});


    static this()
    {
    //FOLLOW_151_in_synpred551_PLSQL3_2_D7874 = new BitSet([0x8000401428408000L,0x0000003020001000L,0x0000422400800140L]);

    }public static BitSet FOLLOW_sql_condition_in_synpred551_PLSQL3_2_D7879 ;

    //public static final BitSet FOLLOW_sql_condition_in_synpred551_PLSQL3_2_D7879 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_condition_in_synpred551_PLSQL3_2_D7879 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_151_in_synpred552_PLSQL3_2_D7886 ;

    //public static final BitSet FOLLOW_151_in_synpred552_PLSQL3_2_D7886 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_151_in_synpred552_PLSQL3_2_D7886 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_sql_expression_in_synpred561_PLSQL3_2_D8037 ;

    //public static final BitSet FOLLOW_sql_expression_in_synpred561_PLSQL3_2_D8037 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_sql_expression_in_synpred561_PLSQL3_2_D8037 = new BitSet([0x0000000000000002L]);

    }public static BitSet FOLLOW_NUMBER_in_synpred562_PLSQL3_2_D8049 ;

    //public static final BitSet FOLLOW_NUMBER_in_synpred562_PLSQL3_2_D8049 = new BitSet(new long[]{0x0000000000000002L});


    static this()
    {
    //FOLLOW_NUMBER_in_synpred562_PLSQL3_2_D8049 = new BitSet([0x0000000000000002L]);

    }
}